
LiteOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005a  00800100  000093aa  0000959e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000093aa  00000000  00000000  000001f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bootloader   00000a48  0001e000  0001e000  00009760  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .systemcall.1 00000018  0001d400  0001d400  000095f8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .systemcall.2 00000028  0001d500  0001d500  00009610  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .systemcall.3 00000008  0001d600  0001d600  00009638  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .systemcall.4 00000008  0001d700  0001d700  00009640  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  7 .systemcall.5 00000038  0001d800  0001d800  00009648  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  8 .systemcall.6 00000048  0001d900  0001d900  00009680  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  9 .systemcall.7 00000040  0001da00  0001da00  000096c8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 10 .systemcall.8 00000018  0001db00  0001db00  00009708  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 11 .systemcall.9 00000038  0001dc00  0001dc00  00009720  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .systemcall.10 00000008  0001dd00  0001dd00  00009758  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .bss          00000ae3  0080015a  0080015a  0000a1a8  2**0
                  ALLOC
 14 .stab         00000a98  00000000  00000000  0000a1a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .stabstr      000002d9  00000000  00000000  0000ac40  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00000a00  00000000  00000000  0000af19  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_pubnames 00006233  00000000  00000000  0000b919  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_info   00013e40  00000000  00000000  00011b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_abbrev 00005675  00000000  00000000  0002598c  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_line   0000efdf  00000000  00000000  0002b001  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_frame  00003b20  00000000  00000000  00039fe0  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_str    00006fb5  00000000  00000000  0003db00  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_loc    0000a81a  00000000  00000000  00044ab5  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_pubtypes 00001222  00000000  00000000  0004f2cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_ranges 00000390  00000000  00000000  000504f1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 d7 10 	jmp	0x21ae	; 0x21ae <__vector_7>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 a1 13 	jmp	0x2742	; 0x2742 <__vector_11>
      30:	0c 94 09 14 	jmp	0x2812	; 0x2812 <__vector_12>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 c7 31 	jmp	0x638e	; 0x638e <__vector_15>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 93 08 	jmp	0x1126	; 0x1126 <__vector_18>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 0c 19 	jmp	0x3218	; 0x3218 <__vector_21>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 34 32 	jmp	0x6468	; 0x6468 <__vector_26>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ea ea       	ldi	r30, 0xAA	; 170
      a0:	f3 e9       	ldi	r31, 0x93	; 147
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	aa 35       	cpi	r26, 0x5A	; 90
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	1c e0       	ldi	r17, 0x0C	; 12
      b4:	aa e5       	ldi	r26, 0x5A	; 90
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ad 33       	cpi	r26, 0x3D	; 61
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <main>
      c6:	0c 94 d3 49 	jmp	0x93a6	; 0x93a6 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <channelhop>:


uint8_t channelhopbuffer[250]; 

void channelhop()
{ 
      ce:	1f 93       	push	r17
 
 while (1)
 {
	 
 
 for (channel = 11;channel <25;channel++)
      d0:	1b e0       	ldi	r17, 0x0B	; 11
 {
  lib_sleep_thread(1000);
      d2:	88 ee       	ldi	r24, 0xE8	; 232
      d4:	93 e0       	ldi	r25, 0x03	; 3
      d6:	0e 94 d6 47 	call	0x8fac	; 0x8fac <lib_sleep_thread>
 lib_radio_set_channel(channel); 
      da:	81 2f       	mov	r24, r17
      dc:	0e 94 1f 44 	call	0x883e	; 0x883e <lib_radio_set_channel>
  
 lib_radio_send_string("Hello, world!\n"); 
      e0:	80 e0       	ldi	r24, 0x00	; 0
      e2:	91 e0       	ldi	r25, 0x01	; 1
      e4:	0e 94 80 44 	call	0x8900	; 0x8900 <lib_radio_send_string>
 lib_yellow_toggle();
      e8:	0e 94 82 00 	call	0x104	; 0x104 <lib_yellow_toggle>
 
 while (1)
 {
	 
 
 for (channel = 11;channel <25;channel++)
      ec:	1f 5f       	subi	r17, 0xFF	; 255
      ee:	19 31       	cpi	r17, 0x19	; 25
      f0:	80 f3       	brcs	.-32     	; 0xd2 <channelhop+0x4>
      f2:	ee cf       	rjmp	.-36     	; 0xd0 <channelhop+0x2>

000000f4 <lib_green_toggle>:
#include "liteoscommon.h"
#include "../types/types.h"
void lib_green_toggle()
{
 void (*greenfp)() = (void (*)(void))GREEN_LED_TOGGLE_FUNCTION; 
 greenfp();                              
      f4:	e8 e8       	ldi	r30, 0x88	; 136
      f6:	fc ee       	ldi	r31, 0xEC	; 236
      f8:	09 95       	icall



}
      fa:	08 95       	ret

000000fc <lib_red_toggle>:

void lib_red_toggle()
{
                          
  void (*redfp)() = (void (*)(void))RED_LED_TOGGLE_FUNCTION; 
  redfp();    
      fc:	e0 e8       	ldi	r30, 0x80	; 128
      fe:	fc ee       	ldi	r31, 0xEC	; 236
     100:	09 95       	icall
}
     102:	08 95       	ret

00000104 <lib_yellow_toggle>:

void lib_yellow_toggle()
{
                          
  void (*yellowfp)() = (void (*)(void))YELLOW_TOGGLE_FUNCTION; 
  yellowfp();    
     104:	e4 e8       	ldi	r30, 0x84	; 132
     106:	fc ee       	ldi	r31, 0xEC	; 236
     108:	09 95       	icall
}
     10a:	08 95       	ret

0000010c <lib_red_on>:

void lib_red_on()
{
                          
  void (*redfp)() = (void (*)(void))RED_ON_FUNCTION; 
  redfp();    
     10c:	ec e8       	ldi	r30, 0x8C	; 140
     10e:	fc ee       	ldi	r31, 0xEC	; 236
     110:	09 95       	icall
}
     112:	08 95       	ret

00000114 <lib_red_off>:

void lib_red_off()
{
                          
  void (*redfp)() = (void (*)(void))RED_OFF_FUNCTION; 
  redfp();    
     114:	e0 e9       	ldi	r30, 0x90	; 144
     116:	fc ee       	ldi	r31, 0xEC	; 236
     118:	09 95       	icall
}
     11a:	08 95       	ret

0000011c <lib_green_on>:

void lib_green_on()
{
                          
  void (*greenfp)() = (void (*)(void))GREEN_ON_FUNCTION; 
  greenfp();    
     11c:	ec e9       	ldi	r30, 0x9C	; 156
     11e:	fc ee       	ldi	r31, 0xEC	; 236
     120:	09 95       	icall
}
     122:	08 95       	ret

00000124 <lib_green_off>:

void lib_green_off()
{
                          
  void (*greenfp)() = (void (*)(void))GREEN_OFF_FUNCTION; 
  greenfp();    
     124:	e0 ea       	ldi	r30, 0xA0	; 160
     126:	fc ee       	ldi	r31, 0xEC	; 236
     128:	09 95       	icall
}
     12a:	08 95       	ret

0000012c <lib_yellow_on>:

void lib_yellow_on()
{
                          
  void (*yellowfp)() = (void (*)(void))YELLOW_ON_FUNCTION; 
  yellowfp();    
     12c:	e4 e9       	ldi	r30, 0x94	; 148
     12e:	fc ee       	ldi	r31, 0xEC	; 236
     130:	09 95       	icall
}
     132:	08 95       	ret

00000134 <lib_yellow_off>:

void lib_yellow_off()
{
                          
  void (*yellowfp)() = (void (*)(void))YELLOW_OFF_FUNCTION; 
  yellowfp();    
     134:	e8 e9       	ldi	r30, 0x98	; 152
     136:	fc ee       	ldi	r31, 0xEC	; 236
     138:	09 95       	icall
}
     13a:	08 95       	ret

0000013c <ADCLight>:


void ADCLight()
{
    int temp;
    temp = get_light();
     13c:	0e 94 35 19 	call	0x326a	; 0x326a <get_light>
    current_thread->data.adcstate.adcreading = temp;
     140:	e0 91 25 09 	lds	r30, 0x0925
     144:	f0 91 26 09 	lds	r31, 0x0926
     148:	96 8f       	std	Z+30, r25	; 0x1e
     14a:	85 8f       	std	Z+29, r24	; 0x1d
    return;
}
     14c:	08 95       	ret

0000014e <ADCTemp>:
//-------------------------------------------------------------------------
void ADCTemp()
{
    int temp;

    temp = get_temp();
     14e:	0e 94 40 19 	call	0x3280	; 0x3280 <get_temp>
    current_thread->data.adcstate.adcreading = temp;
     152:	e0 91 25 09 	lds	r30, 0x0925
     156:	f0 91 26 09 	lds	r31, 0x0926
     15a:	96 8f       	std	Z+30, r25	; 0x1e
     15c:	85 8f       	std	Z+29, r24	; 0x1d
    return;
}
     15e:	08 95       	ret

00000160 <ADCMagX>:
//-------------------------------------------------------------------------
void ADCMagX()
{
    int temp;

    temp = get_magx();
     160:	0e 94 4b 19 	call	0x3296	; 0x3296 <get_magx>
    current_thread->data.adcstate.adcreading = temp;
     164:	e0 91 25 09 	lds	r30, 0x0925
     168:	f0 91 26 09 	lds	r31, 0x0926
     16c:	96 8f       	std	Z+30, r25	; 0x1e
     16e:	85 8f       	std	Z+29, r24	; 0x1d
    return;
}
     170:	08 95       	ret

00000172 <ADCMagY>:
//-------------------------------------------------------------------------
void ADCMagY()
{
    int temp;

    temp = get_magy();
     172:	0e 94 54 19 	call	0x32a8	; 0x32a8 <get_magy>
    current_thread->data.adcstate.adcreading = temp;
     176:	e0 91 25 09 	lds	r30, 0x0925
     17a:	f0 91 26 09 	lds	r31, 0x0926
     17e:	96 8f       	std	Z+30, r25	; 0x1e
     180:	85 8f       	std	Z+29, r24	; 0x1d
    return;
}
     182:	08 95       	ret

00000184 <ADCAccX>:
//-------------------------------------------------------------------------
void ADCAccX()
{
    int temp;

    temp = get_accx();
     184:	0e 94 5d 19 	call	0x32ba	; 0x32ba <get_accx>
    current_thread->data.adcstate.adcreading = temp;
     188:	e0 91 25 09 	lds	r30, 0x0925
     18c:	f0 91 26 09 	lds	r31, 0x0926
     190:	96 8f       	std	Z+30, r25	; 0x1e
     192:	85 8f       	std	Z+29, r24	; 0x1d
    return;
}
     194:	08 95       	ret

00000196 <ADCAccY>:
//-------------------------------------------------------------------------
void ADCAccY()
{
    int temp;

    temp = get_accy();
     196:	0e 94 66 19 	call	0x32cc	; 0x32cc <get_accy>
    current_thread->data.adcstate.adcreading = temp;
     19a:	e0 91 25 09 	lds	r30, 0x0925
     19e:	f0 91 26 09 	lds	r31, 0x0926
     1a2:	96 8f       	std	Z+30, r25	; 0x1e
     1a4:	85 8f       	std	Z+29, r24	; 0x1d
    return;
}
     1a6:	08 95       	ret

000001a8 <getGenericStorageNodeAddress>:
static genericByteStorageTaskNode storageTask;

void *getGenericStorageNodeAddress()
{
    return (void *)&storageTask;
}
     1a8:	8a e5       	ldi	r24, 0x5A	; 90
     1aa:	91 e0       	ldi	r25, 0x01	; 1
     1ac:	08 95       	ret

000001ae <genericReadTask>:

//-------------------------------------------------------------------------
void genericReadTask()
{
    genericreadBytes(storageTask.addr, storageTask.nBytes, (void *)
     1ae:	60 91 5c 01 	lds	r22, 0x015C
     1b2:	70 91 5d 01 	lds	r23, 0x015D
     1b6:	40 91 5e 01 	lds	r20, 0x015E
     1ba:	50 91 5f 01 	lds	r21, 0x015F
     1be:	80 91 5a 01 	lds	r24, 0x015A
     1c2:	90 91 5b 01 	lds	r25, 0x015B
     1c6:	0e 94 92 1a 	call	0x3524	; 0x3524 <genericreadBytes>
                     storageTask.buffer);
}
     1ca:	08 95       	ret

000001cc <genericWriteTask>:

//-------------------------------------------------------------------------
void genericWriteTask()
{
    genericwriteBytes(storageTask.addr, storageTask.nBytes, (void *)
     1cc:	60 91 5c 01 	lds	r22, 0x015C
     1d0:	70 91 5d 01 	lds	r23, 0x015D
     1d4:	40 91 5e 01 	lds	r20, 0x015E
     1d8:	50 91 5f 01 	lds	r21, 0x015F
     1dc:	80 91 5a 01 	lds	r24, 0x015A
     1e0:	90 91 5b 01 	lds	r25, 0x015B
     1e4:	0e 94 95 1a 	call	0x352a	; 0x352a <genericwriteBytes>
                      storageTask.buffer);
}
     1e8:	08 95       	ret

000001ea <writefile_task>:
}

//-------------------------------------------------------------------------
void writefile_task()
{
    fwrite2(filehandle, databuffer, nBytes);
     1ea:	60 91 23 05 	lds	r22, 0x0523
     1ee:	70 91 24 05 	lds	r23, 0x0524
     1f2:	40 91 08 05 	lds	r20, 0x0508
     1f6:	50 91 09 05 	lds	r21, 0x0509
     1fa:	80 91 01 05 	lds	r24, 0x0501
     1fe:	90 91 02 05 	lds	r25, 0x0502
     202:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <fwrite2>
	barrier_unblock(7, 4);
     206:	87 e0       	ldi	r24, 0x07	; 7
     208:	64 e0       	ldi	r22, 0x04	; 4
     20a:	0e 94 cb 18 	call	0x3196	; 0x3196 <barrier_unblock>
     
}
     20e:	08 95       	ret

00000210 <readfile_task>:
}

//-------------------------------------------------------------------------
void readfile_task()
{
    fread2(filehandle, databuffer, nBytes);
     210:	60 91 23 05 	lds	r22, 0x0523
     214:	70 91 24 05 	lds	r23, 0x0524
     218:	40 91 08 05 	lds	r20, 0x0508
     21c:	50 91 09 05 	lds	r21, 0x0509
     220:	80 91 01 05 	lds	r24, 0x0501
     224:	90 91 02 05 	lds	r25, 0x0502
     228:	0e 94 25 1e 	call	0x3c4a	; 0x3c4a <fread2>
	barrier_unblock(7, 3);
     22c:	87 e0       	ldi	r24, 0x07	; 7
     22e:	63 e0       	ldi	r22, 0x03	; 3
     230:	0e 94 cb 18 	call	0x3196	; 0x3196 <barrier_unblock>
}
     234:	08 95       	ret

00000236 <closefile_task>:
}

//-------------------------------------------------------------------------
void closefile_task()
{
    fclose2(filehandle);
     236:	80 91 01 05 	lds	r24, 0x0501
     23a:	90 91 02 05 	lds	r25, 0x0502
     23e:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <fclose2>
	barrier_unblock(7, 2);
     242:	87 e0       	ldi	r24, 0x07	; 7
     244:	62 e0       	ldi	r22, 0x02	; 2
     246:	0e 94 cb 18 	call	0x3196	; 0x3196 <barrier_unblock>
}
     24a:	08 95       	ret

0000024c <openfile_task>:
}

//-------------------------------------------------------------------------
void openfile_task()
{
    MYFILE *temp = fsopen(filepathaddr, filemodeaddr);
     24c:	8c e0       	ldi	r24, 0x0C	; 12
     24e:	95 e0       	ldi	r25, 0x05	; 5
     250:	63 e0       	ldi	r22, 0x03	; 3
     252:	75 e0       	ldi	r23, 0x05	; 5
     254:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <fsopen>

    openthread->filedata.filestate.fileptr = (uint8_t *) temp;
     258:	e0 91 0a 05 	lds	r30, 0x050A
     25c:	f0 91 0b 05 	lds	r31, 0x050B
     260:	92 a3       	std	Z+34, r25	; 0x22
     262:	81 a3       	std	Z+33, r24	; 0x21
    
	 barrier_unblock(7, 1);
     264:	87 e0       	ldi	r24, 0x07	; 7
     266:	61 e0       	ldi	r22, 0x01	; 1
     268:	0e 94 cb 18 	call	0x3196	; 0x3196 <barrier_unblock>

     return;

}
     26c:	08 95       	ret

0000026e <getFilePathAddress>:
//-------------------------------------------------------------------------
//Get the file path address
void *getFilePathAddress()
{
    return (void *)filepathaddr;
}
     26e:	8c e0       	ldi	r24, 0x0C	; 12
     270:	95 e0       	ldi	r25, 0x05	; 5
     272:	08 95       	ret

00000274 <getFileModeAddress>:
//-------------------------------------------------------------------------
//Get the file mode address
void *getFileModeAddress()
{
    return (void *)filemodeaddr;
}
     274:	83 e0       	ldi	r24, 0x03	; 3
     276:	95 e0       	ldi	r25, 0x05	; 5
     278:	08 95       	ret

0000027a <openFileTask>:
}

//-------------------------------------------------------------------------
void openFileTask()
{
    openthread = current_thread;
     27a:	80 91 25 09 	lds	r24, 0x0925
     27e:	90 91 26 09 	lds	r25, 0x0926
     282:	90 93 0b 05 	sts	0x050B, r25
     286:	80 93 0a 05 	sts	0x050A, r24
    postTask(openfile_task, 5);
     28a:	86 e2       	ldi	r24, 0x26	; 38
     28c:	91 e0       	ldi	r25, 0x01	; 1
     28e:	65 e0       	ldi	r22, 0x05	; 5
     290:	0e 94 88 14 	call	0x2910	; 0x2910 <postTask>
    return;
}
     294:	08 95       	ret

00000296 <closeFileTask>:
}

//-------------------------------------------------------------------------
void closeFileTask()
{
    filehandle = (MYFILE *) current_thread->filedata.filestate.fileptr;
     296:	e0 91 25 09 	lds	r30, 0x0925
     29a:	f0 91 26 09 	lds	r31, 0x0926
     29e:	81 a1       	ldd	r24, Z+33	; 0x21
     2a0:	92 a1       	ldd	r25, Z+34	; 0x22
     2a2:	90 93 02 05 	sts	0x0502, r25
     2a6:	80 93 01 05 	sts	0x0501, r24
    postTask(closefile_task, 5);
     2aa:	8b e1       	ldi	r24, 0x1B	; 27
     2ac:	91 e0       	ldi	r25, 0x01	; 1
     2ae:	65 e0       	ldi	r22, 0x05	; 5
     2b0:	0e 94 88 14 	call	0x2910	; 0x2910 <postTask>
}
     2b4:	08 95       	ret

000002b6 <readFileTask>:
}

//-------------------------------------------------------------------------
void readFileTask()
{
    filehandle = (MYFILE *) current_thread->filedata.filestate.fileptr;
     2b6:	e0 91 25 09 	lds	r30, 0x0925
     2ba:	f0 91 26 09 	lds	r31, 0x0926
     2be:	81 a1       	ldd	r24, Z+33	; 0x21
     2c0:	92 a1       	ldd	r25, Z+34	; 0x22
     2c2:	90 93 02 05 	sts	0x0502, r25
     2c6:	80 93 01 05 	sts	0x0501, r24
    databuffer = current_thread->filedata.filestate.bufferptr;
     2ca:	83 a1       	ldd	r24, Z+35	; 0x23
     2cc:	94 a1       	ldd	r25, Z+36	; 0x24
     2ce:	90 93 24 05 	sts	0x0524, r25
     2d2:	80 93 23 05 	sts	0x0523, r24
    nBytes = current_thread->filedata.filestate.bytes;
     2d6:	85 a1       	ldd	r24, Z+37	; 0x25
     2d8:	96 a1       	ldd	r25, Z+38	; 0x26
     2da:	90 93 09 05 	sts	0x0509, r25
     2de:	80 93 08 05 	sts	0x0508, r24
    postTask(readfile_task, 5);
     2e2:	88 e0       	ldi	r24, 0x08	; 8
     2e4:	91 e0       	ldi	r25, 0x01	; 1
     2e6:	65 e0       	ldi	r22, 0x05	; 5
     2e8:	0e 94 88 14 	call	0x2910	; 0x2910 <postTask>
}
     2ec:	08 95       	ret

000002ee <writeFileTask>:
}

//-------------------------------------------------------------------------
void writeFileTask()
{
    filehandle = (MYFILE *) current_thread->filedata.filestate.fileptr;
     2ee:	e0 91 25 09 	lds	r30, 0x0925
     2f2:	f0 91 26 09 	lds	r31, 0x0926
     2f6:	81 a1       	ldd	r24, Z+33	; 0x21
     2f8:	92 a1       	ldd	r25, Z+34	; 0x22
     2fa:	90 93 02 05 	sts	0x0502, r25
     2fe:	80 93 01 05 	sts	0x0501, r24
    databuffer = current_thread->filedata.filestate.bufferptr;
     302:	83 a1       	ldd	r24, Z+35	; 0x23
     304:	94 a1       	ldd	r25, Z+36	; 0x24
     306:	90 93 24 05 	sts	0x0524, r25
     30a:	80 93 23 05 	sts	0x0523, r24
    nBytes = current_thread->filedata.filestate.bytes;
     30e:	85 a1       	ldd	r24, Z+37	; 0x25
     310:	96 a1       	ldd	r25, Z+38	; 0x26
     312:	90 93 09 05 	sts	0x0509, r25
     316:	80 93 08 05 	sts	0x0508, r24
    postTask(writefile_task, 5);
     31a:	85 ef       	ldi	r24, 0xF5	; 245
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	65 e0       	ldi	r22, 0x05	; 5
     320:	0e 94 88 14 	call	0x2910	; 0x2910 <postTask>
}
     324:	08 95       	ret

00000326 <seekFileTask>:

//-------------------------------------------------------------------------
void seekFileTask()
{
    filehandle = (MYFILE *) current_thread->filedata.fileseekstate.fileptr;
     326:	a0 91 25 09 	lds	r26, 0x0925
     32a:	b0 91 26 09 	lds	r27, 0x0926
     32e:	91 96       	adiw	r26, 0x21	; 33
     330:	ed 91       	ld	r30, X+
     332:	fc 91       	ld	r31, X
     334:	92 97       	sbiw	r26, 0x22	; 34
     336:	e0 93 01 05 	sts	0x0501, r30
     33a:	f0 93 02 05 	sts	0x0502, r31
    offset = current_thread->filedata.fileseekstate.offset;
     33e:	93 96       	adiw	r26, 0x23	; 35
     340:	4d 91       	ld	r20, X+
     342:	5c 91       	ld	r21, X
     344:	94 97       	sbiw	r26, 0x24	; 36
     346:	50 93 22 05 	sts	0x0522, r21
     34a:	40 93 21 05 	sts	0x0521, r20
    position = current_thread->filedata.fileseekstate.position;
     34e:	95 96       	adiw	r26, 0x25	; 37
     350:	2d 91       	ld	r18, X+
     352:	3c 91       	ld	r19, X
     354:	96 97       	sbiw	r26, 0x26	; 38
     356:	30 93 00 05 	sts	0x0500, r19
     35a:	20 93 ff 04 	sts	0x04FF, r18
    fseek2(filehandle, (int32_t) offset, position);
     35e:	66 27       	eor	r22, r22
     360:	57 fd       	sbrc	r21, 7
     362:	60 95       	com	r22
     364:	76 2f       	mov	r23, r22
     366:	cf 01       	movw	r24, r30
     368:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <fseek2>
    return;
}
     36c:	08 95       	ret

0000036e <setRadioFrequencyTask>:
 
radio_receiving_buffer radio_buf;

//-------------------------------------------------------------------------
void setRadioFrequencyTask()
{
     36e:	df 93       	push	r29
     370:	cf 93       	push	r28
     372:	00 d0       	rcall	.+0      	; 0x374 <setRadioFrequencyTask+0x6>
     374:	cd b7       	in	r28, 0x3d	; 61
     376:	de b7       	in	r29, 0x3e	; 62
    volatile uint16_t freq;
    asm volatile ("mov  %A0, r20" "\n\t" "mov  %B0, r21" "\n\t":"=r" (freq):);
     378:	84 2f       	mov	r24, r20
     37a:	95 2f       	mov	r25, r21
     37c:	9a 83       	std	Y+2, r25	; 0x02
     37e:	89 83       	std	Y+1, r24	; 0x01

    cc2420controlm_CC2420Control_TuneManual(freq);
     380:	89 81       	ldd	r24, Y+1	; 0x01
     382:	9a 81       	ldd	r25, Y+2	; 0x02
     384:	0e 94 81 0b 	call	0x1702	; 0x1702 <cc2420controlm_CC2420Control_TuneManual>
    return;
}
     388:	0f 90       	pop	r0
     38a:	0f 90       	pop	r0
     38c:	cf 91       	pop	r28
     38e:	df 91       	pop	r29
     390:	08 95       	ret

00000392 <setRadioChannelTask>:

//-------------------------------------------------------------------------
void setRadioChannelTask()
{
     392:	df 93       	push	r29
     394:	cf 93       	push	r28
     396:	00 d0       	rcall	.+0      	; 0x398 <setRadioChannelTask+0x6>
     398:	cd b7       	in	r28, 0x3d	; 61
     39a:	de b7       	in	r29, 0x3e	; 62
    volatile uint16_t freq;
    asm volatile ("mov  %A0, r20" "\n\t" "mov  %B0, r21" "\n\t":"=r" (freq):);
     39c:	84 2f       	mov	r24, r20
     39e:	95 2f       	mov	r25, r21
     3a0:	9a 83       	std	Y+2, r25	; 0x02
     3a2:	89 83       	std	Y+1, r24	; 0x01

    cc2420controlm_CC2420Control_TuneChannel(freq);
     3a4:	89 81       	ldd	r24, Y+1	; 0x01
     3a6:	9a 81       	ldd	r25, Y+2	; 0x02
     3a8:	0e 94 9a 0b 	call	0x1734	; 0x1734 <cc2420controlm_CC2420Control_TuneChannel>
    return;
}
     3ac:	0f 90       	pop	r0
     3ae:	0f 90       	pop	r0
     3b0:	cf 91       	pop	r28
     3b2:	df 91       	pop	r29
     3b4:	08 95       	ret

000003b6 <setRadioPowerTask>:

//-------------------------------------------------------------------------
void setRadioPowerTask()
{
     3b6:	df 93       	push	r29
     3b8:	cf 93       	push	r28
     3ba:	00 d0       	rcall	.+0      	; 0x3bc <setRadioPowerTask+0x6>
     3bc:	cd b7       	in	r28, 0x3d	; 61
     3be:	de b7       	in	r29, 0x3e	; 62
    volatile uint16_t powerlevel;
    asm volatile ("mov  %A0, r20" "\n\t" "mov  %B0, r21"
     3c0:	84 2f       	mov	r24, r20
     3c2:	95 2f       	mov	r25, r21
     3c4:	9a 83       	std	Y+2, r25	; 0x02
     3c6:	89 83       	std	Y+1, r24	; 0x01
                  "\n\t":"=r" (powerlevel):);
    cc2420controlm_CC2420Control_TunePower(powerlevel);
     3c8:	89 81       	ldd	r24, Y+1	; 0x01
     3ca:	9a 81       	ldd	r25, Y+2	; 0x02
     3cc:	0e 94 a4 0b 	call	0x1748	; 0x1748 <cc2420controlm_CC2420Control_TunePower>
    return;
}
     3d0:	0f 90       	pop	r0
     3d2:	0f 90       	pop	r0
     3d4:	cf 91       	pop	r28
     3d6:	df 91       	pop	r29
     3d8:	08 95       	ret

000003da <SocketRadioSend>:
void SocketRadioSend()
{
   	//debugrf230
    //Leds_redToggle(); 

    postTask(send_task, 9);
     3da:	80 e2       	ldi	r24, 0x20	; 32
     3dc:	92 e0       	ldi	r25, 0x02	; 2
     3de:	69 e0       	ldi	r22, 0x09	; 9
     3e0:	0e 94 88 14 	call	0x2910	; 0x2910 <postTask>
    //After it is woken up, return

	sleepThread(20);
     3e4:	84 e1       	ldi	r24, 0x14	; 20
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <sleepThread>
    restoreRadioState();
     3ec:	0e 94 1c 0a 	call	0x1438	; 0x1438 <restoreRadioState>
    return;
}
     3f0:	08 95       	ret

000003f2 <getRadioSendingBufferAddr>:
void *getRadioSendingBufferAddr()
{
    return (void *)&radiosocketdata;
    //asm volatile( "mov r20, %A0""\n\t""mov r21, %B0""\n\t": : "r"( addr ) );
    // asm volatile("ret"::); 
}
     3f2:	81 e3       	ldi	r24, 0x31	; 49
     3f4:	95 e0       	ldi	r25, 0x05	; 5
     3f6:	08 95       	ret

000003f8 <getRadioReceivingBufferAddr>:
void *getRadioReceivingBufferAddr()
{
    return (void *)&radio_buf;
    //asm volatile( "mov r20, %A0""\n\t""mov r21, %B0""\n\t": : "r"( addr ) );
    // asm volatile("ret"::); 
}
     3f8:	85 e2       	ldi	r24, 0x25	; 37
     3fa:	95 e0       	ldi	r25, 0x05	; 5
     3fc:	08 95       	ret

000003fe <registerReceiverHandle_syscall>:
 
 
 
//system call interface for registering an event 
void registerReceiverHandle_syscall()
{
     3fe:	ef 92       	push	r14
     400:	ff 92       	push	r15
     402:	0f 93       	push	r16
     404:	1f 93       	push	r17
    registerEvent(radio_buf.port, radio_buf.maxLength, radio_buf.dataReady,
     406:	40 91 28 05 	lds	r20, 0x0528
     40a:	50 91 29 05 	lds	r21, 0x0529
     40e:	20 91 2a 05 	lds	r18, 0x052A
     412:	30 91 2b 05 	lds	r19, 0x052B
     416:	00 91 2c 05 	lds	r16, 0x052C
     41a:	10 91 2d 05 	lds	r17, 0x052D
     41e:	e0 90 2f 05 	lds	r14, 0x052F
     422:	f0 90 30 05 	lds	r15, 0x0530
     426:	80 91 25 05 	lds	r24, 0x0525
     42a:	90 91 26 05 	lds	r25, 0x0526
     42e:	60 91 27 05 	lds	r22, 0x0527
     432:	0e 94 42 0a 	call	0x1484	; 0x1484 <registerEvent>
                  radio_buf.data, radio_buf.packetinfo,
                  radio_buf.handlefunc);
}
     436:	1f 91       	pop	r17
     438:	0f 91       	pop	r16
     43a:	ff 90       	pop	r15
     43c:	ef 90       	pop	r14
     43e:	08 95       	ret

00000440 <send_task>:
    struct msgData *dataPayloadPtr_currentMsg;

  
	 
    dataPayloadPtr_currentMsg = (struct msgData *)currentMsg.data;
    if (radiosocketdata.socket_msg_len == 0)
     440:	80 91 35 05 	lds	r24, 0x0535
     444:	88 23       	and	r24, r24
     446:	41 f4       	brne	.+16     	; 0x458 <send_task+0x18>
    {
        radiosocketdata.socket_msg_len = mystrlen((char *)radiosocketdata.socket_msg);
     448:	80 91 36 05 	lds	r24, 0x0536
     44c:	90 91 37 05 	lds	r25, 0x0537
     450:	0e 94 d4 36 	call	0x6da8	; 0x6da8 <mystrlen>
     454:	80 93 35 05 	sts	0x0535, r24
    }
    mystrncpy((char *)dataPayloadPtr_currentMsg, (char *)radiosocketdata.socket_msg,
     458:	60 91 36 05 	lds	r22, 0x0536
     45c:	70 91 37 05 	lds	r23, 0x0537
     460:	82 e4       	ldi	r24, 0x42	; 66
     462:	95 e0       	ldi	r25, 0x05	; 5
     464:	40 91 35 05 	lds	r20, 0x0535
     468:	0e 94 44 36 	call	0x6c88	; 0x6c88 <mystrncpy>
              radiosocketdata.socket_msg_len);


  
    if (radiosocketdata.socket_addr != 0)
     46c:	60 91 33 05 	lds	r22, 0x0533
     470:	70 91 34 05 	lds	r23, 0x0534
     474:	28 e3       	ldi	r18, 0x38	; 56
     476:	35 e0       	ldi	r19, 0x05	; 5
     478:	61 15       	cp	r22, r1
     47a:	71 05       	cpc	r23, r1
     47c:	49 f0       	breq	.+18     	; 0x490 <send_task+0x50>
    {
        AMStandard_SendMsg_send(radiosocketdata.socket_port, radiosocketdata.socket_addr, radiosocketdata.socket_msg_len, &currentMsg);
     47e:	80 91 31 05 	lds	r24, 0x0531
     482:	90 91 32 05 	lds	r25, 0x0532
     486:	40 91 35 05 	lds	r20, 0x0535
     48a:	0e 94 95 09 	call	0x132a	; 0x132a <AMStandard_SendMsg_send>
     48e:	08 95       	ret
    }
    else
    {
        currentMsg.length = radiosocketdata.socket_msg_len;
     490:	80 91 35 05 	lds	r24, 0x0535
     494:	80 93 38 05 	sts	0x0538, r24
        currentMsg.addr = radiosocketdata.socket_addr;
     498:	f9 01       	movw	r30, r18
     49a:	17 82       	std	Z+7, r1	; 0x07
     49c:	16 82       	std	Z+6, r1	; 0x06
        currentMsg.port = radiosocketdata.socket_port;
     49e:	80 91 31 05 	lds	r24, 0x0531
     4a2:	90 91 32 05 	lds	r25, 0x0532
     4a6:	91 87       	std	Z+9, r25	; 0x09
     4a8:	80 87       	std	Z+8, r24	; 0x08
        currentMsg.strength = 0;
     4aa:	10 92 a6 05 	sts	0x05A6, r1
        currentMsg.lqi = 0; 
     4ae:	10 92 a7 05 	sts	0x05A7, r1
        Standard_Receive_Packet(radiosocketdata.socket_port, &currentMsg);
     4b2:	b9 01       	movw	r22, r18
     4b4:	0e 94 92 0a 	call	0x1524	; 0x1524 <Standard_Receive_Packet>
     4b8:	08 95       	ret

000004ba <StandardSocketSend>:
{   
//    #ifdef PLATFORM_AVR_IRIS
//     sleepThread(20);
//    #endif 

    radiosocketdata.socket_port = port;
     4ba:	90 93 32 05 	sts	0x0532, r25
     4be:	80 93 31 05 	sts	0x0531, r24
    radiosocketdata.socket_addr = address;
     4c2:	70 93 34 05 	sts	0x0534, r23
     4c6:	60 93 33 05 	sts	0x0533, r22
    radiosocketdata.socket_msg_len = msglength;
     4ca:	40 93 35 05 	sts	0x0535, r20
    radiosocketdata.socket_msg = msg;
     4ce:	30 93 37 05 	sts	0x0537, r19
     4d2:	20 93 36 05 	sts	0x0536, r18
    postTask(send_task, 9);
     4d6:	80 e2       	ldi	r24, 0x20	; 32
     4d8:	92 e0       	ldi	r25, 0x02	; 2
     4da:	69 e0       	ldi	r22, 0x09	; 9
     4dc:	0e 94 88 14 	call	0x2910	; 0x2910 <postTask>
    sleepThread(20);
     4e0:	84 e1       	ldi	r24, 0x14	; 20
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <sleepThread>
    restoreRadioState();
     4e8:	0e 94 1c 0a 	call	0x1438	; 0x1438 <restoreRadioState>
    return;
}
     4ec:	08 95       	ret

000004ee <getCurrentThreadAddress>:

  addr = (thread **) &current_thread;
  return addr;
  //asm volatile( "mov r20, %A0""\n\t""mov r21, %B0""\n\t": : "r"( addr ) );
  // asm volatile("ret"::); 
}
     4ee:	85 e2       	ldi	r24, 0x25	; 37
     4f0:	99 e0       	ldi	r25, 0x09	; 9
     4f2:	08 95       	ret

000004f4 <getThreadTableStart>:
  addr = &thread_table[0];
  
  return addr;
  //asm volatile( "mov r20, %A0""\n\t""mov r21, %B0""\n\t": : "r"( addr ) );
  // asm volatile("ret"::); 
}
     4f4:	87 e2       	ldi	r24, 0x27	; 39
     4f6:	99 e0       	ldi	r25, 0x09	; 9
     4f8:	08 95       	ret

000004fa <initTrace>:


void initTrace(uint8_t basechannel, uint8_t reportingchannel, uint16_t reportinterval){
	
	//Tune the channel and power	
	basefreq = basechannel;
     4fa:	80 93 60 01 	sts	0x0160, r24
	reportingfreq = reportingchannel;
     4fe:	60 93 61 01 	sts	0x0161, r22
	prevcount = endingcount = 0; 
     502:	10 92 ad 05 	sts	0x05AD, r1
     506:	10 92 ac 05 	sts	0x05AC, r1
	interval = reportinterval; 
     50a:	50 93 af 05 	sts	0x05AF, r21
     50e:	40 93 ae 05 	sts	0x05AE, r20
	GenericTimerStart(14, TIMER_ONE_SHOT, 1000);
     512:	8e e0       	ldi	r24, 0x0E	; 14
     514:	61 e0       	ldi	r22, 0x01	; 1
     516:	28 ee       	ldi	r18, 0xE8	; 232
     518:	33 e0       	ldi	r19, 0x03	; 3
     51a:	40 e0       	ldi	r20, 0x00	; 0
     51c:	50 e0       	ldi	r21, 0x00	; 0
     51e:	0e 94 a1 32 	call	0x6542	; 0x6542 <GenericTimerStart>
}
     522:	08 95       	ret

00000524 <GenericInitTimerFired>:

void GenericInitTimerFired()
{
	GenericTimerStart(15, TIMER_REPEAT, interval);
     524:	20 91 ae 05 	lds	r18, 0x05AE
     528:	30 91 af 05 	lds	r19, 0x05AF
     52c:	40 e0       	ldi	r20, 0x00	; 0
     52e:	50 e0       	ldi	r21, 0x00	; 0
     530:	8f e0       	ldi	r24, 0x0F	; 15
     532:	60 e0       	ldi	r22, 0x00	; 0
     534:	0e 94 a1 32 	call	0x6542	; 0x6542 <GenericTimerStart>
}
     538:	08 95       	ret

0000053a <addTrace>:
//void addTrace(uint16_t eventid, uint8_t threadid){}
	
	
void addTrace(uint16_t eventid, uint8_t threadid){
     53a:	1f 93       	push	r17
     53c:	cf 93       	push	r28
     53e:	df 93       	push	r29
     540:	ec 01       	movw	r28, r24
     542:	16 2f       	mov	r17, r22
	
	uint32_t time;
	time = getCurrentResolution();
     544:	0e 94 5e 33 	call	0x66bc	; 0x66bc <getCurrentResolution>
     548:	dc 01       	movw	r26, r24
     54a:	cb 01       	movw	r24, r22
	records[endingcount].id = threadid; 
     54c:	20 91 ad 05 	lds	r18, 0x05AD
     550:	e2 2f       	mov	r30, r18
     552:	f0 e0       	ldi	r31, 0x00	; 0
     554:	33 e0       	ldi	r19, 0x03	; 3
     556:	ee 0f       	add	r30, r30
     558:	ff 1f       	adc	r31, r31
     55a:	3a 95       	dec	r19
     55c:	e1 f7       	brne	.-8      	; 0x556 <addTrace+0x1c>
     55e:	e0 55       	subi	r30, 0x50	; 80
     560:	fa 4f       	sbci	r31, 0xFA	; 250
     562:	12 83       	std	Z+2, r17	; 0x02
     564:	13 82       	std	Z+3, r1	; 0x03
	records[endingcount].timestamp = time;
     566:	84 83       	std	Z+4, r24	; 0x04
     568:	95 83       	std	Z+5, r25	; 0x05
     56a:	a6 83       	std	Z+6, r26	; 0x06
     56c:	b7 83       	std	Z+7, r27	; 0x07
	records[endingcount].type = eventid; 
     56e:	d1 83       	std	Z+1, r29	; 0x01
     570:	c0 83       	st	Z, r28
	endingcount ++;
     572:	82 2f       	mov	r24, r18
     574:	8f 5f       	subi	r24, 0xFF	; 255
     576:	80 93 ad 05 	sts	0x05AD, r24
	if (endingcount == 64)
     57a:	80 34       	cpi	r24, 0x40	; 64
     57c:	11 f4       	brne	.+4      	; 0x582 <addTrace+0x48>
	 endingcount = 0; 
     57e:	10 92 ad 05 	sts	0x05AD, r1
	
}
     582:	df 91       	pop	r29
     584:	cf 91       	pop	r28
     586:	1f 91       	pop	r17
     588:	08 95       	ret

0000058a <reportTrace>:
void reportTrace()
{
   	 
     
     
	if (prevcount == endingcount)
     58a:	20 91 ac 05 	lds	r18, 0x05AC
     58e:	80 91 ad 05 	lds	r24, 0x05AD
     592:	28 17       	cp	r18, r24
     594:	71 f1       	breq	.+92     	; 0x5f2 <reportTrace+0x68>
	 return; 
	 
	 
	AMStandard_SendMsg_send(10, 0xFFFF, 64, &records[prevcount]);
     596:	30 e0       	ldi	r19, 0x00	; 0
     598:	43 e0       	ldi	r20, 0x03	; 3
     59a:	22 0f       	add	r18, r18
     59c:	33 1f       	adc	r19, r19
     59e:	4a 95       	dec	r20
     5a0:	e1 f7       	brne	.-8      	; 0x59a <reportTrace+0x10>
     5a2:	20 55       	subi	r18, 0x50	; 80
     5a4:	3a 4f       	sbci	r19, 0xFA	; 250
     5a6:	8a e0       	ldi	r24, 0x0A	; 10
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	6f ef       	ldi	r22, 0xFF	; 255
     5ac:	7f ef       	ldi	r23, 0xFF	; 255
     5ae:	40 e4       	ldi	r20, 0x40	; 64
     5b0:	50 e0       	ldi	r21, 0x00	; 0
     5b2:	0e 94 95 09 	call	0x132a	; 0x132a <AMStandard_SendMsg_send>
	
	if (prevcount + 8 <= endingcount)
     5b6:	60 91 ac 05 	lds	r22, 0x05AC
     5ba:	86 2f       	mov	r24, r22
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	70 91 ad 05 	lds	r23, 0x05AD
     5c2:	ac 01       	movw	r20, r24
     5c4:	49 5f       	subi	r20, 0xF9	; 249
     5c6:	5f 4f       	sbci	r21, 0xFF	; 255
     5c8:	27 2f       	mov	r18, r23
     5ca:	30 e0       	ldi	r19, 0x00	; 0
     5cc:	42 17       	cp	r20, r18
     5ce:	53 07       	cpc	r21, r19
     5d0:	44 f0       	brlt	.+16     	; 0x5e2 <reportTrace+0x58>
		prevcount += 8;
	else
	if ((prevcount + 8 >endingcount )&& (endingcount < prevcount))
     5d2:	76 17       	cp	r23, r22
     5d4:	50 f4       	brcc	.+20     	; 0x5ea <reportTrace+0x60>
		{
		  if (prevcount +8 >=64)
     5d6:	88 33       	cpi	r24, 0x38	; 56
     5d8:	91 05       	cpc	r25, r1
     5da:	1c f0       	brlt	.+6      	; 0x5e2 <reportTrace+0x58>
			prevcount = 0;
     5dc:	10 92 ac 05 	sts	0x05AC, r1
     5e0:	08 95       	ret
			else
			 prevcount+= 8; 			
     5e2:	68 5f       	subi	r22, 0xF8	; 248
     5e4:	60 93 ac 05 	sts	0x05AC, r22
     5e8:	08 95       	ret
		}
	else
	 if ((prevcount + 8 > endingcount)&& (endingcount > prevcount))
     5ea:	67 17       	cp	r22, r23
     5ec:	10 f4       	brcc	.+4      	; 0x5f2 <reportTrace+0x68>
	  prevcount = endingcount; 
     5ee:	70 93 ac 05 	sts	0x05AC, r23
     5f2:	08 95       	ret

000005f4 <main>:

       @return  SUCCESS (0)
*/

int main()
{
     5f4:	af 92       	push	r10
     5f6:	bf 92       	push	r11
     5f8:	cf 92       	push	r12
     5fa:	df 92       	push	r13
     5fc:	ef 92       	push	r14
     5fe:	ff 92       	push	r15
     600:	0f 93       	push	r16
	 
    //micaz specific initilizations, hardware init
    LITE_SET_PIN_DIRECTIONS();
     602:	0e 94 48 06 	call	0xc90	; 0xc90 <LITE_SET_PIN_DIRECTIONS>
    
    //sensors init
    adcdriver_init_adc();
     606:	0e 94 18 19 	call	0x3230	; 0x3230 <adcdriver_init_adc>

    //kernel ints
    initScheduling();
     60a:	0e 94 76 14 	call	0x28ec	; 0x28ec <initScheduling>
	
    thread_init();
     60e:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <thread_init>
    
    //inits printing 
    initUSART();
     612:	0e 94 24 07 	call	0xe48	; 0xe48 <initUSART>

	//Leds initing
	Leds_Leds(); 
     616:	0e 94 6f 19 	call	0x32de	; 0x32de <Leds_Leds>
    
     Leds_redToggle();
     61a:	0e 94 b8 19 	call	0x3370	; 0x3370 <Leds_redToggle>
     Leds_greenToggle();
     61e:	0e 94 fd 19 	call	0x33fa	; 0x33fa <Leds_greenToggle>
     Leds_yellowToggle();
     622:	0e 94 42 1a 	call	0x3484	; 0x3484 <Leds_yellowToggle>
     mystrncpy(networkid, "testbed\0", 8);
     626:	83 ec       	ldi	r24, 0xC3	; 195
     628:	97 e0       	ldi	r25, 0x07	; 7
     62a:	6f e0       	ldi	r22, 0x0F	; 15
     62c:	71 e0       	ldi	r23, 0x01	; 1
     62e:	48 e0       	ldi	r20, 0x08	; 8
     630:	0e 94 44 36 	call	0x6c88	; 0x6c88 <mystrncpy>
     mystrncpy(filenameid, "node00\0", 7);
     634:	80 eb       	ldi	r24, 0xB0	; 176
     636:	97 e0       	ldi	r25, 0x07	; 7
     638:	68 e1       	ldi	r22, 0x18	; 24
     63a:	71 e0       	ldi	r23, 0x01	; 1
     63c:	47 e0       	ldi	r20, 0x07	; 7
     63e:	0e 94 44 36 	call	0x6c88	; 0x6c88 <mystrncpy>
	 
     CURRENT_NODE_ID = 8; 
     642:	88 e0       	ldi	r24, 0x08	; 8
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	90 93 c2 07 	sts	0x07C2, r25
     64a:	80 93 c1 07 	sts	0x07C1, r24

     nodeid = CURRENT_NODE_ID;
     64e:	80 91 c1 07 	lds	r24, 0x07C1
     652:	90 91 c2 07 	lds	r25, 0x07C2
     656:	90 93 63 01 	sts	0x0163, r25
     65a:	80 93 62 01 	sts	0x0162, r24
	 
	 filenameid[4] = (char)(nodeid/10 + 0x30); 
     65e:	6a e0       	ldi	r22, 0x0A	; 10
     660:	70 e0       	ldi	r23, 0x00	; 0
     662:	0e 94 d7 48 	call	0x91ae	; 0x91ae <__udivmodhi4>
     666:	60 5d       	subi	r22, 0xD0	; 208
     668:	60 93 b4 07 	sts	0x07B4, r22
	 filenameid[5] = (char)(nodeid%10 + 0x30); 
     66c:	80 5d       	subi	r24, 0xD0	; 208
     66e:	80 93 b5 07 	sts	0x07B5, r24

  	 atmel_flash_init();
     672:	0e 94 0f 2e 	call	0x5c1e	; 0x5c1e <atmel_flash_init>

	 sounder_init();      
     676:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <sounder_init>
     formatSystem();
     buildRootNode();
     #endif
	 
	 
     genericwriteBytes(NETWORKNAMEOFFSET, 16, networkid);
     67a:	80 e2       	ldi	r24, 0x20	; 32
     67c:	9c e0       	ldi	r25, 0x0C	; 12
     67e:	60 e1       	ldi	r22, 0x10	; 16
     680:	70 e0       	ldi	r23, 0x00	; 0
     682:	43 ec       	ldi	r20, 0xC3	; 195
     684:	57 e0       	ldi	r21, 0x07	; 7
     686:	0e 94 95 1a 	call	0x352a	; 0x352a <genericwriteBytes>
     genericwriteBytes(NODEFILENAMEOFFSET, 16, filenameid);
     68a:	85 e3       	ldi	r24, 0x35	; 53
     68c:	9c e0       	ldi	r25, 0x0C	; 12
     68e:	60 e1       	ldi	r22, 0x10	; 16
     690:	70 e0       	ldi	r23, 0x00	; 0
     692:	40 eb       	ldi	r20, 0xB0	; 176
     694:	57 e0       	ldi	r21, 0x07	; 7
     696:	0e 94 95 1a 	call	0x352a	; 0x352a <genericwriteBytes>
     node_writenodeid(nodeid);
     69a:	80 91 62 01 	lds	r24, 0x0162
     69e:	90 91 63 01 	lds	r25, 0x0163
     6a2:	0e 94 9a 03 	call	0x734	; 0x734 <node_writenodeid>
	 
     	 
     Leds_redToggle();
     6a6:	0e 94 b8 19 	call	0x3370	; 0x3370 <Leds_redToggle>
     Leds_greenToggle();
     6aa:	0e 94 fd 19 	call	0x33fa	; 0x33fa <Leds_greenToggle>
     Leds_yellowToggle();
     6ae:	0e 94 42 1a 	call	0x3484	; 0x3484 <Leds_yellowToggle>
     srand(CURRENT_NODE_ID);
     6b2:	80 91 c1 07 	lds	r24, 0x07C1
     6b6:	90 91 c2 07 	lds	r25, 0x07C2
     6ba:	0e 94 8e 49 	call	0x931c	; 0x931c <srand>
  

    //timer and radio 
    GenericTimerInit();
     6be:	0e 94 7e 32 	call	0x64fc	; 0x64fc <GenericTimerInit>
	
    //for global timing purpose use
    GenericTimingStart(); 
     6c2:	0e 94 61 33 	call	0x66c2	; 0x66c2 <GenericTimingStart>
     
    AMStandard_Control_init();
     6c6:	0e 94 80 09 	call	0x1300	; 0x1300 <AMStandard_Control_init>
    AMStandard_Control_start();
     6ca:	0e 94 90 09 	call	0x1320	; 0x1320 <AMStandard_Control_start>
    
    initRadioHandle();
     6ce:	0e 94 37 0a 	call	0x146e	; 0x146e <initRadioHandle>
    
    InitShell();
     6d2:	0e 94 ee 3f 	call	0x7fdc	; 0x7fdc <InitShell>

	    
    #ifdef RADIO_CC2420
    cc2420controlm_CC2420Control_TuneChannel(21); 
     6d6:	85 e1       	ldi	r24, 0x15	; 21
     6d8:	0e 94 9a 0b 	call	0x1734	; 0x1734 <cc2420controlm_CC2420Control_TuneChannel>
    cc2420controlm_CC2420Control_TunePower(31);
     6dc:	8f e1       	ldi	r24, 0x1F	; 31
     6de:	0e 94 a4 0b 	call	0x1748	; 0x1748 <cc2420controlm_CC2420Control_TunePower>

   #ifdef TRACE_ENABLE_EVENT
    initTrace(21, 19, 4000); 	
   #endif
   
   create_thread(ShellThread, (uint16_t *) shellbuffer,
     6e2:	82 ec       	ldi	r24, 0xC2	; 194
     6e4:	90 e4       	ldi	r25, 0x40	; 64
     6e6:	61 e9       	ldi	r22, 0x91	; 145
     6e8:	7a e0       	ldi	r23, 0x0A	; 10
     6ea:	4f e8       	ldi	r20, 0x8F	; 143
     6ec:	5b e0       	ldi	r21, 0x0B	; 11
     6ee:	20 e0       	ldi	r18, 0x00	; 0
     6f0:	30 e0       	ldi	r19, 0x00	; 0
     6f2:	0f e0       	ldi	r16, 0x0F	; 15
     6f4:	f0 e2       	ldi	r31, 0x20	; 32
     6f6:	ef 2e       	mov	r14, r31
     6f8:	f1 e0       	ldi	r31, 0x01	; 1
     6fa:	ff 2e       	mov	r15, r31
     6fc:	cc 24       	eor	r12, r12
     6fe:	dd 24       	eor	r13, r13
     700:	aa 24       	eor	r10, r10
     702:	bb 24       	eor	r11, r11
     704:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <create_thread>
                  STACK_TOP(shellbuffer), 0, 15, "sysshell", 0, 0);
  
   create_thread(channelhop, (uint16_t *) channelhopbuffer,
     708:	87 e6       	ldi	r24, 0x67	; 103
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	65 e0       	ldi	r22, 0x05	; 5
     70e:	74 e0       	ldi	r23, 0x04	; 4
     710:	4d ef       	ldi	r20, 0xFD	; 253
     712:	54 e0       	ldi	r21, 0x04	; 4
     714:	20 e0       	ldi	r18, 0x00	; 0
     716:	30 e0       	ldi	r19, 0x00	; 0
     718:	e9 e2       	ldi	r30, 0x29	; 41
     71a:	ee 2e       	mov	r14, r30
     71c:	e1 e0       	ldi	r30, 0x01	; 1
     71e:	fe 2e       	mov	r15, r30
     720:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <create_thread>
   sbi(MCUCR, SM1);
   cbi(MCUCR, SM2); 
   sbi(MCUCR, SE);
   #endif
   
     _avr_enable_interrupt();
     724:	0e 94 ba 03 	call	0x774	; 0x774 <_avr_enable_interrupt>

    while (1)
    {
        runNextTask();
     728:	0e 94 c0 14 	call	0x2980	; 0x2980 <runNextTask>
     72c:	fd cf       	rjmp	.-6      	; 0x728 <main+0x134>

0000072e <node_readnodestring>:
char filenameid[17];

char *node_readnodestring()
{
  return filenameid; 	
}
     72e:	80 eb       	ldi	r24, 0xB0	; 176
     730:	97 e0       	ldi	r25, 0x07	; 7
     732:	08 95       	ret

00000734 <node_writenodeid>:


void node_writenodeid(uint16_t nodeid)
{
     734:	bc 01       	movw	r22, r24
    write16uint(NODEIDOFFSET, nodeid);
     736:	8e e4       	ldi	r24, 0x4E	; 78
     738:	9c e0       	ldi	r25, 0x0C	; 12
     73a:	0e 94 b3 1a 	call	0x3566	; 0x3566 <write16uint>
}
     73e:	08 95       	ret

00000740 <node_readnodeid>:

//-------------------------------------------------------------------------
uint16_t node_readnodeid()
{
    return read16uint(NODEIDOFFSET);
     740:	8e e4       	ldi	r24, 0x4E	; 78
     742:	9c e0       	ldi	r25, 0x0C	; 12
     744:	0e 94 a1 1a 	call	0x3542	; 0x3542 <read16uint>
}
     748:	08 95       	ret

0000074a <node_setradiochannel>:


//-------------------------------------------------------------------------
void node_setradiochannel(uint8_t channel)
{
     74a:	68 2f       	mov	r22, r24
    write8uint(NODECHANNELOFFSET, channel);
     74c:	84 e5       	ldi	r24, 0x54	; 84
     74e:	9c e0       	ldi	r25, 0x0C	; 12
     750:	0e 94 ad 1a 	call	0x355a	; 0x355a <write8uint>
}
     754:	08 95       	ret

00000756 <node_getradiochannel>:

//-------------------------------------------------------------------------
uint8_t node_getradiochannel()
{
    return read8uint(NODECHANNELOFFSET);
     756:	84 e5       	ldi	r24, 0x54	; 84
     758:	9c e0       	ldi	r25, 0x0C	; 12
     75a:	0e 94 9b 1a 	call	0x3536	; 0x3536 <read8uint>
}
     75e:	08 95       	ret

00000760 <wait_cycle>:


#include "avrhardware.h"
void wait_cycle()
{
    asm volatile ("nop");
     760:	00 00       	nop
    asm volatile ("nop");
     762:	00 00       	nop
}
     764:	08 95       	ret

00000766 <_atomic_sleep>:

//-------------------------------------------------------------------------
inline void _atomic_sleep()
{
    /* Atomically enable interrupts and sleep */
    sei();                      // Make sure interrupts are on, so we can wake up!
     766:	78 94       	sei
    asm volatile ("sleep");
     768:	88 95       	sleep

    wait_cycle();
     76a:	0e 94 b0 03 	call	0x760	; 0x760 <wait_cycle>
}
     76e:	08 95       	ret

00000770 <_avr_sleep>:

//-------------------------------------------------------------------------
inline void _avr_sleep()
{
    asm volatile ("sleep");
     770:	88 95       	sleep
}
     772:	08 95       	ret

00000774 <_avr_enable_interrupt>:

//-------------------------------------------------------------------------
inline void _avr_enable_interrupt()
{
    sei();
     774:	78 94       	sei
}
     776:	08 95       	ret

00000778 <_avr_disable_interrupt>:

//-------------------------------------------------------------------------
inline void _avr_disable_interrupt()
{
    cli();
     778:	f8 94       	cli
}
     77a:	08 95       	ret

0000077c <_atomic_start_avr>:

//-------------------------------------------------------------------------
_atomic_t _atomic_start_avr(void)
{
    _atomic_t result = inp(SREG);
     77c:	8f b7       	in	r24, 0x3f	; 63

    cli();
     77e:	f8 94       	cli
    return result;
}
     780:	08 95       	ret

00000782 <_atomic_end_avr>:

//-------------------------------------------------------------------------
void _atomic_end_avr(_atomic_t oldSreg)
{
    outp(oldSreg, SREG);
     782:	8f bf       	out	0x3f, r24	; 63
}
     784:	08 95       	ret

00000786 <avr_resetNode>:

//-------------------------------------------------------------------------
void avr_resetNode()
{
    asm volatile ("ldi	r30, 0x00"::);
     786:	e0 e0       	ldi	r30, 0x00	; 0
    asm volatile ("ldi	r31, 0x00"::);
     788:	f0 e0       	ldi	r31, 0x00	; 0
    asm volatile ("icall"::);
     78a:	09 95       	icall
  
  //  __asm__ __volatile__("ldi	r30, 0x98" ::); 
  //  __asm__ __volatile__("ldi	r31, 0xEA" ::);
  //  __asm__ __volatile__("icall" ::);
}
     78c:	08 95       	ret

0000078e <LITE_wait_250ns>:



void inline LITE_wait_250ns()
{
    asm volatile ("nop"::);
     78e:	00 00       	nop
    asm volatile ("nop"::);
     790:	00 00       	nop
}
     792:	08 95       	ret

00000794 <LITE_uwait>:

//-------------------------------------------------------------------------
void inline LITE_uwait(int u_sec)
{
    while (u_sec > 0)
     794:	09 c0       	rjmp	.+18     	; 0x7a8 <LITE_uwait+0x14>
	...
        asm volatile ("nop"::);
        asm volatile ("nop"::);
        asm volatile ("nop"::);
        asm volatile ("nop"::);

        u_sec--;
     7a6:	01 97       	sbiw	r24, 0x01	; 1
}

//-------------------------------------------------------------------------
void inline LITE_uwait(int u_sec)
{
    while (u_sec > 0)
     7a8:	18 16       	cp	r1, r24
     7aa:	19 06       	cpc	r1, r25
     7ac:	a4 f3       	brlt	.-24     	; 0x796 <LITE_uwait+0x2>
        asm volatile ("nop"::);
        asm volatile ("nop"::);

        u_sec--;
    }
}
     7ae:	08 95       	ret

000007b0 <LITE_SET_RED_LED_PIN>:

// LED assignments
LITE_ASSIGN_PIN(RED_LED, A, 2);
     7b0:	da 9a       	sbi	0x1b, 2	; 27
     7b2:	08 95       	ret

000007b4 <LITE_CLR_RED_LED_PIN>:
     7b4:	da 98       	cbi	0x1b, 2	; 27
     7b6:	08 95       	ret

000007b8 <LITE_READ_RED_LED_PIN>:
     7b8:	21 e0       	ldi	r18, 0x01	; 1
     7ba:	30 e0       	ldi	r19, 0x00	; 0
     7bc:	ca 99       	sbic	0x19, 2	; 25
     7be:	02 c0       	rjmp	.+4      	; 0x7c4 <LITE_READ_RED_LED_PIN+0xc>
     7c0:	20 e0       	ldi	r18, 0x00	; 0
     7c2:	30 e0       	ldi	r19, 0x00	; 0
     7c4:	c9 01       	movw	r24, r18
     7c6:	08 95       	ret

000007c8 <LITE_MAKE_RED_LED_OUTPUT>:
     7c8:	d2 9a       	sbi	0x1a, 2	; 26
     7ca:	08 95       	ret

000007cc <LITE_MAKE_RED_LED_INPUT>:
     7cc:	d2 98       	cbi	0x1a, 2	; 26
     7ce:	08 95       	ret

000007d0 <LITE_SET_GREEN_LED_PIN>:
LITE_ASSIGN_PIN(GREEN_LED, A, 1);
     7d0:	d9 9a       	sbi	0x1b, 1	; 27
     7d2:	08 95       	ret

000007d4 <LITE_CLR_GREEN_LED_PIN>:
     7d4:	d9 98       	cbi	0x1b, 1	; 27
     7d6:	08 95       	ret

000007d8 <LITE_READ_GREEN_LED_PIN>:
     7d8:	21 e0       	ldi	r18, 0x01	; 1
     7da:	30 e0       	ldi	r19, 0x00	; 0
     7dc:	c9 99       	sbic	0x19, 1	; 25
     7de:	02 c0       	rjmp	.+4      	; 0x7e4 <LITE_READ_GREEN_LED_PIN+0xc>
     7e0:	20 e0       	ldi	r18, 0x00	; 0
     7e2:	30 e0       	ldi	r19, 0x00	; 0
     7e4:	c9 01       	movw	r24, r18
     7e6:	08 95       	ret

000007e8 <LITE_MAKE_GREEN_LED_OUTPUT>:
     7e8:	d1 9a       	sbi	0x1a, 1	; 26
     7ea:	08 95       	ret

000007ec <LITE_MAKE_GREEN_LED_INPUT>:
     7ec:	d1 98       	cbi	0x1a, 1	; 26
     7ee:	08 95       	ret

000007f0 <LITE_SET_YELLOW_LED_PIN>:
LITE_ASSIGN_PIN(YELLOW_LED, A, 0);
     7f0:	d8 9a       	sbi	0x1b, 0	; 27
     7f2:	08 95       	ret

000007f4 <LITE_CLR_YELLOW_LED_PIN>:
     7f4:	d8 98       	cbi	0x1b, 0	; 27
     7f6:	08 95       	ret

000007f8 <LITE_READ_YELLOW_LED_PIN>:
     7f8:	29 b3       	in	r18, 0x19	; 25
     7fa:	30 e0       	ldi	r19, 0x00	; 0
     7fc:	21 70       	andi	r18, 0x01	; 1
     7fe:	30 70       	andi	r19, 0x00	; 0
     800:	c9 01       	movw	r24, r18
     802:	08 95       	ret

00000804 <LITE_MAKE_YELLOW_LED_OUTPUT>:
     804:	d0 9a       	sbi	0x1a, 0	; 26
     806:	08 95       	ret

00000808 <LITE_MAKE_YELLOW_LED_INPUT>:
     808:	d0 98       	cbi	0x1a, 0	; 26
     80a:	08 95       	ret

0000080c <LITE_SET_SERIAL_ID_PIN>:
LITE_ASSIGN_PIN(SERIAL_ID, A, 4);
     80c:	dc 9a       	sbi	0x1b, 4	; 27
     80e:	08 95       	ret

00000810 <LITE_CLR_SERIAL_ID_PIN>:
     810:	dc 98       	cbi	0x1b, 4	; 27
     812:	08 95       	ret

00000814 <LITE_READ_SERIAL_ID_PIN>:
     814:	21 e0       	ldi	r18, 0x01	; 1
     816:	30 e0       	ldi	r19, 0x00	; 0
     818:	cc 99       	sbic	0x19, 4	; 25
     81a:	02 c0       	rjmp	.+4      	; 0x820 <LITE_READ_SERIAL_ID_PIN+0xc>
     81c:	20 e0       	ldi	r18, 0x00	; 0
     81e:	30 e0       	ldi	r19, 0x00	; 0
     820:	c9 01       	movw	r24, r18
     822:	08 95       	ret

00000824 <LITE_MAKE_SERIAL_ID_OUTPUT>:
     824:	d4 9a       	sbi	0x1a, 4	; 26
     826:	08 95       	ret

00000828 <LITE_MAKE_SERIAL_ID_INPUT>:
     828:	d4 98       	cbi	0x1a, 4	; 26
     82a:	08 95       	ret

0000082c <LITE_SET_BAT_MON_PIN>:
LITE_ASSIGN_PIN(BAT_MON, A, 5);
     82c:	dd 9a       	sbi	0x1b, 5	; 27
     82e:	08 95       	ret

00000830 <LITE_CLR_BAT_MON_PIN>:
     830:	dd 98       	cbi	0x1b, 5	; 27
     832:	08 95       	ret

00000834 <LITE_READ_BAT_MON_PIN>:
     834:	21 e0       	ldi	r18, 0x01	; 1
     836:	30 e0       	ldi	r19, 0x00	; 0
     838:	cd 99       	sbic	0x19, 5	; 25
     83a:	02 c0       	rjmp	.+4      	; 0x840 <LITE_READ_BAT_MON_PIN+0xc>
     83c:	20 e0       	ldi	r18, 0x00	; 0
     83e:	30 e0       	ldi	r19, 0x00	; 0
     840:	c9 01       	movw	r24, r18
     842:	08 95       	ret

00000844 <LITE_MAKE_BAT_MON_OUTPUT>:
     844:	d5 9a       	sbi	0x1a, 5	; 26
     846:	08 95       	ret

00000848 <LITE_MAKE_BAT_MON_INPUT>:
     848:	d5 98       	cbi	0x1a, 5	; 26
     84a:	08 95       	ret

0000084c <LITE_SET_THERM_PWR_PIN>:
LITE_ASSIGN_PIN(THERM_PWR, A, 7);
     84c:	df 9a       	sbi	0x1b, 7	; 27
     84e:	08 95       	ret

00000850 <LITE_CLR_THERM_PWR_PIN>:
     850:	df 98       	cbi	0x1b, 7	; 27
     852:	08 95       	ret

00000854 <LITE_READ_THERM_PWR_PIN>:
     854:	89 b3       	in	r24, 0x19	; 25
     856:	99 27       	eor	r25, r25
     858:	87 fd       	sbrc	r24, 7
     85a:	90 95       	com	r25
     85c:	89 2f       	mov	r24, r25
     85e:	88 1f       	adc	r24, r24
     860:	88 27       	eor	r24, r24
     862:	88 1f       	adc	r24, r24
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	08 95       	ret

00000868 <LITE_MAKE_THERM_PWR_OUTPUT>:
     868:	d7 9a       	sbi	0x1a, 7	; 26
     86a:	08 95       	ret

0000086c <LITE_MAKE_THERM_PWR_INPUT>:
     86c:	d7 98       	cbi	0x1a, 7	; 26
     86e:	08 95       	ret

00000870 <LITE_SET_FLASH_SELECT_PIN>:


// Flash assignments
LITE_ASSIGN_PIN(FLASH_SELECT, A, 3);
     870:	db 9a       	sbi	0x1b, 3	; 27
     872:	08 95       	ret

00000874 <LITE_CLR_FLASH_SELECT_PIN>:
     874:	db 98       	cbi	0x1b, 3	; 27
     876:	08 95       	ret

00000878 <LITE_READ_FLASH_SELECT_PIN>:
     878:	21 e0       	ldi	r18, 0x01	; 1
     87a:	30 e0       	ldi	r19, 0x00	; 0
     87c:	cb 99       	sbic	0x19, 3	; 25
     87e:	02 c0       	rjmp	.+4      	; 0x884 <LITE_READ_FLASH_SELECT_PIN+0xc>
     880:	20 e0       	ldi	r18, 0x00	; 0
     882:	30 e0       	ldi	r19, 0x00	; 0
     884:	c9 01       	movw	r24, r18
     886:	08 95       	ret

00000888 <LITE_MAKE_FLASH_SELECT_OUTPUT>:
     888:	d3 9a       	sbi	0x1a, 3	; 26
     88a:	08 95       	ret

0000088c <LITE_MAKE_FLASH_SELECT_INPUT>:
     88c:	d3 98       	cbi	0x1a, 3	; 26
     88e:	08 95       	ret

00000890 <LITE_SET_FLASH_CLK_PIN>:
LITE_ASSIGN_PIN(FLASH_CLK, D, 5);
     890:	95 9a       	sbi	0x12, 5	; 18
     892:	08 95       	ret

00000894 <LITE_CLR_FLASH_CLK_PIN>:
     894:	95 98       	cbi	0x12, 5	; 18
     896:	08 95       	ret

00000898 <LITE_READ_FLASH_CLK_PIN>:
     898:	21 e0       	ldi	r18, 0x01	; 1
     89a:	30 e0       	ldi	r19, 0x00	; 0
     89c:	85 99       	sbic	0x10, 5	; 16
     89e:	02 c0       	rjmp	.+4      	; 0x8a4 <LITE_READ_FLASH_CLK_PIN+0xc>
     8a0:	20 e0       	ldi	r18, 0x00	; 0
     8a2:	30 e0       	ldi	r19, 0x00	; 0
     8a4:	c9 01       	movw	r24, r18
     8a6:	08 95       	ret

000008a8 <LITE_MAKE_FLASH_CLK_OUTPUT>:
     8a8:	8d 9a       	sbi	0x11, 5	; 17
     8aa:	08 95       	ret

000008ac <LITE_MAKE_FLASH_CLK_INPUT>:
     8ac:	8d 98       	cbi	0x11, 5	; 17
     8ae:	08 95       	ret

000008b0 <LITE_SET_FLASH_OUT_PIN>:
LITE_ASSIGN_PIN(FLASH_OUT, D, 3);
     8b0:	93 9a       	sbi	0x12, 3	; 18
     8b2:	08 95       	ret

000008b4 <LITE_CLR_FLASH_OUT_PIN>:
     8b4:	93 98       	cbi	0x12, 3	; 18
     8b6:	08 95       	ret

000008b8 <LITE_READ_FLASH_OUT_PIN>:
     8b8:	21 e0       	ldi	r18, 0x01	; 1
     8ba:	30 e0       	ldi	r19, 0x00	; 0
     8bc:	83 99       	sbic	0x10, 3	; 16
     8be:	02 c0       	rjmp	.+4      	; 0x8c4 <LITE_READ_FLASH_OUT_PIN+0xc>
     8c0:	20 e0       	ldi	r18, 0x00	; 0
     8c2:	30 e0       	ldi	r19, 0x00	; 0
     8c4:	c9 01       	movw	r24, r18
     8c6:	08 95       	ret

000008c8 <LITE_MAKE_FLASH_OUT_OUTPUT>:
     8c8:	8b 9a       	sbi	0x11, 3	; 17
     8ca:	08 95       	ret

000008cc <LITE_MAKE_FLASH_OUT_INPUT>:
     8cc:	8b 98       	cbi	0x11, 3	; 17
     8ce:	08 95       	ret

000008d0 <LITE_SET_FLASH_IN_PIN>:
LITE_ASSIGN_PIN(FLASH_IN, D, 2);
     8d0:	92 9a       	sbi	0x12, 2	; 18
     8d2:	08 95       	ret

000008d4 <LITE_CLR_FLASH_IN_PIN>:
     8d4:	92 98       	cbi	0x12, 2	; 18
     8d6:	08 95       	ret

000008d8 <LITE_READ_FLASH_IN_PIN>:
     8d8:	21 e0       	ldi	r18, 0x01	; 1
     8da:	30 e0       	ldi	r19, 0x00	; 0
     8dc:	82 99       	sbic	0x10, 2	; 16
     8de:	02 c0       	rjmp	.+4      	; 0x8e4 <LITE_READ_FLASH_IN_PIN+0xc>
     8e0:	20 e0       	ldi	r18, 0x00	; 0
     8e2:	30 e0       	ldi	r19, 0x00	; 0
     8e4:	c9 01       	movw	r24, r18
     8e6:	08 95       	ret

000008e8 <LITE_MAKE_FLASH_IN_OUTPUT>:
     8e8:	8a 9a       	sbi	0x11, 2	; 17
     8ea:	08 95       	ret

000008ec <LITE_MAKE_FLASH_IN_INPUT>:
     8ec:	8a 98       	cbi	0x11, 2	; 17
     8ee:	08 95       	ret

000008f0 <LITE_SET_INT0_PIN>:
// interrupt assignments
LITE_ASSIGN_PIN(INT0, E, 4);
     8f0:	1c 9a       	sbi	0x03, 4	; 3
     8f2:	08 95       	ret

000008f4 <LITE_CLR_INT0_PIN>:
     8f4:	1c 98       	cbi	0x03, 4	; 3
     8f6:	08 95       	ret

000008f8 <LITE_READ_INT0_PIN>:
     8f8:	21 e0       	ldi	r18, 0x01	; 1
     8fa:	30 e0       	ldi	r19, 0x00	; 0
     8fc:	0c 99       	sbic	0x01, 4	; 1
     8fe:	02 c0       	rjmp	.+4      	; 0x904 <LITE_READ_INT0_PIN+0xc>
     900:	20 e0       	ldi	r18, 0x00	; 0
     902:	30 e0       	ldi	r19, 0x00	; 0
     904:	c9 01       	movw	r24, r18
     906:	08 95       	ret

00000908 <LITE_MAKE_INT0_OUTPUT>:
     908:	14 9a       	sbi	0x02, 4	; 2
     90a:	08 95       	ret

0000090c <LITE_MAKE_INT0_INPUT>:
     90c:	14 98       	cbi	0x02, 4	; 2
     90e:	08 95       	ret

00000910 <LITE_SET_INT1_PIN>:
LITE_ASSIGN_PIN(INT1, E, 5);
     910:	1d 9a       	sbi	0x03, 5	; 3
     912:	08 95       	ret

00000914 <LITE_CLR_INT1_PIN>:
     914:	1d 98       	cbi	0x03, 5	; 3
     916:	08 95       	ret

00000918 <LITE_READ_INT1_PIN>:
     918:	21 e0       	ldi	r18, 0x01	; 1
     91a:	30 e0       	ldi	r19, 0x00	; 0
     91c:	0d 99       	sbic	0x01, 5	; 1
     91e:	02 c0       	rjmp	.+4      	; 0x924 <LITE_READ_INT1_PIN+0xc>
     920:	20 e0       	ldi	r18, 0x00	; 0
     922:	30 e0       	ldi	r19, 0x00	; 0
     924:	c9 01       	movw	r24, r18
     926:	08 95       	ret

00000928 <LITE_MAKE_INT1_OUTPUT>:
     928:	15 9a       	sbi	0x02, 5	; 2
     92a:	08 95       	ret

0000092c <LITE_MAKE_INT1_INPUT>:
     92c:	15 98       	cbi	0x02, 5	; 2
     92e:	08 95       	ret

00000930 <LITE_SET_INT2_PIN>:
LITE_ASSIGN_PIN(INT2, E, 6);
     930:	1e 9a       	sbi	0x03, 6	; 3
     932:	08 95       	ret

00000934 <LITE_CLR_INT2_PIN>:
     934:	1e 98       	cbi	0x03, 6	; 3
     936:	08 95       	ret

00000938 <LITE_READ_INT2_PIN>:
     938:	21 e0       	ldi	r18, 0x01	; 1
     93a:	30 e0       	ldi	r19, 0x00	; 0
     93c:	0e 99       	sbic	0x01, 6	; 1
     93e:	02 c0       	rjmp	.+4      	; 0x944 <LITE_READ_INT2_PIN+0xc>
     940:	20 e0       	ldi	r18, 0x00	; 0
     942:	30 e0       	ldi	r19, 0x00	; 0
     944:	c9 01       	movw	r24, r18
     946:	08 95       	ret

00000948 <LITE_MAKE_INT2_OUTPUT>:
     948:	16 9a       	sbi	0x02, 6	; 2
     94a:	08 95       	ret

0000094c <LITE_MAKE_INT2_INPUT>:
     94c:	16 98       	cbi	0x02, 6	; 2
     94e:	08 95       	ret

00000950 <LITE_SET_INT3_PIN>:
LITE_ASSIGN_PIN(INT3, E, 7);
     950:	1f 9a       	sbi	0x03, 7	; 3
     952:	08 95       	ret

00000954 <LITE_CLR_INT3_PIN>:
     954:	1f 98       	cbi	0x03, 7	; 3
     956:	08 95       	ret

00000958 <LITE_READ_INT3_PIN>:
     958:	81 b1       	in	r24, 0x01	; 1
     95a:	99 27       	eor	r25, r25
     95c:	87 fd       	sbrc	r24, 7
     95e:	90 95       	com	r25
     960:	89 2f       	mov	r24, r25
     962:	88 1f       	adc	r24, r24
     964:	88 27       	eor	r24, r24
     966:	88 1f       	adc	r24, r24
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	08 95       	ret

0000096c <LITE_MAKE_INT3_OUTPUT>:
     96c:	17 9a       	sbi	0x02, 7	; 2
     96e:	08 95       	ret

00000970 <LITE_MAKE_INT3_INPUT>:
     970:	17 98       	cbi	0x02, 7	; 2
     972:	08 95       	ret

00000974 <LITE_SET_MOSI_PIN>:
// spibus assignments 
LITE_ASSIGN_PIN(MOSI, B, 2);
     974:	c2 9a       	sbi	0x18, 2	; 24
     976:	08 95       	ret

00000978 <LITE_CLR_MOSI_PIN>:
     978:	c2 98       	cbi	0x18, 2	; 24
     97a:	08 95       	ret

0000097c <LITE_READ_MOSI_PIN>:
     97c:	21 e0       	ldi	r18, 0x01	; 1
     97e:	30 e0       	ldi	r19, 0x00	; 0
     980:	b2 99       	sbic	0x16, 2	; 22
     982:	02 c0       	rjmp	.+4      	; 0x988 <LITE_READ_MOSI_PIN+0xc>
     984:	20 e0       	ldi	r18, 0x00	; 0
     986:	30 e0       	ldi	r19, 0x00	; 0
     988:	c9 01       	movw	r24, r18
     98a:	08 95       	ret

0000098c <LITE_MAKE_MOSI_OUTPUT>:
     98c:	ba 9a       	sbi	0x17, 2	; 23
     98e:	08 95       	ret

00000990 <LITE_MAKE_MOSI_INPUT>:
     990:	ba 98       	cbi	0x17, 2	; 23
     992:	08 95       	ret

00000994 <LITE_SET_MISO_PIN>:
LITE_ASSIGN_PIN(MISO, B, 3);
     994:	c3 9a       	sbi	0x18, 3	; 24
     996:	08 95       	ret

00000998 <LITE_CLR_MISO_PIN>:
     998:	c3 98       	cbi	0x18, 3	; 24
     99a:	08 95       	ret

0000099c <LITE_READ_MISO_PIN>:
     99c:	21 e0       	ldi	r18, 0x01	; 1
     99e:	30 e0       	ldi	r19, 0x00	; 0
     9a0:	b3 99       	sbic	0x16, 3	; 22
     9a2:	02 c0       	rjmp	.+4      	; 0x9a8 <LITE_READ_MISO_PIN+0xc>
     9a4:	20 e0       	ldi	r18, 0x00	; 0
     9a6:	30 e0       	ldi	r19, 0x00	; 0
     9a8:	c9 01       	movw	r24, r18
     9aa:	08 95       	ret

000009ac <LITE_MAKE_MISO_OUTPUT>:
     9ac:	bb 9a       	sbi	0x17, 3	; 23
     9ae:	08 95       	ret

000009b0 <LITE_MAKE_MISO_INPUT>:
     9b0:	bb 98       	cbi	0x17, 3	; 23
     9b2:	08 95       	ret

000009b4 <LITE_SET_SPI_SCK_PIN>:
//LITE_ASSIGN_PIN(SPI_OC1C, B, 7);
LITE_ASSIGN_PIN(SPI_SCK, B, 1);
     9b4:	c1 9a       	sbi	0x18, 1	; 24
     9b6:	08 95       	ret

000009b8 <LITE_CLR_SPI_SCK_PIN>:
     9b8:	c1 98       	cbi	0x18, 1	; 24
     9ba:	08 95       	ret

000009bc <LITE_READ_SPI_SCK_PIN>:
     9bc:	21 e0       	ldi	r18, 0x01	; 1
     9be:	30 e0       	ldi	r19, 0x00	; 0
     9c0:	b1 99       	sbic	0x16, 1	; 22
     9c2:	02 c0       	rjmp	.+4      	; 0x9c8 <LITE_READ_SPI_SCK_PIN+0xc>
     9c4:	20 e0       	ldi	r18, 0x00	; 0
     9c6:	30 e0       	ldi	r19, 0x00	; 0
     9c8:	c9 01       	movw	r24, r18
     9ca:	08 95       	ret

000009cc <LITE_MAKE_SPI_SCK_OUTPUT>:
     9cc:	b9 9a       	sbi	0x17, 1	; 23
     9ce:	08 95       	ret

000009d0 <LITE_MAKE_SPI_SCK_INPUT>:
     9d0:	b9 98       	cbi	0x17, 1	; 23
     9d2:	08 95       	ret

000009d4 <LITE_SET_PW0_PIN>:
// power control assignments
LITE_ASSIGN_PIN(PW0, C, 0);
     9d4:	a8 9a       	sbi	0x15, 0	; 21
     9d6:	08 95       	ret

000009d8 <LITE_CLR_PW0_PIN>:
     9d8:	a8 98       	cbi	0x15, 0	; 21
     9da:	08 95       	ret

000009dc <LITE_READ_PW0_PIN>:
     9dc:	23 b3       	in	r18, 0x13	; 19
     9de:	30 e0       	ldi	r19, 0x00	; 0
     9e0:	21 70       	andi	r18, 0x01	; 1
     9e2:	30 70       	andi	r19, 0x00	; 0
     9e4:	c9 01       	movw	r24, r18
     9e6:	08 95       	ret

000009e8 <LITE_MAKE_PW0_OUTPUT>:
     9e8:	a0 9a       	sbi	0x14, 0	; 20
     9ea:	08 95       	ret

000009ec <LITE_MAKE_PW0_INPUT>:
     9ec:	a0 98       	cbi	0x14, 0	; 20
     9ee:	08 95       	ret

000009f0 <LITE_SET_PW1_PIN>:
LITE_ASSIGN_PIN(PW1, C, 1);
     9f0:	a9 9a       	sbi	0x15, 1	; 21
     9f2:	08 95       	ret

000009f4 <LITE_CLR_PW1_PIN>:
     9f4:	a9 98       	cbi	0x15, 1	; 21
     9f6:	08 95       	ret

000009f8 <LITE_READ_PW1_PIN>:
     9f8:	21 e0       	ldi	r18, 0x01	; 1
     9fa:	30 e0       	ldi	r19, 0x00	; 0
     9fc:	99 99       	sbic	0x13, 1	; 19
     9fe:	02 c0       	rjmp	.+4      	; 0xa04 <LITE_READ_PW1_PIN+0xc>
     a00:	20 e0       	ldi	r18, 0x00	; 0
     a02:	30 e0       	ldi	r19, 0x00	; 0
     a04:	c9 01       	movw	r24, r18
     a06:	08 95       	ret

00000a08 <LITE_MAKE_PW1_OUTPUT>:
     a08:	a1 9a       	sbi	0x14, 1	; 20
     a0a:	08 95       	ret

00000a0c <LITE_MAKE_PW1_INPUT>:
     a0c:	a1 98       	cbi	0x14, 1	; 20
     a0e:	08 95       	ret

00000a10 <LITE_SET_PW2_PIN>:
LITE_ASSIGN_PIN(PW2, C, 2);
     a10:	aa 9a       	sbi	0x15, 2	; 21
     a12:	08 95       	ret

00000a14 <LITE_CLR_PW2_PIN>:
     a14:	aa 98       	cbi	0x15, 2	; 21
     a16:	08 95       	ret

00000a18 <LITE_READ_PW2_PIN>:
     a18:	21 e0       	ldi	r18, 0x01	; 1
     a1a:	30 e0       	ldi	r19, 0x00	; 0
     a1c:	9a 99       	sbic	0x13, 2	; 19
     a1e:	02 c0       	rjmp	.+4      	; 0xa24 <LITE_READ_PW2_PIN+0xc>
     a20:	20 e0       	ldi	r18, 0x00	; 0
     a22:	30 e0       	ldi	r19, 0x00	; 0
     a24:	c9 01       	movw	r24, r18
     a26:	08 95       	ret

00000a28 <LITE_MAKE_PW2_OUTPUT>:
     a28:	a2 9a       	sbi	0x14, 2	; 20
     a2a:	08 95       	ret

00000a2c <LITE_MAKE_PW2_INPUT>:
     a2c:	a2 98       	cbi	0x14, 2	; 20
     a2e:	08 95       	ret

00000a30 <LITE_SET_PW3_PIN>:
LITE_ASSIGN_PIN(PW3, C, 3);
     a30:	ab 9a       	sbi	0x15, 3	; 21
     a32:	08 95       	ret

00000a34 <LITE_CLR_PW3_PIN>:
     a34:	ab 98       	cbi	0x15, 3	; 21
     a36:	08 95       	ret

00000a38 <LITE_READ_PW3_PIN>:
     a38:	21 e0       	ldi	r18, 0x01	; 1
     a3a:	30 e0       	ldi	r19, 0x00	; 0
     a3c:	9b 99       	sbic	0x13, 3	; 19
     a3e:	02 c0       	rjmp	.+4      	; 0xa44 <LITE_READ_PW3_PIN+0xc>
     a40:	20 e0       	ldi	r18, 0x00	; 0
     a42:	30 e0       	ldi	r19, 0x00	; 0
     a44:	c9 01       	movw	r24, r18
     a46:	08 95       	ret

00000a48 <LITE_MAKE_PW3_OUTPUT>:
     a48:	a3 9a       	sbi	0x14, 3	; 20
     a4a:	08 95       	ret

00000a4c <LITE_MAKE_PW3_INPUT>:
     a4c:	a3 98       	cbi	0x14, 3	; 20
     a4e:	08 95       	ret

00000a50 <LITE_SET_PW4_PIN>:
LITE_ASSIGN_PIN(PW4, C, 4);
     a50:	ac 9a       	sbi	0x15, 4	; 21
     a52:	08 95       	ret

00000a54 <LITE_CLR_PW4_PIN>:
     a54:	ac 98       	cbi	0x15, 4	; 21
     a56:	08 95       	ret

00000a58 <LITE_READ_PW4_PIN>:
     a58:	21 e0       	ldi	r18, 0x01	; 1
     a5a:	30 e0       	ldi	r19, 0x00	; 0
     a5c:	9c 99       	sbic	0x13, 4	; 19
     a5e:	02 c0       	rjmp	.+4      	; 0xa64 <LITE_READ_PW4_PIN+0xc>
     a60:	20 e0       	ldi	r18, 0x00	; 0
     a62:	30 e0       	ldi	r19, 0x00	; 0
     a64:	c9 01       	movw	r24, r18
     a66:	08 95       	ret

00000a68 <LITE_MAKE_PW4_OUTPUT>:
     a68:	a4 9a       	sbi	0x14, 4	; 20
     a6a:	08 95       	ret

00000a6c <LITE_MAKE_PW4_INPUT>:
     a6c:	a4 98       	cbi	0x14, 4	; 20
     a6e:	08 95       	ret

00000a70 <LITE_SET_PW5_PIN>:
LITE_ASSIGN_PIN(PW5, C, 5);
     a70:	ad 9a       	sbi	0x15, 5	; 21
     a72:	08 95       	ret

00000a74 <LITE_CLR_PW5_PIN>:
     a74:	ad 98       	cbi	0x15, 5	; 21
     a76:	08 95       	ret

00000a78 <LITE_READ_PW5_PIN>:
     a78:	21 e0       	ldi	r18, 0x01	; 1
     a7a:	30 e0       	ldi	r19, 0x00	; 0
     a7c:	9d 99       	sbic	0x13, 5	; 19
     a7e:	02 c0       	rjmp	.+4      	; 0xa84 <LITE_READ_PW5_PIN+0xc>
     a80:	20 e0       	ldi	r18, 0x00	; 0
     a82:	30 e0       	ldi	r19, 0x00	; 0
     a84:	c9 01       	movw	r24, r18
     a86:	08 95       	ret

00000a88 <LITE_MAKE_PW5_OUTPUT>:
     a88:	a5 9a       	sbi	0x14, 5	; 20
     a8a:	08 95       	ret

00000a8c <LITE_MAKE_PW5_INPUT>:
     a8c:	a5 98       	cbi	0x14, 5	; 20
     a8e:	08 95       	ret

00000a90 <LITE_SET_PW6_PIN>:
LITE_ASSIGN_PIN(PW6, C, 6);
     a90:	ae 9a       	sbi	0x15, 6	; 21
     a92:	08 95       	ret

00000a94 <LITE_CLR_PW6_PIN>:
     a94:	ae 98       	cbi	0x15, 6	; 21
     a96:	08 95       	ret

00000a98 <LITE_READ_PW6_PIN>:
     a98:	21 e0       	ldi	r18, 0x01	; 1
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	9e 99       	sbic	0x13, 6	; 19
     a9e:	02 c0       	rjmp	.+4      	; 0xaa4 <LITE_READ_PW6_PIN+0xc>
     aa0:	20 e0       	ldi	r18, 0x00	; 0
     aa2:	30 e0       	ldi	r19, 0x00	; 0
     aa4:	c9 01       	movw	r24, r18
     aa6:	08 95       	ret

00000aa8 <LITE_MAKE_PW6_OUTPUT>:
     aa8:	a6 9a       	sbi	0x14, 6	; 20
     aaa:	08 95       	ret

00000aac <LITE_MAKE_PW6_INPUT>:
     aac:	a6 98       	cbi	0x14, 6	; 20
     aae:	08 95       	ret

00000ab0 <LITE_SET_PW7_PIN>:
LITE_ASSIGN_PIN(PW7, C, 7);
     ab0:	af 9a       	sbi	0x15, 7	; 21
     ab2:	08 95       	ret

00000ab4 <LITE_CLR_PW7_PIN>:
     ab4:	af 98       	cbi	0x15, 7	; 21
     ab6:	08 95       	ret

00000ab8 <LITE_READ_PW7_PIN>:
     ab8:	83 b3       	in	r24, 0x13	; 19
     aba:	99 27       	eor	r25, r25
     abc:	87 fd       	sbrc	r24, 7
     abe:	90 95       	com	r25
     ac0:	89 2f       	mov	r24, r25
     ac2:	88 1f       	adc	r24, r24
     ac4:	88 27       	eor	r24, r24
     ac6:	88 1f       	adc	r24, r24
     ac8:	90 e0       	ldi	r25, 0x00	; 0
     aca:	08 95       	ret

00000acc <LITE_MAKE_PW7_OUTPUT>:
     acc:	a7 9a       	sbi	0x14, 7	; 20
     ace:	08 95       	ret

00000ad0 <LITE_MAKE_PW7_INPUT>:
     ad0:	a7 98       	cbi	0x14, 7	; 20
     ad2:	08 95       	ret

00000ad4 <LITE_SET_I2C_BUS1_SCL_PIN>:
// i2c bus assignments
LITE_ASSIGN_PIN(I2C_BUS1_SCL, D, 0);
     ad4:	90 9a       	sbi	0x12, 0	; 18
     ad6:	08 95       	ret

00000ad8 <LITE_CLR_I2C_BUS1_SCL_PIN>:
     ad8:	90 98       	cbi	0x12, 0	; 18
     ada:	08 95       	ret

00000adc <LITE_READ_I2C_BUS1_SCL_PIN>:
     adc:	20 b3       	in	r18, 0x10	; 16
     ade:	30 e0       	ldi	r19, 0x00	; 0
     ae0:	21 70       	andi	r18, 0x01	; 1
     ae2:	30 70       	andi	r19, 0x00	; 0
     ae4:	c9 01       	movw	r24, r18
     ae6:	08 95       	ret

00000ae8 <LITE_MAKE_I2C_BUS1_SCL_OUTPUT>:
     ae8:	88 9a       	sbi	0x11, 0	; 17
     aea:	08 95       	ret

00000aec <LITE_MAKE_I2C_BUS1_SCL_INPUT>:
     aec:	88 98       	cbi	0x11, 0	; 17
     aee:	08 95       	ret

00000af0 <LITE_SET_I2C_BUS1_SDA_PIN>:
LITE_ASSIGN_PIN(I2C_BUS1_SDA, D, 1);
     af0:	91 9a       	sbi	0x12, 1	; 18
     af2:	08 95       	ret

00000af4 <LITE_CLR_I2C_BUS1_SDA_PIN>:
     af4:	91 98       	cbi	0x12, 1	; 18
     af6:	08 95       	ret

00000af8 <LITE_READ_I2C_BUS1_SDA_PIN>:
     af8:	21 e0       	ldi	r18, 0x01	; 1
     afa:	30 e0       	ldi	r19, 0x00	; 0
     afc:	81 99       	sbic	0x10, 1	; 16
     afe:	02 c0       	rjmp	.+4      	; 0xb04 <LITE_READ_I2C_BUS1_SDA_PIN+0xc>
     b00:	20 e0       	ldi	r18, 0x00	; 0
     b02:	30 e0       	ldi	r19, 0x00	; 0
     b04:	c9 01       	movw	r24, r18
     b06:	08 95       	ret

00000b08 <LITE_MAKE_I2C_BUS1_SDA_OUTPUT>:
     b08:	89 9a       	sbi	0x11, 1	; 17
     b0a:	08 95       	ret

00000b0c <LITE_MAKE_I2C_BUS1_SDA_INPUT>:
     b0c:	89 98       	cbi	0x11, 1	; 17
     b0e:	08 95       	ret

00000b10 <LITE_SET_UART_RXD0_PIN>:
// uart assignments
LITE_ASSIGN_PIN(UART_RXD0, E, 0);
     b10:	18 9a       	sbi	0x03, 0	; 3
     b12:	08 95       	ret

00000b14 <LITE_CLR_UART_RXD0_PIN>:
     b14:	18 98       	cbi	0x03, 0	; 3
     b16:	08 95       	ret

00000b18 <LITE_READ_UART_RXD0_PIN>:
     b18:	21 b1       	in	r18, 0x01	; 1
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	21 70       	andi	r18, 0x01	; 1
     b1e:	30 70       	andi	r19, 0x00	; 0
     b20:	c9 01       	movw	r24, r18
     b22:	08 95       	ret

00000b24 <LITE_MAKE_UART_RXD0_OUTPUT>:
     b24:	10 9a       	sbi	0x02, 0	; 2
     b26:	08 95       	ret

00000b28 <LITE_MAKE_UART_RXD0_INPUT>:
     b28:	10 98       	cbi	0x02, 0	; 2
     b2a:	08 95       	ret

00000b2c <LITE_SET_UART_TXD0_PIN>:
LITE_ASSIGN_PIN(UART_TXD0, E, 1);
     b2c:	19 9a       	sbi	0x03, 1	; 3
     b2e:	08 95       	ret

00000b30 <LITE_CLR_UART_TXD0_PIN>:
     b30:	19 98       	cbi	0x03, 1	; 3
     b32:	08 95       	ret

00000b34 <LITE_READ_UART_TXD0_PIN>:
     b34:	21 e0       	ldi	r18, 0x01	; 1
     b36:	30 e0       	ldi	r19, 0x00	; 0
     b38:	09 99       	sbic	0x01, 1	; 1
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <LITE_READ_UART_TXD0_PIN+0xc>
     b3c:	20 e0       	ldi	r18, 0x00	; 0
     b3e:	30 e0       	ldi	r19, 0x00	; 0
     b40:	c9 01       	movw	r24, r18
     b42:	08 95       	ret

00000b44 <LITE_MAKE_UART_TXD0_OUTPUT>:
     b44:	11 9a       	sbi	0x02, 1	; 2
     b46:	08 95       	ret

00000b48 <LITE_MAKE_UART_TXD0_INPUT>:
     b48:	11 98       	cbi	0x02, 1	; 2
     b4a:	08 95       	ret

00000b4c <LITE_SET_UART_XCK0_PIN>:
LITE_ASSIGN_PIN(UART_XCK0, E, 2);
     b4c:	1a 9a       	sbi	0x03, 2	; 3
     b4e:	08 95       	ret

00000b50 <LITE_CLR_UART_XCK0_PIN>:
     b50:	1a 98       	cbi	0x03, 2	; 3
     b52:	08 95       	ret

00000b54 <LITE_READ_UART_XCK0_PIN>:
     b54:	21 e0       	ldi	r18, 0x01	; 1
     b56:	30 e0       	ldi	r19, 0x00	; 0
     b58:	0a 99       	sbic	0x01, 2	; 1
     b5a:	02 c0       	rjmp	.+4      	; 0xb60 <LITE_READ_UART_XCK0_PIN+0xc>
     b5c:	20 e0       	ldi	r18, 0x00	; 0
     b5e:	30 e0       	ldi	r19, 0x00	; 0
     b60:	c9 01       	movw	r24, r18
     b62:	08 95       	ret

00000b64 <LITE_MAKE_UART_XCK0_OUTPUT>:
     b64:	12 9a       	sbi	0x02, 2	; 2
     b66:	08 95       	ret

00000b68 <LITE_MAKE_UART_XCK0_INPUT>:
     b68:	12 98       	cbi	0x02, 2	; 2
     b6a:	08 95       	ret

00000b6c <LITE_SET_AC_NEG_PIN>:
LITE_ASSIGN_PIN(AC_NEG, E, 3);  // RFID Reader Red LED
     b6c:	1b 9a       	sbi	0x03, 3	; 3
     b6e:	08 95       	ret

00000b70 <LITE_CLR_AC_NEG_PIN>:
     b70:	1b 98       	cbi	0x03, 3	; 3
     b72:	08 95       	ret

00000b74 <LITE_READ_AC_NEG_PIN>:
     b74:	21 e0       	ldi	r18, 0x01	; 1
     b76:	30 e0       	ldi	r19, 0x00	; 0
     b78:	0b 99       	sbic	0x01, 3	; 1
     b7a:	02 c0       	rjmp	.+4      	; 0xb80 <LITE_READ_AC_NEG_PIN+0xc>
     b7c:	20 e0       	ldi	r18, 0x00	; 0
     b7e:	30 e0       	ldi	r19, 0x00	; 0
     b80:	c9 01       	movw	r24, r18
     b82:	08 95       	ret

00000b84 <LITE_MAKE_AC_NEG_OUTPUT>:
     b84:	13 9a       	sbi	0x02, 3	; 2
     b86:	08 95       	ret

00000b88 <LITE_MAKE_AC_NEG_INPUT>:
     b88:	13 98       	cbi	0x02, 3	; 2
     b8a:	08 95       	ret

00000b8c <LITE_SET_UART_RXD1_PIN>:
LITE_ASSIGN_PIN(UART_RXD1, D, 2);
     b8c:	92 9a       	sbi	0x12, 2	; 18
     b8e:	08 95       	ret

00000b90 <LITE_CLR_UART_RXD1_PIN>:
     b90:	92 98       	cbi	0x12, 2	; 18
     b92:	08 95       	ret

00000b94 <LITE_READ_UART_RXD1_PIN>:
     b94:	21 e0       	ldi	r18, 0x01	; 1
     b96:	30 e0       	ldi	r19, 0x00	; 0
     b98:	82 99       	sbic	0x10, 2	; 16
     b9a:	02 c0       	rjmp	.+4      	; 0xba0 <LITE_READ_UART_RXD1_PIN+0xc>
     b9c:	20 e0       	ldi	r18, 0x00	; 0
     b9e:	30 e0       	ldi	r19, 0x00	; 0
     ba0:	c9 01       	movw	r24, r18
     ba2:	08 95       	ret

00000ba4 <LITE_MAKE_UART_RXD1_OUTPUT>:
     ba4:	8a 9a       	sbi	0x11, 2	; 17
     ba6:	08 95       	ret

00000ba8 <LITE_MAKE_UART_RXD1_INPUT>:
     ba8:	8a 98       	cbi	0x11, 2	; 17
     baa:	08 95       	ret

00000bac <LITE_SET_UART_TXD1_PIN>:
LITE_ASSIGN_PIN(UART_TXD1, D, 3);
     bac:	93 9a       	sbi	0x12, 3	; 18
     bae:	08 95       	ret

00000bb0 <LITE_CLR_UART_TXD1_PIN>:
     bb0:	93 98       	cbi	0x12, 3	; 18
     bb2:	08 95       	ret

00000bb4 <LITE_READ_UART_TXD1_PIN>:
     bb4:	21 e0       	ldi	r18, 0x01	; 1
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	83 99       	sbic	0x10, 3	; 16
     bba:	02 c0       	rjmp	.+4      	; 0xbc0 <LITE_READ_UART_TXD1_PIN+0xc>
     bbc:	20 e0       	ldi	r18, 0x00	; 0
     bbe:	30 e0       	ldi	r19, 0x00	; 0
     bc0:	c9 01       	movw	r24, r18
     bc2:	08 95       	ret

00000bc4 <LITE_MAKE_UART_TXD1_OUTPUT>:
     bc4:	8b 9a       	sbi	0x11, 3	; 17
     bc6:	08 95       	ret

00000bc8 <LITE_MAKE_UART_TXD1_INPUT>:
     bc8:	8b 98       	cbi	0x11, 3	; 17
     bca:	08 95       	ret

00000bcc <LITE_SET_UART_XCK1_PIN>:
LITE_ASSIGN_PIN(UART_XCK1, D, 5);
     bcc:	95 9a       	sbi	0x12, 5	; 18
     bce:	08 95       	ret

00000bd0 <LITE_CLR_UART_XCK1_PIN>:
     bd0:	95 98       	cbi	0x12, 5	; 18
     bd2:	08 95       	ret

00000bd4 <LITE_READ_UART_XCK1_PIN>:
     bd4:	21 e0       	ldi	r18, 0x01	; 1
     bd6:	30 e0       	ldi	r19, 0x00	; 0
     bd8:	85 99       	sbic	0x10, 5	; 16
     bda:	02 c0       	rjmp	.+4      	; 0xbe0 <LITE_READ_UART_XCK1_PIN+0xc>
     bdc:	20 e0       	ldi	r18, 0x00	; 0
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	c9 01       	movw	r24, r18
     be2:	08 95       	ret

00000be4 <LITE_MAKE_UART_XCK1_OUTPUT>:
     be4:	8d 9a       	sbi	0x11, 5	; 17
     be6:	08 95       	ret

00000be8 <LITE_MAKE_UART_XCK1_INPUT>:
     be8:	8d 98       	cbi	0x11, 5	; 17
     bea:	08 95       	ret

00000bec <LITE_SET_TONE_DECODE_SIGNAL_PIN>:
LITE_ALIAS_PIN(TONE_DECODE_SIGNAL, INT3);
     bec:	0e 94 a8 04 	call	0x950	; 0x950 <LITE_SET_INT3_PIN>
     bf0:	08 95       	ret

00000bf2 <LITE_CLR_TONE_DECODE_SIGNAL_PIN>:
     bf2:	0e 94 aa 04 	call	0x954	; 0x954 <LITE_CLR_INT3_PIN>
     bf6:	08 95       	ret

00000bf8 <LITE_READ_TONE_DECODE_SIGNAL_PIN>:
LITE_ASSIGN_PIN(FLASH_IN, D, 2);
// interrupt assignments
LITE_ASSIGN_PIN(INT0, E, 4);
LITE_ASSIGN_PIN(INT1, E, 5);
LITE_ASSIGN_PIN(INT2, E, 6);
LITE_ASSIGN_PIN(INT3, E, 7);
     bf8:	81 b1       	in	r24, 0x01	; 1
LITE_ASSIGN_PIN(UART_XCK0, E, 2);
LITE_ASSIGN_PIN(AC_NEG, E, 3);  // RFID Reader Red LED
LITE_ASSIGN_PIN(UART_RXD1, D, 2);
LITE_ASSIGN_PIN(UART_TXD1, D, 3);
LITE_ASSIGN_PIN(UART_XCK1, D, 5);
LITE_ALIAS_PIN(TONE_DECODE_SIGNAL, INT3);
     bfa:	88 1f       	adc	r24, r24
     bfc:	88 27       	eor	r24, r24
     bfe:	88 1f       	adc	r24, r24
     c00:	08 95       	ret

00000c02 <LITE_MAKE_TONE_DECODE_SIGNAL_OUTPUT>:
     c02:	0e 94 b6 04 	call	0x96c	; 0x96c <LITE_MAKE_INT3_OUTPUT>
     c06:	08 95       	ret

00000c08 <LITE_MAKE_TONE_DECODE_SIGNAL_INPUT>:
     c08:	0e 94 b8 04 	call	0x970	; 0x970 <LITE_MAKE_INT3_INPUT>
     c0c:	08 95       	ret

00000c0e <LITE_SET_PHOTO_CTL_PIN>:
LITE_ALIAS_PIN(PHOTO_CTL, INT1);
     c0e:	0e 94 88 04 	call	0x910	; 0x910 <LITE_SET_INT1_PIN>
     c12:	08 95       	ret

00000c14 <LITE_CLR_PHOTO_CTL_PIN>:
     c14:	0e 94 8a 04 	call	0x914	; 0x914 <LITE_CLR_INT1_PIN>
     c18:	08 95       	ret

00000c1a <LITE_READ_PHOTO_CTL_PIN>:
     c1a:	0e 94 8c 04 	call	0x918	; 0x918 <LITE_READ_INT1_PIN>
     c1e:	08 95       	ret

00000c20 <LITE_MAKE_PHOTO_CTL_OUTPUT>:
     c20:	0e 94 94 04 	call	0x928	; 0x928 <LITE_MAKE_INT1_OUTPUT>
     c24:	08 95       	ret

00000c26 <LITE_MAKE_PHOTO_CTL_INPUT>:
     c26:	0e 94 96 04 	call	0x92c	; 0x92c <LITE_MAKE_INT1_INPUT>
     c2a:	08 95       	ret

00000c2c <LITE_SET_TEMP_CTL_PIN>:
LITE_ALIAS_PIN(TEMP_CTL, INT2);
     c2c:	0e 94 98 04 	call	0x930	; 0x930 <LITE_SET_INT2_PIN>
     c30:	08 95       	ret

00000c32 <LITE_CLR_TEMP_CTL_PIN>:
     c32:	0e 94 9a 04 	call	0x934	; 0x934 <LITE_CLR_INT2_PIN>
     c36:	08 95       	ret

00000c38 <LITE_READ_TEMP_CTL_PIN>:
     c38:	0e 94 9c 04 	call	0x938	; 0x938 <LITE_READ_INT2_PIN>
     c3c:	08 95       	ret

00000c3e <LITE_MAKE_TEMP_CTL_OUTPUT>:
     c3e:	0e 94 a4 04 	call	0x948	; 0x948 <LITE_MAKE_INT2_OUTPUT>
     c42:	08 95       	ret

00000c44 <LITE_MAKE_TEMP_CTL_INPUT>:
     c44:	0e 94 a6 04 	call	0x94c	; 0x94c <LITE_MAKE_INT2_INPUT>
     c48:	08 95       	ret

00000c4a <LITE_SET_MIC_CTL_PIN>:
LITE_ALIAS_OUTPUT_ONLY_PIN(MIC_CTL, PW3);
     c4a:	0e 94 18 05 	call	0xa30	; 0xa30 <LITE_SET_PW3_PIN>
     c4e:	08 95       	ret

00000c50 <LITE_CLR_MIC_CTL_PIN>:
     c50:	0e 94 1a 05 	call	0xa34	; 0xa34 <LITE_CLR_PW3_PIN>
     c54:	08 95       	ret

00000c56 <LITE_MAKE_MIC_CTL_OUTPUT>:
     c56:	08 95       	ret

00000c58 <LITE_SET_SOUNDER_CTL_PIN>:
LITE_ALIAS_OUTPUT_ONLY_PIN(SOUNDER_CTL, PW2);
     c58:	0e 94 08 05 	call	0xa10	; 0xa10 <LITE_SET_PW2_PIN>
     c5c:	08 95       	ret

00000c5e <LITE_CLR_SOUNDER_CTL_PIN>:
     c5e:	0e 94 0a 05 	call	0xa14	; 0xa14 <LITE_CLR_PW2_PIN>
     c62:	08 95       	ret

00000c64 <LITE_MAKE_SOUNDER_CTL_OUTPUT>:
     c64:	08 95       	ret

00000c66 <LITE_SET_ACCEL_CTL_PIN>:
LITE_ALIAS_OUTPUT_ONLY_PIN(ACCEL_CTL, PW4);
     c66:	0e 94 28 05 	call	0xa50	; 0xa50 <LITE_SET_PW4_PIN>
     c6a:	08 95       	ret

00000c6c <LITE_CLR_ACCEL_CTL_PIN>:
     c6c:	0e 94 2a 05 	call	0xa54	; 0xa54 <LITE_CLR_PW4_PIN>
     c70:	08 95       	ret

00000c72 <LITE_MAKE_ACCEL_CTL_OUTPUT>:
     c72:	08 95       	ret

00000c74 <LITE_SET_MAG_CTL_PIN>:
LITE_ALIAS_OUTPUT_ONLY_PIN(MAG_CTL, PW5);
     c74:	0e 94 38 05 	call	0xa70	; 0xa70 <LITE_SET_PW5_PIN>
     c78:	08 95       	ret

00000c7a <LITE_CLR_MAG_CTL_PIN>:
     c7a:	0e 94 3a 05 	call	0xa74	; 0xa74 <LITE_CLR_PW5_PIN>
     c7e:	08 95       	ret

00000c80 <LITE_MAKE_MAG_CTL_OUTPUT>:
     c80:	08 95       	ret

00000c82 <LITE_SET_MIC_MUX_SEL_PIN>:
LITE_ALIAS_OUTPUT_ONLY_PIN(MIC_MUX_SEL, PW6);
     c82:	0e 94 48 05 	call	0xa90	; 0xa90 <LITE_SET_PW6_PIN>
     c86:	08 95       	ret

00000c88 <LITE_CLR_MIC_MUX_SEL_PIN>:
     c88:	0e 94 4a 05 	call	0xa94	; 0xa94 <LITE_CLR_PW6_PIN>
     c8c:	08 95       	ret

00000c8e <LITE_MAKE_MIC_MUX_SEL_OUTPUT>:
     c8e:	08 95       	ret

00000c90 <LITE_SET_PIN_DIRECTIONS>:
       outp(0x00, DDRB);
       outp(0x00, DDRD);
       outp(0x02, DDRE);
       outp(0x02, PORTE);
     */
    LITE_MAKE_RED_LED_OUTPUT();
     c90:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <LITE_MAKE_RED_LED_OUTPUT>
    LITE_MAKE_YELLOW_LED_OUTPUT();
     c94:	0e 94 02 04 	call	0x804	; 0x804 <LITE_MAKE_YELLOW_LED_OUTPUT>
    LITE_MAKE_GREEN_LED_OUTPUT();
     c98:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <LITE_MAKE_GREEN_LED_OUTPUT>
    LITE_MAKE_PW7_OUTPUT();
     c9c:	0e 94 66 05 	call	0xacc	; 0xacc <LITE_MAKE_PW7_OUTPUT>
    LITE_MAKE_PW6_OUTPUT();
     ca0:	0e 94 54 05 	call	0xaa8	; 0xaa8 <LITE_MAKE_PW6_OUTPUT>
    LITE_MAKE_PW5_OUTPUT();
     ca4:	0e 94 44 05 	call	0xa88	; 0xa88 <LITE_MAKE_PW5_OUTPUT>
    LITE_MAKE_PW4_OUTPUT();
     ca8:	0e 94 34 05 	call	0xa68	; 0xa68 <LITE_MAKE_PW4_OUTPUT>
    LITE_MAKE_PW3_OUTPUT();
     cac:	0e 94 24 05 	call	0xa48	; 0xa48 <LITE_MAKE_PW3_OUTPUT>
    LITE_MAKE_PW2_OUTPUT();
     cb0:	0e 94 14 05 	call	0xa28	; 0xa28 <LITE_MAKE_PW2_OUTPUT>
    LITE_MAKE_PW1_OUTPUT();
     cb4:	0e 94 04 05 	call	0xa08	; 0xa08 <LITE_MAKE_PW1_OUTPUT>
    LITE_MAKE_PW0_OUTPUT();
     cb8:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <LITE_MAKE_PW0_OUTPUT>
    LITE_MAKE_SERIAL_ID_INPUT();
     cbc:	0e 94 14 04 	call	0x828	; 0x828 <LITE_MAKE_SERIAL_ID_INPUT>
    LITE_CLR_SERIAL_ID_PIN();   // Prevent sourcing current
     cc0:	0e 94 08 04 	call	0x810	; 0x810 <LITE_CLR_SERIAL_ID_PIN>
    LITE_MAKE_FLASH_SELECT_OUTPUT();
     cc4:	0e 94 44 04 	call	0x888	; 0x888 <LITE_MAKE_FLASH_SELECT_OUTPUT>
    LITE_MAKE_FLASH_OUT_OUTPUT();
     cc8:	0e 94 64 04 	call	0x8c8	; 0x8c8 <LITE_MAKE_FLASH_OUT_OUTPUT>
    LITE_MAKE_FLASH_CLK_OUTPUT();
     ccc:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LITE_MAKE_FLASH_CLK_OUTPUT>
    LITE_SET_FLASH_SELECT_PIN();
     cd0:	0e 94 38 04 	call	0x870	; 0x870 <LITE_SET_FLASH_SELECT_PIN>
    LITE_SET_RED_LED_PIN();
     cd4:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <LITE_SET_RED_LED_PIN>
    LITE_SET_YELLOW_LED_PIN();
     cd8:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <LITE_SET_YELLOW_LED_PIN>
    LITE_SET_GREEN_LED_PIN();
     cdc:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <LITE_SET_GREEN_LED_PIN>
}
     ce0:	08 95       	ret

00000ce2 <CC2420_FIFOP_INT_MODE>:

#include "micazhardware.h"

void inline CC2420_FIFOP_INT_MODE(bool LowToHigh)
{
    sbi(EICRB, ISC61);          // edge mode
     ce2:	9a b7       	in	r25, 0x3a	; 58
     ce4:	90 62       	ori	r25, 0x20	; 32
     ce6:	9a bf       	out	0x3a, r25	; 58
    if (LowToHigh)
     ce8:	88 23       	and	r24, r24
     cea:	19 f0       	breq	.+6      	; 0xcf2 <CC2420_FIFOP_INT_MODE+0x10>
    {
        sbi(EICRB, ISC60);
     cec:	8a b7       	in	r24, 0x3a	; 58
     cee:	80 61       	ori	r24, 0x10	; 16
     cf0:	02 c0       	rjmp	.+4      	; 0xcf6 <CC2420_FIFOP_INT_MODE+0x14>
    }                           //trigger on rising level
    else
    {
        cbi(EICRB, ISC60);
     cf2:	8a b7       	in	r24, 0x3a	; 58
     cf4:	8f 7e       	andi	r24, 0xEF	; 239
     cf6:	8a bf       	out	0x3a, r24	; 58
     cf8:	08 95       	ret

00000cfa <LITE_SET_CC_RSTN_PIN>:




//-------------------------------------------------------------------------
LITE_ASSIGN_PIN(CC_RSTN, A, 6); // chipcon reset
     cfa:	de 9a       	sbi	0x1b, 6	; 27
     cfc:	08 95       	ret

00000cfe <LITE_CLR_CC_RSTN_PIN>:
     cfe:	de 98       	cbi	0x1b, 6	; 27
     d00:	08 95       	ret

00000d02 <LITE_READ_CC_RSTN_PIN>:
     d02:	21 e0       	ldi	r18, 0x01	; 1
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	ce 99       	sbic	0x19, 6	; 25
     d08:	02 c0       	rjmp	.+4      	; 0xd0e <LITE_READ_CC_RSTN_PIN+0xc>
     d0a:	20 e0       	ldi	r18, 0x00	; 0
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	c9 01       	movw	r24, r18
     d10:	08 95       	ret

00000d12 <LITE_MAKE_CC_RSTN_OUTPUT>:
     d12:	d6 9a       	sbi	0x1a, 6	; 26
     d14:	08 95       	ret

00000d16 <LITE_MAKE_CC_RSTN_INPUT>:
     d16:	d6 98       	cbi	0x1a, 6	; 26
     d18:	08 95       	ret

00000d1a <LITE_SET_CC_VREN_PIN>:
LITE_ASSIGN_PIN(CC_VREN, A, 5); // chipcon power enable
     d1a:	dd 9a       	sbi	0x1b, 5	; 27
     d1c:	08 95       	ret

00000d1e <LITE_CLR_CC_VREN_PIN>:
     d1e:	dd 98       	cbi	0x1b, 5	; 27
     d20:	08 95       	ret

00000d22 <LITE_READ_CC_VREN_PIN>:
     d22:	21 e0       	ldi	r18, 0x01	; 1
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	cd 99       	sbic	0x19, 5	; 25
     d28:	02 c0       	rjmp	.+4      	; 0xd2e <LITE_READ_CC_VREN_PIN+0xc>
     d2a:	20 e0       	ldi	r18, 0x00	; 0
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	c9 01       	movw	r24, r18
     d30:	08 95       	ret

00000d32 <LITE_MAKE_CC_VREN_OUTPUT>:
     d32:	d5 9a       	sbi	0x1a, 5	; 26
     d34:	08 95       	ret

00000d36 <LITE_MAKE_CC_VREN_INPUT>:
     d36:	d5 98       	cbi	0x1a, 5	; 26
     d38:	08 95       	ret

00000d3a <LITE_SET_CC_FIFOP_PIN>:
//LITE_ASSIGN_PIN(CC_FIFOP1, D, 7);  // fifo interrupt
LITE_ASSIGN_PIN(CC_FIFOP, E, 6);        // fifo interrupt
     d3a:	1e 9a       	sbi	0x03, 6	; 3
     d3c:	08 95       	ret

00000d3e <LITE_CLR_CC_FIFOP_PIN>:
     d3e:	1e 98       	cbi	0x03, 6	; 3
     d40:	08 95       	ret

00000d42 <LITE_READ_CC_FIFOP_PIN>:
     d42:	21 e0       	ldi	r18, 0x01	; 1
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	0e 99       	sbic	0x01, 6	; 1
     d48:	02 c0       	rjmp	.+4      	; 0xd4e <LITE_READ_CC_FIFOP_PIN+0xc>
     d4a:	20 e0       	ldi	r18, 0x00	; 0
     d4c:	30 e0       	ldi	r19, 0x00	; 0
     d4e:	c9 01       	movw	r24, r18
     d50:	08 95       	ret

00000d52 <LITE_MAKE_CC_FIFOP_OUTPUT>:
     d52:	16 9a       	sbi	0x02, 6	; 2
     d54:	08 95       	ret

00000d56 <LITE_MAKE_CC_FIFOP_INPUT>:
     d56:	16 98       	cbi	0x02, 6	; 2
     d58:	08 95       	ret

00000d5a <LITE_SET_CC_FIFOP1_PIN>:
LITE_ASSIGN_PIN(CC_FIFOP1, E, 6);       // fifo interrupt
     d5a:	1e 9a       	sbi	0x03, 6	; 3
     d5c:	08 95       	ret

00000d5e <LITE_CLR_CC_FIFOP1_PIN>:
     d5e:	1e 98       	cbi	0x03, 6	; 3
     d60:	08 95       	ret

00000d62 <LITE_READ_CC_FIFOP1_PIN>:
     d62:	21 e0       	ldi	r18, 0x01	; 1
     d64:	30 e0       	ldi	r19, 0x00	; 0
     d66:	0e 99       	sbic	0x01, 6	; 1
     d68:	02 c0       	rjmp	.+4      	; 0xd6e <LITE_READ_CC_FIFOP1_PIN+0xc>
     d6a:	20 e0       	ldi	r18, 0x00	; 0
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	c9 01       	movw	r24, r18
     d70:	08 95       	ret

00000d72 <LITE_MAKE_CC_FIFOP1_OUTPUT>:
     d72:	16 9a       	sbi	0x02, 6	; 2
     d74:	08 95       	ret

00000d76 <LITE_MAKE_CC_FIFOP1_INPUT>:
     d76:	16 98       	cbi	0x02, 6	; 2
     d78:	08 95       	ret

00000d7a <LITE_SET_CC_CCA_PIN>:
LITE_ASSIGN_PIN(CC_CCA, D, 6);  // 
     d7a:	96 9a       	sbi	0x12, 6	; 18
     d7c:	08 95       	ret

00000d7e <LITE_CLR_CC_CCA_PIN>:
     d7e:	96 98       	cbi	0x12, 6	; 18
     d80:	08 95       	ret

00000d82 <LITE_READ_CC_CCA_PIN>:
     d82:	21 e0       	ldi	r18, 0x01	; 1
     d84:	30 e0       	ldi	r19, 0x00	; 0
     d86:	86 99       	sbic	0x10, 6	; 16
     d88:	02 c0       	rjmp	.+4      	; 0xd8e <LITE_READ_CC_CCA_PIN+0xc>
     d8a:	20 e0       	ldi	r18, 0x00	; 0
     d8c:	30 e0       	ldi	r19, 0x00	; 0
     d8e:	c9 01       	movw	r24, r18
     d90:	08 95       	ret

00000d92 <LITE_MAKE_CC_CCA_OUTPUT>:
     d92:	8e 9a       	sbi	0x11, 6	; 17
     d94:	08 95       	ret

00000d96 <LITE_MAKE_CC_CCA_INPUT>:
     d96:	8e 98       	cbi	0x11, 6	; 17
     d98:	08 95       	ret

00000d9a <LITE_SET_CC_SFD_PIN>:
LITE_ASSIGN_PIN(CC_SFD, D, 4);  // chipcon packet arrival
     d9a:	94 9a       	sbi	0x12, 4	; 18
     d9c:	08 95       	ret

00000d9e <LITE_CLR_CC_SFD_PIN>:
     d9e:	94 98       	cbi	0x12, 4	; 18
     da0:	08 95       	ret

00000da2 <LITE_READ_CC_SFD_PIN>:
     da2:	21 e0       	ldi	r18, 0x01	; 1
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	84 99       	sbic	0x10, 4	; 16
     da8:	02 c0       	rjmp	.+4      	; 0xdae <LITE_READ_CC_SFD_PIN+0xc>
     daa:	20 e0       	ldi	r18, 0x00	; 0
     dac:	30 e0       	ldi	r19, 0x00	; 0
     dae:	c9 01       	movw	r24, r18
     db0:	08 95       	ret

00000db2 <LITE_MAKE_CC_SFD_OUTPUT>:
     db2:	8c 9a       	sbi	0x11, 4	; 17
     db4:	08 95       	ret

00000db6 <LITE_MAKE_CC_SFD_INPUT>:
     db6:	8c 98       	cbi	0x11, 4	; 17
     db8:	08 95       	ret

00000dba <LITE_SET_CC_CS_PIN>:
LITE_ASSIGN_PIN(CC_CS, B, 0);   // chipcon enable
     dba:	c0 9a       	sbi	0x18, 0	; 24
     dbc:	08 95       	ret

00000dbe <LITE_CLR_CC_CS_PIN>:
     dbe:	c0 98       	cbi	0x18, 0	; 24
     dc0:	08 95       	ret

00000dc2 <LITE_READ_CC_CS_PIN>:
     dc2:	26 b3       	in	r18, 0x16	; 22
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	21 70       	andi	r18, 0x01	; 1
     dc8:	30 70       	andi	r19, 0x00	; 0
     dca:	c9 01       	movw	r24, r18
     dcc:	08 95       	ret

00000dce <LITE_MAKE_CC_CS_OUTPUT>:
     dce:	b8 9a       	sbi	0x17, 0	; 23
     dd0:	08 95       	ret

00000dd2 <LITE_MAKE_CC_CS_INPUT>:
     dd2:	b8 98       	cbi	0x17, 0	; 23
     dd4:	08 95       	ret

00000dd6 <LITE_SET_CC_FIFO_PIN>:
LITE_ASSIGN_PIN(CC_FIFO, B, 7); // chipcon fifo
     dd6:	c7 9a       	sbi	0x18, 7	; 24
     dd8:	08 95       	ret

00000dda <LITE_CLR_CC_FIFO_PIN>:
     dda:	c7 98       	cbi	0x18, 7	; 24
     ddc:	08 95       	ret

00000dde <LITE_READ_CC_FIFO_PIN>:
     dde:	86 b3       	in	r24, 0x16	; 22
     de0:	99 27       	eor	r25, r25
     de2:	87 fd       	sbrc	r24, 7
     de4:	90 95       	com	r25
     de6:	89 2f       	mov	r24, r25
     de8:	88 1f       	adc	r24, r24
     dea:	88 27       	eor	r24, r24
     dec:	88 1f       	adc	r24, r24
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	08 95       	ret

00000df2 <LITE_MAKE_CC_FIFO_OUTPUT>:
     df2:	bf 9a       	sbi	0x17, 7	; 23
     df4:	08 95       	ret

00000df6 <LITE_MAKE_CC_FIFO_INPUT>:
     df6:	bf 98       	cbi	0x17, 7	; 23
     df8:	08 95       	ret

00000dfa <LITE_SET_RADIO_CCA_PIN>:
LITE_ASSIGN_PIN(RADIO_CCA, D, 6);       // 
     dfa:	96 9a       	sbi	0x12, 6	; 18
     dfc:	08 95       	ret

00000dfe <LITE_CLR_RADIO_CCA_PIN>:
     dfe:	96 98       	cbi	0x12, 6	; 18
     e00:	08 95       	ret

00000e02 <LITE_READ_RADIO_CCA_PIN>:
     e02:	21 e0       	ldi	r18, 0x01	; 1
     e04:	30 e0       	ldi	r19, 0x00	; 0
     e06:	86 99       	sbic	0x10, 6	; 16
     e08:	02 c0       	rjmp	.+4      	; 0xe0e <LITE_READ_RADIO_CCA_PIN+0xc>
     e0a:	20 e0       	ldi	r18, 0x00	; 0
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	c9 01       	movw	r24, r18
     e10:	08 95       	ret

00000e12 <LITE_MAKE_RADIO_CCA_OUTPUT>:
     e12:	8e 9a       	sbi	0x11, 6	; 17
     e14:	08 95       	ret

00000e16 <LITE_MAKE_RADIO_CCA_INPUT>:
     e16:	8e 98       	cbi	0x11, 6	; 17
     e18:	08 95       	ret

00000e1a <setCC2420Pins>:

 
void setCC2420Pins(){
 //CC2420 pins  
    LITE_MAKE_MISO_INPUT();
     e1a:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <LITE_MAKE_MISO_INPUT>
    LITE_MAKE_MOSI_OUTPUT();
     e1e:	0e 94 c6 04 	call	0x98c	; 0x98c <LITE_MAKE_MOSI_OUTPUT>
    LITE_MAKE_SPI_SCK_OUTPUT();
     e22:	0e 94 e6 04 	call	0x9cc	; 0x9cc <LITE_MAKE_SPI_SCK_OUTPUT>
    LITE_MAKE_CC_RSTN_OUTPUT();
     e26:	0e 94 89 06 	call	0xd12	; 0xd12 <LITE_MAKE_CC_RSTN_OUTPUT>
    LITE_MAKE_CC_VREN_OUTPUT();
     e2a:	0e 94 99 06 	call	0xd32	; 0xd32 <LITE_MAKE_CC_VREN_OUTPUT>
    LITE_MAKE_CC_CS_INPUT();
     e2e:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <LITE_MAKE_CC_CS_INPUT>
    LITE_MAKE_CC_FIFOP1_INPUT();
     e32:	0e 94 bb 06 	call	0xd76	; 0xd76 <LITE_MAKE_CC_FIFOP1_INPUT>
    LITE_MAKE_CC_CCA_INPUT();
     e36:	0e 94 cb 06 	call	0xd96	; 0xd96 <LITE_MAKE_CC_CCA_INPUT>
    LITE_MAKE_CC_SFD_INPUT();
     e3a:	0e 94 db 06 	call	0xdb6	; 0xdb6 <LITE_MAKE_CC_SFD_INPUT>
    LITE_MAKE_CC_FIFO_INPUT();
     e3e:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <LITE_MAKE_CC_FIFO_INPUT>
    LITE_MAKE_RADIO_CCA_INPUT();
     e42:	0e 94 0b 07 	call	0xe16	; 0xe16 <LITE_MAKE_RADIO_CCA_INPUT>
   
  }
     e46:	08 95       	ret

00000e48 <initUSART>:

//No need to be called from main 
//This function is called when the system is being initilized and prints system start 
void initUSART()
{
    UBRR0H = 0;
     e48:	10 92 90 00 	sts	0x0090, r1
    UBRR0L = 15;
     e4c:	8f e0       	ldi	r24, 0x0F	; 15
     e4e:	89 b9       	out	0x09, r24	; 9
    UCSR0A |= _BV(U2X0);        // double speed
     e50:	59 9a       	sbi	0x0b, 1	; 11
    UCSR0C |= _BV(UCSZ01) | _BV(UCSZ00);        // 8 data-bits, 1 stop-bit
     e52:	e5 e9       	ldi	r30, 0x95	; 149
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	80 81       	ld	r24, Z
     e58:	86 60       	ori	r24, 0x06	; 6
     e5a:	80 83       	st	Z, r24
    UCSR0B |= _BV(RXCIE0) | _BV(RXEN0) | _BV(TXEN0);
     e5c:	8a b1       	in	r24, 0x0a	; 10
     e5e:	88 69       	ori	r24, 0x98	; 152
     e60:	8a b9       	out	0x0a, r24	; 10
    // Enable recieve/transmit/interrupts
    cFlag = 1;
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	80 93 89 03 	sts	0x0389, r24
    previous = 0;
     e68:	10 92 8a 03 	sts	0x038A, r1
    status = 0;
     e6c:	10 92 8b 03 	sts	0x038B, r1
}
     e70:	08 95       	ret

00000e72 <usartPrint>:

//-------------------------------------------------------------------------
void usartPrint(uint8_t c)
{
     e72:	df 93       	push	r29
     e74:	cf 93       	push	r28
     e76:	0f 92       	push	r0
     e78:	cd b7       	in	r28, 0x3d	; 61
     e7a:	de b7       	in	r29, 0x3e	; 62
    if (cFlag == 0)
     e7c:	90 91 89 03 	lds	r25, 0x0389
     e80:	99 23       	and	r25, r25
     e82:	21 f4       	brne	.+8      	; 0xe8c <usartPrint+0x1a>
    {
        initUSART();
     e84:	89 83       	std	Y+1, r24	; 0x01
     e86:	0e 94 24 07 	call	0xe48	; 0xe48 <initUSART>
     e8a:	89 81       	ldd	r24, Y+1	; 0x01
    }
    while ((UCSR0A & (1 << UDRE0)) == 0)
     e8c:	5d 9b       	sbis	0x0b, 5	; 11
     e8e:	fe cf       	rjmp	.-4      	; 0xe8c <usartPrint+0x1a>
        ;
    UDR0 = c;
     e90:	8c b9       	out	0x0c, r24	; 12
}
     e92:	0f 90       	pop	r0
     e94:	cf 91       	pop	r28
     e96:	df 91       	pop	r29
     e98:	08 95       	ret

00000e9a <usartPrint_base>:

void usartPrint_base(uint8_t c)
{
     e9a:	df 93       	push	r29
     e9c:	cf 93       	push	r28
     e9e:	0f 92       	push	r0
     ea0:	cd b7       	in	r28, 0x3d	; 61
     ea2:	de b7       	in	r29, 0x3e	; 62
    if (cFlag == 0)
     ea4:	90 91 89 03 	lds	r25, 0x0389
     ea8:	99 23       	and	r25, r25
     eaa:	21 f4       	brne	.+8      	; 0xeb4 <usartPrint_base+0x1a>
    {
        initUSART();
     eac:	89 83       	std	Y+1, r24	; 0x01
     eae:	0e 94 24 07 	call	0xe48	; 0xe48 <initUSART>
     eb2:	89 81       	ldd	r24, Y+1	; 0x01
    }
    while ((UCSR0A & (1 << UDRE0)) == 0)
     eb4:	5d 9b       	sbis	0x0b, 5	; 11
     eb6:	fe cf       	rjmp	.-4      	; 0xeb4 <usartPrint_base+0x1a>
        ;
    UDR0 = c;
     eb8:	8c b9       	out	0x0c, r24	; 12
}
     eba:	0f 90       	pop	r0
     ebc:	cf 91       	pop	r28
     ebe:	df 91       	pop	r29
     ec0:	08 95       	ret

00000ec2 <printString>:



//-------------------------------------------------------------------------
void printString(char *p)
{
     ec2:	ef 92       	push	r14
     ec4:	ff 92       	push	r15
     ec6:	0f 93       	push	r16
     ec8:	1f 93       	push	r17
     eca:	df 93       	push	r29
     ecc:	cf 93       	push	r28
     ece:	0f 92       	push	r0
     ed0:	cd b7       	in	r28, 0x3d	; 61
     ed2:	de b7       	in	r29, 0x3e	; 62
     ed4:	18 2f       	mov	r17, r24
    usartPrint(0xFC);
     ed6:	8c ef       	ldi	r24, 0xFC	; 252
     ed8:	99 83       	std	Y+1, r25	; 0x01
     eda:	0e 94 39 07 	call	0xe72	; 0xe72 <usartPrint>
     ede:	99 81       	ldd	r25, Y+1	; 0x01
     ee0:	61 2f       	mov	r22, r17
     ee2:	79 2f       	mov	r23, r25
     ee4:	8b 01       	movw	r16, r22
    while ((*p) != '\0')
     ee6:	02 c0       	rjmp	.+4      	; 0xeec <printString+0x2a>
    {
        usartPrint(*p);
     ee8:	0e 94 39 07 	call	0xe72	; 0xe72 <usartPrint>

//-------------------------------------------------------------------------
void printString(char *p)
{
    usartPrint(0xFC);
    while ((*p) != '\0')
     eec:	f8 01       	movw	r30, r16
     eee:	81 91       	ld	r24, Z+
     ef0:	8f 01       	movw	r16, r30
     ef2:	88 23       	and	r24, r24
     ef4:	c9 f7       	brne	.-14     	; 0xee8 <printString+0x26>
    {
        usartPrint(*p);
        p++;
    }
    usartPrint(0xFC);
     ef6:	8c ef       	ldi	r24, 0xFC	; 252
     ef8:	0e 94 39 07 	call	0xe72	; 0xe72 <usartPrint>
}
     efc:	0f 90       	pop	r0
     efe:	cf 91       	pop	r28
     f00:	df 91       	pop	r29
     f02:	1f 91       	pop	r17
     f04:	0f 91       	pop	r16
     f06:	ff 90       	pop	r15
     f08:	ef 90       	pop	r14
     f0a:	08 95       	ret

00000f0c <printStringN>:

//-------------------------------------------------------------------------
void printStringN(char *p, uint8_t n)
{
     f0c:	ef 92       	push	r14
     f0e:	ff 92       	push	r15
     f10:	0f 93       	push	r16
     f12:	1f 93       	push	r17
     f14:	df 93       	push	r29
     f16:	cf 93       	push	r28
     f18:	0f 92       	push	r0
     f1a:	cd b7       	in	r28, 0x3d	; 61
     f1c:	de b7       	in	r29, 0x3e	; 62
     f1e:	18 2f       	mov	r17, r24
     f20:	06 2f       	mov	r16, r22
    uint8_t i;

    usartPrint(0xFC);
     f22:	8c ef       	ldi	r24, 0xFC	; 252
     f24:	99 83       	std	Y+1, r25	; 0x01
     f26:	0e 94 39 07 	call	0xe72	; 0xe72 <usartPrint>
    for (i = 0; i < n; i++)
     f2a:	99 81       	ldd	r25, Y+1	; 0x01
     f2c:	61 2f       	mov	r22, r17
     f2e:	79 2f       	mov	r23, r25
     f30:	7b 01       	movw	r14, r22
     f32:	05 c0       	rjmp	.+10     	; 0xf3e <printStringN+0x32>
    {
        usartPrint(*p);
     f34:	f7 01       	movw	r30, r14
     f36:	81 91       	ld	r24, Z+
     f38:	7f 01       	movw	r14, r30
     f3a:	0e 94 39 07 	call	0xe72	; 0xe72 <usartPrint>
void printStringN(char *p, uint8_t n)
{
    uint8_t i;

    usartPrint(0xFC);
    for (i = 0; i < n; i++)
     f3e:	8e 2d       	mov	r24, r14
     f40:	81 1b       	sub	r24, r17
     f42:	80 17       	cp	r24, r16
     f44:	b8 f3       	brcs	.-18     	; 0xf34 <printStringN+0x28>
    {
        usartPrint(*p);
        p++;
    }
    usartPrint(0xFC);
     f46:	8c ef       	ldi	r24, 0xFC	; 252
     f48:	0e 94 39 07 	call	0xe72	; 0xe72 <usartPrint>
}
     f4c:	0f 90       	pop	r0
     f4e:	cf 91       	pop	r28
     f50:	df 91       	pop	r29
     f52:	1f 91       	pop	r17
     f54:	0f 91       	pop	r16
     f56:	ff 90       	pop	r15
     f58:	ef 90       	pop	r14
     f5a:	08 95       	ret

00000f5c <printStringN_base>:


//-------------------------------------------------------------------------
void printStringN_base(char *p, uint8_t n)
{
     f5c:	ef 92       	push	r14
     f5e:	ff 92       	push	r15
     f60:	1f 93       	push	r17
     f62:	df 93       	push	r29
     f64:	cf 93       	push	r28
     f66:	0f 92       	push	r0
     f68:	cd b7       	in	r28, 0x3d	; 61
     f6a:	de b7       	in	r29, 0x3e	; 62
     f6c:	18 2f       	mov	r17, r24
    uint8_t i;

    //usartPrint(0xFC);
    for (i = 0; i < n; i++)
     f6e:	e1 2f       	mov	r30, r17
     f70:	f9 2f       	mov	r31, r25
     f72:	7f 01       	movw	r14, r30
     f74:	07 c0       	rjmp	.+14     	; 0xf84 <printStringN_base+0x28>
    {
        usartPrint_base(*p);
     f76:	f7 01       	movw	r30, r14
     f78:	81 91       	ld	r24, Z+
     f7a:	7f 01       	movw	r14, r30
     f7c:	69 83       	std	Y+1, r22	; 0x01
     f7e:	0e 94 4d 07 	call	0xe9a	; 0xe9a <usartPrint_base>
     f82:	69 81       	ldd	r22, Y+1	; 0x01
void printStringN_base(char *p, uint8_t n)
{
    uint8_t i;

    //usartPrint(0xFC);
    for (i = 0; i < n; i++)
     f84:	8e 2d       	mov	r24, r14
     f86:	81 1b       	sub	r24, r17
     f88:	86 17       	cp	r24, r22
     f8a:	a8 f3       	brcs	.-22     	; 0xf76 <printStringN_base+0x1a>
    {
        usartPrint_base(*p);
        p++;
    }
    //usartPrint(0xFC);
}
     f8c:	0f 90       	pop	r0
     f8e:	cf 91       	pop	r28
     f90:	df 91       	pop	r29
     f92:	1f 91       	pop	r17
     f94:	ff 90       	pop	r15
     f96:	ef 90       	pop	r14
     f98:	08 95       	ret

00000f9a <usartPutChipHex>:


//-------------------------------------------------------------------------
void usartPutChipHex(uint8_t cChip)
{
    if (cChip > 9)
     f9a:	8a 30       	cpi	r24, 0x0A	; 10
     f9c:	10 f0       	brcs	.+4      	; 0xfa2 <usartPutChipHex+0x8>
    {
        usartPrint('a' + cChip - 10);
     f9e:	89 5a       	subi	r24, 0xA9	; 169
     fa0:	01 c0       	rjmp	.+2      	; 0xfa4 <usartPutChipHex+0xa>
    }
    else
    {
        usartPrint('0' + cChip);
     fa2:	80 5d       	subi	r24, 0xD0	; 208
     fa4:	0e 94 39 07 	call	0xe72	; 0xe72 <usartPrint>
     fa8:	08 95       	ret

00000faa <usartPutLong2>:
    }
}

//-------------------------------------------------------------------------
void usartPutLong2(uint32_t l)
{
     faa:	df 93       	push	r29
     fac:	cf 93       	push	r28
     fae:	00 d0       	rcall	.+0      	; 0xfb0 <usartPutLong2+0x6>
     fb0:	00 d0       	rcall	.+0      	; 0xfb2 <usartPutLong2+0x8>
     fb2:	cd b7       	in	r28, 0x3d	; 61
     fb4:	de b7       	in	r29, 0x3e	; 62
     fb6:	69 83       	std	Y+1, r22	; 0x01
     fb8:	7a 83       	std	Y+2, r23	; 0x02
     fba:	8b 83       	std	Y+3, r24	; 0x03
     fbc:	9c 83       	std	Y+4, r25	; 0x04
    uint8_t *pcByte = ((uint8_t *) (&l)) + 3;

    usartPrint(*pcByte);
     fbe:	8c 81       	ldd	r24, Y+4	; 0x04
     fc0:	0e 94 39 07 	call	0xe72	; 0xe72 <usartPrint>
    pcByte--;
    usartPrint(*pcByte);
     fc4:	8b 81       	ldd	r24, Y+3	; 0x03
     fc6:	0e 94 39 07 	call	0xe72	; 0xe72 <usartPrint>
    pcByte--;
    usartPrint(*pcByte);
     fca:	8a 81       	ldd	r24, Y+2	; 0x02
     fcc:	0e 94 39 07 	call	0xe72	; 0xe72 <usartPrint>
    pcByte--;
    usartPrint(*pcByte);
     fd0:	89 81       	ldd	r24, Y+1	; 0x01
     fd2:	0e 94 39 07 	call	0xe72	; 0xe72 <usartPrint>
}
     fd6:	0f 90       	pop	r0
     fd8:	0f 90       	pop	r0
     fda:	0f 90       	pop	r0
     fdc:	0f 90       	pop	r0
     fde:	cf 91       	pop	r28
     fe0:	df 91       	pop	r29
     fe2:	08 95       	ret

00000fe4 <usartPutHex>:

//-------------------------------------------------------------------------
void usartPutHex(uint8_t c)
{
     fe4:	1f 93       	push	r17
     fe6:	18 2f       	mov	r17, r24
    usartPutChipHex(c >> 4);
     fe8:	82 95       	swap	r24
     fea:	8f 70       	andi	r24, 0x0F	; 15
     fec:	0e 94 cd 07 	call	0xf9a	; 0xf9a <usartPutChipHex>
    usartPutChipHex(c & 0xf);
     ff0:	81 2f       	mov	r24, r17
     ff2:	8f 70       	andi	r24, 0x0F	; 15
     ff4:	0e 94 cd 07 	call	0xf9a	; 0xf9a <usartPutChipHex>
}
     ff8:	1f 91       	pop	r17
     ffa:	08 95       	ret

00000ffc <printInteger32>:

//-------------------------------------------------------------------------
void printInteger32(int32_t a)
{
     ffc:	ef 92       	push	r14
     ffe:	ff 92       	push	r15
    1000:	0f 93       	push	r16
    1002:	1f 93       	push	r17
    1004:	7b 01       	movw	r14, r22
    1006:	8c 01       	movw	r16, r24
    usartPrint(0xFD);
    1008:	8d ef       	ldi	r24, 0xFD	; 253
    100a:	0e 94 39 07 	call	0xe72	; 0xe72 <usartPrint>
    usartPutLong2(*(uint32_t *) (&a));
    100e:	c8 01       	movw	r24, r16
    1010:	b7 01       	movw	r22, r14
    1012:	0e 94 d5 07 	call	0xfaa	; 0xfaa <usartPutLong2>
    usartPrint(0xFD);
    1016:	8d ef       	ldi	r24, 0xFD	; 253
    1018:	0e 94 39 07 	call	0xe72	; 0xe72 <usartPrint>
}
    101c:	1f 91       	pop	r17
    101e:	0f 91       	pop	r16
    1020:	ff 90       	pop	r15
    1022:	ef 90       	pop	r14
    1024:	08 95       	ret

00001026 <printIntegerU32>:

//-------------------------------------------------------------------------
void printIntegerU32(uint32_t l)
{
    1026:	ef 92       	push	r14
    1028:	ff 92       	push	r15
    102a:	0f 93       	push	r16
    102c:	1f 93       	push	r17
    102e:	7b 01       	movw	r14, r22
    1030:	8c 01       	movw	r16, r24
    usartPrint(0xFE);
    1032:	8e ef       	ldi	r24, 0xFE	; 254
    1034:	0e 94 39 07 	call	0xe72	; 0xe72 <usartPrint>
    usartPutLong2(l);
    1038:	c8 01       	movw	r24, r16
    103a:	b7 01       	movw	r22, r14
    103c:	0e 94 d5 07 	call	0xfaa	; 0xfaa <usartPutLong2>
    usartPrint(0xFE);
    1040:	8e ef       	ldi	r24, 0xFE	; 254
    1042:	0e 94 39 07 	call	0xe72	; 0xe72 <usartPrint>
}
    1046:	1f 91       	pop	r17
    1048:	0f 91       	pop	r16
    104a:	ff 90       	pop	r15
    104c:	ef 90       	pop	r14
    104e:	08 95       	ret

00001050 <printStringLn>:


void printStringLn()
{
	  usartPrint(0xFC);
    1050:	8c ef       	ldi	r24, 0xFC	; 252
    1052:	0e 94 39 07 	call	0xe72	; 0xe72 <usartPrint>
    usartPrint(0x6D);
    1056:	8d e6       	ldi	r24, 0x6D	; 109
    1058:	0e 94 39 07 	call	0xe72	; 0xe72 <usartPrint>
    usartPrint(0x6D);
    105c:	8d e6       	ldi	r24, 0x6D	; 109
    105e:	0e 94 39 07 	call	0xe72	; 0xe72 <usartPrint>
    usartPrint(0x6D);
    1062:	8d e6       	ldi	r24, 0x6D	; 109
    1064:	0e 94 39 07 	call	0xe72	; 0xe72 <usartPrint>
    usartPrint(0xFC);
    1068:	8c ef       	ldi	r24, 0xFC	; 252
    106a:	0e 94 39 07 	call	0xe72	; 0xe72 <usartPrint>
    
}
    106e:	08 95       	ret

00001070 <usartPutLong>:
//-------------------------------------------------------------------------
void usartPutLong(uint32_t l)
{
    1070:	df 93       	push	r29
    1072:	cf 93       	push	r28
    1074:	00 d0       	rcall	.+0      	; 0x1076 <usartPutLong+0x6>
    1076:	00 d0       	rcall	.+0      	; 0x1078 <usartPutLong+0x8>
    1078:	cd b7       	in	r28, 0x3d	; 61
    107a:	de b7       	in	r29, 0x3e	; 62
    107c:	69 83       	std	Y+1, r22	; 0x01
    107e:	7a 83       	std	Y+2, r23	; 0x02
    1080:	8b 83       	std	Y+3, r24	; 0x03
    1082:	9c 83       	std	Y+4, r25	; 0x04
    uint8_t *pcByte = ((uint8_t *) (&l)) + 3;

    usartPrint('0');
    1084:	80 e3       	ldi	r24, 0x30	; 48
    1086:	0e 94 39 07 	call	0xe72	; 0xe72 <usartPrint>
    usartPrint('x');
    108a:	88 e7       	ldi	r24, 0x78	; 120
    108c:	0e 94 39 07 	call	0xe72	; 0xe72 <usartPrint>
    usartPutHex(*pcByte);
    1090:	8c 81       	ldd	r24, Y+4	; 0x04
    1092:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <usartPutHex>
    pcByte--;
    usartPutHex(*pcByte);
    1096:	8b 81       	ldd	r24, Y+3	; 0x03
    1098:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <usartPutHex>
    pcByte--;
    usartPutHex(*pcByte);
    109c:	8a 81       	ldd	r24, Y+2	; 0x02
    109e:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <usartPutHex>
    pcByte--;
    usartPutHex(*pcByte);
    10a2:	89 81       	ldd	r24, Y+1	; 0x01
    10a4:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <usartPutHex>
}
    10a8:	0f 90       	pop	r0
    10aa:	0f 90       	pop	r0
    10ac:	0f 90       	pop	r0
    10ae:	0f 90       	pop	r0
    10b0:	cf 91       	pop	r28
    10b2:	df 91       	pop	r29
    10b4:	08 95       	ret

000010b6 <printInteger>:

//-------------------------------------------------------------------------
void printInteger(int32_t a, int32_t b, int32_t c, int32_t d)
{
    10b6:	2f 92       	push	r2
    10b8:	3f 92       	push	r3
    10ba:	4f 92       	push	r4
    10bc:	5f 92       	push	r5
    10be:	6f 92       	push	r6
    10c0:	7f 92       	push	r7
    10c2:	8f 92       	push	r8
    10c4:	9f 92       	push	r9
    10c6:	af 92       	push	r10
    10c8:	bf 92       	push	r11
    10ca:	cf 92       	push	r12
    10cc:	df 92       	push	r13
    10ce:	ef 92       	push	r14
    10d0:	ff 92       	push	r15
    10d2:	0f 93       	push	r16
    10d4:	1f 93       	push	r17
    10d6:	1b 01       	movw	r2, r22
    10d8:	2c 01       	movw	r4, r24
    10da:	39 01       	movw	r6, r18
    10dc:	4a 01       	movw	r8, r20
    usartPrint(1);
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	0e 94 39 07 	call	0xe72	; 0xe72 <usartPrint>
    usartPutLong(*(uint32_t *) (&a));
    10e4:	c2 01       	movw	r24, r4
    10e6:	b1 01       	movw	r22, r2
    10e8:	0e 94 38 08 	call	0x1070	; 0x1070 <usartPutLong>
    usartPutLong(*(uint32_t *) (&b));
    10ec:	c4 01       	movw	r24, r8
    10ee:	b3 01       	movw	r22, r6
    10f0:	0e 94 38 08 	call	0x1070	; 0x1070 <usartPutLong>
    usartPutLong(*(uint32_t *) (&c));
    10f4:	c8 01       	movw	r24, r16
    10f6:	b7 01       	movw	r22, r14
    10f8:	0e 94 38 08 	call	0x1070	; 0x1070 <usartPutLong>
    usartPutLong(*(uint32_t *) (&d));
    10fc:	c6 01       	movw	r24, r12
    10fe:	b5 01       	movw	r22, r10
    1100:	0e 94 38 08 	call	0x1070	; 0x1070 <usartPutLong>
}
    1104:	1f 91       	pop	r17
    1106:	0f 91       	pop	r16
    1108:	ff 90       	pop	r15
    110a:	ef 90       	pop	r14
    110c:	df 90       	pop	r13
    110e:	cf 90       	pop	r12
    1110:	bf 90       	pop	r11
    1112:	af 90       	pop	r10
    1114:	9f 90       	pop	r9
    1116:	8f 90       	pop	r8
    1118:	7f 90       	pop	r7
    111a:	6f 90       	pop	r6
    111c:	5f 90       	pop	r5
    111e:	4f 90       	pop	r4
    1120:	3f 90       	pop	r3
    1122:	2f 90       	pop	r2
    1124:	08 95       	ret

00001126 <__vector_18>:


SIGNAL(USART0_RX_vect)
{
    1126:	1f 92       	push	r1
    1128:	0f 92       	push	r0
    112a:	0f b6       	in	r0, 0x3f	; 63
    112c:	0f 92       	push	r0
    112e:	0b b6       	in	r0, 0x3b	; 59
    1130:	0f 92       	push	r0
    1132:	11 24       	eor	r1, r1
    1134:	ff 92       	push	r15
    1136:	0f 93       	push	r16
    1138:	1f 93       	push	r17
    113a:	2f 93       	push	r18
    113c:	3f 93       	push	r19
    113e:	4f 93       	push	r20
    1140:	5f 93       	push	r21
    1142:	6f 93       	push	r22
    1144:	7f 93       	push	r23
    1146:	8f 93       	push	r24
    1148:	9f 93       	push	r25
    114a:	af 93       	push	r26
    114c:	bf 93       	push	r27
    114e:	ef 93       	push	r30
    1150:	ff 93       	push	r31
    uint8_t dummy = UDR0;
    1152:	0c b1       	in	r16, 0x0c	; 12
    uint8_t i;
    uint8_t isthreadtrue;
    _atomic_t _atomic;

    isthreadtrue = 0;
    _atomic = _atomic_start();
    1154:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>
    1158:	f8 2e       	mov	r15, r24
	
	Leds_greenOn();
    115a:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <Leds_greenOn>
	Leds_yellowOn();
    115e:	0e 94 16 1a 	call	0x342c	; 0x342c <Leds_yellowOn>
    if (is_thread())
    1162:	0e 94 30 15 	call	0x2a60	; 0x2a60 <is_thread>
    1166:	88 23       	and	r24, r24
    1168:	71 f0       	breq	.+28     	; 0x1186 <__vector_18+0x60>
    {
        isthreadtrue = 1;
        SWAP_STACK_PTR(stackinterrupt_ptr, old_stack_ptr);
    116a:	2d b7       	in	r18, 0x3d	; 61
    116c:	3e b7       	in	r19, 0x3e	; 62
    116e:	30 93 a4 09 	sts	0x09A4, r19
    1172:	20 93 a3 09 	sts	0x09A3, r18
    1176:	20 91 1f 09 	lds	r18, 0x091F
    117a:	30 91 20 09 	lds	r19, 0x0920
    117e:	3e bf       	out	0x3e, r19	; 62
    1180:	2d bf       	out	0x3d, r18	; 61
	
	Leds_greenOn();
	Leds_yellowOn();
    if (is_thread())
    {
        isthreadtrue = 1;
    1182:	11 e0       	ldi	r17, 0x01	; 1
    1184:	01 c0       	rjmp	.+2      	; 0x1188 <__vector_18+0x62>
    uint8_t portnum, length;
    uint8_t i;
    uint8_t isthreadtrue;
    _atomic_t _atomic;

    isthreadtrue = 0;
    1186:	10 e0       	ldi	r17, 0x00	; 0
    if (is_thread())
    {
        isthreadtrue = 1;
        SWAP_STACK_PTR(stackinterrupt_ptr, old_stack_ptr);
    }
    _atomic_end(_atomic);
    1188:	8f 2d       	mov	r24, r15
    118a:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
    if (dummy == 'a')
    118e:	01 36       	cpi	r16, 0x61	; 97
    1190:	b9 f4       	brne	.+46     	; 0x11c0 <__vector_18+0x9a>
    {
        _atomic_t _atomic = _atomic_start();
    1192:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>

        while (!(UCSR0A & (1 << RXC0)))
    1196:	5f 9b       	sbis	0x0b, 7	; 11
    1198:	fe cf       	rjmp	.-4      	; 0x1196 <__vector_18+0x70>
            ;
        portnum = UDR0;
    119a:	9c b1       	in	r25, 0x0c	; 12
        portnum = portnum - 48;
        while (!(UCSR0A & (1 << RXC0)))
    119c:	5f 9b       	sbis	0x0b, 7	; 11
    119e:	fe cf       	rjmp	.-4      	; 0x119c <__vector_18+0x76>
            ;
        length = UDR0;
    11a0:	2c b1       	in	r18, 0x0c	; 12
    11a2:	e8 e6       	ldi	r30, 0x68	; 104
    11a4:	f3 e0       	ldi	r31, 0x03	; 3
        length = length - 48;
    11a6:	20 53       	subi	r18, 0x30	; 48
    usartPutLong(*(uint32_t *) (&c));
    usartPutLong(*(uint32_t *) (&d));
}


SIGNAL(USART0_RX_vect)
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	2e 0f       	add	r18, r30
    11ac:	3f 1f       	adc	r19, r31
        portnum = portnum - 48;
        while (!(UCSR0A & (1 << RXC0)))
            ;
        length = UDR0;
        length = length - 48;
        for (i = 0; i < length; i++)
    11ae:	04 c0       	rjmp	.+8      	; 0x11b8 <__vector_18+0x92>
        {
            while (!(UCSR0A & (1 << RXC0)))
    11b0:	5f 9b       	sbis	0x0b, 7	; 11
    11b2:	fe cf       	rjmp	.-4      	; 0x11b0 <__vector_18+0x8a>
                ;
            receivebuffer[currentindex++] = UDR0;
    11b4:	9c b1       	in	r25, 0x0c	; 12
    11b6:	91 93       	st	Z+, r25
        portnum = portnum - 48;
        while (!(UCSR0A & (1 << RXC0)))
            ;
        length = UDR0;
        length = length - 48;
        for (i = 0; i < length; i++)
    11b8:	e2 17       	cp	r30, r18
    11ba:	f3 07       	cpc	r31, r19
    11bc:	c9 f7       	brne	.-14     	; 0x11b0 <__vector_18+0x8a>
    11be:	0e c0       	rjmp	.+28     	; 0x11dc <__vector_18+0xb6>
        //initCommandReceived(receivebuffer); 
        //serialDeliverPacket(((uint16_t) portnum), ((uint8_t) length),
                            //&receivebuffer[0]);
        currentindex = 0;
    }
    else if (dummy == 'z')
    11c0:	0a 37       	cpi	r16, 0x7A	; 122
    11c2:	71 f4       	brne	.+28     	; 0x11e0 <__vector_18+0xba>
    {
        _atomic_t _atomic = _atomic_start();
    11c4:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>
    11c8:	e8 e6       	ldi	r30, 0x68	; 104
    11ca:	f3 e0       	ldi	r31, 0x03	; 3

        for (i = 0; i < 33; i++)
        {
            while (!(UCSR0A & (1 << RXC0)))
    11cc:	5f 9b       	sbis	0x0b, 7	; 11
    11ce:	fe cf       	rjmp	.-4      	; 0x11cc <__vector_18+0xa6>
                ;
            receivebuffer[currentindex++] = UDR0;
    11d0:	9c b1       	in	r25, 0x0c	; 12
    11d2:	91 93       	st	Z+, r25
    }
    else if (dummy == 'z')
    {
        _atomic_t _atomic = _atomic_start();

        for (i = 0; i < 33; i++)
    11d4:	93 e0       	ldi	r25, 0x03	; 3
    11d6:	e9 38       	cpi	r30, 0x89	; 137
    11d8:	f9 07       	cpc	r31, r25
    11da:	c1 f7       	brne	.-16     	; 0x11cc <__vector_18+0xa6>
        {
            while (!(UCSR0A & (1 << RXC0)))
                ;
            receivebuffer[currentindex++] = UDR0;
        }
        _atomic_end(_atomic);
    11dc:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
        //initCommandReceived(receivebuffer);
        currentindex = 0;
    }
    _atomic = _atomic_start();
    11e0:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>
    if (isthreadtrue == 1)
    11e4:	11 30       	cpi	r17, 0x01	; 1
    11e6:	61 f4       	brne	.+24     	; 0x1200 <__vector_18+0xda>
    {
        isthreadtrue = 0;
        SWAP_STACK_PTR(old_stack_ptr, stackinterrupt_ptr);
    11e8:	2d b7       	in	r18, 0x3d	; 61
    11ea:	3e b7       	in	r19, 0x3e	; 62
    11ec:	30 93 20 09 	sts	0x0920, r19
    11f0:	20 93 1f 09 	sts	0x091F, r18
    11f4:	20 91 a3 09 	lds	r18, 0x09A3
    11f8:	30 91 a4 09 	lds	r19, 0x09A4
    11fc:	3e bf       	out	0x3e, r19	; 62
    11fe:	2d bf       	out	0x3d, r18	; 61
        //thread_yield();   
    }
    _atomic_end(_atomic);
    1200:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
    // if (is_thread())
    // {
    //   SWAP_STACK_PTR( old_stack_ptr, stackinterrupt_ptr);
    //  thread_yield();   
    // }
}
    1204:	ff 91       	pop	r31
    1206:	ef 91       	pop	r30
    1208:	bf 91       	pop	r27
    120a:	af 91       	pop	r26
    120c:	9f 91       	pop	r25
    120e:	8f 91       	pop	r24
    1210:	7f 91       	pop	r23
    1212:	6f 91       	pop	r22
    1214:	5f 91       	pop	r21
    1216:	4f 91       	pop	r20
    1218:	3f 91       	pop	r19
    121a:	2f 91       	pop	r18
    121c:	1f 91       	pop	r17
    121e:	0f 91       	pop	r16
    1220:	ff 90       	pop	r15
    1222:	0f 90       	pop	r0
    1224:	0b be       	out	0x3b, r0	; 59
    1226:	0f 90       	pop	r0
    1228:	0f be       	out	0x3f, r0	; 63
    122a:	0f 90       	pop	r0
    122c:	1f 90       	pop	r1
    122e:	18 95       	reti

00001230 <printfstr>:
#include "../avrserial/serialprint.h"
#endif


void printfstr(char *str)
{
    1230:	1f 93       	push	r17
    1232:	cf 93       	push	r28
    1234:	df 93       	push	r29
    1236:	ec 01       	movw	r28, r24
	
	_atomic_t currentatomic;

    currentatomic = _atomic_start();
    1238:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>
    123c:	18 2f       	mov	r17, r24
#ifdef PLATFORM_AVR
		#ifdef PRINT_SOURCE_ENABLED
	  printString(node_readnodestring());
    123e:	0e 94 97 03 	call	0x72e	; 0x72e <node_readnodestring>
    1242:	0e 94 61 07 	call	0xec2	; 0xec2 <printString>
	  printString(": ");
    1246:	86 e4       	ldi	r24, 0x46	; 70
    1248:	91 e0       	ldi	r25, 0x01	; 1
    124a:	0e 94 61 07 	call	0xec2	; 0xec2 <printString>
	  #endif
    printString(str);
    124e:	ce 01       	movw	r24, r28
    1250:	0e 94 61 07 	call	0xec2	; 0xec2 <printString>
#endif
  _atomic_end(currentatomic);
    1254:	81 2f       	mov	r24, r17
    1256:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
}
    125a:	df 91       	pop	r29
    125c:	cf 91       	pop	r28
    125e:	1f 91       	pop	r17
    1260:	08 95       	ret

00001262 <printfstrln>:

void printfstrln()
 {
    1262:	df 93       	push	r29
    1264:	cf 93       	push	r28
    1266:	0f 92       	push	r0
    1268:	cd b7       	in	r28, 0x3d	; 61
    126a:	de b7       	in	r29, 0x3e	; 62
 	_atomic_t currentatomic;

    currentatomic = _atomic_start();
    126c:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>
  #ifdef PLATFORM_AVR
     printStringLn();
    1270:	89 83       	std	Y+1, r24	; 0x01
    1272:	0e 94 28 08 	call	0x1050	; 0x1050 <printStringLn>
  #endif
  _atomic_end(currentatomic);
    1276:	89 81       	ldd	r24, Y+1	; 0x01
    1278:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
  
 }
    127c:	0f 90       	pop	r0
    127e:	cf 91       	pop	r28
    1280:	df 91       	pop	r29
    1282:	08 95       	ret

00001284 <printfinteger32>:
 

 
//-------------------------------------------------------------------------
void printfinteger32(int32_t val)
{
    1284:	df 92       	push	r13
    1286:	ef 92       	push	r14
    1288:	ff 92       	push	r15
    128a:	0f 93       	push	r16
    128c:	1f 93       	push	r17
    128e:	7b 01       	movw	r14, r22
    1290:	8c 01       	movw	r16, r24
	_atomic_t currentatomic;

    currentatomic = _atomic_start();
    1292:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>
    1296:	d8 2e       	mov	r13, r24
#ifdef PLATFORM_AVR
	#ifdef PRINT_SOURCE_ENABLED
	  printString(node_readnodestring());
    1298:	0e 94 97 03 	call	0x72e	; 0x72e <node_readnodestring>
    129c:	0e 94 61 07 	call	0xec2	; 0xec2 <printString>
	  printString(": ");
    12a0:	86 e4       	ldi	r24, 0x46	; 70
    12a2:	91 e0       	ldi	r25, 0x01	; 1
    12a4:	0e 94 61 07 	call	0xec2	; 0xec2 <printString>
	#endif
    printInteger32(val);
    12a8:	c8 01       	movw	r24, r16
    12aa:	b7 01       	movw	r22, r14
    12ac:	0e 94 fe 07 	call	0xffc	; 0xffc <printInteger32>
#endif
   _atomic_end(currentatomic); 
    12b0:	8d 2d       	mov	r24, r13
    12b2:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
}
    12b6:	1f 91       	pop	r17
    12b8:	0f 91       	pop	r16
    12ba:	ff 90       	pop	r15
    12bc:	ef 90       	pop	r14
    12be:	df 90       	pop	r13
    12c0:	08 95       	ret

000012c2 <printfuinteger32>:

//-------------------------------------------------------------------------
void printfuinteger32(uint32_t val)
{
    12c2:	df 92       	push	r13
    12c4:	ef 92       	push	r14
    12c6:	ff 92       	push	r15
    12c8:	0f 93       	push	r16
    12ca:	1f 93       	push	r17
    12cc:	7b 01       	movw	r14, r22
    12ce:	8c 01       	movw	r16, r24
	_atomic_t currentatomic;

    currentatomic = _atomic_start();
    12d0:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>
    12d4:	d8 2e       	mov	r13, r24
    
#ifdef PLATFORM_AVR
  #ifdef PRINT_SOURCE_ENABLED
	  printString(node_readnodestring());
    12d6:	0e 94 97 03 	call	0x72e	; 0x72e <node_readnodestring>
    12da:	0e 94 61 07 	call	0xec2	; 0xec2 <printString>
	  printString(": ");
    12de:	86 e4       	ldi	r24, 0x46	; 70
    12e0:	91 e0       	ldi	r25, 0x01	; 1
    12e2:	0e 94 61 07 	call	0xec2	; 0xec2 <printString>
	#endif
    printIntegerU32(val);
    12e6:	c8 01       	movw	r24, r16
    12e8:	b7 01       	movw	r22, r14
    12ea:	0e 94 13 08 	call	0x1026	; 0x1026 <printIntegerU32>
#endif
_atomic_end(currentatomic); 
    12ee:	8d 2d       	mov	r24, r13
    12f0:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
}
    12f4:	1f 91       	pop	r17
    12f6:	0f 91       	pop	r16
    12f8:	ff 90       	pop	r15
    12fa:	ef 90       	pop	r14
    12fc:	df 90       	pop	r13
    12fe:	08 95       	ret

00001300 <AMStandard_Control_init>:
    result_t ok2;
	ok2 = 0; 


#if defined(PLATFORM_AVR) && defined(RADIO_CC2420)
    ok2 = cc2420radiom_SplitControl_init();
    1300:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <cc2420radiom_SplitControl_init>

#if defined(PLATFORM_AVR) && defined(RADIO_RF230)
    ok2 = trx_init();
#endif 

    AMStandard_state = FALSE;
    1304:	10 92 d4 07 	sts	0x07D4, r1
    AMStandard_lastCount = 0;
    1308:	10 92 da 07 	sts	0x07DA, r1
    130c:	10 92 d9 07 	sts	0x07D9, r1
    AMStandard_counter = 0;
    1310:	10 92 d6 07 	sts	0x07D6, r1
    1314:	10 92 d5 07 	sts	0x07D5, r1
    return ok2;
}
    1318:	08 95       	ret

0000131a <AMStandard_socketradiocontrol_start>:
{
    unsigned char result;
	result = 0; 

#if defined(PLATFORM_AVR) && defined(RADIO_CC2420)
    result = cc2420radiom_StdControl_start();
    131a:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <cc2420radiom_StdControl_start>
#endif
    return result;
}
    131e:	08 95       	ret

00001320 <AMStandard_Control_start>:
{
    unsigned char result;
	result = 0; 

#if defined(PLATFORM_AVR) && defined(RADIO_CC2420)
    result = cc2420radiom_StdControl_start();
    1320:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <cc2420radiom_StdControl_start>
//-------------------------------------------------------------------------
inline bool AMStandard_Control_start(void)
{
    result_t ok2 = AMStandard_socketradiocontrol_start();

    AMStandard_state = FALSE;
    1324:	10 92 d4 07 	sts	0x07D4, r1
    return ok2;
}
    1328:	08 95       	ret

0000132a <AMStandard_SendMsg_send>:

//addr means the current broadcast address, et. id is the port 
//Send out a message and takes a while to complete 
result_t AMStandard_SendMsg_send(uint16_t port, uint16_t addr, uint8_t length,
                                 Radio_MsgPtr data)
{
    132a:	cf 92       	push	r12
    132c:	df 92       	push	r13
    132e:	ef 92       	push	r14
    1330:	ff 92       	push	r15
    1332:	0f 93       	push	r16
    1334:	1f 93       	push	r17
    1336:	df 93       	push	r29
    1338:	cf 93       	push	r28
    133a:	0f 92       	push	r0
    133c:	cd b7       	in	r28, 0x3d	; 61
    133e:	de b7       	in	r29, 0x3e	; 62
    1340:	7c 01       	movw	r14, r24
    1342:	6b 01       	movw	r12, r22
    1344:	89 01       	movw	r16, r18
#ifdef TRACE_ENABLE
#ifdef TRACE_ENABLE_RADIOEVENT
    addTrace(TRACE_RADIOEVENT_SENDPACKET, 100);
#endif
#endif
    if (!AMStandard_state)
    1346:	80 91 d4 07 	lds	r24, 0x07D4
    134a:	88 23       	and	r24, r24
    134c:	01 f5       	brne	.+64     	; 0x138e <AMStandard_SendMsg_send+0x64>
    {
        AMStandard_state = TRUE;
    134e:	81 e0       	ldi	r24, 0x01	; 1
    1350:	80 93 d4 07 	sts	0x07D4, r24
        if (length > DATA_LENGTH)
    1354:	45 36       	cpi	r20, 0x65	; 101
    1356:	18 f0       	brcs	.+6      	; 0x135e <AMStandard_SendMsg_send+0x34>
        {
            AMStandard_state = FALSE;
    1358:	10 92 d4 07 	sts	0x07D4, r1
    135c:	18 c0       	rjmp	.+48     	; 0x138e <AMStandard_SendMsg_send+0x64>
            return FAIL;
        }
        if (!postTask(AMStandard_sendTask, 20))
    135e:	8c e2       	ldi	r24, 0x2C	; 44
    1360:	9a e0       	ldi	r25, 0x0A	; 10
    1362:	64 e1       	ldi	r22, 0x14	; 20
    1364:	49 83       	std	Y+1, r20	; 0x01
    1366:	0e 94 88 14 	call	0x2910	; 0x2910 <postTask>
    136a:	49 81       	ldd	r20, Y+1	; 0x01
    136c:	88 23       	and	r24, r24
    136e:	19 f4       	brne	.+6      	; 0x1376 <AMStandard_SendMsg_send+0x4c>
        {
            {
            }
            ;
            AMStandard_state = FALSE;
    1370:	10 92 d4 07 	sts	0x07D4, r1
            return FAIL;
    1374:	0d c0       	rjmp	.+26     	; 0x1390 <AMStandard_SendMsg_send+0x66>
        {
            //length is the first one that means the actual data length
            //adr is the next hop id
            //type is the port
            //group is manmade result 
            AMStandard_buffer = data;
    1376:	10 93 dc 07 	sts	0x07DC, r17
    137a:	00 93 db 07 	sts	0x07DB, r16
            data->length = length;
    137e:	f8 01       	movw	r30, r16
    1380:	40 83       	st	Z, r20
            data->addr = addr;
    1382:	d7 82       	std	Z+7, r13	; 0x07
    1384:	c6 82       	std	Z+6, r12	; 0x06
            data->port = port;
    1386:	f1 86       	std	Z+9, r15	; 0x09
    1388:	e0 86       	std	Z+8, r14	; 0x08
        }
        return SUCCESS;
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	01 c0       	rjmp	.+2      	; 0x1390 <AMStandard_SendMsg_send+0x66>
    }
    return FAIL;
    138e:	80 e0       	ldi	r24, 0x00	; 0
}
    1390:	0f 90       	pop	r0
    1392:	cf 91       	pop	r28
    1394:	df 91       	pop	r29
    1396:	1f 91       	pop	r17
    1398:	0f 91       	pop	r16
    139a:	ff 90       	pop	r15
    139c:	ef 90       	pop	r14
    139e:	df 90       	pop	r13
    13a0:	cf 90       	pop	r12
    13a2:	08 95       	ret

000013a4 <AMStandard_SendMsg_default_sendDone>:
//-------------------------------------------------------------------------
inline result_t AMStandard_SendMsg_default_sendDone(uint8_t id, Radio_MsgPtr
                                                    msg, result_t success)
{
    return SUCCESS;
}
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	08 95       	ret

000013a8 <AMStandard_SendMsg_sendDone>:
inline result_t AMStandard_SendMsg_sendDone(uint16_t arg_0xa3b8f90,
                                            Radio_MsgPtr arg_0xa31a0a0,
                                            result_t arg_0xa31a1f0)
{
    return 0;
}
    13a8:	80 e0       	ldi	r24, 0x00	; 0
    13aa:	08 95       	ret

000013ac <AMStandard_default_sendDone>:

//-------------------------------------------------------------------------
inline result_t AMStandard_default_sendDone(void)
{
    return SUCCESS;
}
    13ac:	81 e0       	ldi	r24, 0x01	; 1
    13ae:	08 95       	ret

000013b0 <AMStandard_sendDone>:
{
    unsigned char result;

    result = AMStandard_default_sendDone();
    return result;
}
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    13b2:	08 95       	ret

000013b4 <AMStandard_ReceiveMsg_default_receive>:

//-------------------------------------------------------------------------
inline Radio_MsgPtr AMStandard_ReceiveMsg_default_receive(uint8_t id,
                                                          Radio_MsgPtr msg)
{
    13b4:	cb 01       	movw	r24, r22
    return msg;
}
    13b6:	08 95       	ret

000013b8 <AMStandard_ReceiveMsg_receive>:

//Another critical function that bridges to the application 
inline Radio_MsgPtr AMStandard_ReceiveMsg_receive(uint16_t port, Radio_MsgPtr
                                                  msg)
{
    13b8:	cb 01       	movw	r24, r22
    return msg;
}
    13ba:	08 95       	ret

000013bc <received>:
//Basically it returns a radio message pointer that must be reused 
//and the content of the packet is the correct packet parsed, and is useful 
//The content starts with a length that is the actual payload length and all information are correct
//Must copy this content to the user supplied buffer, put the user action into a task, and then return this buffer to the recevie module 
Radio_MsgPtr received(Radio_MsgPtr packet)
{
    13bc:	ef 92       	push	r14
    13be:	ff 92       	push	r15
    13c0:	cf 93       	push	r28
    13c2:	df 93       	push	r29
    13c4:	ec 01       	movw	r28, r24
    uint16_t addr = CURRENT_NODE_ID;
    13c6:	20 91 c1 07 	lds	r18, 0x07C1
    13ca:	30 91 c2 07 	lds	r19, 0x07C2
#ifdef TRACE_ENABLE_RADIOEVENT
    addTrace(TRACE_RADIOEVENT_RECEIVEPACKET, 100);
#endif
#endif

    debugmsg = packet; 
    13ce:	90 93 d8 07 	sts	0x07D8, r25
    13d2:	80 93 d7 07 	sts	0x07D7, r24
    AMStandard_counter++;
    13d6:	80 91 d5 07 	lds	r24, 0x07D5
    13da:	90 91 d6 07 	lds	r25, 0x07D6
    13de:	01 96       	adiw	r24, 0x01	; 1
    13e0:	90 93 d6 07 	sts	0x07D6, r25
    13e4:	80 93 d5 07 	sts	0x07D5, r24
    if (packet->crc == 1 && (packet->addr == BCAST_ADDRESS || packet->addr ==
    13e8:	fe 01       	movw	r30, r28
    13ea:	e0 59       	subi	r30, 0x90	; 144
    13ec:	ff 4f       	sbci	r31, 0xFF	; 255
    13ee:	80 81       	ld	r24, Z
    13f0:	81 30       	cpi	r24, 0x01	; 1
    13f2:	89 f4       	brne	.+34     	; 0x1416 <received+0x5a>
    13f4:	8e 81       	ldd	r24, Y+6	; 0x06
    13f6:	9f 81       	ldd	r25, Y+7	; 0x07
    13f8:	4f ef       	ldi	r20, 0xFF	; 255
    13fa:	8f 3f       	cpi	r24, 0xFF	; 255
    13fc:	94 07       	cpc	r25, r20
    13fe:	19 f0       	breq	.+6      	; 0x1406 <received+0x4a>
    1400:	82 17       	cp	r24, r18
    1402:	93 07       	cpc	r25, r19
    1404:	41 f4       	brne	.+16     	; 0x1416 <received+0x5a>
                             addr))
    {
        uint16_t port = packet->port;
        Radio_MsgPtr tmp;

        tmp = Standard_Receive_Packet(port, packet);
    1406:	88 85       	ldd	r24, Y+8	; 0x08
    1408:	99 85       	ldd	r25, Y+9	; 0x09
    140a:	be 01       	movw	r22, r28
    140c:	0e 94 92 0a 	call	0x1524	; 0x1524 <Standard_Receive_Packet>
        if (tmp)
    1410:	00 97       	sbiw	r24, 0x00	; 0
    1412:	09 f0       	breq	.+2      	; 0x1416 <received+0x5a>
    1414:	ec 01       	movw	r28, r24
        {
            packet = tmp;
        }
    }
    return packet;
}
    1416:	ce 01       	movw	r24, r28
    1418:	df 91       	pop	r29
    141a:	cf 91       	pop	r28
    141c:	ff 90       	pop	r15
    141e:	ef 90       	pop	r14
    1420:	08 95       	ret

00001422 <AMStandard_RadioReceive_receive>:

//-------------------------------------------------------------------------
inline Radio_MsgPtr AMStandard_RadioReceive_receive(Radio_MsgPtr packet)
{
   #if defined(PLATFORM_AVR) && defined(RADIO_CC2420)
   return received( packet );
    1422:	0e 94 de 09 	call	0x13bc	; 0x13bc <received>
   #if defined(PLATFORM_AVR) && defined(RADIO_RF230)
   return received_iris( packet );
   #endif

     
}
    1426:	08 95       	ret

00001428 <AMStandard_RadioSend_sendDone>:
}

//-------------------------------------------------------------------------
result_t AMStandard_reportSendDone(Radio_MsgPtr msg, result_t success)
{
    AMStandard_state = FALSE;
    1428:	10 92 d4 07 	sts	0x07D4, r1
//-------------------------------------------------------------------------
inline result_t AMStandard_RadioSend_sendDone(Radio_MsgPtr msg, result_t
                                              success)
{
    return AMStandard_reportSendDone(msg, success);
}
    142c:	81 e0       	ldi	r24, 0x01	; 1
    142e:	08 95       	ret

00001430 <AMStandard_reportSendDone>:

//-------------------------------------------------------------------------
result_t AMStandard_reportSendDone(Radio_MsgPtr msg, result_t success)
{
    AMStandard_state = FALSE;
    1430:	10 92 d4 07 	sts	0x07D4, r1
    //  AMStandard_SendMsg_sendDone(msg->port, msg, success);
    //  AMStandard_sendDone();
    return SUCCESS;
}
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	08 95       	ret

00001438 <restoreRadioState>:

//-------------------------------------------------------------------------
inline void restoreRadioState()
{
    AMStandard_state = FALSE;
    1438:	10 92 d4 07 	sts	0x07D4, r1
#if defined(PLATFORM_AVR) && defined (RADIO_CC2420)
    restorecc2420state();
    143c:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <restorecc2420state>
#endif
}
    1440:	08 95       	ret

00001442 <AMStandard_RadioSend_send>:
    return ok2;
}

//-------------------------------------------------------------------------
inline result_t AMStandard_RadioSend_send(Radio_MsgPtr arg_0xa3c31f8)
{
    1442:	cf 93       	push	r28
    1444:	df 93       	push	r29
    1446:	ec 01       	movw	r28, r24
    unsigned char result;

    //Every time send, restore first. 
    
    restoreRadioState();
    1448:	0e 94 1c 0a 	call	0x1438	; 0x1438 <restoreRadioState>
    
#if defined(PLATFORM_AVR) && defined(RADIO_CC2420)
    result = cc2420radiom_Send_send(arg_0xa3c31f8);
    144c:	ce 01       	movw	r24, r28
    144e:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <cc2420radiom_Send_send>
   trx_init();
   result = rf230radio_Send_send(arg_0xa3c31f8);
#endif

    return result;
}
    1452:	df 91       	pop	r29
    1454:	cf 91       	pop	r28
    1456:	08 95       	ret

00001458 <AMStandard_sendTask>:
{
    result_t ok;
    Radio_MsgPtr buf;

    buf = AMStandard_buffer;
    ok = AMStandard_RadioSend_send(buf);
    1458:	80 91 db 07 	lds	r24, 0x07DB
    145c:	90 91 dc 07 	lds	r25, 0x07DC
    1460:	0e 94 21 0a 	call	0x1442	; 0x1442 <AMStandard_RadioSend_send>
    if (ok == FAIL)
    1464:	88 23       	and	r24, r24
    1466:	11 f4       	brne	.+4      	; 0x146c <AMStandard_sendTask+0x14>
}

//-------------------------------------------------------------------------
result_t AMStandard_reportSendDone(Radio_MsgPtr msg, result_t success)
{
    AMStandard_state = FALSE;
    1468:	10 92 d4 07 	sts	0x07D4, r1
    146c:	08 95       	ret

0000146e <initRadioHandle>:
{
    uint8_t i;

    for (i = 0; i < RECEIVE_HANDLE_NUM; i++)
    {
        receivehandles[i].handlevalid = 0;
    146e:	10 92 e8 07 	sts	0x07E8, r1
    1472:	10 92 f4 07 	sts	0x07F4, r1
    1476:	10 92 00 08 	sts	0x0800, r1
    147a:	10 92 0c 08 	sts	0x080C, r1
    147e:	10 92 18 08 	sts	0x0818, r1
    }
	 
}
    1482:	08 95       	ret

00001484 <registerEvent>:
//packetinfo for storing the received packet info on rssi and lqi 
//handle function to be posted 
void registerEvent(uint16_t port, uint8_t maxLength, uint8_t * dataReady,
                   uint8_t * data, uint8_t * packetinfo,
                   void (*handlefunc) (void))
{
    1484:	ef 92       	push	r14
    1486:	ff 92       	push	r15
    1488:	0f 93       	push	r16
    148a:	1f 93       	push	r17
    148c:	e8 ee       	ldi	r30, 0xE8	; 232
    148e:	f7 e0       	ldi	r31, 0x07	; 7
    1490:	a0 e0       	ldi	r26, 0x00	; 0
    1492:	b0 e0       	ldi	r27, 0x00	; 0
    uint8_t i;

    for (i = 0; i < RECEIVE_HANDLE_NUM; i++)
        if (receivehandles[i].handlevalid == 0)
    1494:	70 81       	ld	r23, Z
    1496:	77 23       	and	r23, r23
    1498:	c9 f4       	brne	.+50     	; 0x14cc <registerEvent+0x48>
        {
            receivehandles[i].port = port;
    149a:	fd 01       	movw	r30, r26
    149c:	ee 0f       	add	r30, r30
    149e:	ff 1f       	adc	r31, r31
    14a0:	ea 0f       	add	r30, r26
    14a2:	fb 1f       	adc	r31, r27
    14a4:	ee 0f       	add	r30, r30
    14a6:	ff 1f       	adc	r31, r31
    14a8:	ee 0f       	add	r30, r30
    14aa:	ff 1f       	adc	r31, r31
    14ac:	e1 52       	subi	r30, 0x21	; 33
    14ae:	f8 4f       	sbci	r31, 0xF8	; 248
    14b0:	91 83       	std	Z+1, r25	; 0x01
    14b2:	80 83       	st	Z, r24
            receivehandles[i].maxLength = maxLength;
    14b4:	62 83       	std	Z+2, r22	; 0x02
            receivehandles[i].dataReady = dataReady;
    14b6:	54 83       	std	Z+4, r21	; 0x04
    14b8:	43 83       	std	Z+3, r20	; 0x03
            receivehandles[i].data = data;
    14ba:	36 83       	std	Z+6, r19	; 0x06
    14bc:	25 83       	std	Z+5, r18	; 0x05
            receivehandles[i].packetinfo = packetinfo;
    14be:	10 87       	std	Z+8, r17	; 0x08
    14c0:	07 83       	std	Z+7, r16	; 0x07
            receivehandles[i].handlefunc = handlefunc;
    14c2:	f3 86       	std	Z+11, r15	; 0x0b
    14c4:	e2 86       	std	Z+10, r14	; 0x0a
            receivehandles[i].handlevalid = 1;
    14c6:	81 e0       	ldi	r24, 0x01	; 1
    14c8:	81 87       	std	Z+9, r24	; 0x09
            return;
    14ca:	05 c0       	rjmp	.+10     	; 0x14d6 <registerEvent+0x52>
    14cc:	11 96       	adiw	r26, 0x01	; 1
    14ce:	3c 96       	adiw	r30, 0x0c	; 12
                   uint8_t * data, uint8_t * packetinfo,
                   void (*handlefunc) (void))
{
    uint8_t i;

    for (i = 0; i < RECEIVE_HANDLE_NUM; i++)
    14d0:	a5 30       	cpi	r26, 0x05	; 5
    14d2:	b1 05       	cpc	r27, r1
    14d4:	f9 f6       	brne	.-66     	; 0x1494 <registerEvent+0x10>
            receivehandles[i].packetinfo = packetinfo;
            receivehandles[i].handlefunc = handlefunc;
            receivehandles[i].handlevalid = 1;
            return;
        }
}
    14d6:	1f 91       	pop	r17
    14d8:	0f 91       	pop	r16
    14da:	ff 90       	pop	r15
    14dc:	ef 90       	pop	r14
    14de:	08 95       	ret

000014e0 <deRegisterEvent>:

//-------------------------------------------------------------------------
void deRegisterEvent(uint16_t port)
{
    14e0:	ef ed       	ldi	r30, 0xDF	; 223
    14e2:	f7 e0       	ldi	r31, 0x07	; 7
    14e4:	20 e0       	ldi	r18, 0x00	; 0
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t i;

    for (i = 0; i < RECEIVE_HANDLE_NUM; i++)
        if ((receivehandles[i].handlevalid == 1) && (receivehandles[i].port
    14e8:	41 85       	ldd	r20, Z+9	; 0x09
    14ea:	41 30       	cpi	r20, 0x01	; 1
    14ec:	a1 f4       	brne	.+40     	; 0x1516 <deRegisterEvent+0x36>
    14ee:	40 81       	ld	r20, Z
    14f0:	51 81       	ldd	r21, Z+1	; 0x01
    14f2:	48 17       	cp	r20, r24
    14f4:	59 07       	cpc	r21, r25
    14f6:	79 f4       	brne	.+30     	; 0x1516 <deRegisterEvent+0x36>
                                                     == port))
        {
            receivehandles[i].handlevalid = 0;
    14f8:	f9 01       	movw	r30, r18
    14fa:	ee 0f       	add	r30, r30
    14fc:	ff 1f       	adc	r31, r31
    14fe:	e2 0f       	add	r30, r18
    1500:	f3 1f       	adc	r31, r19
    1502:	ee 0f       	add	r30, r30
    1504:	ff 1f       	adc	r31, r31
    1506:	ee 0f       	add	r30, r30
    1508:	ff 1f       	adc	r31, r31
    150a:	e1 52       	subi	r30, 0x21	; 33
    150c:	f8 4f       	sbci	r31, 0xF8	; 248
    150e:	11 86       	std	Z+9, r1	; 0x09
            receivehandles[i].port = 0;
    1510:	11 82       	std	Z+1, r1	; 0x01
    1512:	10 82       	st	Z, r1
            return;
    1514:	08 95       	ret
    1516:	2f 5f       	subi	r18, 0xFF	; 255
    1518:	3f 4f       	sbci	r19, 0xFF	; 255
    151a:	3c 96       	adiw	r30, 0x0c	; 12
//-------------------------------------------------------------------------
void deRegisterEvent(uint16_t port)
{
    uint8_t i;

    for (i = 0; i < RECEIVE_HANDLE_NUM; i++)
    151c:	25 30       	cpi	r18, 0x05	; 5
    151e:	31 05       	cpc	r19, r1
    1520:	19 f7       	brne	.-58     	; 0x14e8 <deRegisterEvent+0x8>
    1522:	08 95       	ret

00001524 <Standard_Receive_Packet>:
 


//Now this OS has a new packet, needs to deliver it to the correct thread for processing, and return the packet as soon as possible 
Radio_MsgPtr Standard_Receive_Packet(uint16_t port, Radio_MsgPtr packet)
{
    1524:	ff 92       	push	r15
    1526:	0f 93       	push	r16
    1528:	1f 93       	push	r17
    152a:	cf 93       	push	r28
    152c:	df 93       	push	r29
    152e:	8b 01       	movw	r16, r22
    uint8_t i;

    tmp = packet; 
    1530:	70 93 de 07 	sts	0x07DE, r23
    1534:	60 93 dd 07 	sts	0x07DD, r22
    1538:	ef ed       	ldi	r30, 0xDF	; 223
    153a:	f7 e0       	ldi	r31, 0x07	; 7
    153c:	c0 e0       	ldi	r28, 0x00	; 0
    153e:	d0 e0       	ldi	r29, 0x00	; 0
		 
    for (i = 0; i < RECEIVE_HANDLE_NUM; i++)
    {
        if ((receivehandles[i].port == port)
    1540:	20 81       	ld	r18, Z
    1542:	31 81       	ldd	r19, Z+1	; 0x01
    1544:	28 17       	cp	r18, r24
    1546:	39 07       	cpc	r19, r25
    1548:	09 f0       	breq	.+2      	; 0x154c <Standard_Receive_Packet+0x28>
    154a:	5e c0       	rjmp	.+188    	; 0x1608 <Standard_Receive_Packet+0xe4>
            && (receivehandles[i].handlevalid == 1))
    154c:	21 85       	ldd	r18, Z+9	; 0x09
    154e:	21 30       	cpi	r18, 0x01	; 1
    1550:	09 f0       	breq	.+2      	; 0x1554 <Standard_Receive_Packet+0x30>
    1552:	5a c0       	rjmp	.+180    	; 0x1608 <Standard_Receive_Packet+0xe4>
        {
            uint8_t temp;
            uint8_t j;
            uint8_t *buf;

            buf = (uint8_t *) receivehandles[i].data;
    1554:	fe 01       	movw	r30, r28
    1556:	ee 0f       	add	r30, r30
    1558:	ff 1f       	adc	r31, r31
    155a:	ec 0f       	add	r30, r28
    155c:	fd 1f       	adc	r31, r29
    155e:	ee 0f       	add	r30, r30
    1560:	ff 1f       	adc	r31, r31
    1562:	ee 0f       	add	r30, r30
    1564:	ff 1f       	adc	r31, r31
    1566:	e1 52       	subi	r30, 0x21	; 33
    1568:	f8 4f       	sbci	r31, 0xF8	; 248
    156a:	25 81       	ldd	r18, Z+5	; 0x05
    156c:	36 81       	ldd	r19, Z+6	; 0x06
            temp =
    156e:	d8 01       	movw	r26, r16
    1570:	8c 91       	ld	r24, X
    1572:	f2 80       	ldd	r15, Z+2	; 0x02
    1574:	8f 15       	cp	r24, r15
    1576:	08 f4       	brcc	.+2      	; 0x157a <Standard_Receive_Packet+0x56>
    1578:	f8 2e       	mov	r15, r24

 


//Now this OS has a new packet, needs to deliver it to the correct thread for processing, and return the packet as soon as possible 
Radio_MsgPtr Standard_Receive_Packet(uint16_t port, Radio_MsgPtr packet)
    157a:	f8 01       	movw	r30, r16
    157c:	3a 96       	adiw	r30, 0x0a	; 10
            buf = (uint8_t *) receivehandles[i].data;
            temp =
                (packet->length >
                 (receivehandles[i].maxLength) ? (receivehandles[i].
                                                  maxLength) : packet->length);
            for (j = 0; j < temp; j++)
    157e:	80 e0       	ldi	r24, 0x00	; 0
    1580:	05 c0       	rjmp	.+10     	; 0x158c <Standard_Receive_Packet+0x68>
            {
                *buf = packet->data[j];
    1582:	91 91       	ld	r25, Z+
    1584:	d9 01       	movw	r26, r18
    1586:	9d 93       	st	X+, r25
    1588:	9d 01       	movw	r18, r26
            buf = (uint8_t *) receivehandles[i].data;
            temp =
                (packet->length >
                 (receivehandles[i].maxLength) ? (receivehandles[i].
                                                  maxLength) : packet->length);
            for (j = 0; j < temp; j++)
    158a:	8f 5f       	subi	r24, 0xFF	; 255
    158c:	8f 15       	cp	r24, r15
    158e:	c9 f7       	brne	.-14     	; 0x1582 <Standard_Receive_Packet+0x5e>
            {
                *buf = packet->data[j];
                buf++;
            }
            if (receivehandles[i].packetinfo != NULL)
    1590:	fe 01       	movw	r30, r28
    1592:	ee 0f       	add	r30, r30
    1594:	ff 1f       	adc	r31, r31
    1596:	ec 0f       	add	r30, r28
    1598:	fd 1f       	adc	r31, r29
    159a:	ee 0f       	add	r30, r30
    159c:	ff 1f       	adc	r31, r31
    159e:	ee 0f       	add	r30, r30
    15a0:	ff 1f       	adc	r31, r31
    15a2:	e1 52       	subi	r30, 0x21	; 33
    15a4:	f8 4f       	sbci	r31, 0xF8	; 248
    15a6:	07 80       	ldd	r0, Z+7	; 0x07
    15a8:	f0 85       	ldd	r31, Z+8	; 0x08
    15aa:	e0 2d       	mov	r30, r0
    15ac:	30 97       	sbiw	r30, 0x00	; 0
    15ae:	51 f0       	breq	.+20     	; 0x15c4 <Standard_Receive_Packet+0xa0>
            {
                buf = (uint8_t *) receivehandles[i].packetinfo;
                *buf = packet->strength;
    15b0:	d8 01       	movw	r26, r16
    15b2:	a2 59       	subi	r26, 0x92	; 146
    15b4:	bf 4f       	sbci	r27, 0xFF	; 255
    15b6:	8c 91       	ld	r24, X
    15b8:	80 83       	st	Z, r24
                buf++;
                *buf = packet->lqi;
    15ba:	d8 01       	movw	r26, r16
    15bc:	a1 59       	subi	r26, 0x91	; 145
    15be:	bf 4f       	sbci	r27, 0xFF	; 255
    15c0:	8c 91       	ld	r24, X
    15c2:	81 83       	std	Z+1, r24	; 0x01
            }
            if (receivehandles[i].handlefunc != NULL)
    15c4:	fe 01       	movw	r30, r28
    15c6:	ee 0f       	add	r30, r30
    15c8:	ff 1f       	adc	r31, r31
    15ca:	ec 0f       	add	r30, r28
    15cc:	fd 1f       	adc	r31, r29
    15ce:	ee 0f       	add	r30, r30
    15d0:	ff 1f       	adc	r31, r31
    15d2:	ee 0f       	add	r30, r30
    15d4:	ff 1f       	adc	r31, r31
    15d6:	e1 52       	subi	r30, 0x21	; 33
    15d8:	f8 4f       	sbci	r31, 0xF8	; 248
    15da:	82 85       	ldd	r24, Z+10	; 0x0a
    15dc:	93 85       	ldd	r25, Z+11	; 0x0b
    15de:	00 97       	sbiw	r24, 0x00	; 0
    15e0:	19 f0       	breq	.+6      	; 0x15e8 <Standard_Receive_Packet+0xc4>
            {
                postTask(receivehandles[i].handlefunc, 6);
    15e2:	66 e0       	ldi	r22, 0x06	; 6
    15e4:	0e 94 88 14 	call	0x2910	; 0x2910 <postTask>
            }
            //if (*(receivehandles[i].dataReady) == 0) 
            *(receivehandles[i].dataReady) = temp;
    15e8:	fe 01       	movw	r30, r28
    15ea:	ee 0f       	add	r30, r30
    15ec:	ff 1f       	adc	r31, r31
    15ee:	ec 0f       	add	r30, r28
    15f0:	fd 1f       	adc	r31, r29
    15f2:	ee 0f       	add	r30, r30
    15f4:	ff 1f       	adc	r31, r31
    15f6:	ee 0f       	add	r30, r30
    15f8:	ff 1f       	adc	r31, r31
    15fa:	e1 52       	subi	r30, 0x21	; 33
    15fc:	f8 4f       	sbci	r31, 0xF8	; 248
    15fe:	03 80       	ldd	r0, Z+3	; 0x03
    1600:	f4 81       	ldd	r31, Z+4	; 0x04
    1602:	e0 2d       	mov	r30, r0
    1604:	f0 82       	st	Z, r15
            return packet;
    1606:	06 c0       	rjmp	.+12     	; 0x1614 <Standard_Receive_Packet+0xf0>
    1608:	21 96       	adiw	r28, 0x01	; 1
    160a:	3c 96       	adiw	r30, 0x0c	; 12
{
    uint8_t i;

    tmp = packet; 
		 
    for (i = 0; i < RECEIVE_HANDLE_NUM; i++)
    160c:	c5 30       	cpi	r28, 0x05	; 5
    160e:	d1 05       	cpc	r29, r1
    1610:	09 f0       	breq	.+2      	; 0x1614 <Standard_Receive_Packet+0xf0>
    1612:	96 cf       	rjmp	.-212    	; 0x1540 <Standard_Receive_Packet+0x1c>
            *(receivehandles[i].dataReady) = temp;
            return packet;
        }
    }
    return packet;
}
    1614:	c8 01       	movw	r24, r16
    1616:	df 91       	pop	r29
    1618:	cf 91       	pop	r28
    161a:	1f 91       	pop	r17
    161c:	0f 91       	pop	r16
    161e:	ff 90       	pop	r15
    1620:	08 95       	ret

00001622 <deleteThreadRegistrationInReceiverHandles>:

//-------------------------------------------------------------------------
void deleteThreadRegistrationInReceiverHandles(uint8_t * start, uint8_t * end)
{
    1622:	ef ed       	ldi	r30, 0xDF	; 223
    1624:	f7 e0       	ldi	r31, 0x07	; 7
    uint8_t i;

    for (i = 0; i < RECEIVE_HANDLE_NUM; i++)
    {
        if ((receivehandles[i].handlevalid == 1)
    1626:	21 85       	ldd	r18, Z+9	; 0x09
    1628:	21 30       	cpi	r18, 0x01	; 1
    162a:	59 f4       	brne	.+22     	; 0x1642 <deleteThreadRegistrationInReceiverHandles+0x20>
            && (receivehandles[i].dataReady <= end)
    162c:	23 81       	ldd	r18, Z+3	; 0x03
    162e:	34 81       	ldd	r19, Z+4	; 0x04
    1630:	62 17       	cp	r22, r18
    1632:	73 07       	cpc	r23, r19
    1634:	30 f0       	brcs	.+12     	; 0x1642 <deleteThreadRegistrationInReceiverHandles+0x20>
            && (receivehandles[i].dataReady >= start))
    1636:	28 17       	cp	r18, r24
    1638:	39 07       	cpc	r19, r25
    163a:	18 f0       	brcs	.+6      	; 0x1642 <deleteThreadRegistrationInReceiverHandles+0x20>
        {
            receivehandles[i].handlevalid = 0;
    163c:	11 86       	std	Z+9, r1	; 0x09
            receivehandles[i].port = 0;
    163e:	11 82       	std	Z+1, r1	; 0x01
    1640:	10 82       	st	Z, r1
    1642:	3c 96       	adiw	r30, 0x0c	; 12
//-------------------------------------------------------------------------
void deleteThreadRegistrationInReceiverHandles(uint8_t * start, uint8_t * end)
{
    uint8_t i;

    for (i = 0; i < RECEIVE_HANDLE_NUM; i++)
    1644:	28 e0       	ldi	r18, 0x08	; 8
    1646:	eb 31       	cpi	r30, 0x1B	; 27
    1648:	f2 07       	cpc	r31, r18
    164a:	69 f7       	brne	.-38     	; 0x1626 <deleteThreadRegistrationInReceiverHandles+0x4>
        {
            receivehandles[i].handlevalid = 0;
            receivehandles[i].port = 0;
        }
    }
}
    164c:	08 95       	ret

0000164e <cc2420controlm_taskInitDone>:
//-------------------------------------------------------------------------
inline result_t cc2420controlm_SplitControl_initDone(void)
{
    unsigned char result;

    result = cc2420radiom_CC2420SplitControl_initDone();
    164e:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <cc2420radiom_CC2420SplitControl_initDone>

//-------------------------------------------------------------------------
inline void cc2420controlm_taskInitDone(void)
{
    cc2420controlm_SplitControl_initDone();
}
    1652:	08 95       	ret

00001654 <cc2420controlm_CCA_startWait>:
//-------------------------------------------------------------------------
inline result_t cc2420controlm_CCA_startWait(bool arg_0xa422588)
{
    unsigned char result;

    result = hplcc2420interruptm_CCA_startWait(arg_0xa422588);
    1654:	0e 94 7e 11 	call	0x22fc	; 0x22fc <hplcc2420interruptm_CCA_startWait>
    return result;
}
    1658:	08 95       	ret

0000165a <cc2420controlm_CC2420Control_VREFOn>:

//-------------------------------------------------------------------------
inline result_t cc2420controlm_CC2420Control_VREFOn(void)
{
    LITE_SET_CC_VREN_PIN();
    165a:	0e 94 8d 06 	call	0xd1a	; 0xd1a <LITE_SET_CC_VREN_PIN>
    LITE_uwait(600);
    165e:	88 e5       	ldi	r24, 0x58	; 88
    1660:	92 e0       	ldi	r25, 0x02	; 2
    1662:	0e 94 ca 03 	call	0x794	; 0x794 <LITE_uwait>
    return SUCCESS;
}
    1666:	81 e0       	ldi	r24, 0x01	; 1
    1668:	08 95       	ret

0000166a <cc2420controlm_CC2420Control_VREFOff>:

//-------------------------------------------------------------------------
inline result_t cc2420controlm_CC2420Control_VREFOff(void)
{
    LITE_CLR_CC_VREN_PIN();
    166a:	0e 94 8f 06 	call	0xd1e	; 0xd1e <LITE_CLR_CC_VREN_PIN>
    LITE_uwait(600);
    166e:	88 e5       	ldi	r24, 0x58	; 88
    1670:	92 e0       	ldi	r25, 0x02	; 2
    1672:	0e 94 ca 03 	call	0x794	; 0x794 <LITE_uwait>
    return SUCCESS;
}
    1676:	81 e0       	ldi	r24, 0x01	; 1
    1678:	08 95       	ret

0000167a <cc2420controlm_SplitControl_initDone>:
//-------------------------------------------------------------------------
inline result_t cc2420controlm_SplitControl_initDone(void)
{
    unsigned char result;

    result = cc2420radiom_CC2420SplitControl_initDone();
    167a:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <cc2420radiom_CC2420SplitControl_initDone>
    return result;
}
    167e:	08 95       	ret

00001680 <cc2420controlm_HPLChipcon_cmd>:
//-------------------------------------------------------------------------
inline uint8_t cc2420controlm_HPLChipcon_cmd(uint8_t arg_0xa403928)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420_cmd(arg_0xa403928);
    1680:	0e 94 ba 12 	call	0x2574	; 0x2574 <HPLCC2420M_HPLCC2420_cmd>
    return result;
}
    1684:	08 95       	ret

00001686 <cc2420controlm_HPLChipcon_write>:
inline uint8_t cc2420controlm_HPLChipcon_write(uint8_t arg_0xa403d80, uint16_t
                                               arg_0xa403ed0)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420_write(arg_0xa403d80, arg_0xa403ed0);
    1686:	0e 94 89 12 	call	0x2512	; 0x2512 <HPLCC2420M_HPLCC2420_write>
    return result;
}
    168a:	08 95       	ret

0000168c <cc2420controlm_CC2420Control_OscillatorOn>:
inline uint8_t cc2420controlm_HPLChipcon_write(uint8_t arg_0xa403d80, uint16_t
                                               arg_0xa403ed0)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420_write(arg_0xa403d80, arg_0xa403ed0);
    168c:	8d e1       	ldi	r24, 0x1D	; 29
    168e:	68 e1       	ldi	r22, 0x18	; 24
    1690:	70 e0       	ldi	r23, 0x00	; 0
    1692:	0e 94 89 12 	call	0x2512	; 0x2512 <HPLCC2420M_HPLCC2420_write>
//-------------------------------------------------------------------------
inline result_t cc2420controlm_CCA_startWait(bool arg_0xa422588)
{
    unsigned char result;

    result = hplcc2420interruptm_CCA_startWait(arg_0xa422588);
    1696:	81 e0       	ldi	r24, 0x01	; 1
    1698:	0e 94 7e 11 	call	0x22fc	; 0x22fc <hplcc2420interruptm_CCA_startWait>
//-------------------------------------------------------------------------
inline uint8_t cc2420controlm_HPLChipcon_cmd(uint8_t arg_0xa403928)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420_cmd(arg_0xa403928);
    169c:	81 e0       	ldi	r24, 0x01	; 1
    169e:	0e 94 ba 12 	call	0x2574	; 0x2574 <HPLCC2420M_HPLCC2420_cmd>
    i = 0;
    cc2420controlm_HPLChipcon_write(0x1D, 24);
    cc2420controlm_CCA_startWait(TRUE);
    status = cc2420controlm_HPLChipcon_cmd(0x01);
    return SUCCESS;
}
    16a2:	81 e0       	ldi	r24, 0x01	; 1
    16a4:	08 95       	ret

000016a6 <cc2420controlm_HPLChipconControl_start>:
//-------------------------------------------------------------------------
inline result_t cc2420controlm_HPLChipconControl_start(void)
{
    unsigned char result;

    result = HPLTimer1M_StdControl_start();
    16a6:	0e 94 58 13 	call	0x26b0	; 0x26b0 <HPLTimer1M_StdControl_start>
    return result;
}
    16aa:	08 95       	ret

000016ac <cc2420controlm_SplitControl_start>:

//-------------------------------------------------------------------------
inline result_t cc2420controlm_SplitControl_start(void)
{
    16ac:	1f 93       	push	r17
    result_t status;
    uint8_t _state = FALSE;

    {
        _atomic_t _atomic = _atomic_start();
    16ae:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>

        {
            if (cc2420controlm_state == cc2420controlm_INIT_STATE_DONE)
    16b2:	90 91 1b 08 	lds	r25, 0x081B
    16b6:	92 30       	cpi	r25, 0x02	; 2
    16b8:	29 f4       	brne	.+10     	; 0x16c4 <cc2420controlm_SplitControl_start+0x18>
            {
                cc2420controlm_state = cc2420controlm_START_STATE;
    16ba:	93 e0       	ldi	r25, 0x03	; 3
    16bc:	90 93 1b 08 	sts	0x081B, r25
                _state = TRUE;
    16c0:	11 e0       	ldi	r17, 0x01	; 1
    16c2:	01 c0       	rjmp	.+2      	; 0x16c6 <cc2420controlm_SplitControl_start+0x1a>

//-------------------------------------------------------------------------
inline result_t cc2420controlm_SplitControl_start(void)
{
    result_t status;
    uint8_t _state = FALSE;
    16c4:	10 e0       	ldi	r17, 0x00	; 0
            {
                cc2420controlm_state = cc2420controlm_START_STATE;
                _state = TRUE;
            }
        }
        _atomic_end(_atomic);
    16c6:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
    }
    if (!_state)
    16ca:	11 23       	and	r17, r17
    16cc:	79 f0       	breq	.+30     	; 0x16ec <cc2420controlm_SplitControl_start+0x40>
//-------------------------------------------------------------------------
inline result_t cc2420controlm_HPLChipconControl_start(void)
{
    unsigned char result;

    result = HPLTimer1M_StdControl_start();
    16ce:	0e 94 58 13 	call	0x26b0	; 0x26b0 <HPLTimer1M_StdControl_start>
    if (!_state)
    {
        return FAIL;
    }
    cc2420controlm_HPLChipconControl_start();
    cc2420controlm_CC2420Control_VREFOn();
    16d2:	0e 94 2d 0b 	call	0x165a	; 0x165a <cc2420controlm_CC2420Control_VREFOn>
    LITE_CLR_CC_RSTN_PIN();
    16d6:	0e 94 7f 06 	call	0xcfe	; 0xcfe <LITE_CLR_CC_RSTN_PIN>
    wait_cycle();
    16da:	0e 94 b0 03 	call	0x760	; 0x760 <wait_cycle>
    LITE_SET_CC_RSTN_PIN();
    16de:	0e 94 7d 06 	call	0xcfa	; 0xcfa <LITE_SET_CC_RSTN_PIN>
    wait_cycle();
    16e2:	0e 94 b0 03 	call	0x760	; 0x760 <wait_cycle>
    status = cc2420controlm_CC2420Control_OscillatorOn();
    16e6:	0e 94 46 0b 	call	0x168c	; 0x168c <cc2420controlm_CC2420Control_OscillatorOn>
    return status;
    16ea:	01 c0       	rjmp	.+2      	; 0x16ee <cc2420controlm_SplitControl_start+0x42>
        }
        _atomic_end(_atomic);
    }
    if (!_state)
    {
        return FAIL;
    16ec:	80 e0       	ldi	r24, 0x00	; 0
    wait_cycle();
    LITE_SET_CC_RSTN_PIN();
    wait_cycle();
    status = cc2420controlm_CC2420Control_OscillatorOn();
    return status;
}
    16ee:	1f 91       	pop	r17
    16f0:	08 95       	ret

000016f2 <cc2420controlm_CC2420Control_RxMode>:
//-------------------------------------------------------------------------
inline uint8_t cc2420controlm_HPLChipcon_cmd(uint8_t arg_0xa403928)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420_cmd(arg_0xa403928);
    16f2:	83 e0       	ldi	r24, 0x03	; 3
    16f4:	0e 94 ba 12 	call	0x2574	; 0x2574 <HPLCC2420M_HPLCC2420_cmd>
//-------------------------------------------------------------------------
inline result_t cc2420controlm_CC2420Control_RxMode(void)
{
    cc2420controlm_HPLChipcon_cmd(0x03);
    return SUCCESS;
}
    16f8:	81 e0       	ldi	r24, 0x01	; 1
    16fa:	08 95       	ret

000016fc <cc2420controlm_SplitControl_startDone>:
//-------------------------------------------------------------------------
inline result_t cc2420controlm_SplitControl_startDone(void)
{
    unsigned char result;

    result = cc2420radiom_CC2420SplitControl_startDone();
    16fc:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <cc2420radiom_CC2420SplitControl_startDone>
    return result;
}
    1700:	08 95       	ret

00001702 <cc2420controlm_CC2420Control_TuneManual>:
inline result_t cc2420controlm_CC2420Control_TuneManual(uint16_t DesiredFreq)
{
    int fsctrl;
    uint8_t status;

    fsctrl = DesiredFreq - 2048;
    1702:	bc 01       	movw	r22, r24
    1704:	60 50       	subi	r22, 0x00	; 0
    1706:	78 40       	sbci	r23, 0x08	; 8
    cc2420controlm_gCurrentParameters[CP_FSCTRL] =
        (cc2420controlm_gCurrentParameters[CP_FSCTRL] & 0xfc00) | (fsctrl <<
    1708:	80 91 2d 08 	lds	r24, 0x082D
    170c:	90 91 2e 08 	lds	r25, 0x082E
    1710:	80 70       	andi	r24, 0x00	; 0
    1712:	9c 7f       	andi	r25, 0xFC	; 252
    1714:	68 2b       	or	r22, r24
    1716:	79 2b       	or	r23, r25
{
    int fsctrl;
    uint8_t status;

    fsctrl = DesiredFreq - 2048;
    cc2420controlm_gCurrentParameters[CP_FSCTRL] =
    1718:	70 93 2e 08 	sts	0x082E, r23
    171c:	60 93 2d 08 	sts	0x082D, r22
inline uint8_t cc2420controlm_HPLChipcon_write(uint8_t arg_0xa403d80, uint16_t
                                               arg_0xa403ed0)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420_write(arg_0xa403d80, arg_0xa403ed0);
    1720:	88 e1       	ldi	r24, 0x18	; 24
    1722:	0e 94 89 12 	call	0x2512	; 0x2512 <HPLCC2420M_HPLCC2420_write>
        cc2420controlm_HPLChipcon_write(0x18,
                                        cc2420controlm_gCurrentParameters
                                        [CP_FSCTRL]);
    //IF THE oscillator is running, turn on the rx mode 
    // STATUS bit 06 means that the oscillator is running or not 
    if (status & (1 << 6))
    1726:	86 ff       	sbrs	r24, 6
    1728:	03 c0       	rjmp	.+6      	; 0x1730 <cc2420controlm_CC2420Control_TuneManual+0x2e>
//-------------------------------------------------------------------------
inline uint8_t cc2420controlm_HPLChipcon_cmd(uint8_t arg_0xa403928)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420_cmd(arg_0xa403928);
    172a:	83 e0       	ldi	r24, 0x03	; 3
    172c:	0e 94 ba 12 	call	0x2574	; 0x2574 <HPLCC2420M_HPLCC2420_cmd>
    if (status & (1 << 6))
    {
        cc2420controlm_HPLChipcon_cmd(0x03);
    }
    return SUCCESS;
}
    1730:	81 e0       	ldi	r24, 0x01	; 1
    1732:	08 95       	ret

00001734 <cc2420controlm_CC2420Control_TuneChannel>:
//the channel must be 11 to 26
inline result_t cc2420controlm_CC2420Control_TuneChannel(uint8_t channel)
{
    uint16_t freq;

    freq = 2405 + 5 * (channel - 11);
    1734:	95 e0       	ldi	r25, 0x05	; 5
    1736:	89 9f       	mul	r24, r25
    1738:	c0 01       	movw	r24, r0
    173a:	11 24       	eor	r1, r1
    cc2420controlm_CC2420Control_TuneManual(freq);
    173c:	82 5d       	subi	r24, 0xD2	; 210
    173e:	96 4f       	sbci	r25, 0xF6	; 246
    1740:	0e 94 81 0b 	call	0x1702	; 0x1702 <cc2420controlm_CC2420Control_TuneManual>
    return SUCCESS;
}
    1744:	81 e0       	ldi	r24, 0x01	; 1
    1746:	08 95       	ret

00001748 <cc2420controlm_CC2420Control_TunePower>:
{
    uint8_t status;

    //  cc2420controlm_gCurrentParameters[CP_FSCTRL] = (cc2420controlm_gCurrentParameters[CP_FSCTRL] & 0xfc00) | (fsctrl << 0);
    cc2420controlm_gCurrentParameters[CP_TXCTRL] =
        (cc2420controlm_gCurrentParameters[CP_TXCTRL] & 0xffe0) | (powerlevel &
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	8f 71       	andi	r24, 0x1F	; 31
    174c:	90 70       	andi	r25, 0x00	; 0
    174e:	20 91 27 08 	lds	r18, 0x0827
    1752:	30 91 28 08 	lds	r19, 0x0828
    1756:	20 7e       	andi	r18, 0xE0	; 224
    1758:	82 2b       	or	r24, r18
    175a:	93 2b       	or	r25, r19
inline result_t cc2420controlm_CC2420Control_TunePower(uint8_t powerlevel)
{
    uint8_t status;

    //  cc2420controlm_gCurrentParameters[CP_FSCTRL] = (cc2420controlm_gCurrentParameters[CP_FSCTRL] & 0xfc00) | (fsctrl << 0);
    cc2420controlm_gCurrentParameters[CP_TXCTRL] =
    175c:	90 93 28 08 	sts	0x0828, r25
    1760:	80 93 27 08 	sts	0x0827, r24
inline uint8_t cc2420controlm_HPLChipcon_write(uint8_t arg_0xa403d80, uint16_t
                                               arg_0xa403ed0)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420_write(arg_0xa403d80, arg_0xa403ed0);
    1764:	60 91 2d 08 	lds	r22, 0x082D
    1768:	70 91 2e 08 	lds	r23, 0x082E
    176c:	85 e1       	ldi	r24, 0x15	; 21
    176e:	0e 94 89 12 	call	0x2512	; 0x2512 <HPLCC2420M_HPLCC2420_write>
        cc2420controlm_HPLChipcon_write(0x15,
                                        cc2420controlm_gCurrentParameters
                                        [CP_FSCTRL]);
    //IF THE oscillator is running, turn on the rx mode 
    // STATUS bit 06 means that the oscillator is running or not 
    if (status & (1 << 6))
    1772:	86 ff       	sbrs	r24, 6
    1774:	03 c0       	rjmp	.+6      	; 0x177c <cc2420controlm_CC2420Control_TunePower+0x34>
//-------------------------------------------------------------------------
inline uint8_t cc2420controlm_HPLChipcon_cmd(uint8_t arg_0xa403928)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420_cmd(arg_0xa403928);
    1776:	83 e0       	ldi	r24, 0x03	; 3
    1778:	0e 94 ba 12 	call	0x2574	; 0x2574 <HPLCC2420M_HPLCC2420_cmd>
    if (status & (1 << 6))
    {
        cc2420controlm_HPLChipcon_cmd(0x03);
    }
    return SUCCESS;
}
    177c:	81 e0       	ldi	r24, 0x01	; 1
    177e:	08 95       	ret

00001780 <cc2420controlm_HPLChipconRAM_writeDone>:
inline result_t cc2420controlm_HPLChipconRAM_writeDone(uint16_t addr, uint8_t
                                                       length,
                                                       uint8_t * buffer)
{
    return SUCCESS;
}
    1780:	81 e0       	ldi	r24, 0x01	; 1
    1782:	08 95       	ret

00001784 <cc2420controlm_HPLChipconRAM_write>:
                                                   uint8_t arg_0xa45ae80,
                                                   uint8_t * arg_0xa45afe0)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420RAM_write(arg_0xa45ad38, arg_0xa45ae80,
    1784:	0e 94 2e 12 	call	0x245c	; 0x245c <HPLCC2420M_HPLCC2420RAM_write>
                                           arg_0xa45afe0);
    return result;
}
    1788:	08 95       	ret

0000178a <cc2420controlm_CC2420Control_setShortAddress>:

//-------------------------------------------------------------------------
inline result_t cc2420controlm_CC2420Control_setShortAddress(uint16_t addr)
{
    178a:	df 93       	push	r29
    178c:	cf 93       	push	r28
    178e:	00 d0       	rcall	.+0      	; 0x1790 <cc2420controlm_CC2420Control_setShortAddress+0x6>
    1790:	cd b7       	in	r28, 0x3d	; 61
    1792:	de b7       	in	r29, 0x3e	; 62
    1794:	9a 83       	std	Y+2, r25	; 0x02
    1796:	89 83       	std	Y+1, r24	; 0x01
    addr = toLSB16(addr);
    1798:	0e 94 0e 36 	call	0x6c1c	; 0x6c1c <toLSB16>
    179c:	9a 83       	std	Y+2, r25	; 0x02
    179e:	89 83       	std	Y+1, r24	; 0x01
                                                   uint8_t arg_0xa45ae80,
                                                   uint8_t * arg_0xa45afe0)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420RAM_write(arg_0xa45ad38, arg_0xa45ae80,
    17a0:	8a e6       	ldi	r24, 0x6A	; 106
    17a2:	91 e0       	ldi	r25, 0x01	; 1
    17a4:	62 e0       	ldi	r22, 0x02	; 2
    17a6:	ae 01       	movw	r20, r28
    17a8:	4f 5f       	subi	r20, 0xFF	; 255
    17aa:	5f 4f       	sbci	r21, 0xFF	; 255
    17ac:	0e 94 2e 12 	call	0x245c	; 0x245c <HPLCC2420M_HPLCC2420RAM_write>
//-------------------------------------------------------------------------
inline result_t cc2420controlm_CC2420Control_setShortAddress(uint16_t addr)
{
    addr = toLSB16(addr);
    return cc2420controlm_HPLChipconRAM_write(0x16A, 2, (uint8_t *) & addr);
}
    17b0:	0f 90       	pop	r0
    17b2:	0f 90       	pop	r0
    17b4:	cf 91       	pop	r28
    17b6:	df 91       	pop	r29
    17b8:	08 95       	ret

000017ba <cc2420controlm_HPLChipcon_read>:
//-------------------------------------------------------------------------
inline uint16_t cc2420controlm_HPLChipcon_read(uint8_t arg_0xa4103b0)
{
    unsigned int result;

    result = HPLCC2420M_HPLCC2420_read(arg_0xa4103b0);
    17ba:	0e 94 d5 12 	call	0x25aa	; 0x25aa <HPLCC2420M_HPLCC2420_read>
    return result;
}
    17be:	08 95       	ret

000017c0 <cc2420controlm_SetRegs>:
inline uint8_t cc2420controlm_HPLChipcon_write(uint8_t arg_0xa403d80, uint16_t
                                               arg_0xa403ed0)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420_write(arg_0xa403d80, arg_0xa403ed0);
    17c0:	60 91 1d 08 	lds	r22, 0x081D
    17c4:	70 91 1e 08 	lds	r23, 0x081E
    17c8:	80 e1       	ldi	r24, 0x10	; 16
    17ca:	0e 94 89 12 	call	0x2512	; 0x2512 <HPLCC2420M_HPLCC2420_write>
    17ce:	60 91 1f 08 	lds	r22, 0x081F
    17d2:	70 91 20 08 	lds	r23, 0x0820
    17d6:	81 e1       	ldi	r24, 0x11	; 17
    17d8:	0e 94 89 12 	call	0x2512	; 0x2512 <HPLCC2420M_HPLCC2420_write>
//-------------------------------------------------------------------------
inline uint16_t cc2420controlm_HPLChipcon_read(uint8_t arg_0xa4103b0)
{
    unsigned int result;

    result = HPLCC2420M_HPLCC2420_read(arg_0xa4103b0);
    17dc:	81 e1       	ldi	r24, 0x11	; 17
    17de:	0e 94 d5 12 	call	0x25aa	; 0x25aa <HPLCC2420M_HPLCC2420_read>
                                    [CP_MAIN]);
    cc2420controlm_HPLChipcon_write(0x11,
                                    cc2420controlm_gCurrentParameters
                                    [CP_MDMCTRL0]);
    data = cc2420controlm_HPLChipcon_read(0x11);
    if (data != cc2420controlm_gCurrentParameters[CP_MDMCTRL0])
    17e2:	20 91 1f 08 	lds	r18, 0x081F
    17e6:	30 91 20 08 	lds	r19, 0x0820
    17ea:	82 17       	cp	r24, r18
    17ec:	93 07       	cpc	r25, r19
    17ee:	09 f0       	breq	.+2      	; 0x17f2 <cc2420controlm_SetRegs+0x32>
    17f0:	55 c0       	rjmp	.+170    	; 0x189c <cc2420controlm_SetRegs+0xdc>
inline uint8_t cc2420controlm_HPLChipcon_write(uint8_t arg_0xa403d80, uint16_t
                                               arg_0xa403ed0)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420_write(arg_0xa403d80, arg_0xa403ed0);
    17f2:	60 91 21 08 	lds	r22, 0x0821
    17f6:	70 91 22 08 	lds	r23, 0x0822
    17fa:	82 e1       	ldi	r24, 0x12	; 18
    17fc:	0e 94 89 12 	call	0x2512	; 0x2512 <HPLCC2420M_HPLCC2420_write>
    1800:	60 91 23 08 	lds	r22, 0x0823
    1804:	70 91 24 08 	lds	r23, 0x0824
    1808:	83 e1       	ldi	r24, 0x13	; 19
    180a:	0e 94 89 12 	call	0x2512	; 0x2512 <HPLCC2420M_HPLCC2420_write>
    180e:	60 91 25 08 	lds	r22, 0x0825
    1812:	70 91 26 08 	lds	r23, 0x0826
    1816:	84 e1       	ldi	r24, 0x14	; 20
    1818:	0e 94 89 12 	call	0x2512	; 0x2512 <HPLCC2420M_HPLCC2420_write>
    181c:	60 91 27 08 	lds	r22, 0x0827
    1820:	70 91 28 08 	lds	r23, 0x0828
    1824:	85 e1       	ldi	r24, 0x15	; 21
    1826:	0e 94 89 12 	call	0x2512	; 0x2512 <HPLCC2420M_HPLCC2420_write>
    182a:	60 91 29 08 	lds	r22, 0x0829
    182e:	70 91 2a 08 	lds	r23, 0x082A
    1832:	86 e1       	ldi	r24, 0x16	; 22
    1834:	0e 94 89 12 	call	0x2512	; 0x2512 <HPLCC2420M_HPLCC2420_write>
    1838:	60 91 2b 08 	lds	r22, 0x082B
    183c:	70 91 2c 08 	lds	r23, 0x082C
    1840:	87 e1       	ldi	r24, 0x17	; 23
    1842:	0e 94 89 12 	call	0x2512	; 0x2512 <HPLCC2420M_HPLCC2420_write>
    1846:	60 91 2d 08 	lds	r22, 0x082D
    184a:	70 91 2e 08 	lds	r23, 0x082E
    184e:	88 e1       	ldi	r24, 0x18	; 24
    1850:	0e 94 89 12 	call	0x2512	; 0x2512 <HPLCC2420M_HPLCC2420_write>
    1854:	60 91 2f 08 	lds	r22, 0x082F
    1858:	70 91 30 08 	lds	r23, 0x0830
    185c:	89 e1       	ldi	r24, 0x19	; 25
    185e:	0e 94 89 12 	call	0x2512	; 0x2512 <HPLCC2420M_HPLCC2420_write>
    1862:	60 91 31 08 	lds	r22, 0x0831
    1866:	70 91 32 08 	lds	r23, 0x0832
    186a:	8a e1       	ldi	r24, 0x1A	; 26
    186c:	0e 94 89 12 	call	0x2512	; 0x2512 <HPLCC2420M_HPLCC2420_write>
    1870:	60 91 35 08 	lds	r22, 0x0835
    1874:	70 91 36 08 	lds	r23, 0x0836
    1878:	8c e1       	ldi	r24, 0x1C	; 28
    187a:	0e 94 89 12 	call	0x2512	; 0x2512 <HPLCC2420M_HPLCC2420_write>
    187e:	60 91 37 08 	lds	r22, 0x0837
    1882:	70 91 38 08 	lds	r23, 0x0838
    1886:	8d e1       	ldi	r24, 0x1D	; 29
    1888:	0e 94 89 12 	call	0x2512	; 0x2512 <HPLCC2420M_HPLCC2420_write>
//-------------------------------------------------------------------------
inline uint8_t cc2420controlm_HPLChipcon_cmd(uint8_t arg_0xa403928)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420_cmd(arg_0xa403928);
    188c:	89 e0       	ldi	r24, 0x09	; 9
    188e:	0e 94 ba 12 	call	0x2574	; 0x2574 <HPLCC2420M_HPLCC2420_cmd>
    1892:	88 e0       	ldi	r24, 0x08	; 8
    1894:	0e 94 ba 12 	call	0x2574	; 0x2574 <HPLCC2420M_HPLCC2420_cmd>
    cc2420controlm_HPLChipcon_write(0x1D,
                                    cc2420controlm_gCurrentParameters
                                    [CP_IOCFG1]);
    cc2420controlm_HPLChipcon_cmd(0x09);
    cc2420controlm_HPLChipcon_cmd(0x08);
    return TRUE;
    1898:	81 e0       	ldi	r24, 0x01	; 1
    189a:	08 95       	ret
                                    cc2420controlm_gCurrentParameters
                                    [CP_MDMCTRL0]);
    data = cc2420controlm_HPLChipcon_read(0x11);
    if (data != cc2420controlm_gCurrentParameters[CP_MDMCTRL0])
    {
        return FALSE;
    189c:	80 e0       	ldi	r24, 0x00	; 0
                                    cc2420controlm_gCurrentParameters
                                    [CP_IOCFG1]);
    cc2420controlm_HPLChipcon_cmd(0x09);
    cc2420controlm_HPLChipcon_cmd(0x08);
    return TRUE;
}
    189e:	08 95       	ret

000018a0 <cc2420controlm_PostOscillatorOn>:

//-------------------------------------------------------------------------
inline void cc2420controlm_PostOscillatorOn(void)
{
    //This fucntion sets up all the registers of the radio module 
    cc2420controlm_SetRegs();
    18a0:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <cc2420controlm_SetRegs>
    //This function sets up the short address of the node, and therefore, if the mac frame includes a short address, it should be matched
    cc2420controlm_CC2420Control_setShortAddress(CURRENT_NODE_ID);
    18a4:	80 91 c1 07 	lds	r24, 0x07C1
    18a8:	90 91 c2 07 	lds	r25, 0x07C2
    18ac:	0e 94 c5 0b 	call	0x178a	; 0x178a <cc2420controlm_CC2420Control_setShortAddress>
    //tHIS TURNS THE CHANELL
    cc2420controlm_CC2420Control_TuneManual(((cc2420controlm_gCurrentParameters
                                              [CP_FSCTRL] << 0) & 0x1FF) +
    18b0:	80 91 2d 08 	lds	r24, 0x082D
    18b4:	90 91 2e 08 	lds	r25, 0x082E
    18b8:	91 70       	andi	r25, 0x01	; 1
    //This fucntion sets up all the registers of the radio module 
    cc2420controlm_SetRegs();
    //This function sets up the short address of the node, and therefore, if the mac frame includes a short address, it should be matched
    cc2420controlm_CC2420Control_setShortAddress(CURRENT_NODE_ID);
    //tHIS TURNS THE CHANELL
    cc2420controlm_CC2420Control_TuneManual(((cc2420controlm_gCurrentParameters
    18ba:	80 50       	subi	r24, 0x00	; 0
    18bc:	98 4f       	sbci	r25, 0xF8	; 248
    18be:	0e 94 81 0b 	call	0x1702	; 0x1702 <cc2420controlm_CC2420Control_TuneManual>
                                              [CP_FSCTRL] << 0) & 0x1FF) +
                                            2048);
    {
        _atomic_t _atomic = _atomic_start();
    18c2:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>

        cc2420controlm_state = cc2420controlm_START_STATE_DONE;
    18c6:	94 e0       	ldi	r25, 0x04	; 4
    18c8:	90 93 1b 08 	sts	0x081B, r25
        _atomic_end(_atomic);
    18cc:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
//-------------------------------------------------------------------------
inline result_t cc2420controlm_SplitControl_startDone(void)
{
    unsigned char result;

    result = cc2420radiom_CC2420SplitControl_startDone();
    18d0:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <cc2420radiom_CC2420SplitControl_startDone>

        cc2420controlm_state = cc2420controlm_START_STATE_DONE;
        _atomic_end(_atomic);
    }
    cc2420controlm_SplitControl_startDone();
}
    18d4:	08 95       	ret

000018d6 <cc2420controlm_CCA_fired>:
inline uint8_t cc2420controlm_HPLChipcon_write(uint8_t arg_0xa403d80, uint16_t
                                               arg_0xa403ed0)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420_write(arg_0xa403d80, arg_0xa403ed0);
    18d6:	8d e1       	ldi	r24, 0x1D	; 29
    18d8:	60 e0       	ldi	r22, 0x00	; 0
    18da:	70 e0       	ldi	r23, 0x00	; 0
    18dc:	0e 94 89 12 	call	0x2512	; 0x2512 <HPLCC2420M_HPLCC2420_write>

//-------------------------------------------------------------------------
inline result_t cc2420controlm_CCA_fired(void)
{
    cc2420controlm_HPLChipcon_write(0x1D, 0);
    postTask(cc2420controlm_PostOscillatorOn, 5);
    18e0:	80 e5       	ldi	r24, 0x50	; 80
    18e2:	9c e0       	ldi	r25, 0x0C	; 12
    18e4:	65 e0       	ldi	r22, 0x05	; 5
    18e6:	0e 94 88 14 	call	0x2910	; 0x2910 <postTask>
    return FAIL;
}
    18ea:	80 e0       	ldi	r24, 0x00	; 0
    18ec:	08 95       	ret

000018ee <cc2420controlm_HPLChipconControl_init>:

//-------------------------------------------------------------------------
inline result_t cc2420controlm_HPLChipconControl_init(void)
{
    18ee:	1f 93       	push	r17
    unsigned char result;

    result = HPLCC2420M_StdControl_init();
    18f0:	0e 94 f7 11 	call	0x23ee	; 0x23ee <HPLCC2420M_StdControl_init>
    18f4:	18 2f       	mov	r17, r24
    result = rcombine(result, HPLTimer1M_StdControl_init());
    18f6:	0e 94 0e 13 	call	0x261c	; 0x261c <HPLTimer1M_StdControl_init>
    18fa:	68 2f       	mov	r22, r24
    18fc:	81 2f       	mov	r24, r17
    18fe:	0e 94 0b 37 	call	0x6e16	; 0x6e16 <rcombine>
    return result;
}
    1902:	1f 91       	pop	r17
    1904:	08 95       	ret

00001906 <cc2420controlm_SplitControl_init>:
uint8_t CC2420_CHANNEL;
uint8_t CC2420_RFPOWER;
uint8_t cc2420controlm_state;
uint16_t cc2420controlm_gCurrentParameters[14];
inline result_t cc2420controlm_SplitControl_init(void)
{
    1906:	1f 93       	push	r17
    uint8_t _state = FALSE;

    {
        _atomic_t _atomic = _atomic_start();
    1908:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>

        {
            if (cc2420controlm_state == cc2420controlm_IDLE_STATE)
    190c:	10 91 1b 08 	lds	r17, 0x081B
                _state = TRUE;
            }
        }
        //Qing Revision
        //IDLE state
        cc2420controlm_state = cc2420controlm_IDLE_STATE;
    1910:	10 92 1b 08 	sts	0x081B, r1
        CC2420_CHANNEL = CC2420_DEF_CHANNEL;
    1914:	9b e0       	ldi	r25, 0x0B	; 11
    1916:	90 93 39 08 	sts	0x0839, r25
        CC2420_RFPOWER = CC2420_DEF_RFPOWER;
    191a:	9f e1       	ldi	r25, 0x1F	; 31
    191c:	90 93 1c 08 	sts	0x081C, r25
        _atomic_end(_atomic);
    1920:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
    }
    if (!_state)
    1924:	11 23       	and	r17, r17
    1926:	09 f0       	breq	.+2      	; 0x192a <cc2420controlm_SplitControl_init+0x24>
    1928:	68 c0       	rjmp	.+208    	; 0x19fa <cc2420controlm_SplitControl_init+0xf4>
    {
        return FAIL;
    }
    cc2420controlm_HPLChipconControl_init();
    192a:	0e 94 77 0c 	call	0x18ee	; 0x18ee <cc2420controlm_HPLChipconControl_init>
    //Basically, reset everything page 64
    cc2420controlm_gCurrentParameters[CP_MAIN] = 0xf800;
    192e:	80 e0       	ldi	r24, 0x00	; 0
    1930:	98 ef       	ldi	r25, 0xF8	; 248
    1932:	90 93 1e 08 	sts	0x081E, r25
    1936:	80 93 1d 08 	sts	0x081D, r24
    //Basically, check page 65. Very easy 
    cc2420controlm_gCurrentParameters[CP_MDMCTRL0] =
    193a:	82 ee       	ldi	r24, 0xE2	; 226
    193c:	92 e0       	ldi	r25, 0x02	; 2
    193e:	90 93 20 08 	sts	0x0820, r25
    1942:	80 93 1f 08 	sts	0x081F, r24
        ((((0 << 11) | (2 << 8)) | (3 << 6)) | (1 << 5)) | (2 << 0);
    //Page 66
    cc2420controlm_gCurrentParameters[CP_MDMCTRL1] = 20 << 6;
    1946:	80 e0       	ldi	r24, 0x00	; 0
    1948:	95 e0       	ldi	r25, 0x05	; 5
    194a:	90 93 22 08 	sts	0x0822, r25
    194e:	80 93 21 08 	sts	0x0821, r24
    //reset values
    cc2420controlm_gCurrentParameters[CP_RSSI] = 0xE080;
    1952:	80 e8       	ldi	r24, 0x80	; 128
    1954:	90 ee       	ldi	r25, 0xE0	; 224
    1956:	90 93 24 08 	sts	0x0824, r25
    195a:	80 93 23 08 	sts	0x0823, r24
    //reset
    cc2420controlm_gCurrentParameters[CP_SYNCWORD] = 0xA70F;
    195e:	8f e0       	ldi	r24, 0x0F	; 15
    1960:	97 ea       	ldi	r25, 0xA7	; 167
    1962:	90 93 26 08 	sts	0x0826, r25
    1966:	80 93 25 08 	sts	0x0825, r24
    //the last one, according to page 52 of the data sheet and page 67, default to output 0dbm 
    cc2420controlm_gCurrentParameters[CP_TXCTRL] =
        ((((1 << 14) | (1 << 13)) | (3 << 6)) | (1 << 5)) | (CC2420_RFPOWER <<
    196a:	80 91 1c 08 	lds	r24, 0x081C
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	80 6e       	ori	r24, 0xE0	; 224
    1972:	90 66       	ori	r25, 0x60	; 96
    //reset values
    cc2420controlm_gCurrentParameters[CP_RSSI] = 0xE080;
    //reset
    cc2420controlm_gCurrentParameters[CP_SYNCWORD] = 0xA70F;
    //the last one, according to page 52 of the data sheet and page 67, default to output 0dbm 
    cc2420controlm_gCurrentParameters[CP_TXCTRL] =
    1974:	90 93 28 08 	sts	0x0828, r25
    1978:	80 93 27 08 	sts	0x0827, r24
        ((((1 << 14) | (1 << 13)) | (3 << 6)) | (1 << 5)) | (CC2420_RFPOWER <<
                                                             0);
    cc2420controlm_gCurrentParameters[CP_RXCTRL0] =
    197c:	85 ee       	ldi	r24, 0xE5	; 229
    197e:	92 e1       	ldi	r25, 0x12	; 18
    1980:	90 93 2a 08 	sts	0x082A, r25
    1984:	80 93 29 08 	sts	0x0829, r24
        (((((1 << 12) | (2 << 8)) | (3 << 6)) | (2 << 4)) | (1 << 2)) | (1 <<
                                                                         0);
    cc2420controlm_gCurrentParameters[CP_RXCTRL1] =
    1988:	86 e5       	ldi	r24, 0x56	; 86
    198a:	9a e0       	ldi	r25, 0x0A	; 10
    198c:	90 93 2c 08 	sts	0x082C, r25
    1990:	80 93 2b 08 	sts	0x082B, r24
        (((((1 << 11) | (1 << 9)) | (1 << 6)) | (1 << 4)) | (1 << 2)) | (2 <<
                                                                         0);
    //PAGE 51 of the manual 
    cc2420controlm_gCurrentParameters[CP_FSCTRL] =
        (1 << 14) | ((357 + 5 * (CC2420_CHANNEL - 11)) << 0);
    1994:	90 91 39 08 	lds	r25, 0x0839
    1998:	85 e0       	ldi	r24, 0x05	; 5
    199a:	98 9f       	mul	r25, r24
    199c:	c0 01       	movw	r24, r0
    199e:	11 24       	eor	r1, r1
    19a0:	82 5d       	subi	r24, 0xD2	; 210
    19a2:	9e 4f       	sbci	r25, 0xFE	; 254
    19a4:	90 64       	ori	r25, 0x40	; 64
                                                                         0);
    cc2420controlm_gCurrentParameters[CP_RXCTRL1] =
        (((((1 << 11) | (1 << 9)) | (1 << 6)) | (1 << 4)) | (1 << 2)) | (2 <<
                                                                         0);
    //PAGE 51 of the manual 
    cc2420controlm_gCurrentParameters[CP_FSCTRL] =
    19a6:	90 93 2e 08 	sts	0x082E, r25
    19aa:	80 93 2d 08 	sts	0x082D, r24
        (1 << 14) | ((357 + 5 * (CC2420_CHANNEL - 11)) << 0);
    cc2420controlm_gCurrentParameters[CP_SECCTRL0] =
    19ae:	84 ec       	ldi	r24, 0xC4	; 196
    19b0:	91 e0       	ldi	r25, 0x01	; 1
    19b2:	90 93 30 08 	sts	0x0830, r25
    19b6:	80 93 2f 08 	sts	0x082F, r24
        (((1 << 8) | (1 << 7)) | (1 << 6)) | (1 << 2);
    cc2420controlm_gCurrentParameters[CP_SECCTRL1] = 0;
    19ba:	10 92 32 08 	sts	0x0832, r1
    19be:	10 92 31 08 	sts	0x0831, r1
    cc2420controlm_gCurrentParameters[CP_BATTMON] = 0;
    19c2:	10 92 34 08 	sts	0x0834, r1
    19c6:	10 92 33 08 	sts	0x0833, r1
    //fifop and cca polarity are inversed
    cc2420controlm_gCurrentParameters[CP_IOCFG0] = (127 << 0) | (1 << 9);
    19ca:	8f e7       	ldi	r24, 0x7F	; 127
    19cc:	92 e0       	ldi	r25, 0x02	; 2
    19ce:	90 93 36 08 	sts	0x0836, r25
    19d2:	80 93 35 08 	sts	0x0835, r24
    cc2420controlm_gCurrentParameters[CP_IOCFG1] = 0;
    19d6:	10 92 38 08 	sts	0x0838, r1
    19da:	10 92 37 08 	sts	0x0837, r1
    {
        _atomic_t _atomic = _atomic_start();
    19de:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>

        cc2420controlm_state = cc2420controlm_INIT_STATE_DONE;
    19e2:	92 e0       	ldi	r25, 0x02	; 2
    19e4:	90 93 1b 08 	sts	0x081B, r25
        _atomic_end(_atomic);
    19e8:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
    }
    postTask(cc2420controlm_taskInitDone, 5);
    19ec:	87 e2       	ldi	r24, 0x27	; 39
    19ee:	9b e0       	ldi	r25, 0x0B	; 11
    19f0:	65 e0       	ldi	r22, 0x05	; 5
    19f2:	0e 94 88 14 	call	0x2910	; 0x2910 <postTask>
    return SUCCESS;
    19f6:	81 e0       	ldi	r24, 0x01	; 1
    19f8:	01 c0       	rjmp	.+2      	; 0x19fc <cc2420controlm_SplitControl_init+0xf6>
        CC2420_RFPOWER = CC2420_DEF_RFPOWER;
        _atomic_end(_atomic);
    }
    if (!_state)
    {
        return FAIL;
    19fa:	80 e0       	ldi	r24, 0x00	; 0
        cc2420controlm_state = cc2420controlm_INIT_STATE_DONE;
        _atomic_end(_atomic);
    }
    postTask(cc2420controlm_taskInitDone, 5);
    return SUCCESS;
}
    19fc:	1f 91       	pop	r17
    19fe:	08 95       	ret

00001a00 <cc2420radiom_PacketSent>:
    return result;
}

//-------------------------------------------------------------------------
inline void cc2420radiom_PacketSent(void)
{
    1a00:	cf 93       	push	r28
    1a02:	df 93       	push	r29
    Radio_MsgPtr pBuf;

    {
        _atomic_t _atomic = _atomic_start();
    1a04:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>

        {
            cc2420radiom_stateRadio = cc2420radiom_IDLE_STATE;
    1a08:	92 e0       	ldi	r25, 0x02	; 2
    1a0a:	90 93 b8 08 	sts	0x08B8, r25
            pBuf = cc2420radiom_txbufptr;
    1a0e:	c0 91 b6 08 	lds	r28, 0x08B6
    1a12:	d0 91 b7 08 	lds	r29, 0x08B7
            pBuf->length = pBuf->length - MSG_HEADER_SIZE - MSG_FOOTER_SIZE;
    1a16:	98 81       	ld	r25, Y
    1a18:	9b 50       	subi	r25, 0x0B	; 11
    1a1a:	98 83       	st	Y, r25
        }
        _atomic_end(_atomic);
    1a1c:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
inline result_t cc2420radiom_Send_sendDone(Radio_MsgPtr arg_0xa3c3710,
                                           result_t arg_0xa3c3860)
{
    unsigned char result;

    result = AMStandard_RadioSend_sendDone(arg_0xa3c3710, arg_0xa3c3860);
    1a20:	ce 01       	movw	r24, r28
    1a22:	61 e0       	ldi	r22, 0x01	; 1
    1a24:	0e 94 14 0a 	call	0x1428	; 0x1428 <AMStandard_RadioSend_sendDone>
            pBuf->length = pBuf->length - MSG_HEADER_SIZE - MSG_FOOTER_SIZE;
        }
        _atomic_end(_atomic);
    }
    cc2420radiom_Send_sendDone(pBuf, SUCCESS);
}
    1a28:	df 91       	pop	r29
    1a2a:	cf 91       	pop	r28
    1a2c:	08 95       	ret

00001a2e <cc2420radiom_PacketRcvd>:
    return result;
}

//-------------------------------------------------------------------------
inline void cc2420radiom_PacketRcvd(void)
{
    1a2e:	cf 93       	push	r28
    1a30:	df 93       	push	r29
    Radio_MsgPtr pBuf;

    {
        _atomic_t _atomic = _atomic_start();
    1a32:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>

        {
            pBuf = cc2420radiom_rxbufptr;
    1a36:	c0 91 3a 08 	lds	r28, 0x083A
    1a3a:	d0 91 3b 08 	lds	r29, 0x083B
        } _atomic_end(_atomic);
    1a3e:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
//-------------------------------------------------------------------------
inline Radio_MsgPtr cc2420radiom_Receive_receive(Radio_MsgPtr arg_0xa31b650)
{
    struct Radio_Msg *result;

    result = AMStandard_RadioReceive_receive(arg_0xa31b650);
    1a42:	ce 01       	movw	r24, r28
    1a44:	0e 94 11 0a 	call	0x1422	; 0x1422 <AMStandard_RadioReceive_receive>
    1a48:	ec 01       	movw	r28, r24
            pBuf = cc2420radiom_rxbufptr;
        } _atomic_end(_atomic);
    }
    pBuf = cc2420radiom_Receive_receive((Radio_MsgPtr) pBuf);
    {
        _atomic_t _atomic = _atomic_start();
    1a4a:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>

        {
            if (pBuf)
    1a4e:	20 97       	sbiw	r28, 0x00	; 0
    1a50:	21 f0       	breq	.+8      	; 0x1a5a <cc2420radiom_PacketRcvd+0x2c>
            {
                cc2420radiom_rxbufptr = pBuf;
    1a52:	d0 93 3b 08 	sts	0x083B, r29
    1a56:	c0 93 3a 08 	sts	0x083A, r28
            }
            cc2420radiom_rxbufptr->length = 0;
    1a5a:	e0 91 3a 08 	lds	r30, 0x083A
    1a5e:	f0 91 3b 08 	lds	r31, 0x083B
    1a62:	10 82       	st	Z, r1
            cc2420radiom_bPacketReceiving = FALSE;
    1a64:	10 92 3d 08 	sts	0x083D, r1
        }
        _atomic_end(_atomic);
    1a68:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
    }
}
    1a6c:	df 91       	pop	r29
    1a6e:	cf 91       	pop	r28
    1a70:	08 95       	ret

00001a72 <cc2420radiom_SplitControl_default_initDone>:
   volatile uint16_t cc2420radiom_LocalAddr;
 */
inline result_t cc2420radiom_SplitControl_default_initDone(void)
{
    return SUCCESS;
}
    1a72:	81 e0       	ldi	r24, 0x01	; 1
    1a74:	08 95       	ret

00001a76 <cc2420radiom_CC2420SplitControl_initDone>:

//-------------------------------------------------------------------------
inline result_t cc2420radiom_CC2420SplitControl_initDone(void)
{
    return cc2420radiom_SplitControl_initDone();
}
    1a76:	81 e0       	ldi	r24, 0x01	; 1
    1a78:	08 95       	ret

00001a7a <cc2420radiom_SplitControl_init>:

//-------------------------------------------------------------------------
inline result_t cc2420radiom_SplitControl_init(void)
{
    {
        _atomic_t _atomic = _atomic_start();
    1a7a:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>

        {
            cc2420radiom_stateRadio = cc2420radiom_DISABLED_STATE;
    1a7e:	10 92 b8 08 	sts	0x08B8, r1
            cc2420radiom_currentDSN = 0;
    1a82:	10 92 3c 08 	sts	0x083C, r1
            cc2420radiom_bAckEnable = FALSE;
    1a86:	10 92 b2 08 	sts	0x08B2, r1
            cc2420radiom_bPacketReceiving = FALSE;
    1a8a:	10 92 3d 08 	sts	0x083D, r1
            cc2420radiom_rxbufptr = &cc2420radiom_RxBuf;
    1a8e:	2e e3       	ldi	r18, 0x3E	; 62
    1a90:	38 e0       	ldi	r19, 0x08	; 8
    1a92:	30 93 3b 08 	sts	0x083B, r19
    1a96:	20 93 3a 08 	sts	0x083A, r18
            cc2420radiom_rxbufptr->length = 0;
    1a9a:	10 92 3e 08 	sts	0x083E, r1
        }
        _atomic_end(_atomic);
    1a9e:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
    }
    cc2420radiom_LocalAddr = CURRENT_NODE_ID;
    1aa2:	80 91 c1 07 	lds	r24, 0x07C1
    1aa6:	90 91 c2 07 	lds	r25, 0x07C2
    1aaa:	90 93 b5 08 	sts	0x08B5, r25
    1aae:	80 93 b4 08 	sts	0x08B4, r24
    return cc2420controlm_SplitControl_init();
    1ab2:	0e 94 83 0c 	call	0x1906	; 0x1906 <cc2420controlm_SplitControl_init>
}
    1ab6:	08 95       	ret

00001ab8 <cc2420radiom_CC2420SplitControl_start>:
//-------------------------------------------------------------------------
inline result_t cc2420radiom_CC2420SplitControl_start(void)
{
    unsigned char result;

    result = cc2420controlm_SplitControl_start();
    1ab8:	0e 94 56 0b 	call	0x16ac	; 0x16ac <cc2420controlm_SplitControl_start>
    return result;
}
    1abc:	08 95       	ret

00001abe <cc2420radiom_SplitControl_start>:

//-------------------------------------------------------------------------
inline result_t cc2420radiom_SplitControl_start(void)
{
    1abe:	1f 93       	push	r17
    uint8_t chkstateRadio;

    {
        _atomic_t _atomic = _atomic_start();
    1ac0:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>

        chkstateRadio = cc2420radiom_stateRadio;
    1ac4:	10 91 b8 08 	lds	r17, 0x08B8
        _atomic_end(_atomic);
    1ac8:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
    }
    if (chkstateRadio == cc2420radiom_DISABLED_STATE)
    1acc:	11 23       	and	r17, r17
    1ace:	89 f4       	brne	.+34     	; 0x1af2 <cc2420radiom_SplitControl_start+0x34>
    {
        {
            _atomic_t _atomic = _atomic_start();
    1ad0:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>

            {
                cc2420radiom_stateRadio = cc2420radiom_WARMUP_STATE;
    1ad4:	9a e0       	ldi	r25, 0x0A	; 10
    1ad6:	90 93 b8 08 	sts	0x08B8, r25
                cc2420radiom_countRetry = 0;
    1ada:	10 92 b3 08 	sts	0x08B3, r1
                cc2420radiom_rxbufptr->length = 0;
    1ade:	e0 91 3a 08 	lds	r30, 0x083A
    1ae2:	f0 91 3b 08 	lds	r31, 0x083B
    1ae6:	10 82       	st	Z, r1
            }
            _atomic_end(_atomic);
    1ae8:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
//-------------------------------------------------------------------------
inline result_t cc2420radiom_CC2420SplitControl_start(void)
{
    unsigned char result;

    result = cc2420controlm_SplitControl_start();
    1aec:	0e 94 56 0b 	call	0x16ac	; 0x16ac <cc2420controlm_SplitControl_start>
                cc2420radiom_countRetry = 0;
                cc2420radiom_rxbufptr->length = 0;
            }
            _atomic_end(_atomic);
        }
        return cc2420radiom_CC2420SplitControl_start();
    1af0:	01 c0       	rjmp	.+2      	; 0x1af4 <cc2420radiom_SplitControl_start+0x36>
    }
    return FAIL;
    1af2:	80 e0       	ldi	r24, 0x00	; 0
}
    1af4:	1f 91       	pop	r17
    1af6:	08 95       	ret

00001af8 <cc2420radiom_startRadio>:

//-------------------------------------------------------------------------
inline void cc2420radiom_startRadio(void)
{
    1af8:	1f 93       	push	r17
    result_t success = FAIL;

    {
        _atomic_t _atomic = _atomic_start();
    1afa:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>

        {
            if (cc2420radiom_stateRadio ==
    1afe:	90 91 b8 08 	lds	r25, 0x08B8
    1b02:	91 30       	cpi	r25, 0x01	; 1
    1b04:	21 f4       	brne	.+8      	; 0x1b0e <cc2420radiom_startRadio+0x16>
                cc2420radiom_DISABLED_STATE_STARTTASK)
            {
                cc2420radiom_stateRadio = cc2420radiom_DISABLED_STATE;
    1b06:	10 92 b8 08 	sts	0x08B8, r1
                success = SUCCESS;
    1b0a:	11 e0       	ldi	r17, 0x01	; 1
    1b0c:	01 c0       	rjmp	.+2      	; 0x1b10 <cc2420radiom_startRadio+0x18>
}

//-------------------------------------------------------------------------
inline void cc2420radiom_startRadio(void)
{
    result_t success = FAIL;
    1b0e:	10 e0       	ldi	r17, 0x00	; 0
            {
                cc2420radiom_stateRadio = cc2420radiom_DISABLED_STATE;
                success = SUCCESS;
            }
        }
        _atomic_end(_atomic);
    1b10:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
    }
    if (success == SUCCESS)
    1b14:	11 30       	cpi	r17, 0x01	; 1
    1b16:	11 f4       	brne	.+4      	; 0x1b1c <cc2420radiom_startRadio+0x24>
    {
        cc2420radiom_SplitControl_start();
    1b18:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <cc2420radiom_SplitControl_start>
    }
}
    1b1c:	1f 91       	pop	r17
    1b1e:	08 95       	ret

00001b20 <cc2420radiom_StdControl_start>:

//-------------------------------------------------------------------------
inline result_t cc2420radiom_StdControl_start(void)
{
    1b20:	0f 93       	push	r16
    1b22:	1f 93       	push	r17
    result_t success = FAIL;

    {
        _atomic_t _atomic = _atomic_start();
    1b24:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>
    1b28:	18 2f       	mov	r17, r24

        {
            if (cc2420radiom_stateRadio == cc2420radiom_DISABLED_STATE)
    1b2a:	80 91 b8 08 	lds	r24, 0x08B8
    1b2e:	88 23       	and	r24, r24
    1b30:	61 f4       	brne	.+24     	; 0x1b4a <cc2420radiom_StdControl_start+0x2a>
            {
                if (postTask(cc2420radiom_startRadio, 5))
    1b32:	8c e7       	ldi	r24, 0x7C	; 124
    1b34:	9d e0       	ldi	r25, 0x0D	; 13
    1b36:	65 e0       	ldi	r22, 0x05	; 5
    1b38:	0e 94 88 14 	call	0x2910	; 0x2910 <postTask>
    1b3c:	88 23       	and	r24, r24
    1b3e:	29 f0       	breq	.+10     	; 0x1b4a <cc2420radiom_StdControl_start+0x2a>
                {
                    success = SUCCESS;
                    cc2420radiom_stateRadio =
    1b40:	81 e0       	ldi	r24, 0x01	; 1
    1b42:	80 93 b8 08 	sts	0x08B8, r24
        {
            if (cc2420radiom_stateRadio == cc2420radiom_DISABLED_STATE)
            {
                if (postTask(cc2420radiom_startRadio, 5))
                {
                    success = SUCCESS;
    1b46:	01 e0       	ldi	r16, 0x01	; 1
    1b48:	01 c0       	rjmp	.+2      	; 0x1b4c <cc2420radiom_StdControl_start+0x2c>
}

//-------------------------------------------------------------------------
inline result_t cc2420radiom_StdControl_start(void)
{
    result_t success = FAIL;
    1b4a:	00 e0       	ldi	r16, 0x00	; 0
                    cc2420radiom_stateRadio =
                        cc2420radiom_DISABLED_STATE_STARTTASK;
                }
            }
        }
        _atomic_end(_atomic);
    1b4c:	81 2f       	mov	r24, r17
    1b4e:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
    }
    return success;
}
    1b52:	80 2f       	mov	r24, r16
    1b54:	1f 91       	pop	r17
    1b56:	0f 91       	pop	r16
    1b58:	08 95       	ret

00001b5a <cc2420radiom_SplitControl_default_startDone>:

//-------------------------------------------------------------------------
inline result_t cc2420radiom_SplitControl_default_startDone(void)
{
    return SUCCESS;
}
    1b5a:	81 e0       	ldi	r24, 0x01	; 1
    1b5c:	08 95       	ret

00001b5e <cc2420radiom_SplitControl_startDone>:
{
    unsigned char result;

    result = cc2420radiom_SplitControl_default_startDone();
    return result;
}
    1b5e:	81 e0       	ldi	r24, 0x01	; 1
    1b60:	08 95       	ret

00001b62 <cc2420radiom_SFD_enableCapture>:
//-------------------------------------------------------------------------
inline result_t cc2420radiom_SFD_enableCapture(bool arg_0xa41e260)
{
    unsigned char result;

    result = hplcc2420interruptm_SFD_enableCapture(arg_0xa41e260);
    1b62:	0e 94 bc 11 	call	0x2378	; 0x2378 <hplcc2420interruptm_SFD_enableCapture>
    return result;
}
    1b66:	08 95       	ret

00001b68 <cc2420radiom_HPLChipcon_cmd>:
//-------------------------------------------------------------------------
inline uint8_t cc2420radiom_HPLChipcon_cmd(uint8_t arg_0xa403928)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420_cmd(arg_0xa403928);
    1b68:	0e 94 ba 12 	call	0x2574	; 0x2574 <HPLCC2420M_HPLCC2420_cmd>
    return result;
}
    1b6c:	08 95       	ret

00001b6e <cc2420radiom_HPLChipconFIFO_writeTXFIFO>:
                                                        uint8_t *
                                                        arg_0xa40c170)
{
    unsigned char result;

    result = hplcc2420fifom_HPLCC2420FIFO_writeTXFIFO(arg_0xa40c010,
    1b6e:	0e 94 01 10 	call	0x2002	; 0x2002 <hplcc2420fifom_HPLCC2420FIFO_writeTXFIFO>
                                                      arg_0xa40c170);
    return result;
}
    1b72:	08 95       	ret

00001b74 <cc2420radiom_FIFOP_startWait>:
//-------------------------------------------------------------------------
inline result_t cc2420radiom_FIFOP_startWait(bool arg_0xa422588)
{
    unsigned char result;

    result = hplcc2420interruptm_FIFOP_startWait(arg_0xa422588);
    1b74:	0e 94 36 11 	call	0x226c	; 0x226c <hplcc2420interruptm_FIFOP_startWait>
    return result;
}
    1b78:	08 95       	ret

00001b7a <cc2420radiom_CC2420Control_RxMode>:
//-------------------------------------------------------------------------
inline result_t cc2420radiom_CC2420Control_RxMode(void)
{
    unsigned char result;

    result = cc2420controlm_CC2420Control_RxMode();
    1b7a:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <cc2420controlm_CC2420Control_RxMode>
    return result;
}
    1b7e:	08 95       	ret

00001b80 <cc2420radiom_CC2420SplitControl_startDone>:

//-------------------------------------------------------------------------
inline result_t cc2420radiom_CC2420SplitControl_startDone(void)
{
    1b80:	1f 93       	push	r17
    uint8_t chkstateRadio;

    {
        _atomic_t _atomic = _atomic_start();
    1b82:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>

        chkstateRadio = cc2420radiom_stateRadio;
    1b86:	10 91 b8 08 	lds	r17, 0x08B8
        _atomic_end(_atomic);
    1b8a:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
    }
    if (chkstateRadio == cc2420radiom_WARMUP_STATE)
    1b8e:	1a 30       	cpi	r17, 0x0A	; 10
    1b90:	79 f4       	brne	.+30     	; 0x1bb0 <cc2420radiom_CC2420SplitControl_startDone+0x30>
//-------------------------------------------------------------------------
inline result_t cc2420radiom_CC2420Control_RxMode(void)
{
    unsigned char result;

    result = cc2420controlm_CC2420Control_RxMode();
    1b92:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <cc2420controlm_CC2420Control_RxMode>
//-------------------------------------------------------------------------
inline result_t cc2420radiom_FIFOP_startWait(bool arg_0xa422588)
{
    unsigned char result;

    result = hplcc2420interruptm_FIFOP_startWait(arg_0xa422588);
    1b96:	80 e0       	ldi	r24, 0x00	; 0
    1b98:	0e 94 36 11 	call	0x226c	; 0x226c <hplcc2420interruptm_FIFOP_startWait>
//-------------------------------------------------------------------------
inline result_t cc2420radiom_SFD_enableCapture(bool arg_0xa41e260)
{
    unsigned char result;

    result = hplcc2420interruptm_SFD_enableCapture(arg_0xa41e260);
    1b9c:	81 e0       	ldi	r24, 0x01	; 1
    1b9e:	0e 94 bc 11 	call	0x2378	; 0x2378 <hplcc2420interruptm_SFD_enableCapture>
    {
        cc2420radiom_CC2420Control_RxMode();
        cc2420radiom_FIFOP_startWait(FALSE);
        cc2420radiom_SFD_enableCapture(TRUE);
        {
            _atomic_t _atomic = _atomic_start();
    1ba2:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>

            cc2420radiom_stateRadio = cc2420radiom_IDLE_STATE;
    1ba6:	92 e0       	ldi	r25, 0x02	; 2
    1ba8:	90 93 b8 08 	sts	0x08B8, r25
            _atomic_end(_atomic);
    1bac:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
        }
    }
    cc2420radiom_SplitControl_startDone();
    return SUCCESS;
}
    1bb0:	81 e0       	ldi	r24, 0x01	; 1
    1bb2:	1f 91       	pop	r17
    1bb4:	08 95       	ret

00001bb6 <cc2420radiom_HPLChipcon_read>:
//-------------------------------------------------------------------------
inline uint16_t cc2420radiom_HPLChipcon_read(uint8_t arg_0xa4103b0)
{
    unsigned int result;

    result = HPLCC2420M_HPLCC2420_read(arg_0xa4103b0);
    1bb6:	0e 94 d5 12 	call	0x25aa	; 0x25aa <HPLCC2420M_HPLCC2420_read>
    return result;
}
    1bba:	08 95       	ret

00001bbc <cc2420radiom_FIFOP_disable>:
//-------------------------------------------------------------------------
inline result_t cc2420radiom_FIFOP_disable(void)
{
    unsigned char result;

    result = hplcc2420interruptm_FIFOP_disable();
    1bbc:	0e 94 49 11 	call	0x2292	; 0x2292 <hplcc2420interruptm_FIFOP_disable>
    return result;
}
    1bc0:	08 95       	ret

00001bc2 <cc2420radiom_Receive_receive>:
//-------------------------------------------------------------------------
inline Radio_MsgPtr cc2420radiom_Receive_receive(Radio_MsgPtr arg_0xa31b650)
{
    struct Radio_Msg *result;

    result = AMStandard_RadioReceive_receive(arg_0xa31b650);
    1bc2:	0e 94 11 0a 	call	0x1422	; 0x1422 <AMStandard_RadioReceive_receive>
    return result;
}
    1bc6:	08 95       	ret

00001bc8 <cc2420radiom_HPLChipconFIFO_readRXFIFO>:
inline result_t cc2420radiom_HPLChipconFIFO_readRXFIFO(uint8_t arg_0xa4118a0,
                                                       uint8_t * arg_0xa411a00)
{
    unsigned char result;

    result = hplcc2420fifom_HPLCC2420FIFO_readRXFIFO(arg_0xa4118a0,
    1bc8:	0e 94 63 10 	call	0x20c6	; 0x20c6 <hplcc2420fifom_HPLCC2420FIFO_readRXFIFO>
                                                     arg_0xa411a00);
    return result;
}
    1bcc:	08 95       	ret

00001bce <cc2420radiom_Send_sendDone>:
inline result_t cc2420radiom_Send_sendDone(Radio_MsgPtr arg_0xa3c3710,
                                           result_t arg_0xa3c3860)
{
    unsigned char result;

    result = AMStandard_RadioSend_sendDone(arg_0xa3c3710, arg_0xa3c3860);
    1bce:	0e 94 14 0a 	call	0x1428	; 0x1428 <AMStandard_RadioSend_sendDone>
    return result;
}
    1bd2:	08 95       	ret

00001bd4 <cc2420radiom_SFD_disable>:
//-------------------------------------------------------------------------
inline result_t cc2420radiom_SFD_disable(void)
{
    unsigned char result;

    result = hplcc2420interruptm_SFD_disable();
    1bd4:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <hplcc2420interruptm_SFD_disable>
    return result;
}
    1bd8:	08 95       	ret

00001bda <cc2420radiom_sendFailed>:

//-------------------------------------------------------------------------
void cc2420radiom_sendFailed(void)
{
    {
        _atomic_t _atomic = _atomic_start();
    1bda:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>

        cc2420radiom_stateRadio = cc2420radiom_IDLE_STATE;
    1bde:	92 e0       	ldi	r25, 0x02	; 2
    1be0:	90 93 b8 08 	sts	0x08B8, r25
        _atomic_end(_atomic);
    1be4:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
    }
    cc2420radiom_txbufptr->length = cc2420radiom_txbufptr->length -
    1be8:	80 91 b6 08 	lds	r24, 0x08B6
    1bec:	90 91 b7 08 	lds	r25, 0x08B7
    1bf0:	fc 01       	movw	r30, r24
    1bf2:	20 81       	ld	r18, Z
    1bf4:	2b 50       	subi	r18, 0x0B	; 11
    1bf6:	20 83       	st	Z, r18
inline result_t cc2420radiom_Send_sendDone(Radio_MsgPtr arg_0xa3c3710,
                                           result_t arg_0xa3c3860)
{
    unsigned char result;

    result = AMStandard_RadioSend_sendDone(arg_0xa3c3710, arg_0xa3c3860);
    1bf8:	60 e0       	ldi	r22, 0x00	; 0
    1bfa:	0e 94 14 0a 	call	0x1428	; 0x1428 <AMStandard_RadioSend_sendDone>
        _atomic_end(_atomic);
    }
    cc2420radiom_txbufptr->length = cc2420radiom_txbufptr->length -
        MSG_HEADER_SIZE - MSG_FOOTER_SIZE;
    cc2420radiom_Send_sendDone(cc2420radiom_txbufptr, FAIL);
}
    1bfe:	08 95       	ret

00001c00 <cc2420radiom_SFD_captured>:
    return result;
}

//-------------------------------------------------------------------------
inline result_t cc2420radiom_SFD_captured(uint16_t time)
{
    1c00:	cf 93       	push	r28
    1c02:	df 93       	push	r29
    1c04:	ec 01       	movw	r28, r24
    switch (cc2420radiom_stateRadio)
    1c06:	80 91 b8 08 	lds	r24, 0x08B8
    1c0a:	83 30       	cpi	r24, 0x03	; 3
    1c0c:	19 f0       	breq	.+6      	; 0x1c14 <cc2420radiom_SFD_captured+0x14>
    1c0e:	84 30       	cpi	r24, 0x04	; 4
    1c10:	59 f5       	brne	.+86     	; 0x1c68 <cc2420radiom_SFD_captured+0x68>
    1c12:	19 c0       	rjmp	.+50     	; 0x1c46 <cc2420radiom_SFD_captured+0x46>
//-------------------------------------------------------------------------
inline result_t cc2420radiom_SFD_enableCapture(bool arg_0xa41e260)
{
    unsigned char result;

    result = hplcc2420interruptm_SFD_enableCapture(arg_0xa41e260);
    1c14:	80 e0       	ldi	r24, 0x00	; 0
    1c16:	0e 94 bc 11 	call	0x2378	; 0x2378 <hplcc2420interruptm_SFD_enableCapture>
{
    switch (cc2420radiom_stateRadio)
    {
    case cc2420radiom_TX_STATE:
        cc2420radiom_SFD_enableCapture(FALSE);
        if (!LITE_READ_CC_SFD_PIN())
    1c1a:	0e 94 d1 06 	call	0xda2	; 0xda2 <LITE_READ_CC_SFD_PIN>
    1c1e:	00 97       	sbiw	r24, 0x00	; 0
    1c20:	19 f4       	brne	.+6      	; 0x1c28 <cc2420radiom_SFD_captured+0x28>
//-------------------------------------------------------------------------
inline result_t cc2420radiom_SFD_disable(void)
{
    unsigned char result;

    result = hplcc2420interruptm_SFD_disable();
    1c22:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <hplcc2420interruptm_SFD_disable>
    1c26:	03 c0       	rjmp	.+6      	; 0x1c2e <cc2420radiom_SFD_captured+0x2e>
        {
            cc2420radiom_SFD_disable();
        }
        else
        {
            cc2420radiom_stateRadio = cc2420radiom_TX_WAIT;
    1c28:	84 e0       	ldi	r24, 0x04	; 4
    1c2a:	80 93 b8 08 	sts	0x08B8, r24
        }
        cc2420radiom_txbufptr->time = time;
    1c2e:	e0 91 b6 08 	lds	r30, 0x08B6
    1c32:	f0 91 b7 08 	lds	r31, 0x08B7
    1c36:	ee 58       	subi	r30, 0x8E	; 142
    1c38:	ff 4f       	sbci	r31, 0xFF	; 255
    1c3a:	d1 83       	std	Z+1, r29	; 0x01
    1c3c:	c0 83       	st	Z, r28
        if (cc2420radiom_stateRadio == cc2420radiom_TX_WAIT)
    1c3e:	80 91 b8 08 	lds	r24, 0x08B8
    1c42:	84 30       	cpi	r24, 0x04	; 4
    1c44:	89 f0       	breq	.+34     	; 0x1c68 <cc2420radiom_SFD_captured+0x68>
        {
            break;
        }
    case cc2420radiom_TX_WAIT:
        cc2420radiom_stateRadio = cc2420radiom_POST_TX_STATE;
    1c46:	86 e0       	ldi	r24, 0x06	; 6
    1c48:	80 93 b8 08 	sts	0x08B8, r24
//-------------------------------------------------------------------------
inline result_t cc2420radiom_SFD_disable(void)
{
    unsigned char result;

    result = hplcc2420interruptm_SFD_disable();
    1c4c:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <hplcc2420interruptm_SFD_disable>
//-------------------------------------------------------------------------
inline result_t cc2420radiom_SFD_enableCapture(bool arg_0xa41e260)
{
    unsigned char result;

    result = hplcc2420interruptm_SFD_enableCapture(arg_0xa41e260);
    1c50:	81 e0       	ldi	r24, 0x01	; 1
    1c52:	0e 94 bc 11 	call	0x2378	; 0x2378 <hplcc2420interruptm_SFD_enableCapture>
        }
    case cc2420radiom_TX_WAIT:
        cc2420radiom_stateRadio = cc2420radiom_POST_TX_STATE;
        cc2420radiom_SFD_disable();
        cc2420radiom_SFD_enableCapture(TRUE);
        if (!postTask(cc2420radiom_PacketSent, 5))
    1c56:	80 e0       	ldi	r24, 0x00	; 0
    1c58:	9d e0       	ldi	r25, 0x0D	; 13
    1c5a:	65 e0       	ldi	r22, 0x05	; 5
    1c5c:	0e 94 88 14 	call	0x2910	; 0x2910 <postTask>
    1c60:	88 23       	and	r24, r24
    1c62:	11 f4       	brne	.+4      	; 0x1c68 <cc2420radiom_SFD_captured+0x68>
        {
            cc2420radiom_sendFailed();
    1c64:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <cc2420radiom_sendFailed>
        break;
    default:
        ;
    }
    return SUCCESS;
}
    1c68:	81 e0       	ldi	r24, 0x01	; 1
    1c6a:	df 91       	pop	r29
    1c6c:	cf 91       	pop	r28
    1c6e:	08 95       	ret

00001c70 <cc2420radiom_Send_send>:
    }
}

//-------------------------------------------------------------------------
inline result_t cc2420radiom_Send_send(Radio_MsgPtr pMsg)
{
    1c70:	1f 93       	push	r17
    1c72:	cf 93       	push	r28
    1c74:	df 93       	push	r29
    1c76:	ec 01       	movw	r28, r24
    uint8_t currentstate;

    {
        _atomic_t _atomic = _atomic_start();
    1c78:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>

        currentstate = cc2420radiom_stateRadio;
    1c7c:	10 91 b8 08 	lds	r17, 0x08B8
        _atomic_end(_atomic);
    1c80:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
    }

     if (currentstate == cc2420radiom_IDLE_STATE)
    1c84:	12 30       	cpi	r17, 0x02	; 2
    1c86:	f1 f5       	brne	.+124    	; 0x1d04 <cc2420radiom_Send_send+0x94>
    {
        pMsg->fcflo = 0x08;
    1c88:	88 e0       	ldi	r24, 0x08	; 8
    1c8a:	8a 83       	std	Y+2, r24	; 0x02
        if (cc2420radiom_bAckEnable)
    1c8c:	80 91 b2 08 	lds	r24, 0x08B2
    1c90:	88 23       	and	r24, r24
    1c92:	11 f0       	breq	.+4      	; 0x1c98 <cc2420radiom_Send_send+0x28>
        {
            pMsg->fcfhi = 0x21;
    1c94:	81 e2       	ldi	r24, 0x21	; 33
    1c96:	01 c0       	rjmp	.+2      	; 0x1c9a <cc2420radiom_Send_send+0x2a>
        }
        else
        {
            pMsg->fcfhi = 0x01;
    1c98:	81 e0       	ldi	r24, 0x01	; 1
    1c9a:	89 83       	std	Y+1, r24	; 0x01
        }
        pMsg->destpan = BCAST_ADDRESS;
    1c9c:	8f ef       	ldi	r24, 0xFF	; 255
    1c9e:	9f ef       	ldi	r25, 0xFF	; 255
    1ca0:	9d 83       	std	Y+5, r25	; 0x05
    1ca2:	8c 83       	std	Y+4, r24	; 0x04
        //don't understand why it has to be LSB. Must check later. 
        pMsg->addr = toLSB16(pMsg->addr);
    1ca4:	8e 81       	ldd	r24, Y+6	; 0x06
    1ca6:	9f 81       	ldd	r25, Y+7	; 0x07
    1ca8:	0e 94 0e 36 	call	0x6c1c	; 0x6c1c <toLSB16>
    1cac:	9f 83       	std	Y+7, r25	; 0x07
    1cae:	8e 83       	std	Y+6, r24	; 0x06
        //The length now includes both the 
        pMsg->length = pMsg->length + MSG_HEADER_SIZE + MSG_FOOTER_SIZE;
    1cb0:	88 81       	ld	r24, Y
    1cb2:	85 5f       	subi	r24, 0xF5	; 245
    1cb4:	88 83       	st	Y, r24
        pMsg->dsn = ++cc2420radiom_currentDSN;
    1cb6:	80 91 3c 08 	lds	r24, 0x083C
    1cba:	8f 5f       	subi	r24, 0xFF	; 255
    1cbc:	80 93 3c 08 	sts	0x083C, r24
    1cc0:	8b 83       	std	Y+3, r24	; 0x03
        pMsg->time = 0;
    1cc2:	fe 01       	movw	r30, r28
    1cc4:	ee 58       	subi	r30, 0x8E	; 142
    1cc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc8:	11 82       	std	Z+1, r1	; 0x01
    1cca:	10 82       	st	Z, r1
        cc2420radiom_txlength = pMsg->length - MSG_FOOTER_SIZE;
    1ccc:	88 81       	ld	r24, Y
    1cce:	82 50       	subi	r24, 0x02	; 2
    1cd0:	80 93 b9 08 	sts	0x08B9, r24
        cc2420radiom_txbufptr = pMsg;
    1cd4:	d0 93 b7 08 	sts	0x08B7, r29
    1cd8:	c0 93 b6 08 	sts	0x08B6, r28
        cc2420radiom_countRetry = 8;
    1cdc:	88 e0       	ldi	r24, 0x08	; 8
    1cde:	80 93 b3 08 	sts	0x08B3, r24
        {
            _atomic_t _atomic = _atomic_start();
    1ce2:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>

            cc2420radiom_stateRadio = cc2420radiom_PRE_TX_STATE;
    1ce6:	95 e0       	ldi	r25, 0x05	; 5
    1ce8:	90 93 b8 08 	sts	0x08B8, r25
            _atomic_end(_atomic);
    1cec:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
        }
        if (!postTask(cc2420radiom_startSend, 5))
    1cf0:	89 e8       	ldi	r24, 0x89	; 137
    1cf2:	9e e0       	ldi	r25, 0x0E	; 14
    1cf4:	65 e0       	ldi	r22, 0x05	; 5
    1cf6:	0e 94 88 14 	call	0x2910	; 0x2910 <postTask>
    1cfa:	88 23       	and	r24, r24
    1cfc:	29 f4       	brne	.+10     	; 0x1d08 <cc2420radiom_Send_send+0x98>
        {
            cc2420radiom_sendFailed();
    1cfe:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <cc2420radiom_sendFailed>
    1d02:	02 c0       	rjmp	.+4      	; 0x1d08 <cc2420radiom_Send_send+0x98>
        }
        return SUCCESS;
    }
    return FAIL;
    1d04:	80 e0       	ldi	r24, 0x00	; 0
    1d06:	01 c0       	rjmp	.+2      	; 0x1d0a <cc2420radiom_Send_send+0x9a>
        }
        if (!postTask(cc2420radiom_startSend, 5))
        {
            cc2420radiom_sendFailed();
        }
        return SUCCESS;
    1d08:	81 e0       	ldi	r24, 0x01	; 1
    }
    return FAIL;
}
    1d0a:	df 91       	pop	r29
    1d0c:	cf 91       	pop	r28
    1d0e:	1f 91       	pop	r17
    1d10:	08 95       	ret

00001d12 <cc2420radiom_startSend>:
//-------------------------------------------------------------------------
inline uint8_t cc2420radiom_HPLChipcon_cmd(uint8_t arg_0xa403928)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420_cmd(arg_0xa403928);
    1d12:	89 e0       	ldi	r24, 0x09	; 9
    1d14:	0e 94 ba 12 	call	0x2574	; 0x2574 <HPLCC2420M_HPLCC2420_cmd>
}

//-------------------------------------------------------------------------
inline void cc2420radiom_startSend(void)
{
    if (!cc2420radiom_HPLChipcon_cmd(0x09))
    1d18:	88 23       	and	r24, r24
    1d1a:	19 f4       	brne	.+6      	; 0x1d22 <cc2420radiom_startSend+0x10>
    {
        cc2420radiom_sendFailed();
    1d1c:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <cc2420radiom_sendFailed>
        return;
    1d20:	08 95       	ret
    }
    if (!cc2420radiom_HPLChipconFIFO_writeTXFIFO(cc2420radiom_txlength + 1,
    1d22:	80 91 b9 08 	lds	r24, 0x08B9
                                                        uint8_t *
                                                        arg_0xa40c170)
{
    unsigned char result;

    result = hplcc2420fifom_HPLCC2420FIFO_writeTXFIFO(arg_0xa40c010,
    1d26:	60 91 b6 08 	lds	r22, 0x08B6
    1d2a:	70 91 b7 08 	lds	r23, 0x08B7
    1d2e:	8f 5f       	subi	r24, 0xFF	; 255
    1d30:	0e 94 01 10 	call	0x2002	; 0x2002 <hplcc2420fifom_HPLCC2420FIFO_writeTXFIFO>
    if (!cc2420radiom_HPLChipcon_cmd(0x09))
    {
        cc2420radiom_sendFailed();
        return;
    }
    if (!cc2420radiom_HPLChipconFIFO_writeTXFIFO(cc2420radiom_txlength + 1,
    1d34:	88 23       	and	r24, r24
    1d36:	11 f4       	brne	.+4      	; 0x1d3c <cc2420radiom_startSend+0x2a>
                                                 (uint8_t *)
                                                 cc2420radiom_txbufptr))
    {
        cc2420radiom_sendFailed();
    1d38:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <cc2420radiom_sendFailed>
    1d3c:	08 95       	ret

00001d3e <cc2420radiom_sendPacket>:
//-------------------------------------------------------------------------
inline uint8_t cc2420radiom_HPLChipcon_cmd(uint8_t arg_0xa403928)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420_cmd(arg_0xa403928);
    1d3e:	85 e0       	ldi	r24, 0x05	; 5
    1d40:	0e 94 ba 12 	call	0x2574	; 0x2574 <HPLCC2420M_HPLCC2420_cmd>
    1d44:	80 e0       	ldi	r24, 0x00	; 0
    1d46:	0e 94 ba 12 	call	0x2574	; 0x2574 <HPLCC2420M_HPLCC2420_cmd>
{
    uint8_t status;

    cc2420radiom_HPLChipcon_cmd(0x05);
    status = cc2420radiom_HPLChipcon_cmd(0x00);
    if ((status >> 3) & 0x01)
    1d4a:	86 95       	lsr	r24
    1d4c:	86 95       	lsr	r24
    1d4e:	86 95       	lsr	r24
    1d50:	80 ff       	sbrs	r24, 0
    1d52:	04 c0       	rjmp	.+8      	; 0x1d5c <cc2420radiom_sendPacket+0x1e>
//-------------------------------------------------------------------------
inline result_t cc2420radiom_SFD_enableCapture(bool arg_0xa41e260)
{
    unsigned char result;

    result = hplcc2420interruptm_SFD_enableCapture(arg_0xa41e260);
    1d54:	81 e0       	ldi	r24, 0x01	; 1
    1d56:	0e 94 bc 11 	call	0x2378	; 0x2378 <hplcc2420interruptm_SFD_enableCapture>
    1d5a:	08 95       	ret
    {
        cc2420radiom_SFD_enableCapture(TRUE);
    }
    else
    {
        cc2420radiom_sendFailed();
    1d5c:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <cc2420radiom_sendFailed>
    1d60:	08 95       	ret

00001d62 <cc2420radiom_flushRXFIFO>:
//-------------------------------------------------------------------------
inline result_t cc2420radiom_FIFOP_disable(void)
{
    unsigned char result;

    result = hplcc2420interruptm_FIFOP_disable();
    1d62:	0e 94 49 11 	call	0x2292	; 0x2292 <hplcc2420interruptm_FIFOP_disable>
//-------------------------------------------------------------------------
inline uint16_t cc2420radiom_HPLChipcon_read(uint8_t arg_0xa4103b0)
{
    unsigned int result;

    result = HPLCC2420M_HPLCC2420_read(arg_0xa4103b0);
    1d66:	8f e3       	ldi	r24, 0x3F	; 63
    1d68:	0e 94 d5 12 	call	0x25aa	; 0x25aa <HPLCC2420M_HPLCC2420_read>
//-------------------------------------------------------------------------
inline uint8_t cc2420radiom_HPLChipcon_cmd(uint8_t arg_0xa403928)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420_cmd(arg_0xa403928);
    1d6c:	88 e0       	ldi	r24, 0x08	; 8
    1d6e:	0e 94 ba 12 	call	0x2574	; 0x2574 <HPLCC2420M_HPLCC2420_cmd>
    1d72:	88 e0       	ldi	r24, 0x08	; 8
    1d74:	0e 94 ba 12 	call	0x2574	; 0x2574 <HPLCC2420M_HPLCC2420_cmd>
    cc2420radiom_FIFOP_disable();
    cc2420radiom_HPLChipcon_read(0x3F);
    cc2420radiom_HPLChipcon_cmd(0x08);
    cc2420radiom_HPLChipcon_cmd(0x08);
    {
        _atomic_t _atomic = _atomic_start();
    1d78:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>

        cc2420radiom_bPacketReceiving = FALSE;
    1d7c:	10 92 3d 08 	sts	0x083D, r1
        _atomic_end(_atomic);
    1d80:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
//-------------------------------------------------------------------------
inline result_t cc2420radiom_FIFOP_startWait(bool arg_0xa422588)
{
    unsigned char result;

    result = hplcc2420interruptm_FIFOP_startWait(arg_0xa422588);
    1d84:	80 e0       	ldi	r24, 0x00	; 0
    1d86:	0e 94 36 11 	call	0x226c	; 0x226c <hplcc2420interruptm_FIFOP_startWait>

        cc2420radiom_bPacketReceiving = FALSE;
        _atomic_end(_atomic);
    }
    cc2420radiom_FIFOP_startWait(FALSE);
}
    1d8a:	08 95       	ret

00001d8c <cc2420radiom_HPLChipconFIFO_RXFIFODone>:
}

//ALL THE DATA IN LENGTH IS THE CORRECT FRAME 
inline result_t cc2420radiom_HPLChipconFIFO_RXFIFODone(uint8_t length,
                                                       uint8_t * data)
{
    1d8c:	1f 93       	push	r17
    1d8e:	cf 93       	push	r28
    1d90:	df 93       	push	r29
    1d92:	18 2f       	mov	r17, r24
    1d94:	eb 01       	movw	r28, r22
    //The data now contains the full packet, starting with a packet length which is the remaining part of the packet, not including itself
    //The length, however, includes everything 
    uint8_t currentstate;

    {
        _atomic_t _atomic = _atomic_start();
    1d96:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>

        {
            currentstate = cc2420radiom_stateRadio;
        }
        _atomic_end(_atomic);
    1d9a:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
    }
    if (((!LITE_READ_CC_FIFO_PIN() && !LITE_READ_CC_FIFOP_PIN()) || length
    1d9e:	0e 94 ef 06 	call	0xdde	; 0xdde <LITE_READ_CC_FIFO_PIN>
    1da2:	00 97       	sbiw	r24, 0x00	; 0
    1da4:	21 f4       	brne	.+8      	; 0x1dae <cc2420radiom_HPLChipconFIFO_RXFIFODone+0x22>
    1da6:	0e 94 a1 06 	call	0xd42	; 0xd42 <LITE_READ_CC_FIFOP_PIN>
    1daa:	00 97       	sbiw	r24, 0x00	; 0
    1dac:	a1 f0       	breq	.+40     	; 0x1dd6 <cc2420radiom_HPLChipconFIFO_RXFIFODone+0x4a>
    1dae:	11 23       	and	r17, r17
    1db0:	91 f0       	breq	.+36     	; 0x1dd6 <cc2420radiom_HPLChipconFIFO_RXFIFODone+0x4a>
         == 0) || length > MSG_DATA_SIZE)
    1db2:	11 37       	cpi	r17, 0x71	; 113
    1db4:	80 f4       	brcc	.+32     	; 0x1dd6 <cc2420radiom_HPLChipconFIFO_RXFIFODone+0x4a>
            cc2420radiom_bPacketReceiving = FALSE;
            _atomic_end(_atomic);
        }
        return SUCCESS;
    }
    cc2420radiom_rxbufptr = (Radio_MsgPtr) data;
    1db6:	d0 93 3b 08 	sts	0x083B, r29
    1dba:	c0 93 3a 08 	sts	0x083A, r28
    if ((cc2420radiom_rxbufptr->fcfhi & 0x07) != 0x01
    1dbe:	89 81       	ldd	r24, Y+1	; 0x01
    1dc0:	87 70       	andi	r24, 0x07	; 7
    1dc2:	81 30       	cpi	r24, 0x01	; 1
    1dc4:	41 f4       	brne	.+16     	; 0x1dd6 <cc2420radiom_HPLChipconFIFO_RXFIFODone+0x4a>
        || cc2420radiom_rxbufptr->fcflo != 0x08)
    1dc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc8:	88 30       	cpi	r24, 0x08	; 8
    1dca:	29 f4       	brne	.+10     	; 0x1dd6 <cc2420radiom_HPLChipconFIFO_RXFIFODone+0x4a>
            _atomic_end(_atomic);
        }
        return SUCCESS;
    }
    //Now modifies the length such that it only points to the actual payload defined by the user 
    cc2420radiom_rxbufptr->length = cc2420radiom_rxbufptr->length -
    1dcc:	88 81       	ld	r24, Y
    1dce:	8b 50       	subi	r24, 0x0B	; 11
    1dd0:	88 83       	st	Y, r24
        MSG_HEADER_SIZE - MSG_FOOTER_SIZE;
    //Revised by Qing, from 29 to PAYLOAD_LENGTH 
    if (cc2420radiom_rxbufptr->length > PAYLOAD_LENGTH)
    1dd2:	85 36       	cpi	r24, 0x65	; 101
    1dd4:	48 f0       	brcs	.+18     	; 0x1de8 <cc2420radiom_HPLChipconFIFO_RXFIFODone+0x5c>
    {
        cc2420radiom_flushRXFIFO();
    1dd6:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <cc2420radiom_flushRXFIFO>
        {
            _atomic_t _atomic = _atomic_start();
    1dda:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>

            cc2420radiom_bPacketReceiving = FALSE;
    1dde:	10 92 3d 08 	sts	0x083D, r1
            _atomic_end(_atomic);
    1de2:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
        }
        return SUCCESS;
    1de6:	4a c0       	rjmp	.+148    	; 0x1e7c <cc2420radiom_HPLChipconFIFO_RXFIFODone+0xf0>
    }
    cc2420radiom_rxbufptr->addr = fromLSB16(cc2420radiom_rxbufptr->addr);
    1de8:	8e 81       	ldd	r24, Y+6	; 0x06
    1dea:	9f 81       	ldd	r25, Y+7	; 0x07
    1dec:	0e 94 20 36 	call	0x6c40	; 0x6c40 <fromLSB16>
    1df0:	9f 83       	std	Y+7, r25	; 0x07
    1df2:	8e 83       	std	Y+6, r24	; 0x06
    //CRC and LQI share the information 
    cc2420radiom_rxbufptr->crc = data[length - 1] >> 7;
    1df4:	20 91 3a 08 	lds	r18, 0x083A
    1df8:	30 91 3b 08 	lds	r19, 0x083B
    1dfc:	81 2f       	mov	r24, r17
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	fc 01       	movw	r30, r24
    1e02:	31 97       	sbiw	r30, 0x01	; 1
    1e04:	ec 0f       	add	r30, r28
    1e06:	fd 1f       	adc	r31, r29
    1e08:	d9 01       	movw	r26, r18
    1e0a:	a0 59       	subi	r26, 0x90	; 144
    1e0c:	bf 4f       	sbci	r27, 0xFF	; 255
    1e0e:	40 81       	ld	r20, Z
    1e10:	44 1f       	adc	r20, r20
    1e12:	44 27       	eor	r20, r20
    1e14:	44 1f       	adc	r20, r20
    1e16:	4c 93       	st	X, r20
    cc2420radiom_rxbufptr->strength = data[length - 2];
    1e18:	d9 01       	movw	r26, r18
    1e1a:	a2 59       	subi	r26, 0x92	; 146
    1e1c:	bf 4f       	sbci	r27, 0xFF	; 255
    1e1e:	c8 0f       	add	r28, r24
    1e20:	d9 1f       	adc	r29, r25
    1e22:	22 97       	sbiw	r28, 0x02	; 2
    1e24:	88 81       	ld	r24, Y
    1e26:	8c 93       	st	X, r24
    cc2420radiom_rxbufptr->lqi = data[length - 1] & 0x7F;
    1e28:	21 59       	subi	r18, 0x91	; 145
    1e2a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e2c:	80 81       	ld	r24, Z
    1e2e:	8f 77       	andi	r24, 0x7F	; 127
    1e30:	f9 01       	movw	r30, r18
    1e32:	80 83       	st	Z, r24
    {
        _atomic_t _atomic = _atomic_start();
    1e34:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>
    1e38:	18 2f       	mov	r17, r24

        {
            if (!postTask(cc2420radiom_PacketRcvd, 5))
    1e3a:	87 e1       	ldi	r24, 0x17	; 23
    1e3c:	9d e0       	ldi	r25, 0x0D	; 13
    1e3e:	65 e0       	ldi	r22, 0x05	; 5
    1e40:	0e 94 88 14 	call	0x2910	; 0x2910 <postTask>
    1e44:	88 23       	and	r24, r24
    1e46:	11 f4       	brne	.+4      	; 0x1e4c <cc2420radiom_HPLChipconFIFO_RXFIFODone+0xc0>
            {
                cc2420radiom_bPacketReceiving = FALSE;
    1e48:	10 92 3d 08 	sts	0x083D, r1
            }
        }
        _atomic_end(_atomic);
    1e4c:	81 2f       	mov	r24, r17
    1e4e:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
    }
    if (!LITE_READ_CC_FIFO_PIN() && !LITE_READ_CC_FIFOP_PIN())
    1e52:	0e 94 ef 06 	call	0xdde	; 0xdde <LITE_READ_CC_FIFO_PIN>
    1e56:	00 97       	sbiw	r24, 0x00	; 0
    1e58:	21 f4       	brne	.+8      	; 0x1e62 <cc2420radiom_HPLChipconFIFO_RXFIFODone+0xd6>
    1e5a:	0e 94 a1 06 	call	0xd42	; 0xd42 <LITE_READ_CC_FIFOP_PIN>
    1e5e:	00 97       	sbiw	r24, 0x00	; 0
    1e60:	59 f0       	breq	.+22     	; 0x1e78 <cc2420radiom_HPLChipconFIFO_RXFIFODone+0xec>
    {
        cc2420radiom_flushRXFIFO();
        return SUCCESS;
    }
    if (!LITE_READ_CC_FIFOP_PIN())
    1e62:	0e 94 a1 06 	call	0xd42	; 0xd42 <LITE_READ_CC_FIFOP_PIN>
    1e66:	00 97       	sbiw	r24, 0x00	; 0
    1e68:	39 f4       	brne	.+14     	; 0x1e78 <cc2420radiom_HPLChipconFIFO_RXFIFODone+0xec>
    {
        if (postTask(cc2420radiom_delayedRXFIFOtask, 5))
    1e6a:	87 ec       	ldi	r24, 0xC7	; 199
    1e6c:	9f e0       	ldi	r25, 0x0F	; 15
    1e6e:	65 e0       	ldi	r22, 0x05	; 5
    1e70:	0e 94 88 14 	call	0x2910	; 0x2910 <postTask>
    1e74:	88 23       	and	r24, r24
    1e76:	11 f4       	brne	.+4      	; 0x1e7c <cc2420radiom_HPLChipconFIFO_RXFIFODone+0xf0>
        {
            return SUCCESS;
        }
    }
    cc2420radiom_flushRXFIFO();
    1e78:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <cc2420radiom_flushRXFIFO>
    return SUCCESS;
}
    1e7c:	81 e0       	ldi	r24, 0x01	; 1
    1e7e:	df 91       	pop	r29
    1e80:	cf 91       	pop	r28
    1e82:	1f 91       	pop	r17
    1e84:	08 95       	ret

00001e86 <cc2420radiom_FIFOP_fired>:
    cc2420radiom_delayedRXFIFO();
}

//-------------------------------------------------------------------------
inline result_t cc2420radiom_FIFOP_fired(void)
{
    1e86:	1f 93       	push	r17
    if (!LITE_READ_CC_FIFO_PIN())
    1e88:	0e 94 ef 06 	call	0xdde	; 0xdde <LITE_READ_CC_FIFO_PIN>
    1e8c:	00 97       	sbiw	r24, 0x00	; 0
    1e8e:	19 f4       	brne	.+6      	; 0x1e96 <cc2420radiom_FIFOP_fired+0x10>
    {
        cc2420radiom_flushRXFIFO();
    1e90:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <cc2420radiom_flushRXFIFO>
        return SUCCESS;
    1e94:	12 c0       	rjmp	.+36     	; 0x1eba <cc2420radiom_FIFOP_fired+0x34>
    }
    {
        _atomic_t _atomic = _atomic_start();
    1e96:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>
    1e9a:	18 2f       	mov	r17, r24

        {
            if (postTask(cc2420radiom_delayedRXFIFOtask, 5))
    1e9c:	87 ec       	ldi	r24, 0xC7	; 199
    1e9e:	9f e0       	ldi	r25, 0x0F	; 15
    1ea0:	65 e0       	ldi	r22, 0x05	; 5
    1ea2:	0e 94 88 14 	call	0x2910	; 0x2910 <postTask>
    1ea6:	88 23       	and	r24, r24
    1ea8:	19 f0       	breq	.+6      	; 0x1eb0 <cc2420radiom_FIFOP_fired+0x2a>
//-------------------------------------------------------------------------
inline result_t cc2420radiom_FIFOP_disable(void)
{
    unsigned char result;

    result = hplcc2420interruptm_FIFOP_disable();
    1eaa:	0e 94 49 11 	call	0x2292	; 0x2292 <hplcc2420interruptm_FIFOP_disable>
    1eae:	02 c0       	rjmp	.+4      	; 0x1eb4 <cc2420radiom_FIFOP_fired+0x2e>
            {
                cc2420radiom_FIFOP_disable();
            }
            else
            {
                cc2420radiom_flushRXFIFO();
    1eb0:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <cc2420radiom_flushRXFIFO>
            }
        }
        _atomic_end(_atomic);
    1eb4:	81 2f       	mov	r24, r17
    1eb6:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
    }
    return SUCCESS;
}
    1eba:	81 e0       	ldi	r24, 0x01	; 1
    1ebc:	1f 91       	pop	r17
    1ebe:	08 95       	ret

00001ec0 <cc2420radiom_tryToSend>:
    }
}

//-------------------------------------------------------------------------
inline void cc2420radiom_tryToSend(void)
{
    1ec0:	1f 93       	push	r17
    uint8_t currentstate;

    {
        _atomic_t _atomic = _atomic_start();
    1ec2:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>

        currentstate = cc2420radiom_stateRadio;
    1ec6:	10 91 b8 08 	lds	r17, 0x08B8
        _atomic_end(_atomic);
    1eca:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
    }
    if (currentstate == cc2420radiom_PRE_TX_STATE)
    1ece:	15 30       	cpi	r17, 0x05	; 5
    1ed0:	c1 f4       	brne	.+48     	; 0x1f02 <cc2420radiom_tryToSend+0x42>
    {
        if (!LITE_READ_CC_FIFO_PIN() && !LITE_READ_CC_FIFOP_PIN())
    1ed2:	0e 94 ef 06 	call	0xdde	; 0xdde <LITE_READ_CC_FIFO_PIN>
    1ed6:	00 97       	sbiw	r24, 0x00	; 0
    1ed8:	31 f4       	brne	.+12     	; 0x1ee6 <cc2420radiom_tryToSend+0x26>
    1eda:	0e 94 a1 06 	call	0xd42	; 0xd42 <LITE_READ_CC_FIFOP_PIN>
    1ede:	00 97       	sbiw	r24, 0x00	; 0
    1ee0:	11 f4       	brne	.+4      	; 0x1ee6 <cc2420radiom_tryToSend+0x26>
        {
            cc2420radiom_flushRXFIFO();
    1ee2:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <cc2420radiom_flushRXFIFO>
        }
        if (LITE_READ_RADIO_CCA_PIN())
    1ee6:	0e 94 01 07 	call	0xe02	; 0xe02 <LITE_READ_RADIO_CCA_PIN>
    1eea:	00 97       	sbiw	r24, 0x00	; 0
    1eec:	61 f0       	breq	.+24     	; 0x1f06 <cc2420radiom_tryToSend+0x46>
        {
            {
                _atomic_t _atomic = _atomic_start();
    1eee:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>

                cc2420radiom_stateRadio = cc2420radiom_TX_STATE;
    1ef2:	93 e0       	ldi	r25, 0x03	; 3
    1ef4:	90 93 b8 08 	sts	0x08B8, r25
                _atomic_end(_atomic);
    1ef8:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
            }
            cc2420radiom_sendPacket();
    1efc:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <cc2420radiom_sendPacket>
    1f00:	02 c0       	rjmp	.+4      	; 0x1f06 <cc2420radiom_tryToSend+0x46>
        }
    }
    else
    {
        cc2420radiom_flushRXFIFO();
    1f02:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <cc2420radiom_flushRXFIFO>
    }
}
    1f06:	1f 91       	pop	r17
    1f08:	08 95       	ret

00001f0a <cc2420radiom_HPLChipconFIFO_TXFIFODone>:

//-------------------------------------------------------------------------
inline result_t cc2420radiom_HPLChipconFIFO_TXFIFODone(uint8_t length,
                                                       uint8_t * data)
{
    cc2420radiom_tryToSend();
    1f0a:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <cc2420radiom_tryToSend>
    return SUCCESS;
}
    1f0e:	81 e0       	ldi	r24, 0x01	; 1
    1f10:	08 95       	ret

00001f12 <cc2420radiom_delayedRXFIFO>:
    cc2420radiom_FIFOP_startWait(FALSE);
}

//-------------------------------------------------------------------------
void cc2420radiom_delayedRXFIFO(void)
{
    1f12:	0f 93       	push	r16
    1f14:	1f 93       	push	r17
    //The MSG_DATA_SIZE is defined such that it contains the total length of data plus 2 bytes of the RSSI and LQI 
    uint8_t len = MSG_DATA_SIZE;
    uint8_t _bPacketReceiving;

    if (!LITE_READ_CC_FIFO_PIN() && !LITE_READ_CC_FIFOP_PIN())
    1f16:	0e 94 ef 06 	call	0xdde	; 0xdde <LITE_READ_CC_FIFO_PIN>
    1f1a:	00 97       	sbiw	r24, 0x00	; 0
    1f1c:	21 f4       	brne	.+8      	; 0x1f26 <cc2420radiom_delayedRXFIFO+0x14>
    1f1e:	0e 94 a1 06 	call	0xd42	; 0xd42 <LITE_READ_CC_FIFOP_PIN>
    1f22:	00 97       	sbiw	r24, 0x00	; 0
    1f24:	79 f1       	breq	.+94     	; 0x1f84 <cc2420radiom_delayedRXFIFO+0x72>
    {
        cc2420radiom_flushRXFIFO();
        return;
    }
    {
        _atomic_t _atomic = _atomic_start();
    1f26:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>
    1f2a:	08 2f       	mov	r16, r24

        {
            _bPacketReceiving = cc2420radiom_bPacketReceiving;
    1f2c:	10 91 3d 08 	lds	r17, 0x083D
            if (_bPacketReceiving)
    1f30:	11 23       	and	r17, r17
    1f32:	51 f0       	breq	.+20     	; 0x1f48 <cc2420radiom_delayedRXFIFO+0x36>
            {
                if (!postTask(cc2420radiom_delayedRXFIFOtask, 5))
    1f34:	87 ec       	ldi	r24, 0xC7	; 199
    1f36:	9f e0       	ldi	r25, 0x0F	; 15
    1f38:	65 e0       	ldi	r22, 0x05	; 5
    1f3a:	0e 94 88 14 	call	0x2910	; 0x2910 <postTask>
    1f3e:	88 23       	and	r24, r24
    1f40:	31 f4       	brne	.+12     	; 0x1f4e <cc2420radiom_delayedRXFIFO+0x3c>
                {
                    cc2420radiom_flushRXFIFO();
    1f42:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <cc2420radiom_flushRXFIFO>
    1f46:	03 c0       	rjmp	.+6      	; 0x1f4e <cc2420radiom_delayedRXFIFO+0x3c>
                }
            }
            else
            {
                cc2420radiom_bPacketReceiving = TRUE;
    1f48:	81 e0       	ldi	r24, 0x01	; 1
    1f4a:	80 93 3d 08 	sts	0x083D, r24
            }
        }
        _atomic_end(_atomic);
    1f4e:	80 2f       	mov	r24, r16
    1f50:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
    }
    //Now read the RX to get the data 
    if (!_bPacketReceiving)
    1f54:	11 23       	and	r17, r17
    1f56:	b1 f4       	brne	.+44     	; 0x1f84 <cc2420radiom_delayedRXFIFO+0x72>
inline result_t cc2420radiom_HPLChipconFIFO_readRXFIFO(uint8_t arg_0xa4118a0,
                                                       uint8_t * arg_0xa411a00)
{
    unsigned char result;

    result = hplcc2420fifom_HPLCC2420FIFO_readRXFIFO(arg_0xa4118a0,
    1f58:	60 91 3a 08 	lds	r22, 0x083A
    1f5c:	70 91 3b 08 	lds	r23, 0x083B
    1f60:	80 e7       	ldi	r24, 0x70	; 112
    1f62:	0e 94 63 10 	call	0x20c6	; 0x20c6 <hplcc2420fifom_HPLCC2420FIFO_readRXFIFO>
        _atomic_end(_atomic);
    }
    //Now read the RX to get the data 
    if (!_bPacketReceiving)
    {
        if (!cc2420radiom_HPLChipconFIFO_readRXFIFO(len, (uint8_t *)
    1f66:	88 23       	and	r24, r24
    1f68:	69 f4       	brne	.+26     	; 0x1f84 <cc2420radiom_delayedRXFIFO+0x72>
                                                    cc2420radiom_rxbufptr))
        {
            {
                _atomic_t _atomic = _atomic_start();
    1f6a:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>

                cc2420radiom_bPacketReceiving = FALSE;
    1f6e:	10 92 3d 08 	sts	0x083D, r1
                _atomic_end(_atomic);
    1f72:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
            }
            if (!postTask(cc2420radiom_delayedRXFIFOtask, 5))
    1f76:	87 ec       	ldi	r24, 0xC7	; 199
    1f78:	9f e0       	ldi	r25, 0x0F	; 15
    1f7a:	65 e0       	ldi	r22, 0x05	; 5
    1f7c:	0e 94 88 14 	call	0x2910	; 0x2910 <postTask>
    1f80:	88 23       	and	r24, r24
    1f82:	11 f4       	brne	.+4      	; 0x1f88 <cc2420radiom_delayedRXFIFO+0x76>
                cc2420radiom_flushRXFIFO();
            }
            return;
        }
    }
    cc2420radiom_flushRXFIFO();
    1f84:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <cc2420radiom_flushRXFIFO>
}
    1f88:	1f 91       	pop	r17
    1f8a:	0f 91       	pop	r16
    1f8c:	08 95       	ret

00001f8e <cc2420radiom_delayedRXFIFOtask>:
}

//-------------------------------------------------------------------------
inline void cc2420radiom_delayedRXFIFOtask(void)
{
    cc2420radiom_delayedRXFIFO();
    1f8e:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <cc2420radiom_delayedRXFIFO>
}
    1f92:	08 95       	ret

00001f94 <cc2420radiom_SplitControl_initDone>:
{
    unsigned char result;

    result = cc2420radiom_SplitControl_default_initDone();
    return result;
}
    1f94:	81 e0       	ldi	r24, 0x01	; 1
    1f96:	08 95       	ret

00001f98 <restorecc2420state>:

//-------------------------------------------------------------------------
inline void restorecc2420state()
{
    cc2420radiom_stateRadio = 2;
    1f98:	82 e0       	ldi	r24, 0x02	; 2
    1f9a:	80 93 b8 08 	sts	0x08B8, r24
}
    1f9e:	08 95       	ret

00001fa0 <hplcc2420fifom_signalRXdone>:
    return result;
}

//-------------------------------------------------------------------------
inline void hplcc2420fifom_signalRXdone(void)
{
    1fa0:	1f 93       	push	r17
    1fa2:	cf 93       	push	r28
    1fa4:	df 93       	push	r29
    uint8_t _rxlen;
    uint8_t *_rxbuf;

    {
        _atomic_t _atomic = _atomic_start();
    1fa6:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>

        {
            _rxlen = hplcc2420fifom_rxlength;
    1faa:	10 91 c2 08 	lds	r17, 0x08C2
            _rxbuf = hplcc2420fifom_rxbuf;
    1fae:	c0 91 bc 08 	lds	r28, 0x08BC
    1fb2:	d0 91 bd 08 	lds	r29, 0x08BD
            hplcc2420fifom_rxbufBusy = FALSE;
    1fb6:	10 92 c1 08 	sts	0x08C1, r1
        }
        _atomic_end(_atomic);
    1fba:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
                                                        uint8_t *
                                                        arg_0xa40c7f0)
{
    unsigned char result;

    result = cc2420radiom_HPLChipconFIFO_RXFIFODone(arg_0xa40c690,
    1fbe:	81 2f       	mov	r24, r17
    1fc0:	be 01       	movw	r22, r28
    1fc2:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <cc2420radiom_HPLChipconFIFO_RXFIFODone>
            hplcc2420fifom_rxbufBusy = FALSE;
        }
        _atomic_end(_atomic);
    }
    hplcc2420fifom_HPLCC2420FIFO_RXFIFODone(_rxlen, _rxbuf);
}
    1fc6:	df 91       	pop	r29
    1fc8:	cf 91       	pop	r28
    1fca:	1f 91       	pop	r17
    1fcc:	08 95       	ret

00001fce <hplcc2420fifom_signalTXdone>:
    return result;
}

//-------------------------------------------------------------------------
inline void hplcc2420fifom_signalTXdone(void)
{
    1fce:	1f 93       	push	r17
    1fd0:	cf 93       	push	r28
    1fd2:	df 93       	push	r29
    uint8_t _txlen;
    uint8_t *_txbuf;

    {
        _atomic_t _atomic = _atomic_start();
    1fd4:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>

        {
            _txlen = hplcc2420fifom_txlength;
    1fd8:	10 91 ba 08 	lds	r17, 0x08BA
            _txbuf = hplcc2420fifom_txbuf;
    1fdc:	c0 91 bf 08 	lds	r28, 0x08BF
    1fe0:	d0 91 c0 08 	lds	r29, 0x08C0
            hplcc2420fifom_txbufBusy = FALSE;
    1fe4:	10 92 be 08 	sts	0x08BE, r1
        }
        _atomic_end(_atomic);
    1fe8:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
                                                        uint8_t *
                                                        arg_0xa40ce80)
{
    unsigned char result;

    result = cc2420radiom_HPLChipconFIFO_TXFIFODone(arg_0xa40cd20,
    1fec:	81 2f       	mov	r24, r17
    1fee:	be 01       	movw	r22, r28
    1ff0:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <cc2420radiom_HPLChipconFIFO_TXFIFODone>
            hplcc2420fifom_txbufBusy = FALSE;
        }
        _atomic_end(_atomic);
    }
    hplcc2420fifom_HPLCC2420FIFO_TXFIFODone(_txlen, _txbuf);
}
    1ff4:	df 91       	pop	r29
    1ff6:	cf 91       	pop	r28
    1ff8:	1f 91       	pop	r17
    1ffa:	08 95       	ret

00001ffc <hplcc2420fifom_HPLCC2420FIFO_TXFIFODone>:
                                                        uint8_t *
                                                        arg_0xa40ce80)
{
    unsigned char result;

    result = cc2420radiom_HPLChipconFIFO_TXFIFODone(arg_0xa40cd20,
    1ffc:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <cc2420radiom_HPLChipconFIFO_TXFIFODone>
                                                    arg_0xa40ce80);
    return result;
}
    2000:	08 95       	ret

00002002 <hplcc2420fifom_HPLCC2420FIFO_writeTXFIFO>:
}

//-------------------------------------------------------------------------
inline result_t hplcc2420fifom_HPLCC2420FIFO_writeTXFIFO(uint8_t len, uint8_t *
                                                         msg)
{
    2002:	ef 92       	push	r14
    2004:	ff 92       	push	r15
    2006:	0f 93       	push	r16
    2008:	1f 93       	push	r17
    200a:	df 93       	push	r29
    200c:	cf 93       	push	r28
    200e:	0f 92       	push	r0
    2010:	cd b7       	in	r28, 0x3d	; 61
    2012:	de b7       	in	r29, 0x3e	; 62
    2014:	18 2f       	mov	r17, r24
    2016:	7b 01       	movw	r14, r22
    uint8_t i = 0;
    uint8_t status;
    bool returnFail =  FALSE;

    {
        _atomic_t _atomic = _atomic_start();
    2018:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>

        {
            if (hplcc2420fifom_txbufBusy)
    201c:	90 91 be 08 	lds	r25, 0x08BE
    2020:	99 23       	and	r25, r25
    2022:	29 f4       	brne	.+10     	; 0x202e <hplcc2420fifom_HPLCC2420FIFO_writeTXFIFO+0x2c>
            {
                returnFail = TRUE;
            }
            else
            {
                hplcc2420fifom_txbufBusy = TRUE;
    2024:	91 e0       	ldi	r25, 0x01	; 1
    2026:	90 93 be 08 	sts	0x08BE, r25
inline result_t hplcc2420fifom_HPLCC2420FIFO_writeTXFIFO(uint8_t len, uint8_t *
                                                         msg)
{
    uint8_t i = 0;
    uint8_t status;
    bool returnFail =  FALSE;
    202a:	00 e0       	ldi	r16, 0x00	; 0
    202c:	01 c0       	rjmp	.+2      	; 0x2030 <hplcc2420fifom_HPLCC2420FIFO_writeTXFIFO+0x2e>
        _atomic_t _atomic = _atomic_start();

        {
            if (hplcc2420fifom_txbufBusy)
            {
                returnFail = TRUE;
    202e:	01 e0       	ldi	r16, 0x01	; 1
            else
            {
                hplcc2420fifom_txbufBusy = TRUE;
            }
        }
        _atomic_end(_atomic);
    2030:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
    }
    if (returnFail)
    2034:	00 23       	and	r16, r16
    2036:	d1 f5       	brne	.+116    	; 0x20ac <hplcc2420fifom_HPLCC2420FIFO_writeTXFIFO+0xaa>
    {
        return FAIL;
    }
    {
        _atomic_t _atomic = _atomic_start();
    2038:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>

        {
            hplcc2420fifom_bSpiAvail = FALSE;
    203c:	10 92 bb 08 	sts	0x08BB, r1
            hplcc2420fifom_txlength = len;
    2040:	10 93 ba 08 	sts	0x08BA, r17
            hplcc2420fifom_txbuf = msg;
    2044:	f0 92 c0 08 	sts	0x08C0, r15
    2048:	e0 92 bf 08 	sts	0x08BF, r14
            LITE_CLR_CC_CS_PIN();
    204c:	89 83       	std	Y+1, r24	; 0x01
    204e:	0e 94 df 06 	call	0xdbe	; 0xdbe <LITE_CLR_CC_CS_PIN>
            outp(CC2420_TXFIFO, SPDR);
    2052:	9e e3       	ldi	r25, 0x3E	; 62
    2054:	9f b9       	out	0x0f, r25	; 15
    2056:	89 81       	ldd	r24, Y+1	; 0x01
            while (!(inp(SPSR) & 0x80))
    2058:	77 9b       	sbis	0x0e, 7	; 14
    205a:	fe cf       	rjmp	.-4      	; 0x2058 <hplcc2420fifom_HPLCC2420FIFO_writeTXFIFO+0x56>
            {
            }
            ;                   //wait for spi xfr to complete
            status = inp(SPDR);
    205c:	1f b1       	in	r17, 0x0f	; 15
            for (i = 0; i < hplcc2420fifom_txlength; i++)
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	0d c0       	rjmp	.+26     	; 0x207c <hplcc2420fifom_HPLCC2420FIFO_writeTXFIFO+0x7a>
            {
                outp(*hplcc2420fifom_txbuf, SPDR);
    2062:	e0 91 bf 08 	lds	r30, 0x08BF
    2066:	f0 91 c0 08 	lds	r31, 0x08C0
    206a:	21 91       	ld	r18, Z+
    206c:	2f b9       	out	0x0f, r18	; 15
                hplcc2420fifom_txbuf++;
    206e:	f0 93 c0 08 	sts	0x08C0, r31
    2072:	e0 93 bf 08 	sts	0x08BF, r30
                while (!(inp(SPSR) & 0x80))
    2076:	77 9b       	sbis	0x0e, 7	; 14
    2078:	fe cf       	rjmp	.-4      	; 0x2076 <hplcc2420fifom_HPLCC2420FIFO_writeTXFIFO+0x74>
            while (!(inp(SPSR) & 0x80))
            {
            }
            ;                   //wait for spi xfr to complete
            status = inp(SPDR);
            for (i = 0; i < hplcc2420fifom_txlength; i++)
    207a:	9f 5f       	subi	r25, 0xFF	; 255
    207c:	20 91 ba 08 	lds	r18, 0x08BA
    2080:	92 17       	cp	r25, r18
    2082:	78 f3       	brcs	.-34     	; 0x2062 <hplcc2420fifom_HPLCC2420FIFO_writeTXFIFO+0x60>
                while (!(inp(SPSR) & 0x80))
                {
                }
                ;               //wait for spi xfr to complete
            }
            hplcc2420fifom_bSpiAvail = TRUE;
    2084:	91 e0       	ldi	r25, 0x01	; 1
    2086:	90 93 bb 08 	sts	0x08BB, r25
        }
        _atomic_end(_atomic);
    208a:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
    }
    LITE_SET_CC_CS_PIN();
    208e:	0e 94 dd 06 	call	0xdba	; 0xdba <LITE_SET_CC_CS_PIN>
    if (postTask(hplcc2420fifom_signalTXdone, 5) == FAIL)
    2092:	87 ee       	ldi	r24, 0xE7	; 231
    2094:	9f e0       	ldi	r25, 0x0F	; 15
    2096:	65 e0       	ldi	r22, 0x05	; 5
    2098:	0e 94 88 14 	call	0x2910	; 0x2910 <postTask>
    209c:	88 23       	and	r24, r24
    209e:	39 f4       	brne	.+14     	; 0x20ae <hplcc2420fifom_HPLCC2420FIFO_writeTXFIFO+0xac>
    {
        {
            _atomic_t _atomic = _atomic_start();
    20a0:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>

            hplcc2420fifom_txbufBusy = FALSE;
    20a4:	10 92 be 08 	sts	0x08BE, r1
            _atomic_end(_atomic);
    20a8:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
        }
        _atomic_end(_atomic);
    }
    if (returnFail)
    {
        return FAIL;
    20ac:	10 e0       	ldi	r17, 0x00	; 0
            _atomic_end(_atomic);
        }
        return FAIL;
    }
    return status;
}
    20ae:	81 2f       	mov	r24, r17
    20b0:	0f 90       	pop	r0
    20b2:	cf 91       	pop	r28
    20b4:	df 91       	pop	r29
    20b6:	1f 91       	pop	r17
    20b8:	0f 91       	pop	r16
    20ba:	ff 90       	pop	r15
    20bc:	ef 90       	pop	r14
    20be:	08 95       	ret

000020c0 <hplcc2420fifom_HPLCC2420FIFO_RXFIFODone>:
                                                        uint8_t *
                                                        arg_0xa40c7f0)
{
    unsigned char result;

    result = cc2420radiom_HPLChipconFIFO_RXFIFODone(arg_0xa40c690,
    20c0:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <cc2420radiom_HPLChipconFIFO_RXFIFODone>
                                                    arg_0xa40c7f0);
    return result;
}
    20c4:	08 95       	ret

000020c6 <hplcc2420fifom_HPLCC2420FIFO_readRXFIFO>:
inline
    //Seems that the transmitted len is the actual length over the air 
    //The first number in the frame is the remaining part 
    result_t hplcc2420fifom_HPLCC2420FIFO_readRXFIFO(uint8_t len,
                                                     uint8_t * msg)
{
    20c6:	ef 92       	push	r14
    20c8:	ff 92       	push	r15
    20ca:	0f 93       	push	r16
    20cc:	1f 93       	push	r17
    20ce:	df 93       	push	r29
    20d0:	cf 93       	push	r28
    20d2:	0f 92       	push	r0
    20d4:	cd b7       	in	r28, 0x3d	; 61
    20d6:	de b7       	in	r29, 0x3e	; 62
    20d8:	18 2f       	mov	r17, r24
    20da:	7b 01       	movw	r14, r22
    uint8_t status;
    uint8_t i;
    bool returnFail = FALSE;

    {
        _atomic_t _atomic = _atomic_start();
    20dc:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>

        {
            if (hplcc2420fifom_rxbufBusy)
    20e0:	90 91 c1 08 	lds	r25, 0x08C1
    20e4:	99 23       	and	r25, r25
    20e6:	29 f4       	brne	.+10     	; 0x20f2 <hplcc2420fifom_HPLCC2420FIFO_readRXFIFO+0x2c>
            {
                returnFail = TRUE;
            }
            else
            {
                hplcc2420fifom_rxbufBusy = TRUE;
    20e8:	91 e0       	ldi	r25, 0x01	; 1
    20ea:	90 93 c1 08 	sts	0x08C1, r25
    result_t hplcc2420fifom_HPLCC2420FIFO_readRXFIFO(uint8_t len,
                                                     uint8_t * msg)
{
    uint8_t status;
    uint8_t i;
    bool returnFail = FALSE;
    20ee:	00 e0       	ldi	r16, 0x00	; 0
    20f0:	01 c0       	rjmp	.+2      	; 0x20f4 <hplcc2420fifom_HPLCC2420FIFO_readRXFIFO+0x2e>
        _atomic_t _atomic = _atomic_start();

        {
            if (hplcc2420fifom_rxbufBusy)
            {
                returnFail = TRUE;
    20f2:	01 e0       	ldi	r16, 0x01	; 1
            else
            {
                hplcc2420fifom_rxbufBusy = TRUE;
            }
        }
        _atomic_end(_atomic);
    20f4:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
    }
    if (returnFail)
    20f8:	00 23       	and	r16, r16
    20fa:	09 f0       	breq	.+2      	; 0x20fe <hplcc2420fifom_HPLCC2420FIFO_readRXFIFO+0x38>
    20fc:	4d c0       	rjmp	.+154    	; 0x2198 <hplcc2420fifom_HPLCC2420FIFO_readRXFIFO+0xd2>
    {
        return FAIL;
    }
    {
        _atomic_t _atomic = _atomic_start();
    20fe:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>

        {
            hplcc2420fifom_bSpiAvail = FALSE;
    2102:	10 92 bb 08 	sts	0x08BB, r1
            hplcc2420fifom_rxbuf = msg;
    2106:	f0 92 bd 08 	sts	0x08BD, r15
    210a:	e0 92 bc 08 	sts	0x08BC, r14
            LITE_CLR_CC_CS_PIN();
    210e:	89 83       	std	Y+1, r24	; 0x01
    2110:	0e 94 df 06 	call	0xdbe	; 0xdbe <LITE_CLR_CC_CS_PIN>
            outp(CC2420_RXFIFO | 0x40, SPDR);   //output Rxfifo address
    2114:	9f e7       	ldi	r25, 0x7F	; 127
    2116:	9f b9       	out	0x0f, r25	; 15
    2118:	89 81       	ldd	r24, Y+1	; 0x01
            while (!(inp(SPSR) & 0x80))
    211a:	77 9b       	sbis	0x0e, 7	; 14
    211c:	fe cf       	rjmp	.-4      	; 0x211a <hplcc2420fifom_HPLCC2420FIFO_readRXFIFO+0x54>
            {
            }
            ;                   //wait for spi xfr to complete
            status = inp(SPDR);
    211e:	9f b1       	in	r25, 0x0f	; 15
            outp(0, SPDR);
    2120:	1f b8       	out	0x0f, r1	; 15
            while (!(inp(SPSR) & 0x80))
    2122:	77 9b       	sbis	0x0e, 7	; 14
    2124:	fe cf       	rjmp	.-4      	; 0x2122 <hplcc2420fifom_HPLCC2420FIFO_readRXFIFO+0x5c>
            {
            }
            ;                   //wait for spi xfr to complete
            hplcc2420fifom_rxlength = inp(SPDR);
    2126:	9f b1       	in	r25, 0x0f	; 15
    2128:	90 93 c2 08 	sts	0x08C2, r25
            //My revise
            //The first byte, however, only contains a part of the whole, which needs to add 1 to mean that it is the total to be read 
            //and this also defaults to len, which is the MSG_DATA_SIZE
            if (hplcc2420fifom_rxlength > 0)
    212c:	99 23       	and	r25, r25
    212e:	01 f1       	breq	.+64     	; 0x2170 <hplcc2420fifom_HPLCC2420FIFO_readRXFIFO+0xaa>
            {
                hplcc2420fifom_rxbuf[0] = hplcc2420fifom_rxlength;
    2130:	e0 91 bc 08 	lds	r30, 0x08BC
    2134:	f0 91 bd 08 	lds	r31, 0x08BD
    2138:	90 83       	st	Z, r25
                hplcc2420fifom_rxlength++;
    213a:	90 91 c2 08 	lds	r25, 0x08C2
    213e:	9f 5f       	subi	r25, 0xFF	; 255
    2140:	90 93 c2 08 	sts	0x08C2, r25
                if (hplcc2420fifom_rxlength > len)
    2144:	19 17       	cp	r17, r25
    2146:	10 f4       	brcc	.+4      	; 0x214c <hplcc2420fifom_HPLCC2420FIFO_readRXFIFO+0x86>
                {
                    hplcc2420fifom_rxlength = len;
    2148:	10 93 c2 08 	sts	0x08C2, r17
    result_t hplcc2420fifom_HPLCC2420FIFO_readRXFIFO(uint8_t len,
                                                     uint8_t * msg)
{
    uint8_t status;
    uint8_t i;
    bool returnFail = FALSE;
    214c:	91 e0       	ldi	r25, 0x01	; 1
    214e:	0c c0       	rjmp	.+24     	; 0x2168 <hplcc2420fifom_HPLCC2420FIFO_readRXFIFO+0xa2>
                {
                    hplcc2420fifom_rxlength = len;
                }
                for (i = 1; i < hplcc2420fifom_rxlength; i++)
                {
                    outp(0, SPDR);
    2150:	1f b8       	out	0x0f, r1	; 15
                    while (!(inp(SPSR) & 0x80))
    2152:	77 9b       	sbis	0x0e, 7	; 14
    2154:	fe cf       	rjmp	.-4      	; 0x2152 <hplcc2420fifom_HPLCC2420FIFO_readRXFIFO+0x8c>
                    {
                    }
                    ;           //wait for spi xfr to complete
                    hplcc2420fifom_rxbuf[i] = inp(SPDR);
    2156:	2f b1       	in	r18, 0x0f	; 15
    2158:	e0 91 bc 08 	lds	r30, 0x08BC
    215c:	f0 91 bd 08 	lds	r31, 0x08BD
    2160:	e9 0f       	add	r30, r25
    2162:	f1 1d       	adc	r31, r1
    2164:	20 83       	st	Z, r18
                hplcc2420fifom_rxlength++;
                if (hplcc2420fifom_rxlength > len)
                {
                    hplcc2420fifom_rxlength = len;
                }
                for (i = 1; i < hplcc2420fifom_rxlength; i++)
    2166:	9f 5f       	subi	r25, 0xFF	; 255
    2168:	20 91 c2 08 	lds	r18, 0x08C2
    216c:	92 17       	cp	r25, r18
    216e:	80 f3       	brcs	.-32     	; 0x2150 <hplcc2420fifom_HPLCC2420FIFO_readRXFIFO+0x8a>
                    }
                    ;           //wait for spi xfr to complete
                    hplcc2420fifom_rxbuf[i] = inp(SPDR);
                }
            }
            hplcc2420fifom_bSpiAvail = TRUE;
    2170:	91 e0       	ldi	r25, 0x01	; 1
    2172:	90 93 bb 08 	sts	0x08BB, r25
        }
        _atomic_end(_atomic);
    2176:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
    }
    LITE_SET_CC_CS_PIN();
    217a:	0e 94 dd 06 	call	0xdba	; 0xdba <LITE_SET_CC_CS_PIN>
    if (postTask(hplcc2420fifom_signalRXdone, 5) == FAIL)
    217e:	80 ed       	ldi	r24, 0xD0	; 208
    2180:	9f e0       	ldi	r25, 0x0F	; 15
    2182:	65 e0       	ldi	r22, 0x05	; 5
    2184:	0e 94 88 14 	call	0x2910	; 0x2910 <postTask>
    2188:	88 23       	and	r24, r24
    218a:	41 f4       	brne	.+16     	; 0x219c <hplcc2420fifom_HPLCC2420FIFO_readRXFIFO+0xd6>
    {
        {
            _atomic_t _atomic = _atomic_start();
    218c:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>

            hplcc2420fifom_rxbufBusy = FALSE;
    2190:	10 92 c1 08 	sts	0x08C1, r1
            _atomic_end(_atomic);
    2194:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
        }
        _atomic_end(_atomic);
    }
    if (returnFail)
    {
        return FAIL;
    2198:	80 e0       	ldi	r24, 0x00	; 0
    219a:	01 c0       	rjmp	.+2      	; 0x219e <hplcc2420fifom_HPLCC2420FIFO_readRXFIFO+0xd8>
            hplcc2420fifom_rxbufBusy = FALSE;
            _atomic_end(_atomic);
        }
        return FAIL;
    }
    return SUCCESS;
    219c:	81 e0       	ldi	r24, 0x01	; 1
}
    219e:	0f 90       	pop	r0
    21a0:	cf 91       	pop	r28
    21a2:	df 91       	pop	r29
    21a4:	1f 91       	pop	r17
    21a6:	0f 91       	pop	r16
    21a8:	ff 90       	pop	r15
    21aa:	ef 90       	pop	r14
    21ac:	08 95       	ret

000021ae <__vector_7>:
   volatile uint16_t ahcounter; 
   volatile uint32_t alcounter2; 
   volatile uint16_t ahcounter2; 

SIGNAL(INT6_vect)
{
    21ae:	1f 92       	push	r1
    21b0:	0f 92       	push	r0
    21b2:	0f b6       	in	r0, 0x3f	; 63
    21b4:	0f 92       	push	r0
    21b6:	0b b6       	in	r0, 0x3b	; 59
    21b8:	0f 92       	push	r0
    21ba:	11 24       	eor	r1, r1
    21bc:	0f 93       	push	r16
    21be:	1f 93       	push	r17
    21c0:	2f 93       	push	r18
    21c2:	3f 93       	push	r19
    21c4:	4f 93       	push	r20
    21c6:	5f 93       	push	r21
    21c8:	6f 93       	push	r22
    21ca:	7f 93       	push	r23
    21cc:	8f 93       	push	r24
    21ce:	9f 93       	push	r25
    21d0:	af 93       	push	r26
    21d2:	bf 93       	push	r27
    21d4:	ef 93       	push	r30
    21d6:	ff 93       	push	r31
   }

   #endif
   
    isthreadtrue = 0;
    _atomic = _atomic_start();
    21d8:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>
    21dc:	08 2f       	mov	r16, r24
    if (is_thread())
    21de:	0e 94 30 15 	call	0x2a60	; 0x2a60 <is_thread>
    21e2:	88 23       	and	r24, r24
    21e4:	71 f0       	breq	.+28     	; 0x2202 <__vector_7+0x54>
    {
        isthreadtrue = 1;
        SWAP_STACK_PTR(stackinterrupt_ptr, old_stack_ptr);
    21e6:	2d b7       	in	r18, 0x3d	; 61
    21e8:	3e b7       	in	r19, 0x3e	; 62
    21ea:	30 93 a4 09 	sts	0x09A4, r19
    21ee:	20 93 a3 09 	sts	0x09A3, r18
    21f2:	20 91 1f 09 	lds	r18, 0x091F
    21f6:	30 91 20 09 	lds	r19, 0x0920
    21fa:	3e bf       	out	0x3e, r19	; 62
    21fc:	2d bf       	out	0x3d, r18	; 61
   
    isthreadtrue = 0;
    _atomic = _atomic_start();
    if (is_thread())
    {
        isthreadtrue = 1;
    21fe:	11 e0       	ldi	r17, 0x01	; 1
    2200:	01 c0       	rjmp	.+2      	; 0x2204 <__vector_7+0x56>
  	 _atomic_end(_atomic); 
   }

   #endif
   
    isthreadtrue = 0;
    2202:	10 e0       	ldi	r17, 0x00	; 0
    if (is_thread())
    {
        isthreadtrue = 1;
        SWAP_STACK_PTR(stackinterrupt_ptr, old_stack_ptr);
    }
    _atomic_end(_atomic);
    2204:	80 2f       	mov	r24, r16
    2206:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
//-------------------------------------------------------------------------
inline result_t hplcc2420interruptm_FIFOP_fired(void)
{
    unsigned char result;

    result = cc2420radiom_FIFOP_fired();
    220a:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <cc2420radiom_FIFOP_fired>
        isthreadtrue = 1;
        SWAP_STACK_PTR(stackinterrupt_ptr, old_stack_ptr);
    }
    _atomic_end(_atomic);
    val = hplcc2420interruptm_FIFOP_fired();
    if (val == FAIL)
    220e:	88 23       	and	r24, r24
    2210:	31 f4       	brne	.+12     	; 0x221e <__vector_7+0x70>
    {
        *(volatile unsigned char *)(unsigned int)&*(volatile unsigned char *)
            (0x39 + 0x20) &= ~(1 << 6);
    2212:	89 b7       	in	r24, 0x39	; 57
    2214:	8f 7b       	andi	r24, 0xBF	; 191
    2216:	89 bf       	out	0x39, r24	; 57
        *(volatile unsigned char *)(unsigned int)&*(volatile unsigned char *)
            (0x38 + 0x20) |= 1 << 6;
    2218:	88 b7       	in	r24, 0x38	; 56
    221a:	80 64       	ori	r24, 0x40	; 64
    221c:	88 bf       	out	0x38, r24	; 56
    }
    _atomic = _atomic_start();
    221e:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>
    if (isthreadtrue == 1)
    2222:	11 30       	cpi	r17, 0x01	; 1
    2224:	61 f4       	brne	.+24     	; 0x223e <__vector_7+0x90>
    {
        isthreadtrue = 0;
        SWAP_STACK_PTR(old_stack_ptr, stackinterrupt_ptr);
    2226:	2d b7       	in	r18, 0x3d	; 61
    2228:	3e b7       	in	r19, 0x3e	; 62
    222a:	30 93 20 09 	sts	0x0920, r19
    222e:	20 93 1f 09 	sts	0x091F, r18
    2232:	20 91 a3 09 	lds	r18, 0x09A3
    2236:	30 91 a4 09 	lds	r19, 0x09A4
    223a:	3e bf       	out	0x3e, r19	; 62
    223c:	2d bf       	out	0x3d, r18	; 61
        //thread_yield();   
    }
    _atomic_end(_atomic);
    223e:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
       __asm__ __volatile__ ("cli" ::);
       }

  #endif       
     
}
    2242:	ff 91       	pop	r31
    2244:	ef 91       	pop	r30
    2246:	bf 91       	pop	r27
    2248:	af 91       	pop	r26
    224a:	9f 91       	pop	r25
    224c:	8f 91       	pop	r24
    224e:	7f 91       	pop	r23
    2250:	6f 91       	pop	r22
    2252:	5f 91       	pop	r21
    2254:	4f 91       	pop	r20
    2256:	3f 91       	pop	r19
    2258:	2f 91       	pop	r18
    225a:	1f 91       	pop	r17
    225c:	0f 91       	pop	r16
    225e:	0f 90       	pop	r0
    2260:	0b be       	out	0x3b, r0	; 59
    2262:	0f 90       	pop	r0
    2264:	0f be       	out	0x3f, r0	; 63
    2266:	0f 90       	pop	r0
    2268:	1f 90       	pop	r1
    226a:	18 95       	reti

0000226c <hplcc2420interruptm_FIFOP_startWait>:

//-------------------------------------------------------------------------
inline result_t hplcc2420interruptm_FIFOP_startWait(bool low_to_high)
{
    226c:	0f 93       	push	r16
    226e:	1f 93       	push	r17
    2270:	08 2f       	mov	r16, r24
    {
        _atomic_t _atomic = _atomic_start();
    2272:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>
    2276:	18 2f       	mov	r17, r24

        {
            CC2420_FIFOP_INT_MODE(low_to_high);
    2278:	80 2f       	mov	r24, r16
    227a:	0e 94 71 06 	call	0xce2	; 0xce2 <CC2420_FIFOP_INT_MODE>
            *(volatile unsigned char *)(unsigned int)&*(volatile unsigned
                                                        char *)(0x39 + 0x20) |=
    227e:	89 b7       	in	r24, 0x39	; 57
    2280:	80 64       	ori	r24, 0x40	; 64
    2282:	89 bf       	out	0x39, r24	; 57
                1 << 6;
        }
        _atomic_end(_atomic);
    2284:	81 2f       	mov	r24, r17
    2286:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
    }
    return SUCCESS;
}
    228a:	81 e0       	ldi	r24, 0x01	; 1
    228c:	1f 91       	pop	r17
    228e:	0f 91       	pop	r16
    2290:	08 95       	ret

00002292 <hplcc2420interruptm_FIFOP_disable>:
inline result_t hplcc2420interruptm_FIFOP_disable(void)
{
    *(volatile unsigned char *)(unsigned int)&*(volatile unsigned char *)(0x39
                                                                          +
                                                                          0x20)
        &= ~(1 << 6);
    2292:	89 b7       	in	r24, 0x39	; 57
    2294:	8f 7b       	andi	r24, 0xBF	; 191
    2296:	89 bf       	out	0x39, r24	; 57
    return SUCCESS;
}
    2298:	81 e0       	ldi	r24, 0x01	; 1
    229a:	08 95       	ret

0000229c <hplcc2420interruptm_FIFOP_fired>:
//-------------------------------------------------------------------------
inline result_t hplcc2420interruptm_FIFOP_fired(void)
{
    unsigned char result;

    result = cc2420radiom_FIFOP_fired();
    229c:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <cc2420radiom_FIFOP_fired>
    return result;
}
    22a0:	08 95       	ret

000022a2 <hplcc2420interruptm_FIFOTimer_start>:

//-------------------------------------------------------------------------
inline result_t hplcc2420interruptm_FIFOTimer_start(char arg_0xa315138,
                                                    uint32_t arg_0xa315290)
{
    22a2:	98 2f       	mov	r25, r24
    22a4:	9a 01       	movw	r18, r20
    22a6:	ab 01       	movw	r20, r22
    unsigned char result;

    result = GenericTimerStart(10, arg_0xa315138, arg_0xa315290);
    22a8:	8a e0       	ldi	r24, 0x0A	; 10
    22aa:	69 2f       	mov	r22, r25
    22ac:	0e 94 a1 32 	call	0x6542	; 0x6542 <GenericTimerStart>
    return result;
}
    22b0:	08 95       	ret

000022b2 <hplcc2420interruptm_FIFO_default_fired>:

//-------------------------------------------------------------------------
inline result_t hplcc2420interruptm_FIFO_default_fired(void)
{
    return FAIL;
}
    22b2:	80 e0       	ldi	r24, 0x00	; 0
    22b4:	08 95       	ret

000022b6 <hplcc2420interruptm_FIFO_fired>:
{
    unsigned char result;

    result = hplcc2420interruptm_FIFO_default_fired();
    return result;
}
    22b6:	80 e0       	ldi	r24, 0x00	; 0
    22b8:	08 95       	ret

000022ba <hplcc2420interruptm_FIFOTimer_fired>:
inline result_t hplcc2420interruptm_FIFOTimer_fired(void)
{
    uint8_t FIFOState;
    result_t val = SUCCESS;

    FIFOState = LITE_READ_CC_FIFO_PIN();
    22ba:	0e 94 ef 06 	call	0xdde	; 0xdde <LITE_READ_CC_FIFO_PIN>
    if (hplcc2420interruptm_FIFOLastState !=
    22be:	90 91 c3 08 	lds	r25, 0x08C3
    22c2:	20 91 ca 08 	lds	r18, 0x08CA
    22c6:	29 17       	cp	r18, r25
    22c8:	11 f0       	breq	.+4      	; 0x22ce <hplcc2420interruptm_FIFOTimer_fired+0x14>
        hplcc2420interruptm_FIFOWaitForState && FIFOState ==
    22ca:	89 17       	cp	r24, r25
    22cc:	51 f0       	breq	.+20     	; 0x22e2 <hplcc2420interruptm_FIFOTimer_fired+0x28>
        if (val == FAIL)
        {
            return SUCCESS;
        }
    }
    hplcc2420interruptm_FIFOLastState = FIFOState;
    22ce:	80 93 ca 08 	sts	0x08CA, r24
    return hplcc2420interruptm_FIFOTimer_start(TIMER_ONE_SHOT, 1);
    22d2:	81 e0       	ldi	r24, 0x01	; 1
    22d4:	41 e0       	ldi	r20, 0x01	; 1
    22d6:	50 e0       	ldi	r21, 0x00	; 0
    22d8:	60 e0       	ldi	r22, 0x00	; 0
    22da:	70 e0       	ldi	r23, 0x00	; 0
    22dc:	0e 94 51 11 	call	0x22a2	; 0x22a2 <hplcc2420interruptm_FIFOTimer_start>
    22e0:	08 95       	ret
        hplcc2420interruptm_FIFOWaitForState)
    {
        val = hplcc2420interruptm_FIFO_fired();
        if (val == FAIL)
        {
            return SUCCESS;
    22e2:	81 e0       	ldi	r24, 0x01	; 1
        }
    }
    hplcc2420interruptm_FIFOLastState = FIFOState;
    return hplcc2420interruptm_FIFOTimer_start(TIMER_ONE_SHOT, 1);
}
    22e4:	08 95       	ret

000022e6 <hplcc2420interruptm_CCA_fired>:
//-------------------------------------------------------------------------
inline result_t hplcc2420interruptm_CCA_fired(void)
{
    unsigned char result;

    result = cc2420controlm_CCA_fired();
    22e6:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <cc2420controlm_CCA_fired>
    return result;
}
    22ea:	08 95       	ret

000022ec <hplcc2420interruptm_CCATimer_start>:
}

//-------------------------------------------------------------------------
inline result_t hplcc2420interruptm_CCATimer_start(char arg_0xa315138,
                                                   uint32_t arg_0xa315290)
{
    22ec:	98 2f       	mov	r25, r24
    22ee:	9a 01       	movw	r18, r20
    22f0:	ab 01       	movw	r20, r22
    unsigned char result;

    result = GenericTimerStart(11, arg_0xa315138, arg_0xa315290);
    22f2:	8b e0       	ldi	r24, 0x0B	; 11
    22f4:	69 2f       	mov	r22, r25
    22f6:	0e 94 a1 32 	call	0x6542	; 0x6542 <GenericTimerStart>
    return result;
}
    22fa:	08 95       	ret

000022fc <hplcc2420interruptm_CCA_startWait>:
    return hplcc2420interruptm_CCATimer_start(TIMER_ONE_SHOT, 1);
}

//-------------------------------------------------------------------------
inline result_t hplcc2420interruptm_CCA_startWait(bool low_to_high)
{
    22fc:	1f 93       	push	r17
    22fe:	18 2f       	mov	r17, r24
    {
        _atomic_t _atomic = _atomic_start();
    2300:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>

        hplcc2420interruptm_CCAWaitForState = low_to_high;
    2304:	10 93 cc 08 	sts	0x08CC, r17
        _atomic_end(_atomic);
    2308:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
    }
    hplcc2420interruptm_CCALastState = LITE_READ_CC_CCA_PIN();
    230c:	0e 94 c1 06 	call	0xd82	; 0xd82 <LITE_READ_CC_CCA_PIN>
    2310:	80 93 cb 08 	sts	0x08CB, r24
    return hplcc2420interruptm_CCATimer_start(TIMER_ONE_SHOT, 1);
    2314:	81 e0       	ldi	r24, 0x01	; 1
    2316:	41 e0       	ldi	r20, 0x01	; 1
    2318:	50 e0       	ldi	r21, 0x00	; 0
    231a:	60 e0       	ldi	r22, 0x00	; 0
    231c:	70 e0       	ldi	r23, 0x00	; 0
    231e:	0e 94 76 11 	call	0x22ec	; 0x22ec <hplcc2420interruptm_CCATimer_start>
}
    2322:	1f 91       	pop	r17
    2324:	08 95       	ret

00002326 <hplcc2420interruptm_CCATimer_fired>:
    return result;
}

//-------------------------------------------------------------------------
inline result_t hplcc2420interruptm_CCATimer_fired(void)
{
    2326:	1f 93       	push	r17
    uint8_t CCAState;
    result_t val = SUCCESS;

    CCAState = LITE_READ_CC_CCA_PIN();
    2328:	0e 94 c1 06 	call	0xd82	; 0xd82 <LITE_READ_CC_CCA_PIN>
    232c:	18 2f       	mov	r17, r24
    if (hplcc2420interruptm_CCALastState != hplcc2420interruptm_CCAWaitForState
    232e:	80 91 cc 08 	lds	r24, 0x08CC
    2332:	90 91 cb 08 	lds	r25, 0x08CB
    2336:	98 17       	cp	r25, r24
    2338:	31 f0       	breq	.+12     	; 0x2346 <hplcc2420interruptm_CCATimer_fired+0x20>
        && CCAState == hplcc2420interruptm_CCAWaitForState)
    233a:	18 17       	cp	r17, r24
    233c:	21 f4       	brne	.+8      	; 0x2346 <hplcc2420interruptm_CCATimer_fired+0x20>
//-------------------------------------------------------------------------
inline result_t hplcc2420interruptm_CCA_fired(void)
{
    unsigned char result;

    result = cc2420controlm_CCA_fired();
    233e:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <cc2420controlm_CCA_fired>
    CCAState = LITE_READ_CC_CCA_PIN();
    if (hplcc2420interruptm_CCALastState != hplcc2420interruptm_CCAWaitForState
        && CCAState == hplcc2420interruptm_CCAWaitForState)
    {
        val = hplcc2420interruptm_CCA_fired();
        if (val == FAIL)
    2342:	88 23       	and	r24, r24
    2344:	51 f0       	breq	.+20     	; 0x235a <hplcc2420interruptm_CCATimer_fired+0x34>
        {
            return SUCCESS;
        }
    }
    hplcc2420interruptm_CCALastState = CCAState;
    2346:	10 93 cb 08 	sts	0x08CB, r17
    return hplcc2420interruptm_CCATimer_start(TIMER_ONE_SHOT, 1);
    234a:	81 e0       	ldi	r24, 0x01	; 1
    234c:	41 e0       	ldi	r20, 0x01	; 1
    234e:	50 e0       	ldi	r21, 0x00	; 0
    2350:	60 e0       	ldi	r22, 0x00	; 0
    2352:	70 e0       	ldi	r23, 0x00	; 0
    2354:	0e 94 76 11 	call	0x22ec	; 0x22ec <hplcc2420interruptm_CCATimer_start>
    2358:	01 c0       	rjmp	.+2      	; 0x235c <hplcc2420interruptm_CCATimer_fired+0x36>
        && CCAState == hplcc2420interruptm_CCAWaitForState)
    {
        val = hplcc2420interruptm_CCA_fired();
        if (val == FAIL)
        {
            return SUCCESS;
    235a:	81 e0       	ldi	r24, 0x01	; 1
        }
    }
    hplcc2420interruptm_CCALastState = CCAState;
    return hplcc2420interruptm_CCATimer_start(TIMER_ONE_SHOT, 1);
}
    235c:	1f 91       	pop	r17
    235e:	08 95       	ret

00002360 <hplcc2420interruptm_SFDCapture_enableEvents>:
}

//-------------------------------------------------------------------------
inline void hplcc2420interruptm_SFDCapture_enableEvents(void)
{
    HPLTimer1M_CaptureT1_enableEvents();
    2360:	0e 94 75 13 	call	0x26ea	; 0x26ea <HPLTimer1M_CaptureT1_enableEvents>
}
    2364:	08 95       	ret

00002366 <hplcc2420interruptm_SFDCapture_clearOverflow>:

//-------------------------------------------------------------------------
inline void hplcc2420interruptm_SFDCapture_clearOverflow(void)
{
    HPLTimer1M_CaptureT1_clearOverflow();
    2366:	0e 94 7f 13 	call	0x26fe	; 0x26fe <HPLTimer1M_CaptureT1_clearOverflow>
}
    236a:	08 95       	ret

0000236c <hplcc2420interruptm_SFDCapture_setEdge>:

//-------------------------------------------------------------------------
inline void hplcc2420interruptm_SFDCapture_setEdge(uint8_t arg_0xa4c5e80)
{
    HPLTimer1M_CaptureT1_setEdge(arg_0xa4c5e80);
    236c:	0e 94 fd 13 	call	0x27fa	; 0x27fa <HPLTimer1M_CaptureT1_setEdge>
}
    2370:	08 95       	ret

00002372 <hplcc2420interruptm_SFDCapture_disableEvents>:

//-------------------------------------------------------------------------
inline void hplcc2420interruptm_SFDCapture_disableEvents(void)
{
    HPLTimer1M_CaptureT1_disableEvents();
    2372:	0e 94 83 13 	call	0x2706	; 0x2706 <HPLTimer1M_CaptureT1_disableEvents>
}
    2376:	08 95       	ret

00002378 <hplcc2420interruptm_SFD_enableCapture>:

//-------------------------------------------------------------------------
inline result_t hplcc2420interruptm_SFD_enableCapture(bool low_to_high)
{
    2378:	0f 93       	push	r16
    237a:	1f 93       	push	r17
    237c:	08 2f       	mov	r16, r24
    {
        _atomic_t _atomic = _atomic_start();
    237e:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>
    2382:	18 2f       	mov	r17, r24
}

//-------------------------------------------------------------------------
inline void hplcc2420interruptm_SFDCapture_disableEvents(void)
{
    HPLTimer1M_CaptureT1_disableEvents();
    2384:	0e 94 83 13 	call	0x2706	; 0x2706 <HPLTimer1M_CaptureT1_disableEvents>
}

//-------------------------------------------------------------------------
inline void hplcc2420interruptm_SFDCapture_setEdge(uint8_t arg_0xa4c5e80)
{
    HPLTimer1M_CaptureT1_setEdge(arg_0xa4c5e80);
    2388:	80 2f       	mov	r24, r16
    238a:	0e 94 fd 13 	call	0x27fa	; 0x27fa <HPLTimer1M_CaptureT1_setEdge>
}

//-------------------------------------------------------------------------
inline void hplcc2420interruptm_SFDCapture_clearOverflow(void)
{
    HPLTimer1M_CaptureT1_clearOverflow();
    238e:	0e 94 7f 13 	call	0x26fe	; 0x26fe <HPLTimer1M_CaptureT1_clearOverflow>
}

//-------------------------------------------------------------------------
inline void hplcc2420interruptm_SFDCapture_enableEvents(void)
{
    HPLTimer1M_CaptureT1_enableEvents();
    2392:	0e 94 75 13 	call	0x26ea	; 0x26ea <HPLTimer1M_CaptureT1_enableEvents>
            hplcc2420interruptm_SFDCapture_disableEvents();
            hplcc2420interruptm_SFDCapture_setEdge(low_to_high);
            hplcc2420interruptm_SFDCapture_clearOverflow();
            hplcc2420interruptm_SFDCapture_enableEvents();
        }
        _atomic_end(_atomic);
    2396:	81 2f       	mov	r24, r17
    2398:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
    }
    return SUCCESS;
}
    239c:	81 e0       	ldi	r24, 0x01	; 1
    239e:	1f 91       	pop	r17
    23a0:	0f 91       	pop	r16
    23a2:	08 95       	ret

000023a4 <hplcc2420interruptm_SFD_disable>:
}

//-------------------------------------------------------------------------
inline void hplcc2420interruptm_SFDCapture_disableEvents(void)
{
    HPLTimer1M_CaptureT1_disableEvents();
    23a4:	0e 94 83 13 	call	0x2706	; 0x2706 <HPLTimer1M_CaptureT1_disableEvents>
//-------------------------------------------------------------------------
inline result_t hplcc2420interruptm_SFD_disable(void)
{
    hplcc2420interruptm_SFDCapture_disableEvents();
    return SUCCESS;
}
    23a8:	81 e0       	ldi	r24, 0x01	; 1
    23aa:	08 95       	ret

000023ac <hplcc2420interruptm_SFD_captured>:
//-------------------------------------------------------------------------
inline result_t hplcc2420interruptm_SFD_captured(uint16_t arg_0xa41e788)
{
    unsigned char result;

    result = cc2420radiom_SFD_captured(arg_0xa41e788);
    23ac:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <cc2420radiom_SFD_captured>
    return result;
}
    23b0:	08 95       	ret

000023b2 <hplcc2420interruptm_SFDCapture_isOverflowPending>:
//-------------------------------------------------------------------------
inline bool hplcc2420interruptm_SFDCapture_isOverflowPending(void)
{
    unsigned char result;

    result = HPLTimer1M_CaptureT1_isOverflowPending();
    23b2:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <HPLTimer1M_CaptureT1_isOverflowPending>
    return result;
}
    23b6:	08 95       	ret

000023b8 <hplcc2420interruptm_SFDCapture_captured>:
//-------------------------------------------------------------------------
inline result_t hplcc2420interruptm_SFD_captured(uint16_t arg_0xa41e788)
{
    unsigned char result;

    result = cc2420radiom_SFD_captured(arg_0xa41e788);
    23b8:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <cc2420radiom_SFD_captured>
void hplcc2420interruptm_SFDCapture_captured(uint16_t time)
{
    result_t val = SUCCESS;

    val = hplcc2420interruptm_SFD_captured(time);
    if (val == FAIL)
    23bc:	88 23       	and	r24, r24
    23be:	19 f4       	brne	.+6      	; 0x23c6 <hplcc2420interruptm_SFDCapture_captured+0xe>
}

//-------------------------------------------------------------------------
inline void hplcc2420interruptm_SFDCapture_disableEvents(void)
{
    HPLTimer1M_CaptureT1_disableEvents();
    23c0:	0e 94 83 13 	call	0x2706	; 0x2706 <HPLTimer1M_CaptureT1_disableEvents>
    23c4:	08 95       	ret
//-------------------------------------------------------------------------
inline bool hplcc2420interruptm_SFDCapture_isOverflowPending(void)
{
    unsigned char result;

    result = HPLTimer1M_CaptureT1_isOverflowPending();
    23c6:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <HPLTimer1M_CaptureT1_isOverflowPending>
    {
        hplcc2420interruptm_SFDCapture_disableEvents();
    }
    else
    {
        if (hplcc2420interruptm_SFDCapture_isOverflowPending())
    23ca:	88 23       	and	r24, r24
    23cc:	11 f0       	breq	.+4      	; 0x23d2 <hplcc2420interruptm_SFDCapture_captured+0x1a>
}

//-------------------------------------------------------------------------
inline void hplcc2420interruptm_SFDCapture_clearOverflow(void)
{
    HPLTimer1M_CaptureT1_clearOverflow();
    23ce:	0e 94 7f 13 	call	0x26fe	; 0x26fe <HPLTimer1M_CaptureT1_clearOverflow>
    23d2:	08 95       	ret

000023d4 <HPLCC2420M_signalRAMWr>:
                                                  uint8_t arg_0xa45b5a8,
                                                  uint8_t * arg_0xa45b708)
{
    unsigned char result;

    result = cc2420controlm_HPLChipconRAM_writeDone(arg_0xa45b460,
    23d4:	40 91 d4 08 	lds	r20, 0x08D4
    23d8:	50 91 d5 08 	lds	r21, 0x08D5
    23dc:	80 91 d7 08 	lds	r24, 0x08D7
    23e0:	90 91 d8 08 	lds	r25, 0x08D8
    23e4:	60 91 d3 08 	lds	r22, 0x08D3
    23e8:	0e 94 c0 0b 	call	0x1780	; 0x1780 <cc2420controlm_HPLChipconRAM_writeDone>
//-------------------------------------------------------------------------
inline void HPLCC2420M_signalRAMWr(void)
{
    HPLCC2420M_HPLCC2420RAM_writeDone(HPLCC2420M_ramaddr, HPLCC2420M_ramlen,
                                      HPLCC2420M_rambuf);
}
    23ec:	08 95       	ret

000023ee <HPLCC2420M_StdControl_init>:
uint8_t HPLCC2420M_ramlen;
uint16_t HPLCC2420M_ramaddr;

//set up basic settings
inline result_t HPLCC2420M_StdControl_init(void)
{
    23ee:	df 93       	push	r29
    23f0:	cf 93       	push	r28
    23f2:	0f 92       	push	r0
    23f4:	cd b7       	in	r28, 0x3d	; 61
    23f6:	de b7       	in	r29, 0x3e	; 62
    HPLCC2420M_bSpiAvail = TRUE;
    23f8:	81 e0       	ldi	r24, 0x01	; 1
    23fa:	80 93 d6 08 	sts	0x08D6, r24
    LITE_MAKE_MISO_INPUT();
    23fe:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <LITE_MAKE_MISO_INPUT>
    LITE_MAKE_MOSI_OUTPUT();
    2402:	0e 94 c6 04 	call	0x98c	; 0x98c <LITE_MAKE_MOSI_OUTPUT>
    LITE_MAKE_SPI_SCK_OUTPUT();
    2406:	0e 94 e6 04 	call	0x9cc	; 0x9cc <LITE_MAKE_SPI_SCK_OUTPUT>
    LITE_MAKE_CC_RSTN_OUTPUT();
    240a:	0e 94 89 06 	call	0xd12	; 0xd12 <LITE_MAKE_CC_RSTN_OUTPUT>
    LITE_MAKE_CC_VREN_OUTPUT();
    240e:	0e 94 99 06 	call	0xd32	; 0xd32 <LITE_MAKE_CC_VREN_OUTPUT>
    LITE_MAKE_CC_CS_OUTPUT();
    2412:	0e 94 e7 06 	call	0xdce	; 0xdce <LITE_MAKE_CC_CS_OUTPUT>
    LITE_MAKE_CC_FIFOP1_INPUT();
    2416:	0e 94 bb 06 	call	0xd76	; 0xd76 <LITE_MAKE_CC_FIFOP1_INPUT>
    LITE_MAKE_CC_CCA_INPUT();
    241a:	0e 94 cb 06 	call	0xd96	; 0xd96 <LITE_MAKE_CC_CCA_INPUT>
    LITE_MAKE_CC_SFD_INPUT();
    241e:	0e 94 db 06 	call	0xdb6	; 0xdb6 <LITE_MAKE_CC_SFD_INPUT>
    LITE_MAKE_CC_FIFO_INPUT();
    2422:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <LITE_MAKE_CC_FIFO_INPUT>
    {
        _atomic_t _atomic = _atomic_start();
    2426:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>

        {
            LITE_MAKE_SPI_SCK_OUTPUT();
    242a:	89 83       	std	Y+1, r24	; 0x01
    242c:	0e 94 e6 04 	call	0x9cc	; 0x9cc <LITE_MAKE_SPI_SCK_OUTPUT>
            LITE_MAKE_MISO_INPUT();
    2430:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <LITE_MAKE_MISO_INPUT>
            LITE_MAKE_MOSI_OUTPUT();
    2434:	0e 94 c6 04 	call	0x98c	; 0x98c <LITE_MAKE_MOSI_OUTPUT>
            sbi(SPSR, SPI2X);   // Double speed spi clock
    2438:	70 9a       	sbi	0x0e, 0	; 14
            sbi(SPCR, MSTR);    // Set master mode
    243a:	6c 9a       	sbi	0x0d, 4	; 13
            cbi(SPCR, CPOL);    // Set proper polarity...
    243c:	6b 98       	cbi	0x0d, 3	; 13
            cbi(SPCR, CPHA);    // ...and phase
    243e:	6a 98       	cbi	0x0d, 2	; 13
            cbi(SPCR, SPR1);    // set clock, fosc/2 (~3.6 Mhz)
    2440:	69 98       	cbi	0x0d, 1	; 13
            cbi(SPCR, SPR0);
    2442:	68 98       	cbi	0x0d, 0	; 13
            //    sbi(SPCR, SPIE);             // enable spi port interrupt
            sbi(SPCR, SPE);     // enable spie port
    2444:	6e 9a       	sbi	0x0d, 6	; 13
        }
        _atomic_end(_atomic);
    2446:	89 81       	ldd	r24, Y+1	; 0x01
    2448:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
    }
    return SUCCESS;
}
    244c:	81 e0       	ldi	r24, 0x01	; 1
    244e:	0f 90       	pop	r0
    2450:	cf 91       	pop	r28
    2452:	df 91       	pop	r29
    2454:	08 95       	ret

00002456 <HPLCC2420M_HPLCC2420RAM_writeDone>:
                                                  uint8_t arg_0xa45b5a8,
                                                  uint8_t * arg_0xa45b708)
{
    unsigned char result;

    result = cc2420controlm_HPLChipconRAM_writeDone(arg_0xa45b460,
    2456:	0e 94 c0 0b 	call	0x1780	; 0x1780 <cc2420controlm_HPLChipconRAM_writeDone>
                                                    arg_0xa45b5a8,
                                                    arg_0xa45b708);
    return result;
}
    245a:	08 95       	ret

0000245c <HPLCC2420M_HPLCC2420RAM_write>:
}

//-------------------------------------------------------------------------
inline result_t HPLCC2420M_HPLCC2420RAM_write(uint16_t addr, uint8_t length,
                                              uint8_t * buffer)
{
    245c:	ef 92       	push	r14
    245e:	ff 92       	push	r15
    2460:	0f 93       	push	r16
    2462:	1f 93       	push	r17
    2464:	df 93       	push	r29
    2466:	cf 93       	push	r28
    2468:	0f 92       	push	r0
    246a:	cd b7       	in	r28, 0x3d	; 61
    246c:	de b7       	in	r29, 0x3e	; 62
    246e:	7c 01       	movw	r14, r24
    2470:	8a 01       	movw	r16, r20
    uint8_t i = 0;
    uint8_t status;

    if (!HPLCC2420M_bSpiAvail)
    2472:	80 91 d6 08 	lds	r24, 0x08D6
    2476:	88 23       	and	r24, r24
    2478:	09 f4       	brne	.+2      	; 0x247c <HPLCC2420M_HPLCC2420RAM_write+0x20>
    247a:	42 c0       	rjmp	.+132    	; 0x2500 <HPLCC2420M_HPLCC2420RAM_write+0xa4>
    {
        return FALSE;
    }
    {
        _atomic_t _atomic = _atomic_start();
    247c:	69 83       	std	Y+1, r22	; 0x01
    247e:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>

        {
            HPLCC2420M_bSpiAvail = FALSE;
    2482:	10 92 d6 08 	sts	0x08D6, r1
            HPLCC2420M_ramaddr = addr;
    2486:	f0 92 d8 08 	sts	0x08D8, r15
    248a:	e0 92 d7 08 	sts	0x08D7, r14
            HPLCC2420M_ramlen = length;
    248e:	69 81       	ldd	r22, Y+1	; 0x01
    2490:	60 93 d3 08 	sts	0x08D3, r22
            HPLCC2420M_rambuf = buffer;
    2494:	10 93 d5 08 	sts	0x08D5, r17
    2498:	00 93 d4 08 	sts	0x08D4, r16
            LITE_CLR_CC_CS_PIN();
    249c:	89 83       	std	Y+1, r24	; 0x01
    249e:	0e 94 df 06 	call	0xdbe	; 0xdbe <LITE_CLR_CC_CS_PIN>
            outp(((HPLCC2420M_ramaddr & 0x7F) | 0x80), SPDR);
    24a2:	90 91 d7 08 	lds	r25, 0x08D7
    24a6:	90 68       	ori	r25, 0x80	; 128
    24a8:	9f b9       	out	0x0f, r25	; 15
    24aa:	89 81       	ldd	r24, Y+1	; 0x01
            //ls address      and set RAM/Reg flagbit
            while (!(inp(SPSR) & 0x80))
    24ac:	77 9b       	sbis	0x0e, 7	; 14
    24ae:	fe cf       	rjmp	.-4      	; 0x24ac <HPLCC2420M_HPLCC2420RAM_write+0x50>
            {
            }
            ;                   //wait for spi xfr to complete
            status = inp(SPDR);
    24b0:	9f b1       	in	r25, 0x0f	; 15
            outp(((HPLCC2420M_ramaddr >> 1) & 0xC0), SPDR);     //ms address
    24b2:	20 91 d7 08 	lds	r18, 0x08D7
    24b6:	30 91 d8 08 	lds	r19, 0x08D8
    24ba:	36 95       	lsr	r19
    24bc:	27 95       	ror	r18
    24be:	20 7c       	andi	r18, 0xC0	; 192
    24c0:	2f b9       	out	0x0f, r18	; 15
            while (!(inp(SPSR) & 0x80))
    24c2:	77 9b       	sbis	0x0e, 7	; 14
    24c4:	fe cf       	rjmp	.-4      	; 0x24c2 <HPLCC2420M_HPLCC2420RAM_write+0x66>
            {
            }
            ;                   //wait for spi xfr to complete
            status = inp(SPDR);
    24c6:	9f b1       	in	r25, 0x0f	; 15
            for (i = 0; i < HPLCC2420M_ramlen; i++)
    24c8:	90 e0       	ldi	r25, 0x00	; 0
    24ca:	0b c0       	rjmp	.+22     	; 0x24e2 <HPLCC2420M_HPLCC2420RAM_write+0x86>
            {
                //buffer write
                outp(HPLCC2420M_rambuf[i], SPDR);
    24cc:	e0 91 d4 08 	lds	r30, 0x08D4
    24d0:	f0 91 d5 08 	lds	r31, 0x08D5
    24d4:	e9 0f       	add	r30, r25
    24d6:	f1 1d       	adc	r31, r1
    24d8:	20 81       	ld	r18, Z
    24da:	2f b9       	out	0x0f, r18	; 15
                //        call USARTControl.tx(rambuf[i]);
                while (!(inp(SPSR) & 0x80))
    24dc:	77 9b       	sbis	0x0e, 7	; 14
    24de:	fe cf       	rjmp	.-4      	; 0x24dc <HPLCC2420M_HPLCC2420RAM_write+0x80>
            while (!(inp(SPSR) & 0x80))
            {
            }
            ;                   //wait for spi xfr to complete
            status = inp(SPDR);
            for (i = 0; i < HPLCC2420M_ramlen; i++)
    24e0:	9f 5f       	subi	r25, 0xFF	; 255
    24e2:	20 91 d3 08 	lds	r18, 0x08D3
    24e6:	92 17       	cp	r25, r18
    24e8:	88 f3       	brcs	.-30     	; 0x24cc <HPLCC2420M_HPLCC2420RAM_write+0x70>
                {
                }
                ;               //wait for spi xfr to complete
            }
        }
        _atomic_end(_atomic);
    24ea:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
    }
    HPLCC2420M_bSpiAvail = TRUE;
    24ee:	81 e0       	ldi	r24, 0x01	; 1
    24f0:	80 93 d6 08 	sts	0x08D6, r24
    return postTask(HPLCC2420M_signalRAMWr, 5);
    24f4:	8a ee       	ldi	r24, 0xEA	; 234
    24f6:	91 e1       	ldi	r25, 0x11	; 17
    24f8:	65 e0       	ldi	r22, 0x05	; 5
    24fa:	0e 94 88 14 	call	0x2910	; 0x2910 <postTask>
    24fe:	01 c0       	rjmp	.+2      	; 0x2502 <HPLCC2420M_HPLCC2420RAM_write+0xa6>
    uint8_t i = 0;
    uint8_t status;

    if (!HPLCC2420M_bSpiAvail)
    {
        return FALSE;
    2500:	80 e0       	ldi	r24, 0x00	; 0
        }
        _atomic_end(_atomic);
    }
    HPLCC2420M_bSpiAvail = TRUE;
    return postTask(HPLCC2420M_signalRAMWr, 5);
}
    2502:	0f 90       	pop	r0
    2504:	cf 91       	pop	r28
    2506:	df 91       	pop	r29
    2508:	1f 91       	pop	r17
    250a:	0f 91       	pop	r16
    250c:	ff 90       	pop	r15
    250e:	ef 90       	pop	r14
    2510:	08 95       	ret

00002512 <HPLCC2420M_HPLCC2420_write>:

//-------------------------------------------------------------------------
inline result_t HPLCC2420M_HPLCC2420_write(uint8_t addr, uint16_t data)
{
    2512:	0f 93       	push	r16
    2514:	1f 93       	push	r17
    2516:	df 93       	push	r29
    2518:	cf 93       	push	r28
    251a:	00 d0       	rcall	.+0      	; 0x251c <HPLCC2420M_HPLCC2420_write+0xa>
    251c:	0f 92       	push	r0
    251e:	cd b7       	in	r28, 0x3d	; 61
    2520:	de b7       	in	r29, 0x3e	; 62
    2522:	18 2f       	mov	r17, r24
    uint8_t status;

    {
        _atomic_t _atomic = _atomic_start();
    2524:	6a 83       	std	Y+2, r22	; 0x02
    2526:	7b 83       	std	Y+3, r23	; 0x03
    2528:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>

        {
            HPLCC2420M_bSpiAvail = FALSE;
    252c:	10 92 d6 08 	sts	0x08D6, r1
            LITE_CLR_CC_CS_PIN();
    2530:	89 83       	std	Y+1, r24	; 0x01
    2532:	0e 94 df 06 	call	0xdbe	; 0xdbe <LITE_CLR_CC_CS_PIN>
            outp(addr, SPDR);
    2536:	1f b9       	out	0x0f, r17	; 15
    2538:	89 81       	ldd	r24, Y+1	; 0x01
    253a:	7b 81       	ldd	r23, Y+3	; 0x03
    253c:	6a 81       	ldd	r22, Y+2	; 0x02
            while (!(inp(SPSR) & 0x80))
    253e:	77 9b       	sbis	0x0e, 7	; 14
    2540:	fe cf       	rjmp	.-4      	; 0x253e <HPLCC2420M_HPLCC2420_write+0x2c>
            {
            }
            ;                   //wait for spi xfr to complete
            status = inp(SPDR);
    2542:	0f b1       	in	r16, 0x0f	; 15
            if (addr > CC2420_SAES)
    2544:	1f 30       	cpi	r17, 0x0F	; 15
    2546:	30 f0       	brcs	.+12     	; 0x2554 <HPLCC2420M_HPLCC2420_write+0x42>
            {
                outp(data >> 8, SPDR);
    2548:	7f b9       	out	0x0f, r23	; 15
                while (!(inp(SPSR) & 0x80))
    254a:	77 9b       	sbis	0x0e, 7	; 14
    254c:	fe cf       	rjmp	.-4      	; 0x254a <HPLCC2420M_HPLCC2420_write+0x38>
                {
                }
                ;               //wait for spi xfr to complete
                outp(data & 0xff, SPDR);
    254e:	6f b9       	out	0x0f, r22	; 15
                while (!(inp(SPSR) & 0x80))
    2550:	77 9b       	sbis	0x0e, 7	; 14
    2552:	fe cf       	rjmp	.-4      	; 0x2550 <HPLCC2420M_HPLCC2420_write+0x3e>
                {
                }
                ;               //wait for spi xfr to complete
            }
            HPLCC2420M_bSpiAvail = TRUE;
    2554:	91 e0       	ldi	r25, 0x01	; 1
    2556:	90 93 d6 08 	sts	0x08D6, r25
        }
        _atomic_end(_atomic);
    255a:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
    }
    LITE_SET_CC_CS_PIN();       //disable chip select
    255e:	0e 94 dd 06 	call	0xdba	; 0xdba <LITE_SET_CC_CS_PIN>
    return status;
}
    2562:	80 2f       	mov	r24, r16
    2564:	0f 90       	pop	r0
    2566:	0f 90       	pop	r0
    2568:	0f 90       	pop	r0
    256a:	cf 91       	pop	r28
    256c:	df 91       	pop	r29
    256e:	1f 91       	pop	r17
    2570:	0f 91       	pop	r16
    2572:	08 95       	ret

00002574 <HPLCC2420M_HPLCC2420_cmd>:

//-------------------------------------------------------------------------
inline uint8_t HPLCC2420M_HPLCC2420_cmd(uint8_t addr)
{
    2574:	1f 93       	push	r17
    2576:	df 93       	push	r29
    2578:	cf 93       	push	r28
    257a:	0f 92       	push	r0
    257c:	cd b7       	in	r28, 0x3d	; 61
    257e:	de b7       	in	r29, 0x3e	; 62
    2580:	18 2f       	mov	r17, r24
    uint8_t status;

    {
        _atomic_t _atomic = _atomic_start();
    2582:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>

        {
            LITE_CLR_CC_CS_PIN();
    2586:	89 83       	std	Y+1, r24	; 0x01
    2588:	0e 94 df 06 	call	0xdbe	; 0xdbe <LITE_CLR_CC_CS_PIN>
            outp(addr, SPDR);
    258c:	1f b9       	out	0x0f, r17	; 15
    258e:	89 81       	ldd	r24, Y+1	; 0x01
            while (!(inp(SPSR) & 0x80))
    2590:	77 9b       	sbis	0x0e, 7	; 14
    2592:	fe cf       	rjmp	.-4      	; 0x2590 <HPLCC2420M_HPLCC2420_cmd+0x1c>
            {
            }
            ;                   //wait for spi xfr to complete
            status = inp(SPDR);
    2594:	1f b1       	in	r17, 0x0f	; 15
        }
        _atomic_end(_atomic);
    2596:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
    }
    LITE_SET_CC_CS_PIN();
    259a:	0e 94 dd 06 	call	0xdba	; 0xdba <LITE_SET_CC_CS_PIN>
    return status;
}
    259e:	81 2f       	mov	r24, r17
    25a0:	0f 90       	pop	r0
    25a2:	cf 91       	pop	r28
    25a4:	df 91       	pop	r29
    25a6:	1f 91       	pop	r17
    25a8:	08 95       	ret

000025aa <HPLCC2420M_HPLCC2420_read>:

//-------------------------------------------------------------------------
inline uint16_t HPLCC2420M_HPLCC2420_read(uint8_t addr)
{
    25aa:	cf 92       	push	r12
    25ac:	df 92       	push	r13
    25ae:	ef 92       	push	r14
    25b0:	ff 92       	push	r15
    25b2:	1f 93       	push	r17
    25b4:	df 93       	push	r29
    25b6:	cf 93       	push	r28
    25b8:	0f 92       	push	r0
    25ba:	cd b7       	in	r28, 0x3d	; 61
    25bc:	de b7       	in	r29, 0x3e	; 62
    25be:	18 2f       	mov	r17, r24
    uint16_t data = 0;
    uint8_t status;

    {
        _atomic_t _atomic = _atomic_start();
    25c0:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>

        {
            HPLCC2420M_bSpiAvail = FALSE;
    25c4:	10 92 d6 08 	sts	0x08D6, r1
            LITE_CLR_CC_CS_PIN();       //enable chip select
    25c8:	89 83       	std	Y+1, r24	; 0x01
    25ca:	0e 94 df 06 	call	0xdbe	; 0xdbe <LITE_CLR_CC_CS_PIN>
            outp(addr | 0x40, SPDR);
    25ce:	10 64       	ori	r17, 0x40	; 64
    25d0:	1f b9       	out	0x0f, r17	; 15
    25d2:	89 81       	ldd	r24, Y+1	; 0x01
            while (!(inp(SPSR) & 0x80))
    25d4:	77 9b       	sbis	0x0e, 7	; 14
    25d6:	fe cf       	rjmp	.-4      	; 0x25d4 <HPLCC2420M_HPLCC2420_read+0x2a>
            {
            }
            ;                   //wait for spi xfr to complete
            status = inp(SPDR);
    25d8:	9f b1       	in	r25, 0x0f	; 15
            outp(0, SPDR);
    25da:	1f b8       	out	0x0f, r1	; 15
            while (!(inp(SPSR) & 0x80))
    25dc:	77 9b       	sbis	0x0e, 7	; 14
    25de:	fe cf       	rjmp	.-4      	; 0x25dc <HPLCC2420M_HPLCC2420_read+0x32>
            {
            }
            ;                   //wait for spi xfr to complete
            data = inp(SPDR);
    25e0:	9f b1       	in	r25, 0x0f	; 15
            outp(0, SPDR);
    25e2:	1f b8       	out	0x0f, r1	; 15
            while (!(inp(SPSR) & 0x80))
    25e4:	77 9b       	sbis	0x0e, 7	; 14
    25e6:	fe cf       	rjmp	.-4      	; 0x25e4 <HPLCC2420M_HPLCC2420_read+0x3a>
            {
            }
            ;                   //wait for spi xfr to complete
            data = (data << 8) | inp(SPDR);
    25e8:	d9 2e       	mov	r13, r25
    25ea:	cc 24       	eor	r12, r12
    25ec:	1f b1       	in	r17, 0x0f	; 15
            LITE_SET_CC_CS_PIN();       //disable chip select
    25ee:	89 83       	std	Y+1, r24	; 0x01
    25f0:	0e 94 dd 06 	call	0xdba	; 0xdba <LITE_SET_CC_CS_PIN>
            HPLCC2420M_bSpiAvail = TRUE;
    25f4:	91 e0       	ldi	r25, 0x01	; 1
    25f6:	90 93 d6 08 	sts	0x08D6, r25
        }
        _atomic_end(_atomic);
    25fa:	89 81       	ldd	r24, Y+1	; 0x01
    25fc:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
            outp(0, SPDR);
            while (!(inp(SPSR) & 0x80))
            {
            }
            ;                   //wait for spi xfr to complete
            data = (data << 8) | inp(SPDR);
    2600:	21 2f       	mov	r18, r17
    2602:	30 e0       	ldi	r19, 0x00	; 0
    2604:	2c 29       	or	r18, r12
    2606:	3d 29       	or	r19, r13
            HPLCC2420M_bSpiAvail = TRUE;
        }
        _atomic_end(_atomic);
    }
    return data;
}
    2608:	c9 01       	movw	r24, r18
    260a:	0f 90       	pop	r0
    260c:	cf 91       	pop	r28
    260e:	df 91       	pop	r29
    2610:	1f 91       	pop	r17
    2612:	ff 90       	pop	r15
    2614:	ef 90       	pop	r14
    2616:	df 90       	pop	r13
    2618:	cf 90       	pop	r12
    261a:	08 95       	ret

0000261c <HPLTimer1M_StdControl_init>:
uint8_t HPLTimer1M_nextScale;
uint16_t HPLTimer1M_minterval;
inline result_t HPLTimer1M_StdControl_init(void)
{
    {
        _atomic_t _atomic = _atomic_start();
    261c:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>

        {
            HPLTimer1M_mscale = TCLK_CPU_DIV256;
    2620:	94 e0       	ldi	r25, 0x04	; 4
    2622:	90 93 e9 08 	sts	0x08E9, r25
            HPLTimer1M_minterval = TIMER1_DEFAULT_INTERVAL;
    2626:	2f ef       	ldi	r18, 0xFF	; 255
    2628:	30 e0       	ldi	r19, 0x00	; 0
    262a:	30 93 e8 08 	sts	0x08E8, r19
    262e:	20 93 e7 08 	sts	0x08E7, r18
        }
        _atomic_end(_atomic);
    2632:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
    }
    return SUCCESS;
}
    2636:	81 e0       	ldi	r24, 0x01	; 1
    2638:	08 95       	ret

0000263a <HPLTimer1M_Timer1_setRate>:
    return SUCCESS;
}

//-------------------------------------------------------------------------
inline result_t HPLTimer1M_Timer1_setRate(uint16_t interval, char scale)
{
    263a:	0f 93       	push	r16
    263c:	1f 93       	push	r17
    263e:	df 93       	push	r29
    2640:	cf 93       	push	r28
    2642:	0f 92       	push	r0
    2644:	cd b7       	in	r28, 0x3d	; 61
    2646:	de b7       	in	r29, 0x3e	; 62
    2648:	8c 01       	movw	r16, r24
    scale &= 0x7;
    264a:	67 70       	andi	r22, 0x07	; 7
    scale |= 0x8;
    {
        _atomic_t _atomic = _atomic_start();
    264c:	69 83       	std	Y+1, r22	; 0x01
    264e:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>

        {
            outp(0, TCCR1A);    //stop the timer's clock
    2652:	1f bc       	out	0x2f, r1	; 47
            cbi(TIMSK, OCIE1A); //disable output compare
    2654:	97 b7       	in	r25, 0x37	; 55
    2656:	9f 7e       	andi	r25, 0xEF	; 239
    2658:	97 bf       	out	0x37, r25	; 55
            cbi(TIMSK, TOIE1);  //disable Overflow interrupts
    265a:	97 b7       	in	r25, 0x37	; 55
    265c:	9b 7f       	andi	r25, 0xFB	; 251
    265e:	97 bf       	out	0x37, r25	; 55
            cbi(TIMSK, TICIE1); //clear input capture
    2660:	97 b7       	in	r25, 0x37	; 55
    2662:	9f 7d       	andi	r25, 0xDF	; 223
    2664:	97 bf       	out	0x37, r25	; 55
            outw(TCNT1L, 0);    //clear the 16bit count 
    2666:	1d bc       	out	0x2d, r1	; 45
    2668:	1c bc       	out	0x2c, r1	; 44
            outw(OCR1AL, interval);     //set the compare value
    266a:	1b bd       	out	0x2b, r17	; 43
    266c:	0a bd       	out	0x2a, r16	; 42
            sbi(TIFR, OCF1A);   //clear Timer1A OCF flag by writing 1
    266e:	96 b7       	in	r25, 0x36	; 54
    2670:	90 61       	ori	r25, 0x10	; 16
    2672:	96 bf       	out	0x36, r25	; 54

//-------------------------------------------------------------------------
inline result_t HPLTimer1M_Timer1_setRate(uint16_t interval, char scale)
{
    scale &= 0x7;
    scale |= 0x8;
    2674:	69 81       	ldd	r22, Y+1	; 0x01
    2676:	68 60       	ori	r22, 0x08	; 8
            cbi(TIMSK, TICIE1); //clear input capture
            outw(TCNT1L, 0);    //clear the 16bit count 
            outw(OCR1AL, interval);     //set the compare value
            sbi(TIFR, OCF1A);   //clear Timer1A OCF flag by writing 1
            //              sbi(TIMSK, OCIE1A);       //enable OCIE1A interrupt
            outp(scale, TCCR1B);        //starts the timer with sc
    2678:	6e bd       	out	0x2e, r22	; 46
        }
        _atomic_end(_atomic);
    267a:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
    }
    return SUCCESS;
}
    267e:	81 e0       	ldi	r24, 0x01	; 1
    2680:	0f 90       	pop	r0
    2682:	cf 91       	pop	r28
    2684:	df 91       	pop	r29
    2686:	1f 91       	pop	r17
    2688:	0f 91       	pop	r16
    268a:	08 95       	ret

0000268c <HPLTimer1M_StdControl_stop>:
    return SUCCESS;
}

//-------------------------------------------------------------------------
inline result_t HPLTimer1M_StdControl_stop(void)
{
    268c:	cf 93       	push	r28
    268e:	df 93       	push	r29
    uint16_t mi;

    {
        _atomic_t _atomic = _atomic_start();
    2690:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>

        {
            mi = HPLTimer1M_minterval;
    2694:	c0 91 e7 08 	lds	r28, 0x08E7
    2698:	d0 91 e8 08 	lds	r29, 0x08E8
        }
        _atomic_end(_atomic);
    269c:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
    }
    HPLTimer1M_Timer1_setRate(mi, 0);   //default scale=0=OFF
    26a0:	ce 01       	movw	r24, r28
    26a2:	60 e0       	ldi	r22, 0x00	; 0
    26a4:	0e 94 1d 13 	call	0x263a	; 0x263a <HPLTimer1M_Timer1_setRate>
    return SUCCESS;
}
    26a8:	81 e0       	ldi	r24, 0x01	; 1
    26aa:	df 91       	pop	r29
    26ac:	cf 91       	pop	r28
    26ae:	08 95       	ret

000026b0 <HPLTimer1M_StdControl_start>:
    return SUCCESS;
}

//-------------------------------------------------------------------------
inline result_t HPLTimer1M_StdControl_start(void)
{
    26b0:	0f 93       	push	r16
    26b2:	1f 93       	push	r17
    26b4:	df 93       	push	r29
    26b6:	cf 93       	push	r28
    26b8:	0f 92       	push	r0
    26ba:	cd b7       	in	r28, 0x3d	; 61
    26bc:	de b7       	in	r29, 0x3e	; 62
    uint16_t mi;
    uint8_t ms;

    {
        _atomic_t _atomic = _atomic_start();
    26be:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>

        {
            mi = HPLTimer1M_minterval;
    26c2:	00 91 e7 08 	lds	r16, 0x08E7
    26c6:	10 91 e8 08 	lds	r17, 0x08E8
            ms = HPLTimer1M_mscale;
    26ca:	60 91 e9 08 	lds	r22, 0x08E9
        }
        _atomic_end(_atomic);
    26ce:	69 83       	std	Y+1, r22	; 0x01
    26d0:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
    }
    HPLTimer1M_Timer1_setRate(mi, ms);
    26d4:	c8 01       	movw	r24, r16
    26d6:	69 81       	ldd	r22, Y+1	; 0x01
    26d8:	0e 94 1d 13 	call	0x263a	; 0x263a <HPLTimer1M_Timer1_setRate>
    return SUCCESS;
}
    26dc:	81 e0       	ldi	r24, 0x01	; 1
    26de:	0f 90       	pop	r0
    26e0:	cf 91       	pop	r28
    26e2:	df 91       	pop	r29
    26e4:	1f 91       	pop	r17
    26e6:	0f 91       	pop	r16
    26e8:	08 95       	ret

000026ea <HPLTimer1M_CaptureT1_enableEvents>:
}

//-------------------------------------------------------------------------
inline void HPLTimer1M_CaptureT1_enableEvents(void)
{
    cbi(TCCR1B, WGM13);
    26ea:	8e b5       	in	r24, 0x2e	; 46
    26ec:	8f 7e       	andi	r24, 0xEF	; 239
    26ee:	8e bd       	out	0x2e, r24	; 46
    cbi(TCCR1B, WGM12);
    26f0:	8e b5       	in	r24, 0x2e	; 46
    26f2:	87 7f       	andi	r24, 0xF7	; 247
    26f4:	8e bd       	out	0x2e, r24	; 46
    sbi(TIMSK, TICIE1);
    26f6:	87 b7       	in	r24, 0x37	; 55
    26f8:	80 62       	ori	r24, 0x20	; 32
    26fa:	87 bf       	out	0x37, r24	; 55
}
    26fc:	08 95       	ret

000026fe <HPLTimer1M_CaptureT1_clearOverflow>:

//-------------------------------------------------------------------------
inline void HPLTimer1M_CaptureT1_clearOverflow(void)
{
    sbi(TIFR, TOV1);
    26fe:	86 b7       	in	r24, 0x36	; 54
    2700:	84 60       	ori	r24, 0x04	; 4
    2702:	86 bf       	out	0x36, r24	; 54
    return;
}
    2704:	08 95       	ret

00002706 <HPLTimer1M_CaptureT1_disableEvents>:

//-------------------------------------------------------------------------
inline void HPLTimer1M_CaptureT1_disableEvents(void)
{
    cbi(TIMSK, TICIE1);         //disable
    2706:	87 b7       	in	r24, 0x37	; 55
    2708:	8f 7d       	andi	r24, 0xDF	; 223
    270a:	87 bf       	out	0x37, r24	; 55
    sbi(TIFR, ICF1);            //clear any pending interrupt}
    270c:	86 b7       	in	r24, 0x36	; 54
    270e:	80 62       	ori	r24, 0x20	; 32
    2710:	86 bf       	out	0x36, r24	; 54
}
    2712:	08 95       	ret

00002714 <HPLTimer1M_Timer1_default_fire>:

//-------------------------------------------------------------------------
inline result_t HPLTimer1M_Timer1_default_fire(void)
{
    return SUCCESS;
}
    2714:	81 e0       	ldi	r24, 0x01	; 1
    2716:	08 95       	ret

00002718 <HPLTimer1M_Timer1_fire>:
{
    unsigned char result;

    result = HPLTimer1M_Timer1_default_fire();
    return result;
}
    2718:	81 e0       	ldi	r24, 0x01	; 1
    271a:	08 95       	ret

0000271c <HPLTimer1M_CaptureT1_getEvent>:

//-------------------------------------------------------------------------
inline uint16_t HPLTimer1M_CaptureT1_getEvent(void)
{
    271c:	ef 92       	push	r14
    271e:	ff 92       	push	r15
    2720:	cf 93       	push	r28
    2722:	df 93       	push	r29
    uint16_t i;

    {
        _atomic_t _atomic = _atomic_start();
    2724:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>

        i = inw(ICR1L);
    2728:	c6 b5       	in	r28, 0x26	; 38
    272a:	d7 b5       	in	r29, 0x27	; 39
        _atomic_end(_atomic);
    272c:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
    }
    return i;
}
    2730:	ce 01       	movw	r24, r28
    2732:	df 91       	pop	r29
    2734:	cf 91       	pop	r28
    2736:	ff 90       	pop	r15
    2738:	ef 90       	pop	r14
    273a:	08 95       	ret

0000273c <HPLTimer1M_CaptureT1_captured>:

//-------------------------------------------------------------------------
inline void HPLTimer1M_CaptureT1_captured(uint16_t arg_0xa4d7ac0)
{
    hplcc2420interruptm_SFDCapture_captured(arg_0xa4d7ac0);
    273c:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <hplcc2420interruptm_SFDCapture_captured>
}
    2740:	08 95       	ret

00002742 <__vector_11>:

//void   __vector_11(void) __attribute__((signal, used,   externally_visible)); 
//void  __attribute((signal, used, externally_visible))   __vector_11(void) 
SIGNAL(TIMER1_CAPT_vect)
{
    2742:	1f 92       	push	r1
    2744:	0f 92       	push	r0
    2746:	0f b6       	in	r0, 0x3f	; 63
    2748:	0f 92       	push	r0
    274a:	0b b6       	in	r0, 0x3b	; 59
    274c:	0f 92       	push	r0
    274e:	11 24       	eor	r1, r1
    2750:	0f 93       	push	r16
    2752:	1f 93       	push	r17
    2754:	2f 93       	push	r18
    2756:	3f 93       	push	r19
    2758:	4f 93       	push	r20
    275a:	5f 93       	push	r21
    275c:	6f 93       	push	r22
    275e:	7f 93       	push	r23
    2760:	8f 93       	push	r24
    2762:	9f 93       	push	r25
    2764:	af 93       	push	r26
    2766:	bf 93       	push	r27
    2768:	ef 93       	push	r30
    276a:	ff 93       	push	r31
       _atomic_end(_atomic); 
       }
    #endif
    
    isthreadtrue = 0;
    _atomic = _atomic_start();
    276c:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>
    2770:	08 2f       	mov	r16, r24
    if (is_thread())
    2772:	0e 94 30 15 	call	0x2a60	; 0x2a60 <is_thread>
    2776:	88 23       	and	r24, r24
    2778:	71 f0       	breq	.+28     	; 0x2796 <__vector_11+0x54>
    {
        isthreadtrue = 1;
        SWAP_STACK_PTR(stackinterrupt_ptr, old_stack_ptr);
    277a:	2d b7       	in	r18, 0x3d	; 61
    277c:	3e b7       	in	r19, 0x3e	; 62
    277e:	30 93 a4 09 	sts	0x09A4, r19
    2782:	20 93 a3 09 	sts	0x09A3, r18
    2786:	20 91 1f 09 	lds	r18, 0x091F
    278a:	30 91 20 09 	lds	r19, 0x0920
    278e:	3e bf       	out	0x3e, r19	; 62
    2790:	2d bf       	out	0x3d, r18	; 61
    
    isthreadtrue = 0;
    _atomic = _atomic_start();
    if (is_thread())
    {
        isthreadtrue = 1;
    2792:	11 e0       	ldi	r17, 0x01	; 1
    2794:	01 c0       	rjmp	.+2      	; 0x2798 <__vector_11+0x56>
       hcounter = getCurrentCounterHigh();
       _atomic_end(_atomic); 
       }
    #endif
    
    isthreadtrue = 0;
    2796:	10 e0       	ldi	r17, 0x00	; 0
    if (is_thread())
    {
        isthreadtrue = 1;
        SWAP_STACK_PTR(stackinterrupt_ptr, old_stack_ptr);
    }
    _atomic_end(_atomic);
    2798:	80 2f       	mov	r24, r16
    279a:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
    HPLTimer1M_CaptureT1_captured(HPLTimer1M_CaptureT1_getEvent());
    279e:	0e 94 8e 13 	call	0x271c	; 0x271c <HPLTimer1M_CaptureT1_getEvent>
}

//-------------------------------------------------------------------------
inline void HPLTimer1M_CaptureT1_captured(uint16_t arg_0xa4d7ac0)
{
    hplcc2420interruptm_SFDCapture_captured(arg_0xa4d7ac0);
    27a2:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <hplcc2420interruptm_SFDCapture_captured>
        isthreadtrue = 1;
        SWAP_STACK_PTR(stackinterrupt_ptr, old_stack_ptr);
    }
    _atomic_end(_atomic);
    HPLTimer1M_CaptureT1_captured(HPLTimer1M_CaptureT1_getEvent());
    _atomic = _atomic_start();
    27a6:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>
    if (isthreadtrue == 1)
    27aa:	11 30       	cpi	r17, 0x01	; 1
    27ac:	61 f4       	brne	.+24     	; 0x27c6 <__vector_11+0x84>
    {
        isthreadtrue = 0;
        SWAP_STACK_PTR(old_stack_ptr, stackinterrupt_ptr);
    27ae:	2d b7       	in	r18, 0x3d	; 61
    27b0:	3e b7       	in	r19, 0x3e	; 62
    27b2:	30 93 20 09 	sts	0x0920, r19
    27b6:	20 93 1f 09 	sts	0x091F, r18
    27ba:	20 91 a3 09 	lds	r18, 0x09A3
    27be:	30 91 a4 09 	lds	r19, 0x09A4
    27c2:	3e bf       	out	0x3e, r19	; 62
    27c4:	2d bf       	out	0x3d, r18	; 61
        // thread_yield();   
    }
    _atomic_end(_atomic);
    27c6:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
       interruptcost += ((uint32_t)(hcounter2-hcounter))*50000*50000 + lcounter2 - lcounter; 
       _atomic_end(_atomic); 
       }
       __asm__ __volatile__ ("cli" ::);     
    #endif
}
    27ca:	ff 91       	pop	r31
    27cc:	ef 91       	pop	r30
    27ce:	bf 91       	pop	r27
    27d0:	af 91       	pop	r26
    27d2:	9f 91       	pop	r25
    27d4:	8f 91       	pop	r24
    27d6:	7f 91       	pop	r23
    27d8:	6f 91       	pop	r22
    27da:	5f 91       	pop	r21
    27dc:	4f 91       	pop	r20
    27de:	3f 91       	pop	r19
    27e0:	2f 91       	pop	r18
    27e2:	1f 91       	pop	r17
    27e4:	0f 91       	pop	r16
    27e6:	0f 90       	pop	r0
    27e8:	0b be       	out	0x3b, r0	; 59
    27ea:	0f 90       	pop	r0
    27ec:	0f be       	out	0x3f, r0	; 63
    27ee:	0f 90       	pop	r0
    27f0:	1f 90       	pop	r1
    27f2:	18 95       	reti

000027f4 <HPLTimer1M_CaptureT1_isOverflowPending>:

//-------------------------------------------------------------------------
inline bool HPLTimer1M_CaptureT1_isOverflowPending(void)
{
    return (inp(TIFR) & TOV1);
    27f4:	86 b7       	in	r24, 0x36	; 54
}
    27f6:	82 70       	andi	r24, 0x02	; 2
    27f8:	08 95       	ret

000027fa <HPLTimer1M_CaptureT1_setEdge>:

//-------------------------------------------------------------------------
inline void HPLTimer1M_CaptureT1_setEdge(uint8_t LowToHigh)
{
    if (LowToHigh)
    27fa:	88 23       	and	r24, r24
    27fc:	19 f0       	breq	.+6      	; 0x2804 <HPLTimer1M_CaptureT1_setEdge+0xa>
    {
        sbi(TCCR1B, ICES1);
    27fe:	8e b5       	in	r24, 0x2e	; 46
    2800:	80 64       	ori	r24, 0x40	; 64
    2802:	02 c0       	rjmp	.+4      	; 0x2808 <HPLTimer1M_CaptureT1_setEdge+0xe>
    }
    //rising edge
    else
    {
        cbi(TCCR1B, ICES1);
    2804:	8e b5       	in	r24, 0x2e	; 46
    2806:	8f 7b       	andi	r24, 0xBF	; 191
    2808:	8e bd       	out	0x2e, r24	; 46
    }
    //falling edge
    //Set InputCapture pin PortD pin4 as INPUT
    //  LITE_MAKE_CC_SFD_INPUT();
    sbi(TIFR, ICF1);            //clear any pending interrupt
    280a:	86 b7       	in	r24, 0x36	; 54
    280c:	80 62       	ori	r24, 0x20	; 32
    280e:	86 bf       	out	0x36, r24	; 54
    return;
}
    2810:	08 95       	ret

00002812 <__vector_12>:

//void  __vector_12(void)  __attribute__((signal, used,   externally_visible)); 
//void __attribute((interrupt, used, externally_visible))  __vector_12(void)
ISR(TIMER1_COMPA_vect)
{
    2812:	1f 92       	push	r1
    2814:	0f 92       	push	r0
    2816:	0f b6       	in	r0, 0x3f	; 63
    2818:	0f 92       	push	r0
    281a:	0b b6       	in	r0, 0x3b	; 59
    281c:	0f 92       	push	r0
    281e:	11 24       	eor	r1, r1
    2820:	0f 93       	push	r16
    2822:	1f 93       	push	r17
    2824:	2f 93       	push	r18
    2826:	3f 93       	push	r19
    2828:	4f 93       	push	r20
    282a:	5f 93       	push	r21
    282c:	6f 93       	push	r22
    282e:	7f 93       	push	r23
    2830:	8f 93       	push	r24
    2832:	9f 93       	push	r25
    2834:	af 93       	push	r26
    2836:	bf 93       	push	r27
    2838:	ef 93       	push	r30
    283a:	ff 93       	push	r31
    /*   
       __asm__ __volatile__ ("sei" ::);
       SHOWME(int12 start\n);
     */
    isthreadtrue = 0;
    _atomic = _atomic_start();
    283c:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>
    2840:	08 2f       	mov	r16, r24
    if (is_thread())
    2842:	0e 94 30 15 	call	0x2a60	; 0x2a60 <is_thread>
    2846:	88 23       	and	r24, r24
    2848:	71 f0       	breq	.+28     	; 0x2866 <__vector_12+0x54>
    {
        isthreadtrue = 1;
        SWAP_STACK_PTR(stackinterrupt_ptr, old_stack_ptr);
    284a:	2d b7       	in	r18, 0x3d	; 61
    284c:	3e b7       	in	r19, 0x3e	; 62
    284e:	30 93 a4 09 	sts	0x09A4, r19
    2852:	20 93 a3 09 	sts	0x09A3, r18
    2856:	20 91 1f 09 	lds	r18, 0x091F
    285a:	30 91 20 09 	lds	r19, 0x0920
    285e:	3e bf       	out	0x3e, r19	; 62
    2860:	2d bf       	out	0x3d, r18	; 61
     */
    isthreadtrue = 0;
    _atomic = _atomic_start();
    if (is_thread())
    {
        isthreadtrue = 1;
    2862:	11 e0       	ldi	r17, 0x01	; 1
    2864:	01 c0       	rjmp	.+2      	; 0x2868 <__vector_12+0x56>

    /*   
       __asm__ __volatile__ ("sei" ::);
       SHOWME(int12 start\n);
     */
    isthreadtrue = 0;
    2866:	10 e0       	ldi	r17, 0x00	; 0
    if (is_thread())
    {
        isthreadtrue = 1;
        SWAP_STACK_PTR(stackinterrupt_ptr, old_stack_ptr);
    }
    _atomic_end(_atomic);
    2868:	80 2f       	mov	r24, r16
    286a:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
    {
        _atomic_t _atomic = _atomic_start();
    286e:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>

        {
            if (HPLTimer1M_set_flag)
    2872:	90 91 e1 08 	lds	r25, 0x08E1
    2876:	99 23       	and	r25, r25
    2878:	81 f0       	breq	.+32     	; 0x289a <__vector_12+0x88>
            {
                HPLTimer1M_mscale = HPLTimer1M_nextScale;
    287a:	90 91 e6 08 	lds	r25, 0x08E6
    287e:	90 93 e9 08 	sts	0x08E9, r25
                HPLTimer1M_nextScale |= 0x8;
    2882:	98 60       	ori	r25, 0x08	; 8
    2884:	90 93 e6 08 	sts	0x08E6, r25
                outp(HPLTimer1M_nextScale, TCCR1B);     //update the clock scale
    2888:	9e bd       	out	0x2e, r25	; 46
                outw(OCR1AL, HPLTimer1M_minterval);     //update the compare value
    288a:	20 91 e7 08 	lds	r18, 0x08E7
    288e:	30 91 e8 08 	lds	r19, 0x08E8
    2892:	3b bd       	out	0x2b, r19	; 43
    2894:	2a bd       	out	0x2a, r18	; 42
                HPLTimer1M_set_flag = 0;
    2896:	10 92 e1 08 	sts	0x08E1, r1
            }
        }
        _atomic_end(_atomic);
    289a:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
    }
    HPLTimer1M_Timer1_fire();
    _atomic = _atomic_start();
    289e:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>
    if (isthreadtrue == 1)
    28a2:	11 30       	cpi	r17, 0x01	; 1
    28a4:	61 f4       	brne	.+24     	; 0x28be <__vector_12+0xac>
    {
        isthreadtrue = 0;
        SWAP_STACK_PTR(old_stack_ptr, stackinterrupt_ptr);
    28a6:	2d b7       	in	r18, 0x3d	; 61
    28a8:	3e b7       	in	r19, 0x3e	; 62
    28aa:	30 93 20 09 	sts	0x0920, r19
    28ae:	20 93 1f 09 	sts	0x091F, r18
    28b2:	20 91 a3 09 	lds	r18, 0x09A3
    28b6:	30 91 a4 09 	lds	r19, 0x09A4
    28ba:	3e bf       	out	0x3e, r19	; 62
    28bc:	2d bf       	out	0x3d, r18	; 61
        //  thread_yield();   
    }
    _atomic_end(_atomic);
    28be:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
    /*              
       SHOWME(int12 end\n);
       __asm__ __volatile__ ("cli" ::);     
     */
}
    28c2:	ff 91       	pop	r31
    28c4:	ef 91       	pop	r30
    28c6:	bf 91       	pop	r27
    28c8:	af 91       	pop	r26
    28ca:	9f 91       	pop	r25
    28cc:	8f 91       	pop	r24
    28ce:	7f 91       	pop	r23
    28d0:	6f 91       	pop	r22
    28d2:	5f 91       	pop	r21
    28d4:	4f 91       	pop	r20
    28d6:	3f 91       	pop	r19
    28d8:	2f 91       	pop	r18
    28da:	1f 91       	pop	r17
    28dc:	0f 91       	pop	r16
    28de:	0f 90       	pop	r0
    28e0:	0b be       	out	0x3b, r0	; 59
    28e2:	0f 90       	pop	r0
    28e4:	0f be       	out	0x3f, r0	; 63
    28e6:	0f 90       	pop	r0
    28e8:	1f 90       	pop	r1
    28ea:	18 95       	reti

000028ec <initScheduling>:
#endif
void initScheduling(void)
{
    int i;

    LITE_sched_num = 0;
    28ec:	10 92 1a 09 	sts	0x091A, r1
    for (i = 0; i < LITE_MAX_TASKS; i++)
    28f0:	80 e0       	ldi	r24, 0x00	; 0
    28f2:	90 e0       	ldi	r25, 0x00	; 0
    {
        LITE_queue[i].tp = (void *)0;
    28f4:	fc 01       	movw	r30, r24
    28f6:	ee 0f       	add	r30, r30
    28f8:	ff 1f       	adc	r31, r31
    28fa:	e8 0f       	add	r30, r24
    28fc:	f9 1f       	adc	r31, r25
    28fe:	e6 51       	subi	r30, 0x16	; 22
    2900:	f7 4f       	sbci	r31, 0xF7	; 247
    2902:	11 82       	std	Z+1, r1	; 0x01
    2904:	10 82       	st	Z, r1
void initScheduling(void)
{
    int i;

    LITE_sched_num = 0;
    for (i = 0; i < LITE_MAX_TASKS; i++)
    2906:	01 96       	adiw	r24, 0x01	; 1
    2908:	80 31       	cpi	r24, 0x10	; 16
    290a:	91 05       	cpc	r25, r1
    290c:	99 f7       	brne	.-26     	; 0x28f4 <initScheduling+0x8>
        LITE_queue[i].tp = (void *)0;
    }
#ifdef PLATFORM_CPU_MEASURE
    cpucounter = 0;
#endif
}
    290e:	08 95       	ret

00002910 <postTask>:

//-------------------------------------------------------------------------
bool postTask(void (*tp) (void), uint8_t priority)
{
    2910:	0f 93       	push	r16
    2912:	1f 93       	push	r17
    2914:	df 93       	push	r29
    2916:	cf 93       	push	r28
    2918:	0f 92       	push	r0
    291a:	cd b7       	in	r28, 0x3d	; 61
    291c:	de b7       	in	r29, 0x3e	; 62
    291e:	8c 01       	movw	r16, r24
    _atomic_t fInterruptFlags;
    uint8_t tmp;

    fInterruptFlags = _atomic_start();
    2920:	69 83       	std	Y+1, r22	; 0x01
    2922:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>
    if (LITE_sched_num == LITE_MAX_TASKS)
    2926:	90 91 1a 09 	lds	r25, 0x091A
    292a:	69 81       	ldd	r22, Y+1	; 0x01
    292c:	90 31       	cpi	r25, 0x10	; 16
    292e:	f9 f0       	breq	.+62     	; 0x296e <postTask+0x5e>
    2930:	20 e0       	ldi	r18, 0x00	; 0
    2932:	30 e0       	ldi	r19, 0x00	; 0
        _atomic_end(fInterruptFlags);
        return FALSE;
    }
    for (tmp = 0; tmp < LITE_MAX_TASKS; tmp++)
    {
        if (LITE_queue[tmp].tp == NULL)
    2934:	f9 01       	movw	r30, r18
    2936:	ee 0f       	add	r30, r30
    2938:	ff 1f       	adc	r31, r31
    293a:	e2 0f       	add	r30, r18
    293c:	f3 1f       	adc	r31, r19
    293e:	e6 51       	subi	r30, 0x16	; 22
    2940:	f7 4f       	sbci	r31, 0xF7	; 247
    2942:	40 81       	ld	r20, Z
    2944:	51 81       	ldd	r21, Z+1	; 0x01
    2946:	41 15       	cp	r20, r1
    2948:	51 05       	cpc	r21, r1
    294a:	61 f4       	brne	.+24     	; 0x2964 <postTask+0x54>
        {
            LITE_queue[tmp].tp = tp;
    294c:	11 83       	std	Z+1, r17	; 0x01
    294e:	00 83       	st	Z, r16
            LITE_queue[tmp].priority = priority;
    2950:	62 83       	std	Z+2, r22	; 0x02
            LITE_sched_num++;
    2952:	90 91 1a 09 	lds	r25, 0x091A
    2956:	9f 5f       	subi	r25, 0xFF	; 255
    2958:	90 93 1a 09 	sts	0x091A, r25
            _atomic_end(fInterruptFlags);
    295c:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
            return TRUE;
    2960:	81 e0       	ldi	r24, 0x01	; 1
    2962:	08 c0       	rjmp	.+16     	; 0x2974 <postTask+0x64>
    2964:	2f 5f       	subi	r18, 0xFF	; 255
    2966:	3f 4f       	sbci	r19, 0xFF	; 255
    if (LITE_sched_num == LITE_MAX_TASKS)
    {
        _atomic_end(fInterruptFlags);
        return FALSE;
    }
    for (tmp = 0; tmp < LITE_MAX_TASKS; tmp++)
    2968:	20 31       	cpi	r18, 0x10	; 16
    296a:	31 05       	cpc	r19, r1
    296c:	19 f7       	brne	.-58     	; 0x2934 <postTask+0x24>
            LITE_sched_num++;
            _atomic_end(fInterruptFlags);
            return TRUE;
        }
    }
    _atomic_end(fInterruptFlags);
    296e:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
    return FALSE;
    2972:	80 e0       	ldi	r24, 0x00	; 0
}
    2974:	0f 90       	pop	r0
    2976:	cf 91       	pop	r28
    2978:	df 91       	pop	r29
    297a:	1f 91       	pop	r17
    297c:	0f 91       	pop	r16
    297e:	08 95       	ret

00002980 <runNextTask>:

//-------------------------------------------------------------------------
bool runNextTask()
{
    2980:	cf 93       	push	r28
    2982:	df 93       	push	r29
    uint8_t tmp;
    uint8_t reserved;
    void (*func) (void);

    reserved = 0;
    fInterruptFlags = _atomic_start();
    2984:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>
    currentpriority = 0;
    func = NULL;
    if (LITE_sched_num == 0)
    2988:	90 91 1a 09 	lds	r25, 0x091A
    298c:	99 23       	and	r25, r25
    298e:	41 f4       	brne	.+16     	; 0x29a0 <runNextTask+0x20>
    {
        _atomic_end(fInterruptFlags);
    2990:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
        _avr_enable_interrupt();
    2994:	0e 94 ba 03 	call	0x774	; 0x774 <_avr_enable_interrupt>
#ifdef PLATFORM_CPU_MEASURE
        cpucounter++;
#else
        _avr_sleep();
    2998:	0e 94 b8 03 	call	0x770	; 0x770 <_avr_sleep>
        //   printfstr("ABOUT TO SLEEP!!\n");
#endif
        return FALSE;
    299c:	80 e0       	ldi	r24, 0x00	; 0
    299e:	37 c0       	rjmp	.+110    	; 0x2a0e <runNextTask+0x8e>

    reserved = 0;
    fInterruptFlags = _atomic_start();
    currentpriority = 0;
    func = NULL;
    if (LITE_sched_num == 0)
    29a0:	20 e0       	ldi	r18, 0x00	; 0
    29a2:	30 e0       	ldi	r19, 0x00	; 0
    29a4:	c0 e0       	ldi	r28, 0x00	; 0
    29a6:	d0 e0       	ldi	r29, 0x00	; 0
    29a8:	60 e0       	ldi	r22, 0x00	; 0
    29aa:	90 e0       	ldi	r25, 0x00	; 0
#endif
        return FALSE;
    }
    for (tmp = 0; tmp < LITE_MAX_TASKS; tmp++)
    {
        if ((LITE_queue[tmp].tp != NULL) && (LITE_queue[tmp].priority >
    29ac:	f9 01       	movw	r30, r18
    29ae:	ee 0f       	add	r30, r30
    29b0:	ff 1f       	adc	r31, r31
    29b2:	e2 0f       	add	r30, r18
    29b4:	f3 1f       	adc	r31, r19
    29b6:	e6 51       	subi	r30, 0x16	; 22
    29b8:	f7 4f       	sbci	r31, 0xF7	; 247
    29ba:	40 81       	ld	r20, Z
    29bc:	51 81       	ldd	r21, Z+1	; 0x01
    29be:	41 15       	cp	r20, r1
    29c0:	51 05       	cpc	r21, r1
    29c2:	39 f0       	breq	.+14     	; 0x29d2 <runNextTask+0x52>
    29c4:	42 81       	ldd	r20, Z+2	; 0x02
    29c6:	94 17       	cp	r25, r20
    29c8:	20 f4       	brcc	.+8      	; 0x29d2 <runNextTask+0x52>
                                             currentpriority))
        {
            func = LITE_queue[tmp].tp;
    29ca:	c0 81       	ld	r28, Z
    29cc:	d1 81       	ldd	r29, Z+1	; 0x01
            reserved = tmp;
            currentpriority = LITE_queue[tmp].priority;
    29ce:	92 81       	ldd	r25, Z+2	; 0x02
    29d0:	62 2f       	mov	r22, r18
    29d2:	2f 5f       	subi	r18, 0xFF	; 255
    29d4:	3f 4f       	sbci	r19, 0xFF	; 255
        _avr_sleep();
        //   printfstr("ABOUT TO SLEEP!!\n");
#endif
        return FALSE;
    }
    for (tmp = 0; tmp < LITE_MAX_TASKS; tmp++)
    29d6:	20 31       	cpi	r18, 0x10	; 16
    29d8:	31 05       	cpc	r19, r1
    29da:	41 f7       	brne	.-48     	; 0x29ac <runNextTask+0x2c>
            func = LITE_queue[tmp].tp;
            reserved = tmp;
            currentpriority = LITE_queue[tmp].priority;
        }
    }
    if (func != NULL)
    29dc:	20 97       	sbiw	r28, 0x00	; 0
    29de:	81 f0       	breq	.+32     	; 0x2a00 <runNextTask+0x80>
    {
        LITE_sched_num--;
    29e0:	90 91 1a 09 	lds	r25, 0x091A
    29e4:	91 50       	subi	r25, 0x01	; 1
    29e6:	90 93 1a 09 	sts	0x091A, r25
        LITE_queue[reserved].tp = NULL;
    29ea:	26 2f       	mov	r18, r22
    29ec:	30 e0       	ldi	r19, 0x00	; 0
    29ee:	f9 01       	movw	r30, r18
    29f0:	ee 0f       	add	r30, r30
    29f2:	ff 1f       	adc	r31, r31
    29f4:	e2 0f       	add	r30, r18
    29f6:	f3 1f       	adc	r31, r19
    29f8:	e6 51       	subi	r30, 0x16	; 22
    29fa:	f7 4f       	sbci	r31, 0xF7	; 247
    29fc:	11 82       	std	Z+1, r1	; 0x01
    29fe:	10 82       	st	Z, r1
    }
    _atomic_end(fInterruptFlags);
    2a00:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
    if (func != NULL)
    2a04:	20 97       	sbiw	r28, 0x00	; 0
    2a06:	11 f0       	breq	.+4      	; 0x2a0c <runNextTask+0x8c>
    {
        func();
    2a08:	fe 01       	movw	r30, r28
    2a0a:	09 95       	icall
    }
    return TRUE;
    2a0c:	81 e0       	ldi	r24, 0x01	; 1
}
    2a0e:	df 91       	pop	r29
    2a10:	cf 91       	pop	r28
    2a12:	08 95       	ret

00002a14 <call_fcn_ptr>:
*/

#include "threaddata.h"
void call_fcn_ptr(void (*tp) ())
{
    (*tp) ();
    2a14:	fc 01       	movw	r30, r24
    2a16:	09 95       	icall
}
    2a18:	08 95       	ret

00002a1a <thread_init>:
 uint16_t counterFrom, counterTo; 


//-------------------------------------------------------------------------
void thread_init()
{
    2a1a:	1f 93       	push	r17
 
  _atomic_t currentatomic;

  currentatomic = _atomic_start();
    2a1c:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>
    2a20:	18 2f       	mov	r17, r24
  
  //initilize the thread table
  nmemset(thread_table, 0, sizeof(thread) *LITE_MAX_THREADS);
    2a22:	87 e2       	ldi	r24, 0x27	; 39
    2a24:	99 e0       	ldi	r25, 0x09	; 9
    2a26:	60 e0       	ldi	r22, 0x00	; 0
    2a28:	70 e0       	ldi	r23, 0x00	; 0
    2a2a:	45 e7       	ldi	r20, 0x75	; 117
    2a2c:	50 e0       	ldi	r21, 0x00	; 0
    2a2e:	0e 94 2b 37 	call	0x6e56	; 0x6e56 <nmemset>
    
  //init all the variables 
  current_thread = 0;
    2a32:	10 92 26 09 	sts	0x0926, r1
    2a36:	10 92 25 09 	sts	0x0925, r1
  old_stack_ptr = 0;
    2a3a:	10 92 20 09 	sts	0x0920, r1
    2a3e:	10 92 1f 09 	sts	0x091F, r1
  stackinterrupt_ptr = 0;
    2a42:	10 92 a4 09 	sts	0x09A4, r1
    2a46:	10 92 a3 09 	sts	0x09A3, r1
  thread_task_active = 0;
    2a4a:	10 92 a0 09 	sts	0x09A0, r1
  maxthreadrambound = 0;
    2a4e:	10 92 a6 09 	sts	0x09A6, r1
    2a52:	10 92 a5 09 	sts	0x09A5, r1
  _atomic_end(currentatomic);
    2a56:	81 2f       	mov	r24, r17
    2a58:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
  //    TimerM_Timer_start(9, TIMER_REPEAT, 1000);
}
    2a5c:	1f 91       	pop	r17
    2a5e:	08 95       	ret

00002a60 <is_thread>:
//--------------------------------------------------------------------------
//this is still working as it checks if the upperfound of threads are larger than the spvalue or not. 
uint8_t is_thread()
{
  uint16_t SPvalue;
  asm volatile("in %A0, 0x3d""\n\t""in %B0, 0x3e""\n\t": "=r"(SPvalue): );
    2a60:	2d b7       	in	r18, 0x3d	; 61
    2a62:	3e b7       	in	r19, 0x3e	; 62

  if (SPvalue > (uint16_t)maxthreadrambound)
  {
    return 0;
    2a64:	81 e0       	ldi	r24, 0x01	; 1
    2a66:	40 91 a5 09 	lds	r20, 0x09A5
    2a6a:	50 91 a6 09 	lds	r21, 0x09A6
    2a6e:	42 17       	cp	r20, r18
    2a70:	53 07       	cpc	r21, r19
    2a72:	08 f4       	brcc	.+2      	; 0x2a76 <is_thread+0x16>
    2a74:	80 e0       	ldi	r24, 0x00	; 0
  }
  else
  {
    return 1;
  }
}
    2a76:	08 95       	ret

00002a78 <create_thread>:


int create_thread(void(*fcn)(), uint16_t *ram_start, uint16_t *stack_ptr,
  uint16_t staticdatasize, uint8_t priority, char *threadName, uint16_t
  romstart, uint16_t romsize)
{
    2a78:	2f 92       	push	r2
    2a7a:	3f 92       	push	r3
    2a7c:	4f 92       	push	r4
    2a7e:	5f 92       	push	r5
    2a80:	6f 92       	push	r6
    2a82:	7f 92       	push	r7
    2a84:	8f 92       	push	r8
    2a86:	9f 92       	push	r9
    2a88:	af 92       	push	r10
    2a8a:	bf 92       	push	r11
    2a8c:	cf 92       	push	r12
    2a8e:	df 92       	push	r13
    2a90:	ef 92       	push	r14
    2a92:	ff 92       	push	r15
    2a94:	0f 93       	push	r16
    2a96:	1f 93       	push	r17
    2a98:	cf 93       	push	r28
    2a9a:	df 93       	push	r29
    2a9c:	1c 01       	movw	r2, r24
    2a9e:	2b 01       	movw	r4, r22
    2aa0:	ea 01       	movw	r28, r20
    2aa2:	39 01       	movw	r6, r18
    2aa4:	46 01       	movw	r8, r12

  //used for handling the built-in memory corrupt detection
  uint16_t *kernelptr;

  //we do not allow threads context to create new threads
  if (is_thread())
    2aa6:	0e 94 30 15 	call	0x2a60	; 0x2a60 <is_thread>
    2aaa:	88 23       	and	r24, r24
    2aac:	09 f0       	breq	.+2      	; 0x2ab0 <create_thread+0x38>
    2aae:	96 c0       	rjmp	.+300    	; 0x2bdc <create_thread+0x164>
  {
    return (0);
  }
  if (stack_ptr > maxthreadrambound)
    2ab0:	80 91 a5 09 	lds	r24, 0x09A5
    2ab4:	90 91 a6 09 	lds	r25, 0x09A6
    2ab8:	8c 17       	cp	r24, r28
    2aba:	9d 07       	cpc	r25, r29
    2abc:	20 f4       	brcc	.+8      	; 0x2ac6 <create_thread+0x4e>
  {
    maxthreadrambound = stack_ptr;
    2abe:	d0 93 a6 09 	sts	0x09A6, r29
    2ac2:	c0 93 a5 09 	sts	0x09A5, r28
  }
  //First loop all the way through the table and find an empty slot 
  //computation time for space here 
  for (i = 0; i < LITE_MAX_THREADS; i++)
  {
    if (thread_table[i].state == STATE_NULL)
    2ac6:	80 91 29 09 	lds	r24, 0x0929
    2aca:	88 23       	and	r24, r24
    2acc:	69 f0       	breq	.+26     	; 0x2ae8 <create_thread+0x70>
    2ace:	80 91 50 09 	lds	r24, 0x0950
    2ad2:	88 23       	and	r24, r24
    2ad4:	61 f0       	breq	.+24     	; 0x2aee <create_thread+0x76>
    2ad6:	80 91 77 09 	lds	r24, 0x0977
    2ada:	88 23       	and	r24, r24
    2adc:	09 f0       	breq	.+2      	; 0x2ae0 <create_thread+0x68>
    2ade:	7e c0       	rjmp	.+252    	; 0x2bdc <create_thread+0x164>
  {
    maxthreadrambound = stack_ptr;
  }
  //First loop all the way through the table and find an empty slot 
  //computation time for space here 
  for (i = 0; i < LITE_MAX_THREADS; i++)
    2ae0:	92 e0       	ldi	r25, 0x02	; 2
    2ae2:	c9 2e       	mov	r12, r25
    2ae4:	d1 2c       	mov	r13, r1
    2ae6:	06 c0       	rjmp	.+12     	; 0x2af4 <create_thread+0x7c>
    2ae8:	cc 24       	eor	r12, r12
    2aea:	dd 24       	eor	r13, r13
    2aec:	03 c0       	rjmp	.+6      	; 0x2af4 <create_thread+0x7c>
    2aee:	81 e0       	ldi	r24, 0x01	; 1
    2af0:	c8 2e       	mov	r12, r24
    2af2:	d1 2c       	mov	r13, r1
  if (i == LITE_MAX_THREADS)
  {
    return (0);
  }
  //Add the thread
  currentatomic = _atomic_start();
    2af4:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>
    2af8:	18 2f       	mov	r17, r24
  //Populate the thread table
  current_thread = &thread_table[i];
    2afa:	87 e2       	ldi	r24, 0x27	; 39
    2afc:	90 e0       	ldi	r25, 0x00	; 0
    2afe:	c8 9e       	mul	r12, r24
    2b00:	f0 01       	movw	r30, r0
    2b02:	c9 9e       	mul	r12, r25
    2b04:	f0 0d       	add	r31, r0
    2b06:	d8 9e       	mul	r13, r24
    2b08:	f0 0d       	add	r31, r0
    2b0a:	11 24       	eor	r1, r1
    2b0c:	e9 5d       	subi	r30, 0xD9	; 217
    2b0e:	f6 4f       	sbci	r31, 0xF6	; 246
    2b10:	f0 93 26 09 	sts	0x0926, r31
    2b14:	e0 93 25 09 	sts	0x0925, r30
  current_thread->sp = stack_ptr;
    2b18:	d1 83       	std	Z+1, r29	; 0x01
    2b1a:	c0 83       	st	Z, r28
  current_thread->state = STATE_ACTIVE;
    2b1c:	82 e0       	ldi	r24, 0x02	; 2
    2b1e:	82 83       	std	Z+2, r24	; 0x02
  current_thread->data.tp = fcn;
    2b20:	36 8e       	std	Z+30, r3	; 0x1e
    2b22:	25 8e       	std	Z+29, r2	; 0x1d
  current_thread->priority = priority;
    2b24:	03 83       	std	Z+3, r16	; 0x03
  current_thread->remaincredits = priority;
    2b26:	04 83       	std	Z+4, r16	; 0x04
  current_thread->ramstart = ram_start;
    2b28:	52 8a       	std	Z+18, r5	; 0x12
    2b2a:	41 8a       	std	Z+17, r4	; 0x11
  current_thread->ramend = stack_ptr;
    2b2c:	d4 8b       	std	Z+20, r29	; 0x14
    2b2e:	c3 8b       	std	Z+19, r28	; 0x13
  current_thread->thread_clear_function = NULL; 
    2b30:	14 8e       	std	Z+28, r1	; 0x1c
    2b32:	13 8e       	std	Z+27, r1	; 0x1b

  //if the thread is created by the kernel directly, then the following are all 0. 
  current_thread->sizeofBss = staticdatasize;
    2b34:	76 8a       	std	Z+22, r7	; 0x16
    2b36:	65 8a       	std	Z+21, r6	; 0x15
  current_thread->romstart = romstart;
    2b38:	90 8e       	std	Z+24, r9	; 0x18
    2b3a:	87 8a       	std	Z+23, r8	; 0x17
  current_thread->romsize = romsize;
    2b3c:	b2 8e       	std	Z+26, r11	; 0x1a
    2b3e:	a1 8e       	std	Z+25, r10	; 0x19

 //COPY file name 
  {
    uint8_t templen;

    templen = mystrlen(threadName);
    2b40:	c7 01       	movw	r24, r14
    2b42:	0e 94 d4 36 	call	0x6da8	; 0x6da8 <mystrlen>
    mystrncpy((char*)current_thread->threadName, (char*)threadName, templen + 1)
    2b46:	20 91 25 09 	lds	r18, 0x0925
    2b4a:	30 91 26 09 	lds	r19, 0x0926
    2b4e:	48 2f       	mov	r20, r24
    2b50:	4f 5f       	subi	r20, 0xFF	; 255
    2b52:	c9 01       	movw	r24, r18
    2b54:	05 96       	adiw	r24, 0x05	; 5
    2b56:	b7 01       	movw	r22, r14
    2b58:	0e 94 44 36 	call	0x6c88	; 0x6c88 <mystrncpy>
      ;
  }
  
  //set up the corruption detection 
  
  kernelptr = (uint16_t*)((uint8_t*)ram_start + staticdatasize);
    2b5c:	f2 01       	movw	r30, r4
    2b5e:	e6 0d       	add	r30, r6
    2b60:	f7 1d       	adc	r31, r7
  *kernelptr = 0xeeff;
    2b62:	8f ef       	ldi	r24, 0xFF	; 255
    2b64:	9e ee       	ldi	r25, 0xEE	; 238
    2b66:	91 83       	std	Z+1, r25	; 0x01
    2b68:	80 83       	st	Z, r24
  *(kernelptr + 1) = 0xeeff;
    2b6a:	93 83       	std	Z+3, r25	; 0x03
    2b6c:	82 83       	std	Z+2, r24	; 0x02
  
  #ifdef PLATFORM_AVR
    //Prepare the fcn pointer on the new stack, so it can be 
    //prepare set the beginning as the function then registers as 0. 
    PREPARE_REG_FOR_STACK();
    2b6e:	8d b7       	in	r24, 0x3d	; 61
    2b70:	9e b7       	in	r25, 0x3e	; 62
    2b72:	90 93 20 09 	sts	0x0920, r25
    2b76:	80 93 1f 09 	sts	0x091F, r24
    2b7a:	e0 91 25 09 	lds	r30, 0x0925
    2b7e:	f0 91 26 09 	lds	r31, 0x0926
    2b82:	80 81       	ld	r24, Z
    2b84:	91 81       	ldd	r25, Z+1	; 0x01
    2b86:	9e bf       	out	0x3e, r25	; 62
    2b88:	8d bf       	out	0x3d, r24	; 61
    2b8a:	8c eb       	ldi	r24, 0xBC	; 188
    2b8c:	97 e1       	ldi	r25, 0x17	; 23
    2b8e:	8f 93       	push	r24
    2b90:	9f 93       	push	r25
    2b92:	82 e2       	ldi	r24, 0x22	; 34
    2b94:	90 e0       	ldi	r25, 0x00	; 0
    2b96:	1f 92       	push	r1
    2b98:	01 97       	sbiw	r24, 0x01	; 1
    2b9a:	e9 f7       	brne	.-6      	; 0x2b96 <create_thread+0x11e>
    2b9c:	8d b7       	in	r24, 0x3d	; 61
    2b9e:	9e b7       	in	r25, 0x3e	; 62
    2ba0:	91 83       	std	Z+1, r25	; 0x01
    2ba2:	80 83       	st	Z, r24
    2ba4:	80 91 1f 09 	lds	r24, 0x091F
    2ba8:	90 91 20 09 	lds	r25, 0x0920
    2bac:	9e bf       	out	0x3e, r25	; 62
    2bae:	8d bf       	out	0x3d, r24	; 61
  #endif 
  
  
  current_thread = 0;
    2bb0:	10 92 26 09 	sts	0x0926, r1
    2bb4:	10 92 25 09 	sts	0x0925, r1
  
  //current_thread->energycontrolblock.energycost = 0;
  //current_thread->energycontrolblock.energyremain = 0; 
  
  if (!thread_task_active)
    2bb8:	80 91 a0 09 	lds	r24, 0x09A0
    2bbc:	88 23       	and	r24, r24
    2bbe:	41 f4       	brne	.+16     	; 0x2bd0 <create_thread+0x158>
  {
    postTask(thread_task, 2);
    2bc0:	88 e7       	ldi	r24, 0x78	; 120
    2bc2:	96 e1       	ldi	r25, 0x16	; 22
    2bc4:	62 e0       	ldi	r22, 0x02	; 2
    2bc6:	0e 94 88 14 	call	0x2910	; 0x2910 <postTask>
    thread_task_active = 1;
    2bca:	81 e0       	ldi	r24, 0x01	; 1
    2bcc:	80 93 a0 09 	sts	0x09A0, r24
  }
  _atomic_end(currentatomic);
    2bd0:	81 2f       	mov	r24, r17
    2bd2:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
  #ifdef TRACE_ENABLE
    #ifdef TRACE_ENABLE_THREADCREATE
      addTrace(TRACE_THREADCREATE, 100);
    #endif 
  #endif 
  return (1);
    2bd6:	21 e0       	ldi	r18, 0x01	; 1
    2bd8:	30 e0       	ldi	r19, 0x00	; 0
    2bda:	02 c0       	rjmp	.+4      	; 0x2be0 <create_thread+0x168>
    }
  }
  //Cannot create thread, no resources... 
  if (i == LITE_MAX_THREADS)
  {
    return (0);
    2bdc:	20 e0       	ldi	r18, 0x00	; 0
    2bde:	30 e0       	ldi	r19, 0x00	; 0
    #ifdef TRACE_ENABLE_THREADCREATE
      addTrace(TRACE_THREADCREATE, 100);
    #endif 
  #endif 
  return (1);
}
    2be0:	c9 01       	movw	r24, r18
    2be2:	df 91       	pop	r29
    2be4:	cf 91       	pop	r28
    2be6:	1f 91       	pop	r17
    2be8:	0f 91       	pop	r16
    2bea:	ff 90       	pop	r15
    2bec:	ef 90       	pop	r14
    2bee:	df 90       	pop	r13
    2bf0:	cf 90       	pop	r12
    2bf2:	bf 90       	pop	r11
    2bf4:	af 90       	pop	r10
    2bf6:	9f 90       	pop	r9
    2bf8:	8f 90       	pop	r8
    2bfa:	7f 90       	pop	r7
    2bfc:	6f 90       	pop	r6
    2bfe:	5f 90       	pop	r5
    2c00:	4f 90       	pop	r4
    2c02:	3f 90       	pop	r3
    2c04:	2f 90       	pop	r2
    2c06:	08 95       	ret

00002c08 <setThreadTerminateFunction>:


/* Set up the destroy thread function call */
void setThreadTerminateFunction(uint8_t currentindex, void(*fp)())
{
  thread_table[currentindex].thread_clear_function = fp;
    2c08:	90 e0       	ldi	r25, 0x00	; 0
    2c0a:	27 e2       	ldi	r18, 0x27	; 39
    2c0c:	30 e0       	ldi	r19, 0x00	; 0
    2c0e:	82 9f       	mul	r24, r18
    2c10:	f0 01       	movw	r30, r0
    2c12:	83 9f       	mul	r24, r19
    2c14:	f0 0d       	add	r31, r0
    2c16:	92 9f       	mul	r25, r18
    2c18:	f0 0d       	add	r31, r0
    2c1a:	11 24       	eor	r1, r1
    2c1c:	e9 5d       	subi	r30, 0xD9	; 217
    2c1e:	f6 4f       	sbci	r31, 0xF6	; 246
    2c20:	74 8f       	std	Z+28, r23	; 0x1c
    2c22:	63 8f       	std	Z+27, r22	; 0x1b
}
    2c24:	08 95       	ret

00002c26 <lite_switch_to_user_thread>:
    #endif 
  #endif 
  
  //these are the current times for the switch to user thread
  
  counterTo = getCurrentCounterHigh();
    2c26:	0e 94 5b 33 	call	0x66b6	; 0x66b6 <getCurrentCounterHigh>
    2c2a:	90 93 a2 09 	sts	0x09A2, r25
    2c2e:	80 93 a1 09 	sts	0x09A1, r24
  switchToThreadTime = getCurrentResolution();
    2c32:	0e 94 5e 33 	call	0x66bc	; 0x66bc <getCurrentResolution>
    2c36:	60 93 21 09 	sts	0x0921, r22
    2c3a:	70 93 22 09 	sts	0x0922, r23
    2c3e:	80 93 23 09 	sts	0x0923, r24
    2c42:	90 93 24 09 	sts	0x0924, r25
  
   //printfstr("Now switching to user.  \n"); 
  #ifdef PLATFORM_AVR
    PUSH_REG_STATUS();
    2c46:	ff 93       	push	r31
    2c48:	ff b7       	in	r31, 0x3f	; 63
    2c4a:	ff 93       	push	r31
    PUSH_GPR();
    2c4c:	0f 92       	push	r0
    2c4e:	1f 92       	push	r1
    2c50:	2f 92       	push	r2
    2c52:	3f 92       	push	r3
    2c54:	4f 92       	push	r4
    2c56:	5f 92       	push	r5
    2c58:	6f 92       	push	r6
    2c5a:	7f 92       	push	r7
    2c5c:	8f 92       	push	r8
    2c5e:	9f 92       	push	r9
    2c60:	af 92       	push	r10
    2c62:	bf 92       	push	r11
    2c64:	cf 92       	push	r12
    2c66:	df 92       	push	r13
    2c68:	ef 92       	push	r14
    2c6a:	ff 92       	push	r15
    2c6c:	0f 93       	push	r16
    2c6e:	1f 93       	push	r17
    2c70:	2f 93       	push	r18
    2c72:	3f 93       	push	r19
    2c74:	4f 93       	push	r20
    2c76:	5f 93       	push	r21
    2c78:	6f 93       	push	r22
    2c7a:	7f 93       	push	r23
    2c7c:	8f 93       	push	r24
    2c7e:	9f 93       	push	r25
    2c80:	af 93       	push	r26
    2c82:	bf 93       	push	r27
    2c84:	cf 93       	push	r28
    2c86:	df 93       	push	r29
    2c88:	ef 93       	push	r30
    2c8a:	ff 93       	push	r31
    SWAP_STACK_PTR(old_stack_ptr, current_thread->sp);
    2c8c:	8d b7       	in	r24, 0x3d	; 61
    2c8e:	9e b7       	in	r25, 0x3e	; 62
    2c90:	90 93 20 09 	sts	0x0920, r25
    2c94:	80 93 1f 09 	sts	0x091F, r24
    2c98:	e0 91 25 09 	lds	r30, 0x0925
    2c9c:	f0 91 26 09 	lds	r31, 0x0926
    2ca0:	80 81       	ld	r24, Z
    2ca2:	91 81       	ldd	r25, Z+1	; 0x01
    2ca4:	9e bf       	out	0x3e, r25	; 62
    2ca6:	8d bf       	out	0x3d, r24	; 61
    POP_GPR();
    2ca8:	ff 91       	pop	r31
    2caa:	ef 91       	pop	r30
    2cac:	df 91       	pop	r29
    2cae:	cf 91       	pop	r28
    2cb0:	bf 91       	pop	r27
    2cb2:	af 91       	pop	r26
    2cb4:	9f 91       	pop	r25
    2cb6:	8f 91       	pop	r24
    2cb8:	7f 91       	pop	r23
    2cba:	6f 91       	pop	r22
    2cbc:	5f 91       	pop	r21
    2cbe:	4f 91       	pop	r20
    2cc0:	3f 91       	pop	r19
    2cc2:	2f 91       	pop	r18
    2cc4:	1f 91       	pop	r17
    2cc6:	0f 91       	pop	r16
    2cc8:	ff 90       	pop	r15
    2cca:	ef 90       	pop	r14
    2ccc:	df 90       	pop	r13
    2cce:	cf 90       	pop	r12
    2cd0:	bf 90       	pop	r11
    2cd2:	af 90       	pop	r10
    2cd4:	9f 90       	pop	r9
    2cd6:	8f 90       	pop	r8
    2cd8:	7f 90       	pop	r7
    2cda:	6f 90       	pop	r6
    2cdc:	5f 90       	pop	r5
    2cde:	4f 90       	pop	r4
    2ce0:	3f 90       	pop	r3
    2ce2:	2f 90       	pop	r2
    2ce4:	1f 90       	pop	r1
    2ce6:	0f 90       	pop	r0
    POP_REG_STATUS();
    2ce8:	ff 91       	pop	r31
    2cea:	ff bf       	out	0x3f, r31	; 63
    2cec:	ff 91       	pop	r31
  #endif 
  
  //_avr_enable_interrupt(); 
  return ;
}
    2cee:	08 95       	ret

00002cf0 <thread_task>:



//-------------------------------------------------------------------------
void thread_task()
{
    2cf0:	af 92       	push	r10
    2cf2:	bf 92       	push	r11
    2cf4:	cf 92       	push	r12
    2cf6:	df 92       	push	r13
    2cf8:	ef 92       	push	r14
    2cfa:	ff 92       	push	r15
    2cfc:	0f 93       	push	r16
    2cfe:	1f 93       	push	r17
    2d00:	cf 93       	push	r28
    2d02:	df 93       	push	r29
  int i;
  uint8_t thread_presleep;
  _atomic_t currentatomic;
   

  currentatomic = _atomic_start();
    2d04:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>
    2d08:	e8 2e       	mov	r14, r24
  thread_presleep = 0;

  for (i = 0; i < LITE_MAX_THREADS; i++)
  {
    if (thread_table[i].state == STATE_PRESLEEP)
    2d0a:	80 91 29 09 	lds	r24, 0x0929
    2d0e:	84 30       	cpi	r24, 0x04	; 4
    2d10:	61 f0       	breq	.+24     	; 0x2d2a <thread_task+0x3a>
    2d12:	80 91 50 09 	lds	r24, 0x0950
    2d16:	84 30       	cpi	r24, 0x04	; 4
    2d18:	59 f0       	breq	.+22     	; 0x2d30 <thread_task+0x40>
    2d1a:	80 91 77 09 	lds	r24, 0x0977
    2d1e:	84 30       	cpi	r24, 0x04	; 4
    2d20:	09 f0       	breq	.+2      	; 0x2d24 <thread_task+0x34>
    2d22:	94 c0       	rjmp	.+296    	; 0x2e4c <thread_task+0x15c>
   

  currentatomic = _atomic_start();
  thread_presleep = 0;

  for (i = 0; i < LITE_MAX_THREADS; i++)
    2d24:	c2 e0       	ldi	r28, 0x02	; 2
    2d26:	d0 e0       	ldi	r29, 0x00	; 0
    2d28:	05 c0       	rjmp	.+10     	; 0x2d34 <thread_task+0x44>
    2d2a:	c0 e0       	ldi	r28, 0x00	; 0
    2d2c:	d0 e0       	ldi	r29, 0x00	; 0
    2d2e:	02 c0       	rjmp	.+4      	; 0x2d34 <thread_task+0x44>
    2d30:	c1 e0       	ldi	r28, 0x01	; 1
    2d32:	d0 e0       	ldi	r29, 0x00	; 0
  }
  thread_presleep = (i != LITE_MAX_THREADS);

  if (thread_presleep)
  {
    postTask(thread_task, 3);
    2d34:	88 e7       	ldi	r24, 0x78	; 120
    2d36:	96 e1       	ldi	r25, 0x16	; 22
    2d38:	63 e0       	ldi	r22, 0x03	; 3
    2d3a:	0e 94 88 14 	call	0x2910	; 0x2910 <postTask>
    
    thread_table[i].state = STATE_SLEEP;
    2d3e:	27 e2       	ldi	r18, 0x27	; 39
    2d40:	30 e0       	ldi	r19, 0x00	; 0
    2d42:	c2 9f       	mul	r28, r18
    2d44:	80 01       	movw	r16, r0
    2d46:	c3 9f       	mul	r28, r19
    2d48:	10 0d       	add	r17, r0
    2d4a:	d2 9f       	mul	r29, r18
    2d4c:	10 0d       	add	r17, r0
    2d4e:	11 24       	eor	r1, r1
    2d50:	09 5d       	subi	r16, 0xD9	; 217
    2d52:	16 4f       	sbci	r17, 0xF6	; 246
    2d54:	85 e0       	ldi	r24, 0x05	; 5
    2d56:	f8 01       	movw	r30, r16
    2d58:	82 83       	std	Z+2, r24	; 0x02
    
    _atomic_end(currentatomic);
    2d5a:	8e 2d       	mov	r24, r14
    2d5c:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
    // TimerM_Timer_start( i, TIMER_ONE_SHOT, thread_table[ i ].data.sleepstate.sleeptime );
    GenericTimerStart(i, TIMER_ONE_SHOT,
      thread_table[i].data.sleepstate.sleeptime);
    2d60:	f8 01       	movw	r30, r16
    2d62:	25 8d       	ldd	r18, Z+29	; 0x1d
    2d64:	36 8d       	ldd	r19, Z+30	; 0x1e
    
    thread_table[i].state = STATE_SLEEP;
    
    _atomic_end(currentatomic);
    // TimerM_Timer_start( i, TIMER_ONE_SHOT, thread_table[ i ].data.sleepstate.sleeptime );
    GenericTimerStart(i, TIMER_ONE_SHOT,
    2d66:	40 e0       	ldi	r20, 0x00	; 0
    2d68:	50 e0       	ldi	r21, 0x00	; 0
    2d6a:	8c 2f       	mov	r24, r28
    2d6c:	61 e0       	ldi	r22, 0x01	; 1
    2d6e:	0e 94 a1 32 	call	0x6542	; 0x6542 <GenericTimerStart>
      thread_table[i].data.sleepstate.sleeptime);
    
    thread_presleep = 0;
    return ;
    2d72:	74 c0       	rjmp	.+232    	; 0x2e5c <thread_task+0x16c>
  if (i < 0)
  {
    //here is the exit      
    return ;
  }
  postTask(thread_task, 3);
    2d74:	88 e7       	ldi	r24, 0x78	; 120
    2d76:	96 e1       	ldi	r25, 0x16	; 22
    2d78:	63 e0       	ldi	r22, 0x03	; 3
    2d7a:	0e 94 88 14 	call	0x2910	; 0x2910 <postTask>
  
  i = check_for_memory_corrupt(i);
    2d7e:	ce 01       	movw	r24, r28
    2d80:	0e 94 68 18 	call	0x30d0	; 0x30d0 <check_for_memory_corrupt>
  if (i < 0)
    2d84:	97 fd       	sbrc	r25, 7
    2d86:	6a c0       	rjmp	.+212    	; 0x2e5c <thread_task+0x16c>
  if (nextwriteaddr == 3001)
   nextwriteaddr = 2701; 
  write8uint(nextwriteaddr, 0xFF); 
   */

  current_thread = &(thread_table[i]);
    2d88:	47 e2       	ldi	r20, 0x27	; 39
    2d8a:	50 e0       	ldi	r21, 0x00	; 0
    2d8c:	84 9f       	mul	r24, r20
    2d8e:	90 01       	movw	r18, r0
    2d90:	85 9f       	mul	r24, r21
    2d92:	30 0d       	add	r19, r0
    2d94:	94 9f       	mul	r25, r20
    2d96:	30 0d       	add	r19, r0
    2d98:	11 24       	eor	r1, r1
    2d9a:	29 5d       	subi	r18, 0xD9	; 217
    2d9c:	36 4f       	sbci	r19, 0xF6	; 246
    2d9e:	30 93 26 09 	sts	0x0926, r19
    2da2:	20 93 25 09 	sts	0x0925, r18
  
  //printfintegeru32(i);
  //printfstr(" thread index\n");
  
  lite_switch_to_user_thread();    
    2da6:	0e 94 13 16 	call	0x2c26	; 0x2c26 <lite_switch_to_user_thread>
  //printfstr("now switching out\n");
 

  
  
  counterFrom = getCurrentCounterHigh(); 
    2daa:	0e 94 5b 33 	call	0x66b6	; 0x66b6 <getCurrentCounterHigh>
    2dae:	90 93 a8 09 	sts	0x09A8, r25
    2db2:	80 93 a7 09 	sts	0x09A7, r24
  switchFromThreadTime = getCurrentResolution(); 
    2db6:	0e 94 5e 33 	call	0x66bc	; 0x66bc <getCurrentResolution>
    2dba:	7b 01       	movw	r14, r22
    2dbc:	8c 01       	movw	r16, r24
    2dbe:	60 93 9c 09 	sts	0x099C, r22
    2dc2:	70 93 9d 09 	sts	0x099D, r23
    2dc6:	80 93 9e 09 	sts	0x099E, r24
    2dca:	90 93 9f 09 	sts	0x099F, r25
  
  if (counterFrom == counterTo)
    2dce:	80 91 a7 09 	lds	r24, 0x09A7
    2dd2:	90 91 a8 09 	lds	r25, 0x09A8
    2dd6:	60 91 a1 09 	lds	r22, 0x09A1
    2dda:	70 91 a2 09 	lds	r23, 0x09A2
    2dde:	a0 90 21 09 	lds	r10, 0x0921
    2de2:	b0 90 22 09 	lds	r11, 0x0922
    2de6:	c0 90 23 09 	lds	r12, 0x0923
    2dea:	d0 90 24 09 	lds	r13, 0x0924
    2dee:	86 17       	cp	r24, r22
    2df0:	97 07       	cpc	r25, r23
    2df2:	69 f4       	brne	.+26     	; 0x2e0e <thread_task+0x11e>
	  timediff = switchFromThreadTime - switchToThreadTime;
    2df4:	ea 18       	sub	r14, r10
    2df6:	fb 08       	sbc	r15, r11
    2df8:	0c 09       	sbc	r16, r12
    2dfa:	1d 09       	sbc	r17, r13
    2dfc:	e0 92 1b 09 	sts	0x091B, r14
    2e00:	f0 92 1c 09 	sts	0x091C, r15
    2e04:	00 93 1d 09 	sts	0x091D, r16
    2e08:	10 93 1e 09 	sts	0x091E, r17
    2e0c:	1a c0       	rjmp	.+52     	; 0x2e42 <thread_task+0x152>
	  else
	  timediff = ((uint32_t)(counterTo-counterFrom))*50000*50000 + switchFromThreadTime - switchToThreadTime; 
    2e0e:	68 1b       	sub	r22, r24
    2e10:	79 0b       	sbc	r23, r25
    2e12:	80 e0       	ldi	r24, 0x00	; 0
    2e14:	90 e0       	ldi	r25, 0x00	; 0
    2e16:	20 e0       	ldi	r18, 0x00	; 0
    2e18:	39 ef       	ldi	r19, 0xF9	; 249
    2e1a:	42 e0       	ldi	r20, 0x02	; 2
    2e1c:	55 e9       	ldi	r21, 0x95	; 149
    2e1e:	0e 94 b8 48 	call	0x9170	; 0x9170 <__mulsi3>
    2e22:	6a 19       	sub	r22, r10
    2e24:	7b 09       	sbc	r23, r11
    2e26:	8c 09       	sbc	r24, r12
    2e28:	9d 09       	sbc	r25, r13
    2e2a:	6e 0d       	add	r22, r14
    2e2c:	7f 1d       	adc	r23, r15
    2e2e:	80 1f       	adc	r24, r16
    2e30:	91 1f       	adc	r25, r17
    2e32:	60 93 1b 09 	sts	0x091B, r22
    2e36:	70 93 1c 09 	sts	0x091C, r23
    2e3a:	80 93 1d 09 	sts	0x091D, r24
    2e3e:	90 93 1e 09 	sts	0x091E, r25
     	}
     	
     } */

   //current_thread->energycontrolblock.energycost += (timediff * (uint32_t)CPU_PER_THOUSAND) /1000; 
   current_thread = 0;
    2e42:	10 92 26 09 	sts	0x0926, r1
    2e46:	10 92 25 09 	sts	0x0925, r1
   return ;
    2e4a:	08 c0       	rjmp	.+16     	; 0x2e5c <thread_task+0x16c>
    
    thread_presleep = 0;
    return ;
  }
  
  _atomic_end(currentatomic);
    2e4c:	8e 2d       	mov	r24, r14
    2e4e:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
  
  i = thread_get_next();
    2e52:	0e 94 47 48 	call	0x908e	; 0x908e <thread_get_next>
    2e56:	ec 01       	movw	r28, r24
  if (i < 0)
    2e58:	97 ff       	sbrs	r25, 7
    2e5a:	8c cf       	rjmp	.-232    	; 0x2d74 <thread_task+0x84>
     } */

   //current_thread->energycontrolblock.energycost += (timediff * (uint32_t)CPU_PER_THOUSAND) /1000; 
   current_thread = 0;
   return ;
}
    2e5c:	df 91       	pop	r29
    2e5e:	cf 91       	pop	r28
    2e60:	1f 91       	pop	r17
    2e62:	0f 91       	pop	r16
    2e64:	ff 90       	pop	r15
    2e66:	ef 90       	pop	r14
    2e68:	df 90       	pop	r13
    2e6a:	cf 90       	pop	r12
    2e6c:	bf 90       	pop	r11
    2e6e:	af 90       	pop	r10
    2e70:	08 95       	ret

00002e72 <thread_yield>:

//-------------------------------------------------------------------------
void __attribute__((noinline))thread_yield() /* __attribute__((noinline)) */
{
  #ifdef PLATFORM_AVR
    PUSH_REG_STATUS();
    2e72:	ff 93       	push	r31
    2e74:	ff b7       	in	r31, 0x3f	; 63
    2e76:	ff 93       	push	r31
    PUSH_GPR();
    2e78:	0f 92       	push	r0
    2e7a:	1f 92       	push	r1
    2e7c:	2f 92       	push	r2
    2e7e:	3f 92       	push	r3
    2e80:	4f 92       	push	r4
    2e82:	5f 92       	push	r5
    2e84:	6f 92       	push	r6
    2e86:	7f 92       	push	r7
    2e88:	8f 92       	push	r8
    2e8a:	9f 92       	push	r9
    2e8c:	af 92       	push	r10
    2e8e:	bf 92       	push	r11
    2e90:	cf 92       	push	r12
    2e92:	df 92       	push	r13
    2e94:	ef 92       	push	r14
    2e96:	ff 92       	push	r15
    2e98:	0f 93       	push	r16
    2e9a:	1f 93       	push	r17
    2e9c:	2f 93       	push	r18
    2e9e:	3f 93       	push	r19
    2ea0:	4f 93       	push	r20
    2ea2:	5f 93       	push	r21
    2ea4:	6f 93       	push	r22
    2ea6:	7f 93       	push	r23
    2ea8:	8f 93       	push	r24
    2eaa:	9f 93       	push	r25
    2eac:	af 93       	push	r26
    2eae:	bf 93       	push	r27
    2eb0:	cf 93       	push	r28
    2eb2:	df 93       	push	r29
    2eb4:	ef 93       	push	r30
    2eb6:	ff 93       	push	r31
    //Now swap the stacks back
    SWAP_STACK_PTR(current_thread->sp, old_stack_ptr);
    2eb8:	e0 91 25 09 	lds	r30, 0x0925
    2ebc:	f0 91 26 09 	lds	r31, 0x0926
    2ec0:	8d b7       	in	r24, 0x3d	; 61
    2ec2:	9e b7       	in	r25, 0x3e	; 62
    2ec4:	91 83       	std	Z+1, r25	; 0x01
    2ec6:	80 83       	st	Z, r24
    2ec8:	80 91 1f 09 	lds	r24, 0x091F
    2ecc:	90 91 20 09 	lds	r25, 0x0920
    2ed0:	9e bf       	out	0x3e, r25	; 62
    2ed2:	8d bf       	out	0x3d, r24	; 61
    POP_GPR();
    2ed4:	ff 91       	pop	r31
    2ed6:	ef 91       	pop	r30
    2ed8:	df 91       	pop	r29
    2eda:	cf 91       	pop	r28
    2edc:	bf 91       	pop	r27
    2ede:	af 91       	pop	r26
    2ee0:	9f 91       	pop	r25
    2ee2:	8f 91       	pop	r24
    2ee4:	7f 91       	pop	r23
    2ee6:	6f 91       	pop	r22
    2ee8:	5f 91       	pop	r21
    2eea:	4f 91       	pop	r20
    2eec:	3f 91       	pop	r19
    2eee:	2f 91       	pop	r18
    2ef0:	1f 91       	pop	r17
    2ef2:	0f 91       	pop	r16
    2ef4:	ff 90       	pop	r15
    2ef6:	ef 90       	pop	r14
    2ef8:	df 90       	pop	r13
    2efa:	cf 90       	pop	r12
    2efc:	bf 90       	pop	r11
    2efe:	af 90       	pop	r10
    2f00:	9f 90       	pop	r9
    2f02:	8f 90       	pop	r8
    2f04:	7f 90       	pop	r7
    2f06:	6f 90       	pop	r6
    2f08:	5f 90       	pop	r5
    2f0a:	4f 90       	pop	r4
    2f0c:	3f 90       	pop	r3
    2f0e:	2f 90       	pop	r2
    2f10:	1f 90       	pop	r1
    2f12:	0f 90       	pop	r0
    POP_REG_STATUS();
    2f14:	ff 91       	pop	r31
    2f16:	ff bf       	out	0x3f, r31	; 63
    2f18:	ff 91       	pop	r31
  #ifdef TRACE_ENABLE
    #ifdef TRACE_ENABLE_CONTEXTSWITCH
      addTrace(TRACE_CONTEXTSWITCHFROMUSERTHREAD, 100);
    #endif 
  #endif 
}
    2f1a:	08 95       	ret

00002f1c <destroy_user_thread>:
/* destroy_user_thread
 * This routine is only called when a users thread returns.
 * It removes it from the thread table.
 */
void destroy_user_thread()
{
    2f1c:	1f 93       	push	r17
    2f1e:	cf 93       	push	r28
    2f20:	df 93       	push	r29
  uint8_t *start,  *end;
  _atomic_t currentatomic;
  int indexofthread;

  currentatomic = _atomic_start();
    2f22:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>
    2f26:	18 2f       	mov	r17, r24
  current_thread->state = STATE_NULL;
    2f28:	e0 91 25 09 	lds	r30, 0x0925
    2f2c:	f0 91 26 09 	lds	r31, 0x0926
    2f30:	12 82       	std	Z+2, r1	; 0x02
  start = (uint8_t*)current_thread->ramstart;
    2f32:	81 89       	ldd	r24, Z+17	; 0x11
    2f34:	92 89       	ldd	r25, Z+18	; 0x12
  end = (uint8_t*)current_thread->ramend;
    2f36:	63 89       	ldd	r22, Z+19	; 0x13
    2f38:	74 89       	ldd	r23, Z+20	; 0x14
  deleteThreadRegistrationInReceiverHandles(start, end);
    2f3a:	0e 94 11 0b 	call	0x1622	; 0x1622 <deleteThreadRegistrationInReceiverHandles>
  
  indexofthread = getThreadIndexAddress();
    2f3e:	0e 94 ad 18 	call	0x315a	; 0x315a <getThreadIndexAddress>
  
  
  if (thread_table[indexofthread].thread_clear_function != NULL)
    2f42:	27 e2       	ldi	r18, 0x27	; 39
    2f44:	30 e0       	ldi	r19, 0x00	; 0
    2f46:	82 9f       	mul	r24, r18
    2f48:	e0 01       	movw	r28, r0
    2f4a:	83 9f       	mul	r24, r19
    2f4c:	d0 0d       	add	r29, r0
    2f4e:	92 9f       	mul	r25, r18
    2f50:	d0 0d       	add	r29, r0
    2f52:	11 24       	eor	r1, r1
    2f54:	c9 5d       	subi	r28, 0xD9	; 217
    2f56:	d6 4f       	sbci	r29, 0xF6	; 246
    2f58:	eb 8d       	ldd	r30, Y+27	; 0x1b
    2f5a:	fc 8d       	ldd	r31, Y+28	; 0x1c
    2f5c:	30 97       	sbiw	r30, 0x00	; 0
    2f5e:	19 f0       	breq	.+6      	; 0x2f66 <destroy_user_thread+0x4a>
  {
    (*thread_table[indexofthread].thread_clear_function)();
    2f60:	09 95       	icall
    thread_table[indexofthread].thread_clear_function = NULL;
    2f62:	1c 8e       	std	Y+28, r1	; 0x1c
    2f64:	1b 8e       	std	Y+27, r1	; 0x1b
  #ifdef TRACE_ENABLE
    #ifdef TRACE_ENABLE_THREADDESTROY
      addTrace(TRACE_THREADDESTROY, 100);
    #endif 
  #endif 
  thread_yield();
    2f66:	0e 94 39 17 	call	0x2e72	; 0x2e72 <thread_yield>
  _atomic_end(currentatomic);
    2f6a:	81 2f       	mov	r24, r17
    2f6c:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
}
    2f70:	df 91       	pop	r29
    2f72:	cf 91       	pop	r28
    2f74:	1f 91       	pop	r17
    2f76:	08 95       	ret

00002f78 <thread_func_dispatcher>:
// also make sure no functions are called with attributes
void thread_func_dispatcher()__attribute__((naked));
void thread_func_dispatcher()
{
  //    (*current_thread->data.tp)();
  call_fcn_ptr(current_thread->data.tp);
    2f78:	e0 91 25 09 	lds	r30, 0x0925
    2f7c:	f0 91 26 09 	lds	r31, 0x0926
    2f80:	85 8d       	ldd	r24, Z+29	; 0x1d
    2f82:	96 8d       	ldd	r25, Z+30	; 0x1e
    2f84:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <call_fcn_ptr>
  destroy_user_thread();
    2f88:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <destroy_user_thread>

00002f8c <sleepThread>:
/* thread_sleep
 * This routine puts the current thread into a sleeping state.
 * It will not ever wake up until another task or thread wakes it up
 */
void sleepThread(uint16_t milli)
{
    2f8c:	cf 93       	push	r28
    2f8e:	df 93       	push	r29
    2f90:	ec 01       	movw	r28, r24
  if (!is_thread())
    2f92:	0e 94 30 15 	call	0x2a60	; 0x2a60 <is_thread>
    2f96:	88 23       	and	r24, r24
    2f98:	51 f0       	breq	.+20     	; 0x2fae <sleepThread+0x22>
  {
    return ;
  }
  //this is insid the thread!
  current_thread->state = STATE_PRESLEEP;
    2f9a:	e0 91 25 09 	lds	r30, 0x0925
    2f9e:	f0 91 26 09 	lds	r31, 0x0926
    2fa2:	84 e0       	ldi	r24, 0x04	; 4
    2fa4:	82 83       	std	Z+2, r24	; 0x02
  current_thread->data.sleepstate.sleeptime = milli;
    2fa6:	d6 8f       	std	Z+30, r29	; 0x1e
    2fa8:	c5 8f       	std	Z+29, r28	; 0x1d
  thread_yield();
    2faa:	0e 94 39 17 	call	0x2e72	; 0x2e72 <thread_yield>
}
    2fae:	df 91       	pop	r29
    2fb0:	cf 91       	pop	r28
    2fb2:	08 95       	ret

00002fb4 <thread_wakeup>:
/* thread_wakeup
 * This routine wakes up a thread that was put to sleep.
 */
void thread_wakeup(uint8_t id)
{
  if (id >= LITE_MAX_THREADS)
    2fb4:	83 30       	cpi	r24, 0x03	; 3
    2fb6:	e8 f4       	brcc	.+58     	; 0x2ff2 <thread_wakeup+0x3e>
  {
    return ;
  }
  if (thread_table[id].state == STATE_SLEEP)
    2fb8:	90 e0       	ldi	r25, 0x00	; 0
    2fba:	27 e2       	ldi	r18, 0x27	; 39
    2fbc:	30 e0       	ldi	r19, 0x00	; 0
    2fbe:	82 9f       	mul	r24, r18
    2fc0:	f0 01       	movw	r30, r0
    2fc2:	83 9f       	mul	r24, r19
    2fc4:	f0 0d       	add	r31, r0
    2fc6:	92 9f       	mul	r25, r18
    2fc8:	f0 0d       	add	r31, r0
    2fca:	11 24       	eor	r1, r1
    2fcc:	e9 5d       	subi	r30, 0xD9	; 217
    2fce:	f6 4f       	sbci	r31, 0xF6	; 246
    2fd0:	82 81       	ldd	r24, Z+2	; 0x02
    2fd2:	85 30       	cpi	r24, 0x05	; 5
    2fd4:	11 f4       	brne	.+4      	; 0x2fda <thread_wakeup+0x26>
  {
    thread_table[id].state = STATE_ACTIVE;
    2fd6:	82 e0       	ldi	r24, 0x02	; 2
    2fd8:	82 83       	std	Z+2, r24	; 0x02
  }
  if (thread_task_active == 0)
    2fda:	80 91 a0 09 	lds	r24, 0x09A0
    2fde:	88 23       	and	r24, r24
    2fe0:	41 f4       	brne	.+16     	; 0x2ff2 <thread_wakeup+0x3e>
  {
    postTask(thread_task, 2);
    2fe2:	88 e7       	ldi	r24, 0x78	; 120
    2fe4:	96 e1       	ldi	r25, 0x16	; 22
    2fe6:	62 e0       	ldi	r22, 0x02	; 2
    2fe8:	0e 94 88 14 	call	0x2910	; 0x2910 <postTask>
    thread_task_active = 1; 
    2fec:	81 e0       	ldi	r24, 0x01	; 1
    2fee:	80 93 a0 09 	sts	0x09A0, r24
    2ff2:	08 95       	ret

00002ff4 <postNewThreadTask>:


//-------------------------------------------------------------------------
void postNewThreadTask()
{
  if (thread_task_active == 0)
    2ff4:	80 91 a0 09 	lds	r24, 0x09A0
    2ff8:	88 23       	and	r24, r24
    2ffa:	41 f4       	brne	.+16     	; 0x300c <postNewThreadTask+0x18>
  {
    postTask(thread_task, 2);
    2ffc:	88 e7       	ldi	r24, 0x78	; 120
    2ffe:	96 e1       	ldi	r25, 0x16	; 22
    3000:	62 e0       	ldi	r22, 0x02	; 2
    3002:	0e 94 88 14 	call	0x2910	; 0x2910 <postTask>
    thread_task_active = 1; 
    3006:	81 e0       	ldi	r24, 0x01	; 1
    3008:	80 93 a0 09 	sts	0x09A0, r24
    300c:	08 95       	ret

0000300e <memory_conflict_detect>:


//-------------------------------------------------------------------------
uint8_t memory_conflict_detect(uint16_t createflashromstart, uint16_t
  createflashromsize, uint16_t ramstackstart, uint16_t ramstackend)
{
    300e:	8f 92       	push	r8
    3010:	9f 92       	push	r9
    3012:	af 92       	push	r10
    3014:	bf 92       	push	r11
    3016:	cf 92       	push	r12
    3018:	df 92       	push	r13
    301a:	ef 92       	push	r14
    301c:	ff 92       	push	r15
    301e:	0f 93       	push	r16
    3020:	1f 93       	push	r17
    3022:	cf 93       	push	r28
    3024:	df 93       	push	r29
    3026:	8c 01       	movw	r16, r24
    3028:	7a 01       	movw	r14, r20
      userthreadromstart = thread_table[i].romstart;
      userthreadromend = thread_table[i].romsize / 2+userthreadromstart;
      userthreadramstart = (uint16_t)thread_table[i].ramstart;
      userthreadramend = (uint16_t)thread_table[i].ramend;
      if (!((createflashromstart > userthreadromend + 2) || 
        (createflashromstart + createflashromsize / 2 < userthreadromstart - 2))
    302a:	76 95       	lsr	r23
    302c:	67 95       	ror	r22
    302e:	68 0f       	add	r22, r24
    3030:	79 1f       	adc	r23, r25
    3032:	e8 e3       	ldi	r30, 0x38	; 56
    3034:	f9 e0       	ldi	r31, 0x09	; 9
    3036:	80 e0       	ldi	r24, 0x00	; 0
    3038:	90 e0       	ldi	r25, 0x00	; 0
  uint16_t userthreadramstart;
  uint16_t userthreadramend;

  for (i = 0; i < LITE_MAX_THREADS; i++)
  {
    if (thread_table[i].state != STATE_NULL)
    303a:	47 e2       	ldi	r20, 0x27	; 39
    303c:	84 2e       	mov	r8, r20
    303e:	91 2c       	mov	r9, r1
    3040:	88 9d       	mul	r24, r8
    3042:	d0 01       	movw	r26, r0
    3044:	89 9d       	mul	r24, r9
    3046:	b0 0d       	add	r27, r0
    3048:	98 9d       	mul	r25, r8
    304a:	b0 0d       	add	r27, r0
    304c:	11 24       	eor	r1, r1
    304e:	a9 5d       	subi	r26, 0xD9	; 217
    3050:	b6 4f       	sbci	r27, 0xF6	; 246
    3052:	12 96       	adiw	r26, 0x02	; 2
    3054:	4c 91       	ld	r20, X
    3056:	12 97       	sbiw	r26, 0x02	; 2
    3058:	44 23       	and	r20, r20
    305a:	29 f1       	breq	.+74     	; 0x30a6 <memory_conflict_detect+0x98>
    {
      if (thread_table[i].romstart == 0)
    305c:	46 81       	ldd	r20, Z+6	; 0x06
    305e:	57 81       	ldd	r21, Z+7	; 0x07
    3060:	41 15       	cp	r20, r1
    3062:	51 05       	cpc	r21, r1
    3064:	01 f1       	breq	.+64     	; 0x30a6 <memory_conflict_detect+0x98>
      {
        continue;
      }
      userthreadromstart = thread_table[i].romstart;
      userthreadromend = thread_table[i].romsize / 2+userthreadromstart;
      userthreadramstart = (uint16_t)thread_table[i].ramstart;
    3066:	a0 80       	ld	r10, Z
    3068:	b1 80       	ldd	r11, Z+1	; 0x01
      userthreadramend = (uint16_t)thread_table[i].ramend;
    306a:	c2 80       	ldd	r12, Z+2	; 0x02
    306c:	d3 80       	ldd	r13, Z+3	; 0x03
      if (thread_table[i].romstart == 0)
      {
        continue;
      }
      userthreadromstart = thread_table[i].romstart;
      userthreadromend = thread_table[i].romsize / 2+userthreadromstart;
    306e:	da 01       	movw	r26, r20
    3070:	12 96       	adiw	r26, 0x02	; 2
    3072:	c0 85       	ldd	r28, Z+8	; 0x08
    3074:	d1 85       	ldd	r29, Z+9	; 0x09
    3076:	d6 95       	lsr	r29
    3078:	c7 95       	ror	r28
      userthreadramstart = (uint16_t)thread_table[i].ramstart;
      userthreadramend = (uint16_t)thread_table[i].ramend;
      if (!((createflashromstart > userthreadromend + 2) || 
    307a:	ac 0f       	add	r26, r28
    307c:	bd 1f       	adc	r27, r29
    307e:	a0 17       	cp	r26, r16
    3080:	b1 07       	cpc	r27, r17
    3082:	28 f0       	brcs	.+10     	; 0x308e <memory_conflict_detect+0x80>
        (createflashromstart + createflashromsize / 2 < userthreadromstart - 2))
    3084:	42 50       	subi	r20, 0x02	; 2
    3086:	50 40       	sbci	r21, 0x00	; 0
      }
      userthreadromstart = thread_table[i].romstart;
      userthreadromend = thread_table[i].romsize / 2+userthreadromstart;
      userthreadramstart = (uint16_t)thread_table[i].ramstart;
      userthreadramend = (uint16_t)thread_table[i].ramend;
      if (!((createflashromstart > userthreadromend + 2) || 
    3088:	64 17       	cp	r22, r20
    308a:	75 07       	cpc	r23, r21
    308c:	98 f4       	brcc	.+38     	; 0x30b4 <memory_conflict_detect+0xa6>
        (createflashromstart + createflashromsize / 2 < userthreadromstart - 2))
        )
      {
        return 1;
      }
      if (!((ramstackstart > userthreadramend + 1) || (ramstackend <
    308e:	08 94       	sec
    3090:	c1 1c       	adc	r12, r1
    3092:	d1 1c       	adc	r13, r1
    3094:	ce 14       	cp	r12, r14
    3096:	df 04       	cpc	r13, r15
    3098:	30 f0       	brcs	.+12     	; 0x30a6 <memory_conflict_detect+0x98>
        userthreadramstart - 1)))
    309a:	08 94       	sec
    309c:	a1 08       	sbc	r10, r1
    309e:	b1 08       	sbc	r11, r1
        (createflashromstart + createflashromsize / 2 < userthreadromstart - 2))
        )
      {
        return 1;
      }
      if (!((ramstackstart > userthreadramend + 1) || (ramstackend <
    30a0:	2a 15       	cp	r18, r10
    30a2:	3b 05       	cpc	r19, r11
    30a4:	38 f4       	brcc	.+14     	; 0x30b4 <memory_conflict_detect+0xa6>
    30a6:	01 96       	adiw	r24, 0x01	; 1
    30a8:	b7 96       	adiw	r30, 0x27	; 39
  uint16_t userthreadromstart;
  uint16_t userthreadromend;
  uint16_t userthreadramstart;
  uint16_t userthreadramend;

  for (i = 0; i < LITE_MAX_THREADS; i++)
    30aa:	83 30       	cpi	r24, 0x03	; 3
    30ac:	91 05       	cpc	r25, r1
    30ae:	41 f6       	brne	.-112    	; 0x3040 <memory_conflict_detect+0x32>
      {
        return 1;
      }
    }
  }
  return 0;
    30b0:	80 e0       	ldi	r24, 0x00	; 0
    30b2:	01 c0       	rjmp	.+2      	; 0x30b6 <memory_conflict_detect+0xa8>
        return 1;
      }
      if (!((ramstackstart > userthreadramend + 1) || (ramstackend <
        userthreadramstart - 1)))
      {
        return 1;
    30b4:	81 e0       	ldi	r24, 0x01	; 1
      }
    }
  }
  return 0;
}
    30b6:	df 91       	pop	r29
    30b8:	cf 91       	pop	r28
    30ba:	1f 91       	pop	r17
    30bc:	0f 91       	pop	r16
    30be:	ff 90       	pop	r15
    30c0:	ef 90       	pop	r14
    30c2:	df 90       	pop	r13
    30c4:	cf 90       	pop	r12
    30c6:	bf 90       	pop	r11
    30c8:	af 90       	pop	r10
    30ca:	9f 90       	pop	r9
    30cc:	8f 90       	pop	r8
    30ce:	08 95       	ret

000030d0 <check_for_memory_corrupt>:


/* thread_task
 */
int check_for_memory_corrupt(int i)
{
    30d0:	9c 01       	movw	r18, r24
  uint16_t *kernelptr;
  uint16_t *ram_start,  *ram_end;
  uint16_t sizeofBss;

  ram_start = thread_table[i].ramstart;
    30d2:	87 e2       	ldi	r24, 0x27	; 39
    30d4:	90 e0       	ldi	r25, 0x00	; 0
    30d6:	28 9f       	mul	r18, r24
    30d8:	d0 01       	movw	r26, r0
    30da:	29 9f       	mul	r18, r25
    30dc:	b0 0d       	add	r27, r0
    30de:	38 9f       	mul	r19, r24
    30e0:	b0 0d       	add	r27, r0
    30e2:	11 24       	eor	r1, r1
    30e4:	a9 5d       	subi	r26, 0xD9	; 217
    30e6:	b6 4f       	sbci	r27, 0xF6	; 246
  ram_end = thread_table[i].ramend;
  sizeofBss = thread_table[i].sizeofBss;
  kernelptr = (uint16_t*)((uint8_t*)ram_start + sizeofBss);
    30e8:	51 96       	adiw	r26, 0x11	; 17
    30ea:	ed 91       	ld	r30, X+
    30ec:	fc 91       	ld	r31, X
    30ee:	52 97       	sbiw	r26, 0x12	; 18
    30f0:	55 96       	adiw	r26, 0x15	; 21
    30f2:	8d 91       	ld	r24, X+
    30f4:	9c 91       	ld	r25, X
    30f6:	56 97       	sbiw	r26, 0x16	; 22
    30f8:	e8 0f       	add	r30, r24
    30fa:	f9 1f       	adc	r31, r25
  if ((*kernelptr != 0xeeff) || (*(kernelptr + 1) != 0xeeff))
    30fc:	80 81       	ld	r24, Z
    30fe:	91 81       	ldd	r25, Z+1	; 0x01
    3100:	4e ee       	ldi	r20, 0xEE	; 238
    3102:	8f 3f       	cpi	r24, 0xFF	; 255
    3104:	94 07       	cpc	r25, r20
    3106:	31 f4       	brne	.+12     	; 0x3114 <check_for_memory_corrupt+0x44>
    3108:	82 81       	ldd	r24, Z+2	; 0x02
    310a:	93 81       	ldd	r25, Z+3	; 0x03
    310c:	4e ee       	ldi	r20, 0xEE	; 238
    310e:	8f 3f       	cpi	r24, 0xFF	; 255
    3110:	94 07       	cpc	r25, r20
    3112:	79 f0       	breq	.+30     	; 0x3132 <check_for_memory_corrupt+0x62>
  {
    thread_table[i].state = STATE_MEM_ERROR;
    3114:	87 e2       	ldi	r24, 0x27	; 39
    3116:	90 e0       	ldi	r25, 0x00	; 0
    3118:	28 9f       	mul	r18, r24
    311a:	f0 01       	movw	r30, r0
    311c:	29 9f       	mul	r18, r25
    311e:	f0 0d       	add	r31, r0
    3120:	38 9f       	mul	r19, r24
    3122:	f0 0d       	add	r31, r0
    3124:	11 24       	eor	r1, r1
    3126:	e9 5d       	subi	r30, 0xD9	; 217
    3128:	f6 4f       	sbci	r31, 0xF6	; 246
    312a:	89 e0       	ldi	r24, 0x09	; 9
    312c:	82 83       	std	Z+2, r24	; 0x02
    return  - 1;
    312e:	2f ef       	ldi	r18, 0xFF	; 255
    3130:	3f ef       	ldi	r19, 0xFF	; 255
  }
  return i;
  
}
    3132:	c9 01       	movw	r24, r18
    3134:	08 95       	ret

00003136 <ServiceTimerFired>:


//-------------------------------------------------------------------------
void ServiceTimerFired(uint8_t id)
{
  if (id == 9)
    3136:	89 30       	cpi	r24, 0x09	; 9
    3138:	51 f4       	brne	.+20     	; 0x314e <ServiceTimerFired+0x18>
  {
    if (thread_task_active == 0)
    313a:	80 91 a0 09 	lds	r24, 0x09A0
    313e:	88 23       	and	r24, r24
    3140:	41 f4       	brne	.+16     	; 0x3152 <ServiceTimerFired+0x1c>
    {
      postTask(thread_task, 2);
    3142:	88 e7       	ldi	r24, 0x78	; 120
    3144:	96 e1       	ldi	r25, 0x16	; 22
    3146:	62 e0       	ldi	r22, 0x02	; 2
    3148:	0e 94 88 14 	call	0x2910	; 0x2910 <postTask>
    314c:	08 95       	ret
    }
  }
  else
  {
    thread_wakeup(id);
    314e:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <thread_wakeup>
    3152:	08 95       	ret

00003154 <getKernelStackAddress>:
  void **addr;

  addr = (void **) &old_stack_ptr;

  return addr;
}
    3154:	8f e1       	ldi	r24, 0x1F	; 31
    3156:	99 e0       	ldi	r25, 0x09	; 9
    3158:	08 95       	ret

0000315a <getThreadIndexAddress>:
//void getThreadIndexAddress() __attribute__((naked));
int getThreadIndexAddress()
{
  int i;
  uint16_t index;
  asm volatile("push r20""\n\t""push r21""\n\t"::);
    315a:	4f 93       	push	r20
    315c:	5f 93       	push	r21

  index = 0;
  for (i = 0; i < LITE_MAX_THREADS; i++)
  {
    if (current_thread ==  &(thread_table[i]))
    315e:	80 91 25 09 	lds	r24, 0x0925
    3162:	90 91 26 09 	lds	r25, 0x0926
    3166:	29 e0       	ldi	r18, 0x09	; 9
    3168:	87 32       	cpi	r24, 0x27	; 39
    316a:	92 07       	cpc	r25, r18
    316c:	71 f0       	breq	.+28     	; 0x318a <getThreadIndexAddress+0x30>
    316e:	29 e0       	ldi	r18, 0x09	; 9
    3170:	8e 34       	cpi	r24, 0x4E	; 78
    3172:	92 07       	cpc	r25, r18
    3174:	39 f0       	breq	.+14     	; 0x3184 <getThreadIndexAddress+0x2a>
    3176:	29 e0       	ldi	r18, 0x09	; 9
    3178:	85 37       	cpi	r24, 0x75	; 117
    317a:	92 07       	cpc	r25, r18
    317c:	31 f4       	brne	.+12     	; 0x318a <getThreadIndexAddress+0x30>
  int i;
  uint16_t index;
  asm volatile("push r20""\n\t""push r21""\n\t"::);

  index = 0;
  for (i = 0; i < LITE_MAX_THREADS; i++)
    317e:	22 e0       	ldi	r18, 0x02	; 2
    3180:	30 e0       	ldi	r19, 0x00	; 0
    3182:	05 c0       	rjmp	.+10     	; 0x318e <getThreadIndexAddress+0x34>
    3184:	21 e0       	ldi	r18, 0x01	; 1
    3186:	30 e0       	ldi	r19, 0x00	; 0
  {
    if (current_thread ==  &(thread_table[i]))
    {
      index = i;
      break;
    3188:	02 c0       	rjmp	.+4      	; 0x318e <getThreadIndexAddress+0x34>
{
  int i;
  uint16_t index;
  asm volatile("push r20""\n\t""push r21""\n\t"::);

  index = 0;
    318a:	20 e0       	ldi	r18, 0x00	; 0
    318c:	30 e0       	ldi	r19, 0x00	; 0
    {
      index = i;
      break;
    }
  }
  asm volatile("pop r21""\n\t""pop r20""\n\t"::);
    318e:	5f 91       	pop	r21
    3190:	4f 91       	pop	r20

  return index;
  //asm volatile( "mov r20, %A0""\n\t""mov r21, %B0""\n\t": : "r"( index ) );
  //asm volatile("ret"::); 
}
    3192:	c9 01       	movw	r24, r18
    3194:	08 95       	ret

00003196 <barrier_unblock>:

/* This unblocks an IO bound thread.
 * This routine can be called from any context.
 */
void barrier_unblock(uint8_t type, uint8_t id)
{
    3196:	af 92       	push	r10
    3198:	bf 92       	push	r11
    319a:	df 92       	push	r13
    319c:	ef 92       	push	r14
    319e:	ff 92       	push	r15
    31a0:	0f 93       	push	r16
    31a2:	1f 93       	push	r17
    31a4:	df 93       	push	r29
    31a6:	cf 93       	push	r28
    31a8:	0f 92       	push	r0
    31aa:	cd b7       	in	r28, 0x3d	; 61
    31ac:	de b7       	in	r29, 0x3e	; 62
    31ae:	f8 2e       	mov	r15, r24
    31b0:	e6 2e       	mov	r14, r22
  uint8_t i;
  _atomic_t currentatomic;

  currentatomic = _atomic_start();
    31b2:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>
    31b6:	aa 24       	eor	r10, r10
    31b8:	bb 24       	eor	r11, r11
  for (i = 0; i < LITE_MAX_THREADS; i++)
  {
    //Look for a thread waiting on this IO
    if ((thread_table[i].state == STATE_IO) && 
    31ba:	07 e2       	ldi	r16, 0x27	; 39
    31bc:	10 e0       	ldi	r17, 0x00	; 0
      (thread_table[i].data.iostate.type == type) && 
      (thread_table[i].data.iostate.id == id))
    {
      //Mark that thread as active
      thread_table[i].state = STATE_ACTIVE;
    31be:	62 e0       	ldi	r22, 0x02	; 2
    31c0:	d6 2e       	mov	r13, r22

  currentatomic = _atomic_start();
  for (i = 0; i < LITE_MAX_THREADS; i++)
  {
    //Look for a thread waiting on this IO
    if ((thread_table[i].state == STATE_IO) && 
    31c2:	a0 9e       	mul	r10, r16
    31c4:	f0 01       	movw	r30, r0
    31c6:	a1 9e       	mul	r10, r17
    31c8:	f0 0d       	add	r31, r0
    31ca:	b0 9e       	mul	r11, r16
    31cc:	f0 0d       	add	r31, r0
    31ce:	11 24       	eor	r1, r1
    31d0:	e9 5d       	subi	r30, 0xD9	; 217
    31d2:	f6 4f       	sbci	r31, 0xF6	; 246
    31d4:	92 81       	ldd	r25, Z+2	; 0x02
    31d6:	96 30       	cpi	r25, 0x06	; 6
    31d8:	59 f4       	brne	.+22     	; 0x31f0 <barrier_unblock+0x5a>
      (thread_table[i].data.iostate.type == type) && 
    31da:	95 8d       	ldd	r25, Z+29	; 0x1d

  currentatomic = _atomic_start();
  for (i = 0; i < LITE_MAX_THREADS; i++)
  {
    //Look for a thread waiting on this IO
    if ((thread_table[i].state == STATE_IO) && 
    31dc:	9f 15       	cp	r25, r15
    31de:	41 f4       	brne	.+16     	; 0x31f0 <barrier_unblock+0x5a>
      (thread_table[i].data.iostate.type == type) && 
      (thread_table[i].data.iostate.id == id))
    31e0:	96 8d       	ldd	r25, Z+30	; 0x1e
  currentatomic = _atomic_start();
  for (i = 0; i < LITE_MAX_THREADS; i++)
  {
    //Look for a thread waiting on this IO
    if ((thread_table[i].state == STATE_IO) && 
      (thread_table[i].data.iostate.type == type) && 
    31e2:	9e 15       	cp	r25, r14
    31e4:	29 f4       	brne	.+10     	; 0x31f0 <barrier_unblock+0x5a>
      (thread_table[i].data.iostate.id == id))
    {
      //Mark that thread as active
      thread_table[i].state = STATE_ACTIVE;
    31e6:	d2 82       	std	Z+2, r13	; 0x02
      postNewThreadTask();
    31e8:	89 83       	std	Y+1, r24	; 0x01
    31ea:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <postNewThreadTask>
    31ee:	89 81       	ldd	r24, Y+1	; 0x01
    31f0:	08 94       	sec
    31f2:	a1 1c       	adc	r10, r1
    31f4:	b1 1c       	adc	r11, r1
{
  uint8_t i;
  _atomic_t currentatomic;

  currentatomic = _atomic_start();
  for (i = 0; i < LITE_MAX_THREADS; i++)
    31f6:	93 e0       	ldi	r25, 0x03	; 3
    31f8:	a9 16       	cp	r10, r25
    31fa:	b1 04       	cpc	r11, r1
    31fc:	11 f7       	brne	.-60     	; 0x31c2 <barrier_unblock+0x2c>
      //Mark that thread as active
      thread_table[i].state = STATE_ACTIVE;
      postNewThreadTask();
    }
  }
  _atomic_end(currentatomic);
    31fe:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
}
    3202:	0f 90       	pop	r0
    3204:	cf 91       	pop	r28
    3206:	df 91       	pop	r29
    3208:	1f 91       	pop	r17
    320a:	0f 91       	pop	r16
    320c:	ff 90       	pop	r15
    320e:	ef 90       	pop	r14
    3210:	df 90       	pop	r13
    3212:	bf 90       	pop	r11
    3214:	af 90       	pop	r10
    3216:	08 95       	ret

00003218 <__vector_21>:
#define adc_off() ADCSRA &= ~(1 << ADEN)


//The critical ISR function to come back when the interrupt of ADC finishes 
ISR(ADC_vect)
{
    3218:	1f 92       	push	r1
    321a:	0f 92       	push	r0
    321c:	0f b6       	in	r0, 0x3f	; 63
    321e:	0f 92       	push	r0
    3220:	11 24       	eor	r1, r1
    ADCSRA |= _BV(ADIF);
    3222:	34 9a       	sbi	0x06, 4	; 6
    ADCSRA &= ~_BV(ADEN);       // disable interrupt
    3224:	37 98       	cbi	0x06, 7	; 6
    //   flag = 1;
}
    3226:	0f 90       	pop	r0
    3228:	0f be       	out	0x3f, r0	; 63
    322a:	0f 90       	pop	r0
    322c:	1f 90       	pop	r1
    322e:	18 95       	reti

00003230 <adcdriver_init_adc>:

//-------------------------------------------------------------------------
void adcdriver_init_adc()
{
    ADMUX = 0;
    3230:	17 b8       	out	0x07, r1	; 7
    ADCSRA = _BV(ADIE) | 6;
    3232:	8e e0       	ldi	r24, 0x0E	; 14
    3234:	86 b9       	out	0x06, r24	; 6
    // does not enable interrupt and set prescaler to 64
}
    3236:	08 95       	ret

00003238 <get_adc>:
//poll based approach. After all, requrieing another adc thread is just too expensive!
uint16_t get_adc(int channel)
{
    uint16_t reading;

    ADMUX = 0;
    3238:	17 b8       	out	0x07, r1	; 7
    ADMUX |= (channel & 0x1F);
    323a:	97 b1       	in	r25, 0x07	; 7
    323c:	8f 71       	andi	r24, 0x1F	; 31
    323e:	89 2b       	or	r24, r25
    3240:	87 b9       	out	0x07, r24	; 7
    ADCSRA &= ~(1 << ADIE);
    3242:	33 98       	cbi	0x06, 3	; 6
    ADCSRA |= (1 << ADIF);
    3244:	34 9a       	sbi	0x06, 4	; 6
    ADCSRA |= (1 << ADEN) | (1 << ADSC);
    3246:	86 b1       	in	r24, 0x06	; 6
    3248:	80 6c       	ori	r24, 0xC0	; 192
    324a:	86 b9       	out	0x06, r24	; 6
    // start conversion
    while (ADCSRA & (1 << ADSC))
    324c:	36 99       	sbic	0x06, 6	; 6
    324e:	fe cf       	rjmp	.-4      	; 0x324c <get_adc+0x14>
        ;
    //the interrupt based adc is currently not used. 
    //while (flag == 0); 
    //flag = 0; 
    reading = ADCL;
    3250:	84 b1       	in	r24, 0x04	; 4
    3252:	90 e0       	ldi	r25, 0x00	; 0
    reading |= (ADCH & 3) << 8;
    3254:	25 b1       	in	r18, 0x05	; 5
    ADCSRA &= ~_BV(ADEN);
    3256:	37 98       	cbi	0x06, 7	; 6
        ;
    //the interrupt based adc is currently not used. 
    //while (flag == 0); 
    //flag = 0; 
    reading = ADCL;
    reading |= (ADCH & 3) << 8;
    3258:	30 e0       	ldi	r19, 0x00	; 0
    325a:	23 70       	andi	r18, 0x03	; 3
    325c:	30 70       	andi	r19, 0x00	; 0
    325e:	32 2f       	mov	r19, r18
    3260:	22 27       	eor	r18, r18
    3262:	28 2b       	or	r18, r24
    3264:	39 2b       	or	r19, r25
    ADCSRA &= ~_BV(ADEN);
    return reading;
}
    3266:	c9 01       	movw	r24, r18
    3268:	08 95       	ret

0000326a <get_light>:
//-------------------------------------------------------------------------
uint16_t get_light()
{
    uint16_t reading;

    PORTE &= ~_BV(6);
    326a:	1e 98       	cbi	0x03, 6	; 3
    DDRE &= ~_BV(6);
    326c:	16 98       	cbi	0x02, 6	; 2
    PORTE |= _BV(5);
    326e:	1d 9a       	sbi	0x03, 5	; 3
    DDRE |= _BV(5);
    3270:	15 9a       	sbi	0x02, 5	; 2
    reading = get_adc(LIGHT_CHANNEL);
    3272:	81 e0       	ldi	r24, 0x01	; 1
    3274:	90 e0       	ldi	r25, 0x00	; 0
    3276:	0e 94 1c 19 	call	0x3238	; 0x3238 <get_adc>
    PORTE &= ~_BV(5);
    327a:	1d 98       	cbi	0x03, 5	; 3
    DDRE &= ~_BV(5);
    327c:	15 98       	cbi	0x02, 5	; 2
    return reading;
}
    327e:	08 95       	ret

00003280 <get_temp>:
//-------------------------------------------------------------------------
uint16_t get_temp()
{
    uint16_t reading;

    PORTE &= ~_BV(5);
    3280:	1d 98       	cbi	0x03, 5	; 3
    DDRE &= ~_BV(5);
    3282:	15 98       	cbi	0x02, 5	; 2
    PORTE |= _BV(6);
    3284:	1e 9a       	sbi	0x03, 6	; 3
    DDRE |= _BV(6);
    3286:	16 9a       	sbi	0x02, 6	; 2
    reading = get_adc(TEMP_CHANNEL);
    3288:	81 e0       	ldi	r24, 0x01	; 1
    328a:	90 e0       	ldi	r25, 0x00	; 0
    328c:	0e 94 1c 19 	call	0x3238	; 0x3238 <get_adc>
    PORTE &= ~_BV(6);
    3290:	1e 98       	cbi	0x03, 6	; 3
    DDRE &= ~_BV(6);
    3292:	16 98       	cbi	0x02, 6	; 2
    return reading;
}
    3294:	08 95       	ret

00003296 <get_magx>:
//-------------------------------------------------------------------------
uint16_t get_magx()
{
    uint16_t reading;

    DDRC |= _BV(5);
    3296:	a5 9a       	sbi	0x14, 5	; 20
    PORTC |= _BV(5);
    3298:	ad 9a       	sbi	0x15, 5	; 21
    reading = get_adc(MAGX_CHANNEL);
    329a:	85 e0       	ldi	r24, 0x05	; 5
    329c:	90 e0       	ldi	r25, 0x00	; 0
    329e:	0e 94 1c 19 	call	0x3238	; 0x3238 <get_adc>
    DDRC &= ~_BV(5);
    32a2:	a5 98       	cbi	0x14, 5	; 20
    PORTC &= ~_BV(5);
    32a4:	ad 98       	cbi	0x15, 5	; 21
    return reading;
}
    32a6:	08 95       	ret

000032a8 <get_magy>:
//-------------------------------------------------------------------------
uint16_t get_magy()
{
    uint16_t reading;

    DDRC |= _BV(5);
    32a8:	a5 9a       	sbi	0x14, 5	; 20
    PORTC |= _BV(5);
    32aa:	ad 9a       	sbi	0x15, 5	; 21
    reading = get_adc(MAGY_CHANNEL);
    32ac:	86 e0       	ldi	r24, 0x06	; 6
    32ae:	90 e0       	ldi	r25, 0x00	; 0
    32b0:	0e 94 1c 19 	call	0x3238	; 0x3238 <get_adc>
    DDRC &= ~_BV(5);
    32b4:	a5 98       	cbi	0x14, 5	; 20
    PORTC &= ~_BV(5);
    32b6:	ad 98       	cbi	0x15, 5	; 21
    return reading;
}
    32b8:	08 95       	ret

000032ba <get_accx>:
//-------------------------------------------------------------------------
uint16_t get_accx()
{
    uint16_t reading;

    DDRC |= _BV(4);
    32ba:	a4 9a       	sbi	0x14, 4	; 20
    PORTC |= _BV(4);
    32bc:	ac 9a       	sbi	0x15, 4	; 21
    reading = get_adc(ACCX_CHANNEL);
    32be:	83 e0       	ldi	r24, 0x03	; 3
    32c0:	90 e0       	ldi	r25, 0x00	; 0
    32c2:	0e 94 1c 19 	call	0x3238	; 0x3238 <get_adc>
    DDRC &= ~_BV(4);
    32c6:	a4 98       	cbi	0x14, 4	; 20
    PORTC &= ~_BV(4);
    32c8:	ac 98       	cbi	0x15, 4	; 21
    return reading;
}
    32ca:	08 95       	ret

000032cc <get_accy>:
//-------------------------------------------------------------------------
uint16_t get_accy()
{
    uint16_t reading;

    DDRC |= _BV(4);
    32cc:	a4 9a       	sbi	0x14, 4	; 20
    PORTC |= _BV(4);
    32ce:	ac 9a       	sbi	0x15, 4	; 21
    reading = get_adc(ACCY_CHANNEL);
    32d0:	84 e0       	ldi	r24, 0x04	; 4
    32d2:	90 e0       	ldi	r25, 0x00	; 0
    32d4:	0e 94 1c 19 	call	0x3238	; 0x3238 <get_adc>
    DDRC &= ~_BV(4);
    32d8:	a4 98       	cbi	0x14, 4	; 20
    PORTC &= ~_BV(4);
    32da:	ac 98       	cbi	0x15, 4	; 21
    return reading;
}
    32dc:	08 95       	ret

000032de <Leds_Leds>:
enum
{
    Leds_RED_BIT = 1, Leds_GREEN_BIT = 2, Leds_YELLOW_BIT = 4
};
void Leds_Leds()
{
    32de:	df 93       	push	r29
    32e0:	cf 93       	push	r28
    32e2:	0f 92       	push	r0
    32e4:	cd b7       	in	r28, 0x3d	; 61
    32e6:	de b7       	in	r29, 0x3e	; 62
    {
        _atomic_t _atomic = _atomic_start();
    32e8:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>

        Leds_ledsOn = 0;
    32ec:	10 92 8c 03 	sts	0x038C, r1
        LITE_MAKE_RED_LED_OUTPUT();
    32f0:	89 83       	std	Y+1, r24	; 0x01
    32f2:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <LITE_MAKE_RED_LED_OUTPUT>
        LITE_MAKE_YELLOW_LED_OUTPUT();
    32f6:	0e 94 02 04 	call	0x804	; 0x804 <LITE_MAKE_YELLOW_LED_OUTPUT>
        LITE_MAKE_GREEN_LED_OUTPUT();
    32fa:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <LITE_MAKE_GREEN_LED_OUTPUT>
        LITE_SET_RED_LED_PIN();
    32fe:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <LITE_SET_RED_LED_PIN>
        LITE_SET_YELLOW_LED_PIN();
    3302:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <LITE_SET_YELLOW_LED_PIN>
        LITE_SET_GREEN_LED_PIN();
    3306:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <LITE_SET_GREEN_LED_PIN>
        _atomic_end(_atomic);
    330a:	89 81       	ldd	r24, Y+1	; 0x01
    330c:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
    }
}
    3310:	0f 90       	pop	r0
    3312:	cf 91       	pop	r28
    3314:	df 91       	pop	r29
    3316:	08 95       	ret

00003318 <Leds_redOn>:

//-------------------------------------------------------------------------
void Leds_redOn()
{
    3318:	df 93       	push	r29
    331a:	cf 93       	push	r28
    331c:	0f 92       	push	r0
    331e:	cd b7       	in	r28, 0x3d	; 61
    3320:	de b7       	in	r29, 0x3e	; 62
    {
        _atomic_t _atomic = _atomic_start();
    3322:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>

        LITE_CLR_RED_LED_PIN();
    3326:	89 83       	std	Y+1, r24	; 0x01
    3328:	0e 94 da 03 	call	0x7b4	; 0x7b4 <LITE_CLR_RED_LED_PIN>
        Leds_ledsOn |= Leds_RED_BIT;
    332c:	90 91 8c 03 	lds	r25, 0x038C
    3330:	91 60       	ori	r25, 0x01	; 1
    3332:	90 93 8c 03 	sts	0x038C, r25
        _atomic_end(_atomic);
    3336:	89 81       	ldd	r24, Y+1	; 0x01
    3338:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
    }
    return;
}
    333c:	0f 90       	pop	r0
    333e:	cf 91       	pop	r28
    3340:	df 91       	pop	r29
    3342:	08 95       	ret

00003344 <Leds_redOff>:

//-------------------------------------------------------------------------
void Leds_redOff()
{
    3344:	df 93       	push	r29
    3346:	cf 93       	push	r28
    3348:	0f 92       	push	r0
    334a:	cd b7       	in	r28, 0x3d	; 61
    334c:	de b7       	in	r29, 0x3e	; 62
    {
        _atomic_t _atomic = _atomic_start();
    334e:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>

        LITE_SET_RED_LED_PIN();
    3352:	89 83       	std	Y+1, r24	; 0x01
    3354:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <LITE_SET_RED_LED_PIN>
        Leds_ledsOn &= ~Leds_RED_BIT;
    3358:	90 91 8c 03 	lds	r25, 0x038C
    335c:	9e 7f       	andi	r25, 0xFE	; 254
    335e:	90 93 8c 03 	sts	0x038C, r25
        _atomic_end(_atomic);
    3362:	89 81       	ldd	r24, Y+1	; 0x01
    3364:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
    }
    return;
}
    3368:	0f 90       	pop	r0
    336a:	cf 91       	pop	r28
    336c:	df 91       	pop	r29
    336e:	08 95       	ret

00003370 <Leds_redToggle>:

//-------------------------------------------------------------------------
void Leds_redToggle()
{
    3370:	df 93       	push	r29
    3372:	cf 93       	push	r28
    3374:	0f 92       	push	r0
    3376:	cd b7       	in	r28, 0x3d	; 61
    3378:	de b7       	in	r29, 0x3e	; 62
    {
        _atomic_t _atomic = _atomic_start();
    337a:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>

        if (Leds_ledsOn & Leds_RED_BIT)
    337e:	90 91 8c 03 	lds	r25, 0x038C
    3382:	90 ff       	sbrs	r25, 0
    3384:	04 c0       	rjmp	.+8      	; 0x338e <Leds_redToggle+0x1e>
        {
            Leds_redOff();
    3386:	89 83       	std	Y+1, r24	; 0x01
    3388:	0e 94 a2 19 	call	0x3344	; 0x3344 <Leds_redOff>
    338c:	03 c0       	rjmp	.+6      	; 0x3394 <Leds_redToggle+0x24>
        }
        else
        {
            Leds_redOn();
    338e:	89 83       	std	Y+1, r24	; 0x01
    3390:	0e 94 8c 19 	call	0x3318	; 0x3318 <Leds_redOn>
    3394:	89 81       	ldd	r24, Y+1	; 0x01
        }
        _atomic_end(_atomic);
    3396:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
#ifdef TRACE_ENABLE_LEDEVENT
    addTrace(TRACE_LEDEVENT_REDTOGGLE, 100);
#endif
#endif
    return;
}
    339a:	0f 90       	pop	r0
    339c:	cf 91       	pop	r28
    339e:	df 91       	pop	r29
    33a0:	08 95       	ret

000033a2 <Leds_greenOn>:

//-------------------------------------------------------------------------
void Leds_greenOn()
{
    33a2:	df 93       	push	r29
    33a4:	cf 93       	push	r28
    33a6:	0f 92       	push	r0
    33a8:	cd b7       	in	r28, 0x3d	; 61
    33aa:	de b7       	in	r29, 0x3e	; 62
    {
        _atomic_t _atomic = _atomic_start();
    33ac:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>

        LITE_CLR_GREEN_LED_PIN();
    33b0:	89 83       	std	Y+1, r24	; 0x01
    33b2:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <LITE_CLR_GREEN_LED_PIN>
        Leds_ledsOn |= Leds_GREEN_BIT;
    33b6:	90 91 8c 03 	lds	r25, 0x038C
    33ba:	92 60       	ori	r25, 0x02	; 2
    33bc:	90 93 8c 03 	sts	0x038C, r25
        _atomic_end(_atomic);
    33c0:	89 81       	ldd	r24, Y+1	; 0x01
    33c2:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
    }
    return;
}
    33c6:	0f 90       	pop	r0
    33c8:	cf 91       	pop	r28
    33ca:	df 91       	pop	r29
    33cc:	08 95       	ret

000033ce <Leds_greenOff>:

//-------------------------------------------------------------------------
void Leds_greenOff()
{
    33ce:	df 93       	push	r29
    33d0:	cf 93       	push	r28
    33d2:	0f 92       	push	r0
    33d4:	cd b7       	in	r28, 0x3d	; 61
    33d6:	de b7       	in	r29, 0x3e	; 62
    {
        _atomic_t _atomic = _atomic_start();
    33d8:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>

        LITE_SET_GREEN_LED_PIN();
    33dc:	89 83       	std	Y+1, r24	; 0x01
    33de:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <LITE_SET_GREEN_LED_PIN>
        Leds_ledsOn &= ~Leds_GREEN_BIT;
    33e2:	90 91 8c 03 	lds	r25, 0x038C
    33e6:	9d 7f       	andi	r25, 0xFD	; 253
    33e8:	90 93 8c 03 	sts	0x038C, r25
        _atomic_end(_atomic);
    33ec:	89 81       	ldd	r24, Y+1	; 0x01
    33ee:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
    }
    return;
}
    33f2:	0f 90       	pop	r0
    33f4:	cf 91       	pop	r28
    33f6:	df 91       	pop	r29
    33f8:	08 95       	ret

000033fa <Leds_greenToggle>:

//-------------------------------------------------------------------------
void Leds_greenToggle()
{
    33fa:	df 93       	push	r29
    33fc:	cf 93       	push	r28
    33fe:	0f 92       	push	r0
    3400:	cd b7       	in	r28, 0x3d	; 61
    3402:	de b7       	in	r29, 0x3e	; 62
    {
        _atomic_t _atomic = _atomic_start();
    3404:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>

        if (Leds_ledsOn & Leds_GREEN_BIT)
    3408:	90 91 8c 03 	lds	r25, 0x038C
    340c:	91 ff       	sbrs	r25, 1
    340e:	04 c0       	rjmp	.+8      	; 0x3418 <Leds_greenToggle+0x1e>
        {
            Leds_greenOff();
    3410:	89 83       	std	Y+1, r24	; 0x01
    3412:	0e 94 e7 19 	call	0x33ce	; 0x33ce <Leds_greenOff>
    3416:	03 c0       	rjmp	.+6      	; 0x341e <Leds_greenToggle+0x24>
        }
        else
        {
            Leds_greenOn();
    3418:	89 83       	std	Y+1, r24	; 0x01
    341a:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <Leds_greenOn>
    341e:	89 81       	ldd	r24, Y+1	; 0x01
        }
        _atomic_end(_atomic);
    3420:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
    }
    return;
}
    3424:	0f 90       	pop	r0
    3426:	cf 91       	pop	r28
    3428:	df 91       	pop	r29
    342a:	08 95       	ret

0000342c <Leds_yellowOn>:

//-------------------------------------------------------------------------
void Leds_yellowOn()
{
    342c:	df 93       	push	r29
    342e:	cf 93       	push	r28
    3430:	0f 92       	push	r0
    3432:	cd b7       	in	r28, 0x3d	; 61
    3434:	de b7       	in	r29, 0x3e	; 62
    {
        _atomic_t _atomic = _atomic_start();
    3436:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>

        LITE_CLR_YELLOW_LED_PIN();
    343a:	89 83       	std	Y+1, r24	; 0x01
    343c:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <LITE_CLR_YELLOW_LED_PIN>
        Leds_ledsOn |= Leds_YELLOW_BIT;
    3440:	90 91 8c 03 	lds	r25, 0x038C
    3444:	94 60       	ori	r25, 0x04	; 4
    3446:	90 93 8c 03 	sts	0x038C, r25
        _atomic_end(_atomic);
    344a:	89 81       	ldd	r24, Y+1	; 0x01
    344c:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
    }
    return;
}
    3450:	0f 90       	pop	r0
    3452:	cf 91       	pop	r28
    3454:	df 91       	pop	r29
    3456:	08 95       	ret

00003458 <Leds_yellowOff>:

//-------------------------------------------------------------------------
void Leds_yellowOff()
{
    3458:	df 93       	push	r29
    345a:	cf 93       	push	r28
    345c:	0f 92       	push	r0
    345e:	cd b7       	in	r28, 0x3d	; 61
    3460:	de b7       	in	r29, 0x3e	; 62
    {
        _atomic_t _atomic = _atomic_start();
    3462:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>

        LITE_SET_YELLOW_LED_PIN();
    3466:	89 83       	std	Y+1, r24	; 0x01
    3468:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <LITE_SET_YELLOW_LED_PIN>
        Leds_ledsOn &= ~Leds_YELLOW_BIT;
    346c:	90 91 8c 03 	lds	r25, 0x038C
    3470:	9b 7f       	andi	r25, 0xFB	; 251
    3472:	90 93 8c 03 	sts	0x038C, r25
        _atomic_end(_atomic);
    3476:	89 81       	ldd	r24, Y+1	; 0x01
    3478:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
    }
    return;
}
    347c:	0f 90       	pop	r0
    347e:	cf 91       	pop	r28
    3480:	df 91       	pop	r29
    3482:	08 95       	ret

00003484 <Leds_yellowToggle>:

//-------------------------------------------------------------------------
void Leds_yellowToggle()
{
    3484:	df 93       	push	r29
    3486:	cf 93       	push	r28
    3488:	0f 92       	push	r0
    348a:	cd b7       	in	r28, 0x3d	; 61
    348c:	de b7       	in	r29, 0x3e	; 62
    {
        _atomic_t _atomic = _atomic_start();
    348e:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>

        if (Leds_ledsOn & Leds_YELLOW_BIT)
    3492:	90 91 8c 03 	lds	r25, 0x038C
    3496:	92 ff       	sbrs	r25, 2
    3498:	04 c0       	rjmp	.+8      	; 0x34a2 <Leds_yellowToggle+0x1e>
        {
            Leds_yellowOff();
    349a:	89 83       	std	Y+1, r24	; 0x01
    349c:	0e 94 2c 1a 	call	0x3458	; 0x3458 <Leds_yellowOff>
    34a0:	03 c0       	rjmp	.+6      	; 0x34a8 <Leds_yellowToggle+0x24>
        }
        else
        {
            Leds_yellowOn();
    34a2:	89 83       	std	Y+1, r24	; 0x01
    34a4:	0e 94 16 1a 	call	0x342c	; 0x342c <Leds_yellowOn>
    34a8:	89 81       	ldd	r24, Y+1	; 0x01
        }
        _atomic_end(_atomic);
    34aa:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
    }
    return;
}
    34ae:	0f 90       	pop	r0
    34b0:	cf 91       	pop	r28
    34b2:	df 91       	pop	r29
    34b4:	08 95       	ret

000034b6 <sounder_init>:
#include "../hardware/avrhardware.h"
#include "sounder.h"

//--------------------------------------
void sounder_init()
{
    34b6:	df 93       	push	r29
    34b8:	cf 93       	push	r28
    34ba:	0f 92       	push	r0
    34bc:	cd b7       	in	r28, 0x3d	; 61
    34be:	de b7       	in	r29, 0x3e	; 62
    //activate the sounder
    {
        _atomic_t _atomic = _atomic_start();
    34c0:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>

        LITE_MAKE_PW2_OUTPUT();
    34c4:	89 83       	std	Y+1, r24	; 0x01
    34c6:	0e 94 14 05 	call	0xa28	; 0xa28 <LITE_MAKE_PW2_OUTPUT>
        _atomic_end(_atomic);
    34ca:	89 81       	ldd	r24, Y+1	; 0x01
    34cc:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
    }
}
    34d0:	0f 90       	pop	r0
    34d2:	cf 91       	pop	r28
    34d4:	df 91       	pop	r29
    34d6:	08 95       	ret

000034d8 <sounderOn>:

//--------------------------------------
void sounderOn()
{
    34d8:	df 93       	push	r29
    34da:	cf 93       	push	r28
    34dc:	0f 92       	push	r0
    34de:	cd b7       	in	r28, 0x3d	; 61
    34e0:	de b7       	in	r29, 0x3e	; 62
    {
        _atomic_t _atomic = _atomic_start();
    34e2:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>

         
		LITE_MAKE_PW2_OUTPUT();
    34e6:	89 83       	std	Y+1, r24	; 0x01
    34e8:	0e 94 14 05 	call	0xa28	; 0xa28 <LITE_MAKE_PW2_OUTPUT>
        LITE_SET_PW2_PIN();
    34ec:	0e 94 08 05 	call	0xa10	; 0xa10 <LITE_SET_PW2_PIN>
        _atomic_end(_atomic);
    34f0:	89 81       	ldd	r24, Y+1	; 0x01
    34f2:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
    }
    return;
}
    34f6:	0f 90       	pop	r0
    34f8:	cf 91       	pop	r28
    34fa:	df 91       	pop	r29
    34fc:	08 95       	ret

000034fe <sounderOff>:

//--------------------------------------
void sounderOff()
{
    34fe:	df 93       	push	r29
    3500:	cf 93       	push	r28
    3502:	0f 92       	push	r0
    3504:	cd b7       	in	r28, 0x3d	; 61
    3506:	de b7       	in	r29, 0x3e	; 62
    {
        _atomic_t _atomic = _atomic_start();
    3508:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>

        
		LITE_MAKE_PW2_OUTPUT();
    350c:	89 83       	std	Y+1, r24	; 0x01
    350e:	0e 94 14 05 	call	0xa28	; 0xa28 <LITE_MAKE_PW2_OUTPUT>
        LITE_CLR_PW2_PIN();
    3512:	0e 94 0a 05 	call	0xa14	; 0xa14 <LITE_CLR_PW2_PIN>
        _atomic_end(_atomic);
    3516:	89 81       	ldd	r24, Y+1	; 0x01
    3518:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
    }
    return;
}
    351c:	0f 90       	pop	r0
    351e:	cf 91       	pop	r28
    3520:	df 91       	pop	r29
    3522:	08 95       	ret

00003524 <genericreadBytes>:
//-------------------------------------------------------------------------
#ifdef PLATFORM_AVR
#include "../eeprom/ioeeprom.h"
void genericreadBytes(uint16_t addr, int nBytes, void *buffer)
{
    eeprom_readBytes(addr, nBytes, buffer);
    3524:	0e 94 bf 1a 	call	0x357e	; 0x357e <eeprom_readBytes>
}
    3528:	08 95       	ret

0000352a <genericwriteBytes>:

//-------------------------------------------------------------------------
void genericwriteBytes(uint16_t addr, int nBytes, void *buffer)
{
    eeprom_writeBytes(addr, nBytes, buffer);
    352a:	0e 94 c9 1a 	call	0x3592	; 0x3592 <eeprom_writeBytes>
}
    352e:	08 95       	ret

00003530 <initBytes>:

//-------------------------------------------------------------------------
void initBytes(uint16_t addr, int nBytes, uint8_t value)
{
    eeprom_initBytes(addr, nBytes, value);
    3530:	0e 94 6b 1c 	call	0x38d6	; 0x38d6 <eeprom_initBytes>
}
    3534:	08 95       	ret

00003536 <read8uint>:

//-------------------------------------------------------------------------
uint8_t read8uint(uint16_t addr)
{
    return eeprom_read8uint(addr);
    3536:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <eeprom_read8uint>
}
    353a:	08 95       	ret

0000353c <read8int>:

//-------------------------------------------------------------------------
int8_t read8int(uint16_t addr)
{
    return eeprom_read8int(addr);
    353c:	0e 94 ea 1a 	call	0x35d4	; 0x35d4 <eeprom_read8int>
}
    3540:	08 95       	ret

00003542 <read16uint>:

//-------------------------------------------------------------------------
uint16_t read16uint(uint16_t addr)
{
    return eeprom_read16uint(addr);
    3542:	0e 94 01 1b 	call	0x3602	; 0x3602 <eeprom_read16uint>
}
    3546:	08 95       	ret

00003548 <read16int>:

//-------------------------------------------------------------------------

int16_t read16int(uint16_t addr)
{
    return eeprom_read16int(addr);
    3548:	0e 94 22 1b 	call	0x3644	; 0x3644 <eeprom_read16int>
}
    354c:	08 95       	ret

0000354e <read32uint>:

//-------------------------------------------------------------------------
uint32_t read32uint(uint16_t addr)
{
    return eeprom_read32uint(addr);
    354e:	0e 94 af 1b 	call	0x375e	; 0x375e <eeprom_read32uint>
}
    3552:	08 95       	ret

00003554 <read32int>:

//-------------------------------------------------------------------------
int32_t read32int(uint16_t addr)
{
    return eeprom_read32int(addr);
    3554:	0e 94 dd 1b 	call	0x37ba	; 0x37ba <eeprom_read32int>
}
    3558:	08 95       	ret

0000355a <write8uint>:

//-------------------------------------------------------------------------
void write8uint(uint16_t addr, uint8_t value)
{
    eeprom_write8uint(addr, value);
    355a:	0e 94 43 1b 	call	0x3686	; 0x3686 <eeprom_write8uint>
}
    355e:	08 95       	ret

00003560 <write8int>:

//-------------------------------------------------------------------------
void write8int(uint16_t addr, int8_t value)
{
    eeprom_write8int(addr, value);
    3560:	0e 94 60 1b 	call	0x36c0	; 0x36c0 <eeprom_write8int>
}
    3564:	08 95       	ret

00003566 <write16uint>:

//-------------------------------------------------------------------------
void write16uint(uint16_t addr, uint16_t value)
{
    eeprom_write16uint(addr, value);
    3566:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <eeprom_write16uint>
}
    356a:	08 95       	ret

0000356c <write16int>:

//-------------------------------------------------------------------------
void write16int(uint16_t addr, int16_t value)
{
    eeprom_write16int(addr, value);
    356c:	0e 94 96 1b 	call	0x372c	; 0x372c <eeprom_write16int>
}
    3570:	08 95       	ret

00003572 <write32uint>:

//-------------------------------------------------------------------------
void write32uint(uint16_t addr, uint32_t value)
{
    eeprom_write32uint(addr, value);
    3572:	0e 94 0b 1c 	call	0x3816	; 0x3816 <eeprom_write32uint>
}
    3576:	08 95       	ret

00003578 <write32int>:

//-------------------------------------------------------------------------
void write32int(uint16_t addr, int32_t value)
{
    eeprom_write32int(addr, value);
    3578:	0e 94 35 1c 	call	0x386a	; 0x386a <eeprom_write32int>
}
    357c:	08 95       	ret

0000357e <eeprom_readBytes>:
#include <avr/eeprom.h>


//-------------------------------------------------------------------------
void eeprom_readBytes(uint16_t addr, int nBytes, void *buffer)
{
    357e:	fc 01       	movw	r30, r24
    3580:	9b 01       	movw	r18, r22
    3582:	ca 01       	movw	r24, r20
    eeprom_busy_wait();
    3584:	e1 99       	sbic	0x1c, 1	; 28
    3586:	fe cf       	rjmp	.-4      	; 0x3584 <eeprom_readBytes+0x6>
    eeprom_read_block(buffer, (void *)addr, nBytes);
    3588:	bf 01       	movw	r22, r30
    358a:	a9 01       	movw	r20, r18
    358c:	0e 94 99 49 	call	0x9332	; 0x9332 <__eerd_block_m128>
    return;
}
    3590:	08 95       	ret

00003592 <eeprom_writeBytes>:

//-------------------------------------------------------------------------
void eeprom_writeBytes(uint16_t addr, int nBytes, void *buffer)
{
    3592:	fc 01       	movw	r30, r24
    3594:	9b 01       	movw	r18, r22
    3596:	ca 01       	movw	r24, r20
    eeprom_busy_wait();
    3598:	e1 99       	sbic	0x1c, 1	; 28
    359a:	fe cf       	rjmp	.-4      	; 0x3598 <eeprom_writeBytes+0x6>
    eeprom_write_block(buffer, (void *)addr, nBytes);
    359c:	bf 01       	movw	r22, r30
    359e:	a9 01       	movw	r20, r18
    35a0:	0e 94 b7 49 	call	0x936e	; 0x936e <__eewr_block_m128>
    return;
}
    35a4:	08 95       	ret

000035a6 <eeprom_read8uint>:

//-------------------------------------------------------------------------
uint8_t eeprom_read8uint(uint16_t addr)
{
    35a6:	0f 93       	push	r16
    35a8:	1f 93       	push	r17
    35aa:	cf 93       	push	r28
    35ac:	df 93       	push	r29
    35ae:	ec 01       	movw	r28, r24
    uint8_t ret;
    _atomic_t _atomic = _atomic_start();
    35b0:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>
    35b4:	18 2f       	mov	r17, r24

    eeprom_busy_wait();
    35b6:	e1 99       	sbic	0x1c, 1	; 28
    35b8:	fe cf       	rjmp	.-4      	; 0x35b6 <eeprom_read8uint+0x10>
    ret = eeprom_read_byte((uint8_t *) addr);
    35ba:	ce 01       	movw	r24, r28
    35bc:	0e 94 a9 49 	call	0x9352	; 0x9352 <__eerd_byte_m128>
    35c0:	08 2f       	mov	r16, r24
    _atomic_end(_atomic);
    35c2:	81 2f       	mov	r24, r17
    35c4:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
    return ret;
}
    35c8:	80 2f       	mov	r24, r16
    35ca:	df 91       	pop	r29
    35cc:	cf 91       	pop	r28
    35ce:	1f 91       	pop	r17
    35d0:	0f 91       	pop	r16
    35d2:	08 95       	ret

000035d4 <eeprom_read8int>:

//-------------------------------------------------------------------------
int8_t eeprom_read8int(uint16_t addr)
{
    35d4:	0f 93       	push	r16
    35d6:	1f 93       	push	r17
    35d8:	cf 93       	push	r28
    35da:	df 93       	push	r29
    35dc:	ec 01       	movw	r28, r24
    uint8_t value;
    _atomic_t _atomic = _atomic_start();
    35de:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>
    35e2:	18 2f       	mov	r17, r24

    eeprom_busy_wait();
    35e4:	e1 99       	sbic	0x1c, 1	; 28
    35e6:	fe cf       	rjmp	.-4      	; 0x35e4 <eeprom_read8int+0x10>
    value = eeprom_read_byte((uint8_t *) addr);
    35e8:	ce 01       	movw	r24, r28
    35ea:	0e 94 a9 49 	call	0x9352	; 0x9352 <__eerd_byte_m128>
    35ee:	08 2f       	mov	r16, r24
    _atomic_end(_atomic);
    35f0:	81 2f       	mov	r24, r17
    35f2:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
    return *(int8_t *) & value;
}
    35f6:	80 2f       	mov	r24, r16
    35f8:	df 91       	pop	r29
    35fa:	cf 91       	pop	r28
    35fc:	1f 91       	pop	r17
    35fe:	0f 91       	pop	r16
    3600:	08 95       	ret

00003602 <eeprom_read16uint>:

//-------------------------------------------------------------------------
uint16_t eeprom_read16uint(uint16_t addr)
{
    3602:	ef 92       	push	r14
    3604:	ff 92       	push	r15
    3606:	0f 93       	push	r16
    3608:	1f 93       	push	r17
    360a:	df 93       	push	r29
    360c:	cf 93       	push	r28
    360e:	0f 92       	push	r0
    3610:	cd b7       	in	r28, 0x3d	; 61
    3612:	de b7       	in	r29, 0x3e	; 62
    3614:	7c 01       	movw	r14, r24
    uint16_t value;
    _atomic_t _atomic = _atomic_start();
    3616:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>
    361a:	08 2f       	mov	r16, r24

    eeprom_busy_wait();
    361c:	e1 99       	sbic	0x1c, 1	; 28
    361e:	fe cf       	rjmp	.-4      	; 0x361c <eeprom_read16uint+0x1a>
    value = eeprom_read_word((uint16_t *) addr);
    3620:	c7 01       	movw	r24, r14
    3622:	0e 94 b1 49 	call	0x9362	; 0x9362 <__eerd_word_m128>
    3626:	18 2f       	mov	r17, r24
    _atomic_end(_atomic);
    3628:	80 2f       	mov	r24, r16
    362a:	99 83       	std	Y+1, r25	; 0x01
    362c:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
    return value;
}
    3630:	81 2f       	mov	r24, r17
    3632:	99 81       	ldd	r25, Y+1	; 0x01
    3634:	0f 90       	pop	r0
    3636:	cf 91       	pop	r28
    3638:	df 91       	pop	r29
    363a:	1f 91       	pop	r17
    363c:	0f 91       	pop	r16
    363e:	ff 90       	pop	r15
    3640:	ef 90       	pop	r14
    3642:	08 95       	ret

00003644 <eeprom_read16int>:

//-------------------------------------------------------------------------
int16_t eeprom_read16int(uint16_t addr)
{
    3644:	ef 92       	push	r14
    3646:	ff 92       	push	r15
    3648:	0f 93       	push	r16
    364a:	1f 93       	push	r17
    364c:	df 93       	push	r29
    364e:	cf 93       	push	r28
    3650:	0f 92       	push	r0
    3652:	cd b7       	in	r28, 0x3d	; 61
    3654:	de b7       	in	r29, 0x3e	; 62
    3656:	7c 01       	movw	r14, r24
    uint16_t value;
    _atomic_t _atomic = _atomic_start();
    3658:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>
    365c:	08 2f       	mov	r16, r24

    eeprom_busy_wait();
    365e:	e1 99       	sbic	0x1c, 1	; 28
    3660:	fe cf       	rjmp	.-4      	; 0x365e <eeprom_read16int+0x1a>
    value = eeprom_read_word((uint16_t *) addr);
    3662:	c7 01       	movw	r24, r14
    3664:	0e 94 b1 49 	call	0x9362	; 0x9362 <__eerd_word_m128>
    3668:	18 2f       	mov	r17, r24
    _atomic_end(_atomic);
    366a:	80 2f       	mov	r24, r16
    366c:	99 83       	std	Y+1, r25	; 0x01
    366e:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
    return *(int16_t *) & value;
}
    3672:	81 2f       	mov	r24, r17
    3674:	99 81       	ldd	r25, Y+1	; 0x01
    3676:	0f 90       	pop	r0
    3678:	cf 91       	pop	r28
    367a:	df 91       	pop	r29
    367c:	1f 91       	pop	r17
    367e:	0f 91       	pop	r16
    3680:	ff 90       	pop	r15
    3682:	ef 90       	pop	r14
    3684:	08 95       	ret

00003686 <eeprom_write8uint>:

//-------------------------------------------------------------------------
void eeprom_write8uint(uint16_t addr, uint8_t value)
{
    3686:	ef 92       	push	r14
    3688:	ff 92       	push	r15
    368a:	1f 93       	push	r17
    368c:	df 93       	push	r29
    368e:	cf 93       	push	r28
    3690:	0f 92       	push	r0
    3692:	cd b7       	in	r28, 0x3d	; 61
    3694:	de b7       	in	r29, 0x3e	; 62
    3696:	7c 01       	movw	r14, r24
    _atomic_t _atomic = _atomic_start();
    3698:	69 83       	std	Y+1, r22	; 0x01
    369a:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>
    369e:	18 2f       	mov	r17, r24
    36a0:	69 81       	ldd	r22, Y+1	; 0x01

    eeprom_busy_wait();
    36a2:	e1 99       	sbic	0x1c, 1	; 28
    36a4:	fe cf       	rjmp	.-4      	; 0x36a2 <eeprom_write8uint+0x1c>
    eeprom_write_byte((uint8_t *) addr, value);
    36a6:	c7 01       	movw	r24, r14
    36a8:	0e 94 c1 49 	call	0x9382	; 0x9382 <__eewr_byte_m128>
    _atomic_end(_atomic);
    36ac:	81 2f       	mov	r24, r17
    36ae:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
    return;
}
    36b2:	0f 90       	pop	r0
    36b4:	cf 91       	pop	r28
    36b6:	df 91       	pop	r29
    36b8:	1f 91       	pop	r17
    36ba:	ff 90       	pop	r15
    36bc:	ef 90       	pop	r14
    36be:	08 95       	ret

000036c0 <eeprom_write8int>:

//-------------------------------------------------------------------------
void eeprom_write8int(uint16_t addr, int8_t value)
{
    36c0:	ef 92       	push	r14
    36c2:	ff 92       	push	r15
    36c4:	1f 93       	push	r17
    36c6:	df 93       	push	r29
    36c8:	cf 93       	push	r28
    36ca:	0f 92       	push	r0
    36cc:	cd b7       	in	r28, 0x3d	; 61
    36ce:	de b7       	in	r29, 0x3e	; 62
    36d0:	7c 01       	movw	r14, r24
    uint8_t value2;
    _atomic_t _atomic = _atomic_start();
    36d2:	69 83       	std	Y+1, r22	; 0x01
    36d4:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>
    36d8:	18 2f       	mov	r17, r24
    36da:	69 81       	ldd	r22, Y+1	; 0x01

    eeprom_busy_wait();
    36dc:	e1 99       	sbic	0x1c, 1	; 28
    36de:	fe cf       	rjmp	.-4      	; 0x36dc <eeprom_write8int+0x1c>
    value2 = *(uint8_t *) & value;
    eeprom_write_byte((uint8_t *) addr, value2);
    36e0:	c7 01       	movw	r24, r14
    36e2:	0e 94 c1 49 	call	0x9382	; 0x9382 <__eewr_byte_m128>
    _atomic_end(_atomic);
    36e6:	81 2f       	mov	r24, r17
    36e8:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
    return;
}
    36ec:	0f 90       	pop	r0
    36ee:	cf 91       	pop	r28
    36f0:	df 91       	pop	r29
    36f2:	1f 91       	pop	r17
    36f4:	ff 90       	pop	r15
    36f6:	ef 90       	pop	r14
    36f8:	08 95       	ret

000036fa <eeprom_write16uint>:

//-------------------------------------------------------------------------
void eeprom_write16uint(uint16_t addr, uint16_t value)
{
    36fa:	ff 92       	push	r15
    36fc:	0f 93       	push	r16
    36fe:	1f 93       	push	r17
    3700:	cf 93       	push	r28
    3702:	df 93       	push	r29
    3704:	ec 01       	movw	r28, r24
    3706:	8b 01       	movw	r16, r22
    _atomic_t _atomic = _atomic_start();
    3708:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>
    370c:	f8 2e       	mov	r15, r24

    eeprom_busy_wait();
    370e:	e1 99       	sbic	0x1c, 1	; 28
    3710:	fe cf       	rjmp	.-4      	; 0x370e <eeprom_write16uint+0x14>
    eeprom_write_word((uint16_t *) addr, value);
    3712:	ce 01       	movw	r24, r28
    3714:	b8 01       	movw	r22, r16
    3716:	0e 94 ce 49 	call	0x939c	; 0x939c <__eewr_word_m128>
    _atomic_end(_atomic);
    371a:	8f 2d       	mov	r24, r15
    371c:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
    return;
}
    3720:	df 91       	pop	r29
    3722:	cf 91       	pop	r28
    3724:	1f 91       	pop	r17
    3726:	0f 91       	pop	r16
    3728:	ff 90       	pop	r15
    372a:	08 95       	ret

0000372c <eeprom_write16int>:

//-------------------------------------------------------------------------
void eeprom_write16int(uint16_t addr, int16_t value)
{
    372c:	ff 92       	push	r15
    372e:	0f 93       	push	r16
    3730:	1f 93       	push	r17
    3732:	cf 93       	push	r28
    3734:	df 93       	push	r29
    3736:	ec 01       	movw	r28, r24
    3738:	8b 01       	movw	r16, r22
    uint16_t value2;
    _atomic_t _atomic = _atomic_start();
    373a:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>
    373e:	f8 2e       	mov	r15, r24

    eeprom_busy_wait();
    3740:	e1 99       	sbic	0x1c, 1	; 28
    3742:	fe cf       	rjmp	.-4      	; 0x3740 <eeprom_write16int+0x14>
    value2 = *(uint16_t *) & value;
    eeprom_write_word((uint16_t *) addr, value2);
    3744:	ce 01       	movw	r24, r28
    3746:	b8 01       	movw	r22, r16
    3748:	0e 94 ce 49 	call	0x939c	; 0x939c <__eewr_word_m128>
    _atomic_end(_atomic);
    374c:	8f 2d       	mov	r24, r15
    374e:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
    return;
}
    3752:	df 91       	pop	r29
    3754:	cf 91       	pop	r28
    3756:	1f 91       	pop	r17
    3758:	0f 91       	pop	r16
    375a:	ff 90       	pop	r15
    375c:	08 95       	ret

0000375e <eeprom_read32uint>:

//-------------------------------------------------------------------------
uint32_t eeprom_read32uint(uint16_t addr)
{
    375e:	ff 92       	push	r15
    3760:	0f 93       	push	r16
    3762:	1f 93       	push	r17
    3764:	cf 93       	push	r28
    3766:	df 93       	push	r29
    3768:	8c 01       	movw	r16, r24
    uint16_t value1;
    uint16_t value2;
    _atomic_t _atomic = _atomic_start();
    376a:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>
    376e:	f8 2e       	mov	r15, r24

    eeprom_busy_wait();
    3770:	e1 99       	sbic	0x1c, 1	; 28
    3772:	fe cf       	rjmp	.-4      	; 0x3770 <eeprom_read32uint+0x12>
    value1 = eeprom_read_word((uint16_t *) addr);
    3774:	c8 01       	movw	r24, r16
    3776:	0e 94 b1 49 	call	0x9362	; 0x9362 <__eerd_word_m128>
    377a:	ec 01       	movw	r28, r24
    eeprom_busy_wait();
    377c:	e1 99       	sbic	0x1c, 1	; 28
    377e:	fe cf       	rjmp	.-4      	; 0x377c <eeprom_read32uint+0x1e>
    value2 = eeprom_read_word((uint16_t *) (addr + 2));
    3780:	c8 01       	movw	r24, r16
    3782:	02 96       	adiw	r24, 0x02	; 2
    3784:	0e 94 b1 49 	call	0x9362	; 0x9362 <__eerd_word_m128>
    3788:	8c 01       	movw	r16, r24
    _atomic_end(_atomic);
    378a:	8f 2d       	mov	r24, r15
    378c:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
    return (((uint32_t) value2) << 16) + (uint32_t) value1;
    3790:	98 01       	movw	r18, r16
    3792:	40 e0       	ldi	r20, 0x00	; 0
    3794:	50 e0       	ldi	r21, 0x00	; 0
    3796:	a9 01       	movw	r20, r18
    3798:	33 27       	eor	r19, r19
    379a:	22 27       	eor	r18, r18
    379c:	ce 01       	movw	r24, r28
    379e:	a0 e0       	ldi	r26, 0x00	; 0
    37a0:	b0 e0       	ldi	r27, 0x00	; 0
    37a2:	28 0f       	add	r18, r24
    37a4:	39 1f       	adc	r19, r25
    37a6:	4a 1f       	adc	r20, r26
    37a8:	5b 1f       	adc	r21, r27
}
    37aa:	b9 01       	movw	r22, r18
    37ac:	ca 01       	movw	r24, r20
    37ae:	df 91       	pop	r29
    37b0:	cf 91       	pop	r28
    37b2:	1f 91       	pop	r17
    37b4:	0f 91       	pop	r16
    37b6:	ff 90       	pop	r15
    37b8:	08 95       	ret

000037ba <eeprom_read32int>:

//-------------------------------------------------------------------------
int32_t eeprom_read32int(uint16_t addr)
{
    37ba:	ff 92       	push	r15
    37bc:	0f 93       	push	r16
    37be:	1f 93       	push	r17
    37c0:	cf 93       	push	r28
    37c2:	df 93       	push	r29
    37c4:	8c 01       	movw	r16, r24
    uint16_t value1;
    uint16_t value2;
    uint32_t returnvalue;
    _atomic_t _atomic = _atomic_start();
    37c6:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>
    37ca:	f8 2e       	mov	r15, r24

    eeprom_busy_wait();
    37cc:	e1 99       	sbic	0x1c, 1	; 28
    37ce:	fe cf       	rjmp	.-4      	; 0x37cc <eeprom_read32int+0x12>
    value1 = eeprom_read_word((uint16_t *) addr);
    37d0:	c8 01       	movw	r24, r16
    37d2:	0e 94 b1 49 	call	0x9362	; 0x9362 <__eerd_word_m128>
    37d6:	ec 01       	movw	r28, r24
    eeprom_busy_wait();
    37d8:	e1 99       	sbic	0x1c, 1	; 28
    37da:	fe cf       	rjmp	.-4      	; 0x37d8 <eeprom_read32int+0x1e>
    value2 = eeprom_read_word((uint16_t *) (addr + 2));
    37dc:	c8 01       	movw	r24, r16
    37de:	02 96       	adiw	r24, 0x02	; 2
    37e0:	0e 94 b1 49 	call	0x9362	; 0x9362 <__eerd_word_m128>
    37e4:	8c 01       	movw	r16, r24
    returnvalue = ((((uint32_t) value2) << 16) + (uint32_t) value1);
    _atomic_end(_atomic);
    37e6:	8f 2d       	mov	r24, r15
    37e8:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>

    eeprom_busy_wait();
    value1 = eeprom_read_word((uint16_t *) addr);
    eeprom_busy_wait();
    value2 = eeprom_read_word((uint16_t *) (addr + 2));
    returnvalue = ((((uint32_t) value2) << 16) + (uint32_t) value1);
    37ec:	98 01       	movw	r18, r16
    37ee:	40 e0       	ldi	r20, 0x00	; 0
    37f0:	50 e0       	ldi	r21, 0x00	; 0
    37f2:	a9 01       	movw	r20, r18
    37f4:	33 27       	eor	r19, r19
    37f6:	22 27       	eor	r18, r18
    37f8:	ce 01       	movw	r24, r28
    37fa:	a0 e0       	ldi	r26, 0x00	; 0
    37fc:	b0 e0       	ldi	r27, 0x00	; 0
    37fe:	28 0f       	add	r18, r24
    3800:	39 1f       	adc	r19, r25
    3802:	4a 1f       	adc	r20, r26
    3804:	5b 1f       	adc	r21, r27
    _atomic_end(_atomic);
    return *(int32_t *) & returnvalue;
}
    3806:	b9 01       	movw	r22, r18
    3808:	ca 01       	movw	r24, r20
    380a:	df 91       	pop	r29
    380c:	cf 91       	pop	r28
    380e:	1f 91       	pop	r17
    3810:	0f 91       	pop	r16
    3812:	ff 90       	pop	r15
    3814:	08 95       	ret

00003816 <eeprom_write32uint>:

//-------------------------------------------------------------------------
void eeprom_write32uint(uint16_t addr, uint32_t value)
{
    3816:	bf 92       	push	r11
    3818:	cf 92       	push	r12
    381a:	df 92       	push	r13
    381c:	ef 92       	push	r14
    381e:	ff 92       	push	r15
    3820:	0f 93       	push	r16
    3822:	1f 93       	push	r17
    3824:	cf 93       	push	r28
    3826:	df 93       	push	r29
    3828:	ec 01       	movw	r28, r24
    382a:	7a 01       	movw	r14, r20
    382c:	8b 01       	movw	r16, r22
    uint16_t value1;
    uint16_t value2;
    _atomic_t _atomic = _atomic_start();
    382e:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>
    3832:	b8 2e       	mov	r11, r24

    value1 = (uint16_t) (value >> 16);
    3834:	68 01       	movw	r12, r16
    value2 = (uint16_t) (value & 0x0000ffff);
    3836:	b7 01       	movw	r22, r14
    eeprom_busy_wait();
    3838:	e1 99       	sbic	0x1c, 1	; 28
    383a:	fe cf       	rjmp	.-4      	; 0x3838 <eeprom_write32uint+0x22>
    //value2 = *(uint16_t *)&value;
    eeprom_write_word((uint16_t *) addr, value2);
    383c:	ce 01       	movw	r24, r28
    383e:	0e 94 ce 49 	call	0x939c	; 0x939c <__eewr_word_m128>
    addr = addr + 2;
    3842:	ce 01       	movw	r24, r28
    3844:	02 96       	adiw	r24, 0x02	; 2
    eeprom_busy_wait();
    3846:	e1 99       	sbic	0x1c, 1	; 28
    3848:	fe cf       	rjmp	.-4      	; 0x3846 <eeprom_write32uint+0x30>
    //value2 = *(uint16_t *)&value;
    eeprom_write_word((uint16_t *) addr, value1);
    384a:	b6 01       	movw	r22, r12
    384c:	0e 94 ce 49 	call	0x939c	; 0x939c <__eewr_word_m128>
    _atomic_end(_atomic);
    3850:	8b 2d       	mov	r24, r11
    3852:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
    return;
}
    3856:	df 91       	pop	r29
    3858:	cf 91       	pop	r28
    385a:	1f 91       	pop	r17
    385c:	0f 91       	pop	r16
    385e:	ff 90       	pop	r15
    3860:	ef 90       	pop	r14
    3862:	df 90       	pop	r13
    3864:	cf 90       	pop	r12
    3866:	bf 90       	pop	r11
    3868:	08 95       	ret

0000386a <eeprom_write32int>:

//-------------------------------------------------------------------------
void eeprom_write32int(uint16_t addr, int32_t value)
{
    386a:	cf 92       	push	r12
    386c:	df 92       	push	r13
    386e:	ff 92       	push	r15
    3870:	0f 93       	push	r16
    3872:	1f 93       	push	r17
    3874:	df 93       	push	r29
    3876:	cf 93       	push	r28
    3878:	00 d0       	rcall	.+0      	; 0x387a <eeprom_write32int+0x10>
    387a:	00 d0       	rcall	.+0      	; 0x387c <eeprom_write32int+0x12>
    387c:	cd b7       	in	r28, 0x3d	; 61
    387e:	de b7       	in	r29, 0x3e	; 62
    3880:	6c 01       	movw	r12, r24
    uint16_t value1;
    uint32_t value2;
    _atomic_t _atomic = _atomic_start();
    3882:	49 83       	std	Y+1, r20	; 0x01
    3884:	5a 83       	std	Y+2, r21	; 0x02
    3886:	6b 83       	std	Y+3, r22	; 0x03
    3888:	7c 83       	std	Y+4, r23	; 0x04
    388a:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>
    388e:	f8 2e       	mov	r15, r24
    for (i = 0; i < nBytes; i++)
    {
        eeprom_write8uint(addr + i, value);
    }
    _atomic_end(_atomic);
}
    3890:	49 81       	ldd	r20, Y+1	; 0x01
    3892:	5a 81       	ldd	r21, Y+2	; 0x02
    3894:	6b 81       	ldd	r22, Y+3	; 0x03
    3896:	7c 81       	ldd	r23, Y+4	; 0x04
{
    uint16_t value1;
    uint32_t value2;
    _atomic_t _atomic = _atomic_start();

    value1 = (uint16_t) ((*(uint32_t *) & value) >> 16);
    3898:	06 2f       	mov	r16, r22
    389a:	17 2f       	mov	r17, r23
    value2 = (uint16_t) ((*(uint32_t *) & value) & 0x0000ffff);
    389c:	64 2f       	mov	r22, r20
    389e:	75 2f       	mov	r23, r21
    eeprom_busy_wait();
    38a0:	e1 99       	sbic	0x1c, 1	; 28
    38a2:	fe cf       	rjmp	.-4      	; 0x38a0 <eeprom_write32int+0x36>
    //value2 = *(uint16_t *)&value;
    eeprom_write_word((uint16_t *) addr, value2);
    38a4:	c6 01       	movw	r24, r12
    38a6:	0e 94 ce 49 	call	0x939c	; 0x939c <__eewr_word_m128>
    addr = addr + 2;
    38aa:	c6 01       	movw	r24, r12
    38ac:	02 96       	adiw	r24, 0x02	; 2
    eeprom_busy_wait();
    38ae:	e1 99       	sbic	0x1c, 1	; 28
    38b0:	fe cf       	rjmp	.-4      	; 0x38ae <eeprom_write32int+0x44>
    //value2 = *(uint16_t *)&value;
    eeprom_write_word((uint16_t *) addr, value1);
    38b2:	b8 01       	movw	r22, r16
    38b4:	0e 94 ce 49 	call	0x939c	; 0x939c <__eewr_word_m128>
    _atomic_end(_atomic);
    38b8:	8f 2d       	mov	r24, r15
    38ba:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
    return;
}
    38be:	0f 90       	pop	r0
    38c0:	0f 90       	pop	r0
    38c2:	0f 90       	pop	r0
    38c4:	0f 90       	pop	r0
    38c6:	cf 91       	pop	r28
    38c8:	df 91       	pop	r29
    38ca:	1f 91       	pop	r17
    38cc:	0f 91       	pop	r16
    38ce:	ff 90       	pop	r15
    38d0:	df 90       	pop	r13
    38d2:	cf 90       	pop	r12
    38d4:	08 95       	ret

000038d6 <eeprom_initBytes>:

//-------------------------------------------------------------------------
void eeprom_initBytes(uint16_t addr, int nBytes, uint8_t value)
{
    38d6:	cf 92       	push	r12
    38d8:	df 92       	push	r13
    38da:	ef 92       	push	r14
    38dc:	ff 92       	push	r15
    38de:	0f 93       	push	r16
    38e0:	1f 93       	push	r17
    38e2:	cf 93       	push	r28
    38e4:	df 93       	push	r29
    38e6:	ec 01       	movw	r28, r24
    38e8:	7b 01       	movw	r14, r22
    38ea:	c4 2e       	mov	r12, r20
    int i;
    _atomic_t _atomic = _atomic_start();
    38ec:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>
    38f0:	d8 2e       	mov	r13, r24

    for (i = 0; i < nBytes; i++)
    38f2:	00 e0       	ldi	r16, 0x00	; 0
    38f4:	10 e0       	ldi	r17, 0x00	; 0
    38f6:	08 c0       	rjmp	.+16     	; 0x3908 <eeprom_initBytes+0x32>
    {
        eeprom_write8uint(addr + i, value);
    38f8:	c8 01       	movw	r24, r16
    38fa:	8c 0f       	add	r24, r28
    38fc:	9d 1f       	adc	r25, r29
    38fe:	6c 2d       	mov	r22, r12
    3900:	0e 94 43 1b 	call	0x3686	; 0x3686 <eeprom_write8uint>
void eeprom_initBytes(uint16_t addr, int nBytes, uint8_t value)
{
    int i;
    _atomic_t _atomic = _atomic_start();

    for (i = 0; i < nBytes; i++)
    3904:	0f 5f       	subi	r16, 0xFF	; 255
    3906:	1f 4f       	sbci	r17, 0xFF	; 255
    3908:	0e 15       	cp	r16, r14
    390a:	1f 05       	cpc	r17, r15
    390c:	ac f3       	brlt	.-22     	; 0x38f8 <eeprom_initBytes+0x22>
    {
        eeprom_write8uint(addr + i, value);
    }
    _atomic_end(_atomic);
    390e:	8d 2d       	mov	r24, r13
    3910:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
}
    3914:	df 91       	pop	r29
    3916:	cf 91       	pop	r28
    3918:	1f 91       	pop	r17
    391a:	0f 91       	pop	r16
    391c:	ff 90       	pop	r15
    391e:	ef 90       	pop	r14
    3920:	df 90       	pop	r13
    3922:	cf 90       	pop	r12
    3924:	08 95       	ret

00003926 <checkFsValid>:
fid fidtable[ MAX_FILE_TABLE_SIZE ];

//-------------------------------------------------------------------------
int checkFsValid()
{
   if ( checkNodeValid( FSROOTNODE ) == DIRNODE )
    3926:	80 e0       	ldi	r24, 0x00	; 0
    3928:	90 e0       	ldi	r25, 0x00	; 0
    392a:	0e 94 93 23 	call	0x4726	; 0x4726 <checkNodeValid>
   {
      return 1;
    392e:	21 e0       	ldi	r18, 0x01	; 1
    3930:	30 e0       	ldi	r19, 0x00	; 0
    3932:	81 30       	cpi	r24, 0x01	; 1
    3934:	91 05       	cpc	r25, r1
    3936:	11 f0       	breq	.+4      	; 0x393c <checkFsValid+0x16>
    3938:	20 e0       	ldi	r18, 0x00	; 0
    393a:	30 e0       	ldi	r19, 0x00	; 0
   }
   else
   {
      return 0;
   }
}
    393c:	c9 01       	movw	r24, r18
    393e:	08 95       	ret

00003940 <initFidTable>:
void initFidTable()
{
   int i;
   for ( i = 0; i < MAX_FILE_TABLE_SIZE; i ++ )
   {
      fidtable[ i ].valid = 0;
    3940:	10 92 a9 09 	sts	0x09A9, r1
    3944:	10 92 b3 09 	sts	0x09B3, r1
   }
}
    3948:	08 95       	ret

0000394a <getFreeFid>:
int getFreeFid()
{
   int i;
   for ( i = 0; i < MAX_FILE_TABLE_SIZE; i ++ )
   {
      if ( fidtable[ i ].valid == 0 )
    394a:	80 91 a9 09 	lds	r24, 0x09A9
    394e:	88 23       	and	r24, r24
    3950:	39 f0       	breq	.+14     	; 0x3960 <getFreeFid+0x16>
    3952:	80 91 b3 09 	lds	r24, 0x09B3
    3956:	88 23       	and	r24, r24
    3958:	31 f4       	brne	.+12     	; 0x3966 <getFreeFid+0x1c>

//-------------------------------------------------------------------------
int getFreeFid()
{
   int i;
   for ( i = 0; i < MAX_FILE_TABLE_SIZE; i ++ )
    395a:	61 e0       	ldi	r22, 0x01	; 1
    395c:	70 e0       	ldi	r23, 0x00	; 0
    395e:	05 c0       	rjmp	.+10     	; 0x396a <getFreeFid+0x20>
    3960:	60 e0       	ldi	r22, 0x00	; 0
    3962:	70 e0       	ldi	r23, 0x00	; 0
    3964:	02 c0       	rjmp	.+4      	; 0x396a <getFreeFid+0x20>
   {
      if ( fidtable[ i ].valid == 0 )
    3966:	62 e0       	ldi	r22, 0x02	; 2
    3968:	70 e0       	ldi	r23, 0x00	; 0
      {
         break;
      }
   }
   fidtable[ i ].valid = 1;
    396a:	fb 01       	movw	r30, r22
    396c:	ee 0f       	add	r30, r30
    396e:	ff 1f       	adc	r31, r31
    3970:	cb 01       	movw	r24, r22
    3972:	23 e0       	ldi	r18, 0x03	; 3
    3974:	88 0f       	add	r24, r24
    3976:	99 1f       	adc	r25, r25
    3978:	2a 95       	dec	r18
    397a:	e1 f7       	brne	.-8      	; 0x3974 <getFreeFid+0x2a>
    397c:	e8 0f       	add	r30, r24
    397e:	f9 1f       	adc	r31, r25
    3980:	e7 55       	subi	r30, 0x57	; 87
    3982:	f6 4f       	sbci	r31, 0xF6	; 246
    3984:	81 e0       	ldi	r24, 0x01	; 1
    3986:	80 83       	st	Z, r24
   fidtable[ i ].index = i;
    3988:	61 83       	std	Z+1, r22	; 0x01
   fidtable[ i ].addr = fidtable[ i ].mode = 0;
    398a:	13 82       	std	Z+3, r1	; 0x03
    398c:	12 82       	std	Z+2, r1	; 0x02
   fidtable[ i ].fpos =  - 1;
    398e:	2f ef       	ldi	r18, 0xFF	; 255
    3990:	3f ef       	ldi	r19, 0xFF	; 255
    3992:	a9 01       	movw	r20, r18
    3994:	26 83       	std	Z+6, r18	; 0x06
    3996:	37 83       	std	Z+7, r19	; 0x07
    3998:	40 87       	std	Z+8, r20	; 0x08
    399a:	51 87       	std	Z+9, r21	; 0x09
   return i;
}
    399c:	cb 01       	movw	r24, r22
    399e:	08 95       	ret

000039a0 <releaseFid>:

//-------------------------------------------------------------------------
void releaseFid( int fid )
{
   fidtable[ fid ].valid = 0;
    39a0:	9c 01       	movw	r18, r24
    39a2:	fc 01       	movw	r30, r24
    39a4:	ee 0f       	add	r30, r30
    39a6:	ff 1f       	adc	r31, r31
    39a8:	43 e0       	ldi	r20, 0x03	; 3
    39aa:	22 0f       	add	r18, r18
    39ac:	33 1f       	adc	r19, r19
    39ae:	4a 95       	dec	r20
    39b0:	e1 f7       	brne	.-8      	; 0x39aa <releaseFid+0xa>
    39b2:	e2 0f       	add	r30, r18
    39b4:	f3 1f       	adc	r31, r19
    39b6:	e7 55       	subi	r30, 0x57	; 87
    39b8:	f6 4f       	sbci	r31, 0xF6	; 246
    39ba:	10 82       	st	Z, r1
}
    39bc:	08 95       	ret

000039be <releaseAllFid>:
//-------------------------------------------------------------------------
void releaseAllFid()
{
  int i;
  for ( i = 0; i < MAX_FILE_TABLE_SIZE; i ++ )
   fidtable[ i ].valid = 0;
    39be:	10 92 a9 09 	sts	0x09A9, r1
    39c2:	10 92 b3 09 	sts	0x09B3, r1
}
    39c6:	08 95       	ret

000039c8 <fsopen>:

extern fid fidtable[MAX_FILE_TABLE_SIZE];

//-------------------------------------------------------------------------
MYFILE *fsopen(char *pathname, char *mode)
{
    39c8:	cf 92       	push	r12
    39ca:	df 92       	push	r13
    39cc:	ef 92       	push	r14
    39ce:	ff 92       	push	r15
    39d0:	0f 93       	push	r16
    39d2:	1f 93       	push	r17
    39d4:	df 93       	push	r29
    39d6:	cf 93       	push	r28
    39d8:	00 d0       	rcall	.+0      	; 0x39da <fsopen+0x12>
    39da:	cd b7       	in	r28, 0x3d	; 61
    39dc:	de b7       	in	r29, 0x3e	; 62
    39de:	6c 01       	movw	r12, r24
    39e0:	8b 01       	movw	r16, r22
    int retaddr, state;
    int openmode;

    retaddr = locateFileName(pathname, &state);
    39e2:	be 01       	movw	r22, r28
    39e4:	6f 5f       	subi	r22, 0xFF	; 255
    39e6:	7f 4f       	sbci	r23, 0xFF	; 255
    39e8:	0e 94 d9 27 	call	0x4fb2	; 0x4fb2 <locateFileName>
    39ec:	7c 01       	movw	r14, r24
    openmode = fileMode(mode);
    39ee:	c8 01       	movw	r24, r16
    39f0:	0e 94 67 23 	call	0x46ce	; 0x46ce <fileMode>
    39f4:	8c 01       	movw	r16, r24
    //ERROR in open mode 
    if (openmode == 0)
    39f6:	00 97       	sbiw	r24, 0x00	; 0
    39f8:	f1 f1       	breq	.+124    	; 0x3a76 <fsopen+0xae>
    {
        return NULL;
    }
    //If the file location fails, return -1 
    if (retaddr == -1)
    39fa:	8f ef       	ldi	r24, 0xFF	; 255
    39fc:	e8 16       	cp	r14, r24
    39fe:	8f ef       	ldi	r24, 0xFF	; 255
    3a00:	f8 06       	cpc	r15, r24
    3a02:	c9 f1       	breq	.+114    	; 0x3a76 <fsopen+0xae>
    {
        return NULL;
    }
    //first, file does not exist
    if (state == 0)
    3a04:	89 81       	ldd	r24, Y+1	; 0x01
    3a06:	9a 81       	ldd	r25, Y+2	; 0x02
    3a08:	00 97       	sbiw	r24, 0x00	; 0
    3a0a:	c9 f4       	brne	.+50     	; 0x3a3e <fsopen+0x76>
    {
        if (openmode == 2)
    3a0c:	02 30       	cpi	r16, 0x02	; 2
    3a0e:	11 05       	cpc	r17, r1
    3a10:	91 f5       	brne	.+100    	; 0x3a76 <fsopen+0xae>
        {
            int blockaddr;
            int fid;
            char *temp;

            temp = extractLastName(pathname);
    3a12:	c6 01       	movw	r24, r12
    3a14:	0e 94 50 23 	call	0x46a0	; 0x46a0 <extractLastName>
            blockaddr = createFileFromDirectory(temp, retaddr);
    3a18:	b7 01       	movw	r22, r14
    3a1a:	0e 94 aa 27 	call	0x4f54	; 0x4f54 <createFileFromDirectory>
    3a1e:	d8 2e       	mov	r13, r24
            fid = getFreeFid();
    3a20:	0e 94 a5 1c 	call	0x394a	; 0x394a <getFreeFid>
    3a24:	e8 2e       	mov	r14, r24
    3a26:	09 2f       	mov	r16, r25
            openFile(blockaddr, fid, openmode);
    3a28:	8d 2d       	mov	r24, r13
    3a2a:	90 e0       	ldi	r25, 0x00	; 0
    3a2c:	6e 2d       	mov	r22, r14
    3a2e:	70 2f       	mov	r23, r16
    3a30:	42 e0       	ldi	r20, 0x02	; 2
    3a32:	50 e0       	ldi	r21, 0x00	; 0
    3a34:	0e 94 97 28 	call	0x512e	; 0x512e <openFile>
            return &fidtable[fid];
    3a38:	4e 2d       	mov	r20, r14
    3a3a:	50 2f       	mov	r21, r16
    3a3c:	0f c0       	rjmp	.+30     	; 0x3a5c <fsopen+0x94>
        else
        {
            return NULL;
        }
    }
    if (state != FILENODE)
    3a3e:	82 30       	cpi	r24, 0x02	; 2
    3a40:	91 05       	cpc	r25, r1
    3a42:	c9 f4       	brne	.+50     	; 0x3a76 <fsopen+0xae>
        return NULL;
    }
    {
        int fid;

        fid = getFreeFid();
    3a44:	0e 94 a5 1c 	call	0x394a	; 0x394a <getFreeFid>
    3a48:	d8 2e       	mov	r13, r24
    3a4a:	c9 2e       	mov	r12, r25
        openFile(retaddr, fid, openmode);
    3a4c:	c7 01       	movw	r24, r14
    3a4e:	6d 2d       	mov	r22, r13
    3a50:	7c 2d       	mov	r23, r12
    3a52:	a8 01       	movw	r20, r16
    3a54:	0e 94 97 28 	call	0x512e	; 0x512e <openFile>
        return &fidtable[fid];
    3a58:	4d 2d       	mov	r20, r13
    3a5a:	5c 2d       	mov	r21, r12
    3a5c:	9a 01       	movw	r18, r20
    3a5e:	22 0f       	add	r18, r18
    3a60:	33 1f       	adc	r19, r19
    3a62:	83 e0       	ldi	r24, 0x03	; 3
    3a64:	44 0f       	add	r20, r20
    3a66:	55 1f       	adc	r21, r21
    3a68:	8a 95       	dec	r24
    3a6a:	e1 f7       	brne	.-8      	; 0x3a64 <fsopen+0x9c>
    3a6c:	24 0f       	add	r18, r20
    3a6e:	35 1f       	adc	r19, r21
    3a70:	27 55       	subi	r18, 0x57	; 87
    3a72:	36 4f       	sbci	r19, 0xF6	; 246
    3a74:	02 c0       	rjmp	.+4      	; 0x3a7a <fsopen+0xb2>
            return NULL;
        }
    }
    if (state != FILENODE)
    {
        return NULL;
    3a76:	20 e0       	ldi	r18, 0x00	; 0
    3a78:	30 e0       	ldi	r19, 0x00	; 0

        fid = getFreeFid();
        openFile(retaddr, fid, openmode);
        return &fidtable[fid];
    }
}
    3a7a:	c9 01       	movw	r24, r18
    3a7c:	0f 90       	pop	r0
    3a7e:	0f 90       	pop	r0
    3a80:	cf 91       	pop	r28
    3a82:	df 91       	pop	r29
    3a84:	1f 91       	pop	r17
    3a86:	0f 91       	pop	r16
    3a88:	ff 90       	pop	r15
    3a8a:	ef 90       	pop	r14
    3a8c:	df 90       	pop	r13
    3a8e:	cf 90       	pop	r12
    3a90:	08 95       	ret

00003a92 <fclose2>:

//-------------------------------------------------------------------------
void fclose2(MYFILE * fp)
{
    releaseFid(fp->index);
    3a92:	fc 01       	movw	r30, r24
    3a94:	81 81       	ldd	r24, Z+1	; 0x01
    3a96:	90 e0       	ldi	r25, 0x00	; 0
    3a98:	0e 94 d0 1c 	call	0x39a0	; 0x39a0 <releaseFid>
    fp = NULL;
    return;
}
    3a9c:	08 95       	ret

00003a9e <fseek2>:

//-------------------------------------------------------------------------
int fseek2(MYFILE * fp, int32_t offset, int position)
{
    3a9e:	ef 92       	push	r14
    3aa0:	ff 92       	push	r15
    3aa2:	0f 93       	push	r16
    3aa4:	1f 93       	push	r17
    3aa6:	cf 93       	push	r28
    3aa8:	df 93       	push	r29
    3aaa:	fc 01       	movw	r30, r24
    int temp;

    if (position == 0)
    3aac:	21 15       	cp	r18, r1
    3aae:	31 05       	cpc	r19, r1
    3ab0:	79 f4       	brne	.+30     	; 0x3ad0 <fseek2+0x32>
    {
        if (offset > fp->size)
    3ab2:	84 81       	ldd	r24, Z+4	; 0x04
    3ab4:	95 81       	ldd	r25, Z+5	; 0x05
    3ab6:	a0 e0       	ldi	r26, 0x00	; 0
    3ab8:	b0 e0       	ldi	r27, 0x00	; 0
    3aba:	84 17       	cp	r24, r20
    3abc:	95 07       	cpc	r25, r21
    3abe:	a6 07       	cpc	r26, r22
    3ac0:	b7 07       	cpc	r27, r23
    3ac2:	0c f4       	brge	.+2      	; 0x3ac6 <fseek2+0x28>
    3ac4:	43 c0       	rjmp	.+134    	; 0x3b4c <fseek2+0xae>
        {
            return -1;
        }
        fp->fpos = offset;
    3ac6:	46 83       	std	Z+6, r20	; 0x06
    3ac8:	57 83       	std	Z+7, r21	; 0x07
    3aca:	60 87       	std	Z+8, r22	; 0x08
    3acc:	71 87       	std	Z+9, r23	; 0x09
    3ace:	41 c0       	rjmp	.+130    	; 0x3b52 <fseek2+0xb4>
        return 0;
    }
    temp = fp->fpos;
    3ad0:	86 81       	ldd	r24, Z+6	; 0x06
    3ad2:	97 81       	ldd	r25, Z+7	; 0x07
    3ad4:	a0 85       	ldd	r26, Z+8	; 0x08
    3ad6:	b1 85       	ldd	r27, Z+9	; 0x09
    3ad8:	ec 01       	movw	r28, r24
    if (position == 1)
    3ada:	21 30       	cpi	r18, 0x01	; 1
    3adc:	31 05       	cpc	r19, r1
    3ade:	41 f4       	brne	.+16     	; 0x3af0 <fseek2+0x52>
    {
        fp->fpos = fp->fpos + offset;
    3ae0:	84 0f       	add	r24, r20
    3ae2:	95 1f       	adc	r25, r21
    3ae4:	a6 1f       	adc	r26, r22
    3ae6:	b7 1f       	adc	r27, r23
    3ae8:	86 83       	std	Z+6, r24	; 0x06
    3aea:	97 83       	std	Z+7, r25	; 0x07
    3aec:	a0 87       	std	Z+8, r26	; 0x08
    3aee:	b1 87       	std	Z+9, r27	; 0x09
    }
    if ((fp->fpos < 0) || (fp->fpos > fp->size))
    3af0:	e6 80       	ldd	r14, Z+6	; 0x06
    3af2:	f7 80       	ldd	r15, Z+7	; 0x07
    3af4:	00 85       	ldd	r16, Z+8	; 0x08
    3af6:	11 85       	ldd	r17, Z+9	; 0x09
    3af8:	17 fd       	sbrc	r17, 7
    3afa:	1f c0       	rjmp	.+62     	; 0x3b3a <fseek2+0x9c>
    3afc:	84 81       	ldd	r24, Z+4	; 0x04
    3afe:	95 81       	ldd	r25, Z+5	; 0x05
    3b00:	a0 e0       	ldi	r26, 0x00	; 0
    3b02:	b0 e0       	ldi	r27, 0x00	; 0
    3b04:	8e 15       	cp	r24, r14
    3b06:	9f 05       	cpc	r25, r15
    3b08:	a0 07       	cpc	r26, r16
    3b0a:	b1 07       	cpc	r27, r17
    3b0c:	b4 f0       	brlt	.+44     	; 0x3b3a <fseek2+0x9c>
    {
        fp->fpos = temp;
        return -1;
    }
    if (position == 2)
    3b0e:	22 30       	cpi	r18, 0x02	; 2
    3b10:	31 05       	cpc	r19, r1
    3b12:	41 f4       	brne	.+16     	; 0x3b24 <fseek2+0x86>
    {
        fp->fpos = fp->size + offset;
    3b14:	48 0f       	add	r20, r24
    3b16:	59 1f       	adc	r21, r25
    3b18:	6a 1f       	adc	r22, r26
    3b1a:	7b 1f       	adc	r23, r27
    3b1c:	46 83       	std	Z+6, r20	; 0x06
    3b1e:	57 83       	std	Z+7, r21	; 0x07
    3b20:	60 87       	std	Z+8, r22	; 0x08
    3b22:	71 87       	std	Z+9, r23	; 0x09
    }
    if ((fp->fpos < 0) || (fp->fpos > fp->size))
    3b24:	26 81       	ldd	r18, Z+6	; 0x06
    3b26:	37 81       	ldd	r19, Z+7	; 0x07
    3b28:	40 85       	ldd	r20, Z+8	; 0x08
    3b2a:	51 85       	ldd	r21, Z+9	; 0x09
    3b2c:	57 fd       	sbrc	r21, 7
    3b2e:	05 c0       	rjmp	.+10     	; 0x3b3a <fseek2+0x9c>
    3b30:	82 17       	cp	r24, r18
    3b32:	93 07       	cpc	r25, r19
    3b34:	a4 07       	cpc	r26, r20
    3b36:	b5 07       	cpc	r27, r21
    3b38:	64 f4       	brge	.+24     	; 0x3b52 <fseek2+0xb4>
    {
        fp->fpos = temp;
    3b3a:	ce 01       	movw	r24, r28
    3b3c:	aa 27       	eor	r26, r26
    3b3e:	97 fd       	sbrc	r25, 7
    3b40:	a0 95       	com	r26
    3b42:	ba 2f       	mov	r27, r26
    3b44:	86 83       	std	Z+6, r24	; 0x06
    3b46:	97 83       	std	Z+7, r25	; 0x07
    3b48:	a0 87       	std	Z+8, r26	; 0x08
    3b4a:	b1 87       	std	Z+9, r27	; 0x09

    if (position == 0)
    {
        if (offset > fp->size)
        {
            return -1;
    3b4c:	2f ef       	ldi	r18, 0xFF	; 255
    3b4e:	3f ef       	ldi	r19, 0xFF	; 255
    3b50:	02 c0       	rjmp	.+4      	; 0x3b56 <fseek2+0xb8>
    if ((fp->fpos < 0) || (fp->fpos > fp->size))
    {
        fp->fpos = temp;
        return -1;
    }
    return 0;
    3b52:	20 e0       	ldi	r18, 0x00	; 0
    3b54:	30 e0       	ldi	r19, 0x00	; 0
}
    3b56:	c9 01       	movw	r24, r18
    3b58:	df 91       	pop	r29
    3b5a:	cf 91       	pop	r28
    3b5c:	1f 91       	pop	r17
    3b5e:	0f 91       	pop	r16
    3b60:	ff 90       	pop	r15
    3b62:	ef 90       	pop	r14
    3b64:	08 95       	ret

00003b66 <fexist2>:

//-------------------------------------------------------------------------
int fexist2(char *pathname)
{
    3b66:	df 93       	push	r29
    3b68:	cf 93       	push	r28
    3b6a:	00 d0       	rcall	.+0      	; 0x3b6c <fexist2+0x6>
    3b6c:	cd b7       	in	r28, 0x3d	; 61
    3b6e:	de b7       	in	r29, 0x3e	; 62
    int retaddr, state;

    retaddr = locateFileName(pathname, &state);
    3b70:	be 01       	movw	r22, r28
    3b72:	6f 5f       	subi	r22, 0xFF	; 255
    3b74:	7f 4f       	sbci	r23, 0xFF	; 255
    3b76:	0e 94 d9 27 	call	0x4fb2	; 0x4fb2 <locateFileName>
    3b7a:	9c 01       	movw	r18, r24
    if ((retaddr == -1) || (state == 0))
    3b7c:	8f ef       	ldi	r24, 0xFF	; 255
    3b7e:	2f 3f       	cpi	r18, 0xFF	; 255
    3b80:	38 07       	cpc	r19, r24
    3b82:	31 f0       	breq	.+12     	; 0x3b90 <fexist2+0x2a>
    3b84:	89 81       	ldd	r24, Y+1	; 0x01
    3b86:	9a 81       	ldd	r25, Y+2	; 0x02
    3b88:	00 97       	sbiw	r24, 0x00	; 0
    3b8a:	11 f4       	brne	.+4      	; 0x3b90 <fexist2+0x2a>
    {
        return -1;
    3b8c:	2f ef       	ldi	r18, 0xFF	; 255
    3b8e:	3f ef       	ldi	r19, 0xFF	; 255
    }
    else
    {
        return retaddr;
    }
}
    3b90:	c9 01       	movw	r24, r18
    3b92:	0f 90       	pop	r0
    3b94:	0f 90       	pop	r0
    3b96:	cf 91       	pop	r28
    3b98:	df 91       	pop	r29
    3b9a:	08 95       	ret

00003b9c <fcreatedir2>:

//-------------------------------------------------------------------------
int fcreatedir2(char *pathname)
{
    3b9c:	ef 92       	push	r14
    3b9e:	ff 92       	push	r15
    3ba0:	0f 93       	push	r16
    3ba2:	1f 93       	push	r17
    3ba4:	df 93       	push	r29
    3ba6:	cf 93       	push	r28
    3ba8:	00 d0       	rcall	.+0      	; 0x3baa <fcreatedir2+0xe>
    3baa:	cd b7       	in	r28, 0x3d	; 61
    3bac:	de b7       	in	r29, 0x3e	; 62
    3bae:	8c 01       	movw	r16, r24
    int retaddr, state;

    retaddr = locateFileName(pathname, &state);
    3bb0:	be 01       	movw	r22, r28
    3bb2:	6f 5f       	subi	r22, 0xFF	; 255
    3bb4:	7f 4f       	sbci	r23, 0xFF	; 255
    3bb6:	0e 94 d9 27 	call	0x4fb2	; 0x4fb2 <locateFileName>
    3bba:	7c 01       	movw	r14, r24
    if (retaddr == -1)
    3bbc:	8f ef       	ldi	r24, 0xFF	; 255
    3bbe:	e8 16       	cp	r14, r24
    3bc0:	8f ef       	ldi	r24, 0xFF	; 255
    3bc2:	f8 06       	cpc	r15, r24
    3bc4:	69 f0       	breq	.+26     	; 0x3be0 <fcreatedir2+0x44>
    {
        return -1;
    }
    //first, file does not exist
    if (state == 0)
    3bc6:	89 81       	ldd	r24, Y+1	; 0x01
    3bc8:	9a 81       	ldd	r25, Y+2	; 0x02
    3bca:	00 97       	sbiw	r24, 0x00	; 0
    3bcc:	49 f4       	brne	.+18     	; 0x3be0 <fcreatedir2+0x44>
    {
        createDir(extractLastName(pathname), retaddr);
    3bce:	c8 01       	movw	r24, r16
    3bd0:	0e 94 50 23 	call	0x46a0	; 0x46a0 <extractLastName>
    3bd4:	b7 01       	movw	r22, r14
    3bd6:	0e 94 86 27 	call	0x4f0c	; 0x4f0c <createDir>
        return 0;
    3bda:	20 e0       	ldi	r18, 0x00	; 0
    3bdc:	30 e0       	ldi	r19, 0x00	; 0
    3bde:	02 c0       	rjmp	.+4      	; 0x3be4 <fcreatedir2+0x48>
    }
    return -1;
    3be0:	2f ef       	ldi	r18, 0xFF	; 255
    3be2:	3f ef       	ldi	r19, 0xFF	; 255
}
    3be4:	c9 01       	movw	r24, r18
    3be6:	0f 90       	pop	r0
    3be8:	0f 90       	pop	r0
    3bea:	cf 91       	pop	r28
    3bec:	df 91       	pop	r29
    3bee:	1f 91       	pop	r17
    3bf0:	0f 91       	pop	r16
    3bf2:	ff 90       	pop	r15
    3bf4:	ef 90       	pop	r14
    3bf6:	08 95       	ret

00003bf8 <fdelete2>:
//-------------------------------------------------------------------------
int fdelete2(char *pathname)
{
    int ret;

    if ((ret = fexist2(pathname)) == -1)
    3bf8:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <fexist2>
    3bfc:	2f ef       	ldi	r18, 0xFF	; 255
    3bfe:	8f 3f       	cpi	r24, 0xFF	; 255
    3c00:	92 07       	cpc	r25, r18
    3c02:	29 f0       	breq	.+10     	; 0x3c0e <fdelete2+0x16>
    {
        return -1;
    }
    else
    {
        deleteNode(ret);
    3c04:	0e 94 b7 24 	call	0x496e	; 0x496e <deleteNode>
        return 0;
    3c08:	20 e0       	ldi	r18, 0x00	; 0
    3c0a:	30 e0       	ldi	r19, 0x00	; 0
    3c0c:	02 c0       	rjmp	.+4      	; 0x3c12 <fdelete2+0x1a>
{
    int ret;

    if ((ret = fexist2(pathname)) == -1)
    {
        return -1;
    3c0e:	2f ef       	ldi	r18, 0xFF	; 255
    3c10:	3f ef       	ldi	r19, 0xFF	; 255
    else
    {
        deleteNode(ret);
        return 0;
    }
}
    3c12:	c9 01       	movw	r24, r18
    3c14:	08 95       	ret

00003c16 <fcheckFSAllocation>:

//-------------------------------------------------------------------------
int fcheckFSAllocation()
{
    return countVectorNode();
    3c16:	0e 94 26 2b 	call	0x564c	; 0x564c <countVectorNode>
}
    3c1a:	08 95       	ret

00003c1c <fcheckStorageAllocation>:

//-------------------------------------------------------------------------
int fcheckStorageAllocation()
{
    return countVectorFlash();
    3c1c:	0e 94 5c 2a 	call	0x54b8	; 0x54b8 <countVectorFlash>
}
    3c20:	08 95       	ret

00003c22 <fsprintall>:


//-------------------------------------------------------------------------
//vs patch used for debugging only 
void fsprintall()
{
    3c22:	cf 93       	push	r28
    3c24:	df 93       	push	r29
    int i;

    //  printf("*****************************************************************\n");
    for (i = 0; i <= 96; i++)
    3c26:	c0 e0       	ldi	r28, 0x00	; 0
    3c28:	d0 e0       	ldi	r29, 0x00	; 0
    {
        if (checkNodeValid(i) > 0)
    3c2a:	ce 01       	movw	r24, r28
    3c2c:	0e 94 93 23 	call	0x4726	; 0x4726 <checkNodeValid>
    3c30:	18 16       	cp	r1, r24
    3c32:	19 06       	cpc	r1, r25
    3c34:	1c f4       	brge	.+6      	; 0x3c3c <fsprintall+0x1a>
        {
            printNode(i);
    3c36:	ce 01       	movw	r24, r28
    3c38:	0e 94 3a 24 	call	0x4874	; 0x4874 <printNode>
void fsprintall()
{
    int i;

    //  printf("*****************************************************************\n");
    for (i = 0; i <= 96; i++)
    3c3c:	21 96       	adiw	r28, 0x01	; 1
    3c3e:	c1 36       	cpi	r28, 0x61	; 97
    3c40:	d1 05       	cpc	r29, r1
    3c42:	99 f7       	brne	.-26     	; 0x3c2a <fsprintall+0x8>
        if (checkNodeValid(i) > 0)
        {
            printNode(i);
        }
    }
}
    3c44:	df 91       	pop	r29
    3c46:	cf 91       	pop	r28
    3c48:	08 95       	ret

00003c4a <fread2>:

//-------------------------------------------------------------------------
int fread2(MYFILE * fp, void *buffer, int nBytes)
{
    3c4a:	2f 92       	push	r2
    3c4c:	3f 92       	push	r3
    3c4e:	4f 92       	push	r4
    3c50:	5f 92       	push	r5
    3c52:	6f 92       	push	r6
    3c54:	7f 92       	push	r7
    3c56:	8f 92       	push	r8
    3c58:	9f 92       	push	r9
    3c5a:	af 92       	push	r10
    3c5c:	bf 92       	push	r11
    3c5e:	cf 92       	push	r12
    3c60:	df 92       	push	r13
    3c62:	ef 92       	push	r14
    3c64:	ff 92       	push	r15
    3c66:	0f 93       	push	r16
    3c68:	1f 93       	push	r17
    3c6a:	df 93       	push	r29
    3c6c:	cf 93       	push	r28
    3c6e:	cd b7       	in	r28, 0x3d	; 61
    3c70:	de b7       	in	r29, 0x3e	; 62
    3c72:	2c 97       	sbiw	r28, 0x0c	; 12
    3c74:	0f b6       	in	r0, 0x3f	; 63
    3c76:	f8 94       	cli
    3c78:	de bf       	out	0x3e, r29	; 62
    3c7a:	0f be       	out	0x3f, r0	; 63
    3c7c:	cd bf       	out	0x3d, r28	; 61
    3c7e:	9c 87       	std	Y+12, r25	; 0x0c
    3c80:	8b 87       	std	Y+11, r24	; 0x0b
    3c82:	2b 01       	movw	r4, r22
    3c84:	1a 01       	movw	r2, r20
    int endsector;
    uint8_t realsector;
    int readbytes;
    int pagenum, blockoffset, pageoffset;

    if (fp->fpos + nBytes > fp->size)
    3c86:	fc 01       	movw	r30, r24
    3c88:	66 81       	ldd	r22, Z+6	; 0x06
    3c8a:	77 81       	ldd	r23, Z+7	; 0x07
    3c8c:	80 85       	ldd	r24, Z+8	; 0x08
    3c8e:	91 85       	ldd	r25, Z+9	; 0x09
    3c90:	91 01       	movw	r18, r2
    3c92:	44 27       	eor	r20, r20
    3c94:	37 fd       	sbrc	r19, 7
    3c96:	40 95       	com	r20
    3c98:	54 2f       	mov	r21, r20
    3c9a:	29 83       	std	Y+1, r18	; 0x01
    3c9c:	3a 83       	std	Y+2, r19	; 0x02
    3c9e:	4b 83       	std	Y+3, r20	; 0x03
    3ca0:	5c 83       	std	Y+4, r21	; 0x04
    3ca2:	59 01       	movw	r10, r18
    3ca4:	6a 01       	movw	r12, r20
    3ca6:	a6 0e       	add	r10, r22
    3ca8:	b7 1e       	adc	r11, r23
    3caa:	c8 1e       	adc	r12, r24
    3cac:	d9 1e       	adc	r13, r25
    3cae:	24 81       	ldd	r18, Z+4	; 0x04
    3cb0:	35 81       	ldd	r19, Z+5	; 0x05
    3cb2:	40 e0       	ldi	r20, 0x00	; 0
    3cb4:	50 e0       	ldi	r21, 0x00	; 0
    3cb6:	2a 15       	cp	r18, r10
    3cb8:	3b 05       	cpc	r19, r11
    3cba:	4c 05       	cpc	r20, r12
    3cbc:	5d 05       	cpc	r21, r13
    3cbe:	0c f4       	brge	.+2      	; 0x3cc2 <fread2+0x78>
    3cc0:	91 c0       	rjmp	.+290    	; 0x3de4 <fread2+0x19a>
    {
        return -1;
    }
    startsector = fp->fpos / 2048;
    3cc2:	61 2c       	mov	r6, r1
    3cc4:	58 e0       	ldi	r21, 0x08	; 8
    3cc6:	75 2e       	mov	r7, r21
    3cc8:	81 2c       	mov	r8, r1
    3cca:	91 2c       	mov	r9, r1
    3ccc:	a4 01       	movw	r20, r8
    3cce:	93 01       	movw	r18, r6
    3cd0:	0e 94 20 49 	call	0x9240	; 0x9240 <__divmodsi4>
    3cd4:	6f 83       	std	Y+7, r22	; 0x07
    3cd6:	78 87       	std	Y+8, r23	; 0x08
    3cd8:	89 87       	std	Y+9, r24	; 0x09
    3cda:	9a 87       	std	Y+10, r25	; 0x0a
    3cdc:	79 01       	movw	r14, r18
    endsector = (fp->fpos + nBytes - 1) / 2048;
    3cde:	c6 01       	movw	r24, r12
    3ce0:	b5 01       	movw	r22, r10
    3ce2:	61 50       	subi	r22, 0x01	; 1
    3ce4:	70 40       	sbci	r23, 0x00	; 0
    3ce6:	80 40       	sbci	r24, 0x00	; 0
    3ce8:	90 40       	sbci	r25, 0x00	; 0
    3cea:	a4 01       	movw	r20, r8
    3cec:	93 01       	movw	r18, r6
    3cee:	0e 94 20 49 	call	0x9240	; 0x9240 <__divmodsi4>
    3cf2:	3e 83       	std	Y+6, r19	; 0x06
    3cf4:	2d 83       	std	Y+5, r18	; 0x05
    if (startsector == endsector)
    3cf6:	e2 16       	cp	r14, r18
    3cf8:	f3 06       	cpc	r15, r19
    3cfa:	f1 f4       	brne	.+60     	; 0x3d38 <fread2+0xee>
    {
        blockoffset = fp->fpos % 2048;
    3cfc:	8f 81       	ldd	r24, Y+7	; 0x07
    3cfe:	98 85       	ldd	r25, Y+8	; 0x08
        pageoffset = blockoffset % 256;
        pagenum = blockoffset / 256;
    3d00:	60 e0       	ldi	r22, 0x00	; 0
    3d02:	71 e0       	ldi	r23, 0x01	; 1
    3d04:	0e 94 eb 48 	call	0x91d6	; 0x91d6 <__divmodhi4>
    3d08:	8b 01       	movw	r16, r22
    3d0a:	c8 2e       	mov	r12, r24
        //realsector = read8uint(fp->addr, FILE_ADDRPAGEOFFSET+startsector);
        //  realsector = read8uint(fp->addr, FILE_ADDRPAGEOFFSET+startsector);
        realsector = getRealSector(fp->addr, startsector);
    3d0c:	eb 85       	ldd	r30, Y+11	; 0x0b
    3d0e:	fc 85       	ldd	r31, Y+12	; 0x0c
    3d10:	82 81       	ldd	r24, Z+2	; 0x02
    3d12:	6e 2d       	mov	r22, r14
    3d14:	0e 94 12 29 	call	0x5224	; 0x5224 <getRealSector>
        pagenum = pagenum + (realsector - 1) * 8;
    3d18:	28 2f       	mov	r18, r24
    3d1a:	30 e0       	ldi	r19, 0x00	; 0
    3d1c:	21 50       	subi	r18, 0x01	; 1
    3d1e:	30 40       	sbci	r19, 0x00	; 0
    3d20:	43 e0       	ldi	r20, 0x03	; 3
    3d22:	22 0f       	add	r18, r18
    3d24:	33 1f       	adc	r19, r19
    3d26:	4a 95       	dec	r20
    3d28:	e1 f7       	brne	.-8      	; 0x3d22 <fread2+0xd8>
        //now pagenum, offset2 means the actual start location just read it
        readpagestorage(pagenum, pageoffset, buffer, nBytes);
    3d2a:	c9 01       	movw	r24, r18
    3d2c:	80 0f       	add	r24, r16
    3d2e:	91 1f       	adc	r25, r17
    3d30:	6c 2d       	mov	r22, r12
    3d32:	a2 01       	movw	r20, r4
    3d34:	91 01       	movw	r18, r2
    3d36:	51 c0       	rjmp	.+162    	; 0x3dda <fread2+0x190>
    }
    else
    {
        blockoffset = fp->fpos % 2048;
    3d38:	8f 81       	ldd	r24, Y+7	; 0x07
    3d3a:	98 85       	ldd	r25, Y+8	; 0x08
        pageoffset = blockoffset % 256;
    3d3c:	00 e0       	ldi	r16, 0x00	; 0
    3d3e:	11 e0       	ldi	r17, 0x01	; 1
    3d40:	b8 01       	movw	r22, r16
    3d42:	0e 94 eb 48 	call	0x91d6	; 0x91d6 <__divmodhi4>
    3d46:	5b 01       	movw	r10, r22
    3d48:	6c 01       	movw	r12, r24
        pagenum = blockoffset / 256;
        //      realsector = read8uint(fp->addr, FILE_ADDRPAGEOFFSET+startsector);
        //realsector = read8uint(fp->addr, FILE_ADDRPAGEOFFSET+startsector);
        realsector = getRealSector(fp->addr, startsector);
    3d4a:	eb 85       	ldd	r30, Y+11	; 0x0b
    3d4c:	fc 85       	ldd	r31, Y+12	; 0x0c
    3d4e:	82 81       	ldd	r24, Z+2	; 0x02
    3d50:	6e 2d       	mov	r22, r14
    3d52:	0e 94 12 29 	call	0x5224	; 0x5224 <getRealSector>
        pagenum = pagenum + (realsector - 1) * 8;
        readbytes = 256 - pageoffset;
    3d56:	78 01       	movw	r14, r16
    3d58:	ec 18       	sub	r14, r12
    3d5a:	fd 08       	sbc	r15, r13
        pageoffset = blockoffset % 256;
        pagenum = blockoffset / 256;
        //      realsector = read8uint(fp->addr, FILE_ADDRPAGEOFFSET+startsector);
        //realsector = read8uint(fp->addr, FILE_ADDRPAGEOFFSET+startsector);
        realsector = getRealSector(fp->addr, startsector);
        pagenum = pagenum + (realsector - 1) * 8;
    3d5c:	90 e0       	ldi	r25, 0x00	; 0
    3d5e:	01 97       	sbiw	r24, 0x01	; 1
    3d60:	33 e0       	ldi	r19, 0x03	; 3
    3d62:	88 0f       	add	r24, r24
    3d64:	99 1f       	adc	r25, r25
    3d66:	3a 95       	dec	r19
    3d68:	e1 f7       	brne	.-8      	; 0x3d62 <fread2+0x118>
        readbytes = 256 - pageoffset;
        //now pagenum, offset2 means the actual start location just read it
        readpagestorage(pagenum, pageoffset, buffer, readbytes);
    3d6a:	8a 0d       	add	r24, r10
    3d6c:	9b 1d       	adc	r25, r11
    3d6e:	6c 2d       	mov	r22, r12
    3d70:	a2 01       	movw	r20, r4
    3d72:	97 01       	movw	r18, r14
    3d74:	0e 94 03 31 	call	0x6206	; 0x6206 <readpagestorage>
        buffer = (void *)((char *)buffer + readbytes);
        blockoffset = (fp->fpos + nBytes - 1) % 2048;
    3d78:	eb 85       	ldd	r30, Y+11	; 0x0b
    3d7a:	fc 85       	ldd	r31, Y+12	; 0x0c
    3d7c:	66 81       	ldd	r22, Z+6	; 0x06
    3d7e:	77 81       	ldd	r23, Z+7	; 0x07
    3d80:	80 85       	ldd	r24, Z+8	; 0x08
    3d82:	91 85       	ldd	r25, Z+9	; 0x09
    3d84:	61 50       	subi	r22, 0x01	; 1
    3d86:	70 40       	sbci	r23, 0x00	; 0
    3d88:	80 40       	sbci	r24, 0x00	; 0
    3d8a:	90 40       	sbci	r25, 0x00	; 0
    3d8c:	29 81       	ldd	r18, Y+1	; 0x01
    3d8e:	3a 81       	ldd	r19, Y+2	; 0x02
    3d90:	4b 81       	ldd	r20, Y+3	; 0x03
    3d92:	5c 81       	ldd	r21, Y+4	; 0x04
    3d94:	62 0f       	add	r22, r18
    3d96:	73 1f       	adc	r23, r19
    3d98:	84 1f       	adc	r24, r20
    3d9a:	95 1f       	adc	r25, r21
    3d9c:	a4 01       	movw	r20, r8
    3d9e:	93 01       	movw	r18, r6
    3da0:	0e 94 20 49 	call	0x9240	; 0x9240 <__divmodsi4>
        pageoffset = blockoffset % 256;
        pagenum = blockoffset / 256;
    3da4:	cb 01       	movw	r24, r22
    3da6:	b8 01       	movw	r22, r16
    3da8:	0e 94 eb 48 	call	0x91d6	; 0x91d6 <__divmodhi4>
    3dac:	8b 01       	movw	r16, r22
        //realsector = read8uint(fp->addr, FILE_ADDRPAGEOFFSET+endsector);
        //realsector = read8uint(fp->addr, FILE_ADDRPAGEOFFSET+startsector);
        realsector = getRealSector(fp->addr, endsector);
    3dae:	eb 85       	ldd	r30, Y+11	; 0x0b
    3db0:	fc 85       	ldd	r31, Y+12	; 0x0c
    3db2:	82 81       	ldd	r24, Z+2	; 0x02
    3db4:	6d 81       	ldd	r22, Y+5	; 0x05
    3db6:	0e 94 12 29 	call	0x5224	; 0x5224 <getRealSector>
        pagenum = pagenum + (realsector - 1) * 8;
    3dba:	90 e0       	ldi	r25, 0x00	; 0
    3dbc:	01 97       	sbiw	r24, 0x01	; 1
    3dbe:	23 e0       	ldi	r18, 0x03	; 3
    3dc0:	88 0f       	add	r24, r24
    3dc2:	99 1f       	adc	r25, r25
    3dc4:	2a 95       	dec	r18
    3dc6:	e1 f7       	brne	.-8      	; 0x3dc0 <fread2+0x176>
        realsector = getRealSector(fp->addr, startsector);
        pagenum = pagenum + (realsector - 1) * 8;
        readbytes = 256 - pageoffset;
        //now pagenum, offset2 means the actual start location just read it
        readpagestorage(pagenum, pageoffset, buffer, readbytes);
        buffer = (void *)((char *)buffer + readbytes);
    3dc8:	a2 01       	movw	r20, r4
    3dca:	4e 0d       	add	r20, r14
    3dcc:	5f 1d       	adc	r21, r15
        pagenum = blockoffset / 256;
        //realsector = read8uint(fp->addr, FILE_ADDRPAGEOFFSET+endsector);
        //realsector = read8uint(fp->addr, FILE_ADDRPAGEOFFSET+startsector);
        realsector = getRealSector(fp->addr, endsector);
        pagenum = pagenum + (realsector - 1) * 8;
        readbytes = nBytes - readbytes;
    3dce:	91 01       	movw	r18, r2
    3dd0:	2e 19       	sub	r18, r14
    3dd2:	3f 09       	sbc	r19, r15
        //now pagenum, offset2 means the actual start location just read it
        readpagestorage(pagenum, 0, buffer, readbytes);
    3dd4:	80 0f       	add	r24, r16
    3dd6:	91 1f       	adc	r25, r17
    3dd8:	60 e0       	ldi	r22, 0x00	; 0
    3dda:	0e 94 03 31 	call	0x6206	; 0x6206 <readpagestorage>
    }
    return 0;
    3dde:	20 e0       	ldi	r18, 0x00	; 0
    3de0:	30 e0       	ldi	r19, 0x00	; 0
    3de2:	02 c0       	rjmp	.+4      	; 0x3de8 <fread2+0x19e>
    int readbytes;
    int pagenum, blockoffset, pageoffset;

    if (fp->fpos + nBytes > fp->size)
    {
        return -1;
    3de4:	2f ef       	ldi	r18, 0xFF	; 255
    3de6:	3f ef       	ldi	r19, 0xFF	; 255
        readbytes = nBytes - readbytes;
        //now pagenum, offset2 means the actual start location just read it
        readpagestorage(pagenum, 0, buffer, readbytes);
    }
    return 0;
}
    3de8:	c9 01       	movw	r24, r18
    3dea:	2c 96       	adiw	r28, 0x0c	; 12
    3dec:	0f b6       	in	r0, 0x3f	; 63
    3dee:	f8 94       	cli
    3df0:	de bf       	out	0x3e, r29	; 62
    3df2:	0f be       	out	0x3f, r0	; 63
    3df4:	cd bf       	out	0x3d, r28	; 61
    3df6:	cf 91       	pop	r28
    3df8:	df 91       	pop	r29
    3dfa:	1f 91       	pop	r17
    3dfc:	0f 91       	pop	r16
    3dfe:	ff 90       	pop	r15
    3e00:	ef 90       	pop	r14
    3e02:	df 90       	pop	r13
    3e04:	cf 90       	pop	r12
    3e06:	bf 90       	pop	r11
    3e08:	af 90       	pop	r10
    3e0a:	9f 90       	pop	r9
    3e0c:	8f 90       	pop	r8
    3e0e:	7f 90       	pop	r7
    3e10:	6f 90       	pop	r6
    3e12:	5f 90       	pop	r5
    3e14:	4f 90       	pop	r4
    3e16:	3f 90       	pop	r3
    3e18:	2f 90       	pop	r2
    3e1a:	08 95       	ret

00003e1c <fwrite2>:

//-------------------------------------------------------------------------
int fwrite2(MYFILE * fp, void *buffer, int nBytes)
{
    3e1c:	2f 92       	push	r2
    3e1e:	3f 92       	push	r3
    3e20:	4f 92       	push	r4
    3e22:	5f 92       	push	r5
    3e24:	6f 92       	push	r6
    3e26:	7f 92       	push	r7
    3e28:	8f 92       	push	r8
    3e2a:	9f 92       	push	r9
    3e2c:	af 92       	push	r10
    3e2e:	bf 92       	push	r11
    3e30:	cf 92       	push	r12
    3e32:	df 92       	push	r13
    3e34:	ef 92       	push	r14
    3e36:	ff 92       	push	r15
    3e38:	0f 93       	push	r16
    3e3a:	1f 93       	push	r17
    3e3c:	df 93       	push	r29
    3e3e:	cf 93       	push	r28
    3e40:	cd b7       	in	r28, 0x3d	; 61
    3e42:	de b7       	in	r29, 0x3e	; 62
    3e44:	2c 97       	sbiw	r28, 0x0c	; 12
    3e46:	0f b6       	in	r0, 0x3f	; 63
    3e48:	f8 94       	cli
    3e4a:	de bf       	out	0x3e, r29	; 62
    3e4c:	0f be       	out	0x3f, r0	; 63
    3e4e:	cd bf       	out	0x3d, r28	; 61
    3e50:	9c 87       	std	Y+12, r25	; 0x0c
    3e52:	8b 87       	std	Y+11, r24	; 0x0b
    3e54:	78 87       	std	Y+8, r23	; 0x08
    3e56:	6f 83       	std	Y+7, r22	; 0x07
    3e58:	5e 83       	std	Y+6, r21	; 0x06
    3e5a:	4d 83       	std	Y+5, r20	; 0x05
    uint8_t realsector;
    int readbytes;
    int pagenum, blockoffset, pageoffset;

    //first it checks whether there is enough space for the writing to take place, then it does the actual writing in the same way as above 
    if (fp->fpos + nBytes <= fp->size)
    3e5c:	9a 01       	movw	r18, r20
    3e5e:	44 27       	eor	r20, r20
    3e60:	37 fd       	sbrc	r19, 7
    3e62:	40 95       	com	r20
    3e64:	54 2f       	mov	r21, r20
    3e66:	29 83       	std	Y+1, r18	; 0x01
    3e68:	3a 83       	std	Y+2, r19	; 0x02
    3e6a:	4b 83       	std	Y+3, r20	; 0x03
    3e6c:	5c 83       	std	Y+4, r21	; 0x04
    3e6e:	fc 01       	movw	r30, r24
    3e70:	86 81       	ldd	r24, Z+6	; 0x06
    3e72:	97 81       	ldd	r25, Z+7	; 0x07
    3e74:	a0 85       	ldd	r26, Z+8	; 0x08
    3e76:	b1 85       	ldd	r27, Z+9	; 0x09
    3e78:	82 0f       	add	r24, r18
    3e7a:	93 1f       	adc	r25, r19
    3e7c:	a4 1f       	adc	r26, r20
    3e7e:	b5 1f       	adc	r27, r21
    3e80:	64 81       	ldd	r22, Z+4	; 0x04
    3e82:	75 81       	ldd	r23, Z+5	; 0x05
    3e84:	9b 01       	movw	r18, r22
    3e86:	40 e0       	ldi	r20, 0x00	; 0
    3e88:	50 e0       	ldi	r21, 0x00	; 0
    3e8a:	28 17       	cp	r18, r24
    3e8c:	39 07       	cpc	r19, r25
    3e8e:	4a 07       	cpc	r20, r26
    3e90:	5b 07       	cpc	r21, r27
    3e92:	d4 f5       	brge	.+116    	; 0x3f08 <fwrite2+0xec>
    }
    else
    {
        uint16_t allocate;

        allocate = (fp->size / 2048) * 2048;
    3e94:	37 2f       	mov	r19, r23
    3e96:	38 7f       	andi	r19, 0xF8	; 248
    3e98:	20 e0       	ldi	r18, 0x00	; 0
        if (fp->size % 2048 > 0)
    3e9a:	77 70       	andi	r23, 0x07	; 7
    3e9c:	61 15       	cp	r22, r1
    3e9e:	71 05       	cpc	r23, r1
    3ea0:	11 f0       	breq	.+4      	; 0x3ea6 <fwrite2+0x8a>
        {
            allocate += 2048;
    3ea2:	20 50       	subi	r18, 0x00	; 0
    3ea4:	38 4f       	sbci	r19, 0xF8	; 248
        }
        //     if ((allocate == 32768)&&(fp->fpos + nBytes > 32768))
        //         foobar(); 
        if (fp->fpos + nBytes > allocate)
    3ea6:	40 e0       	ldi	r20, 0x00	; 0
    3ea8:	50 e0       	ldi	r21, 0x00	; 0
    3eaa:	28 17       	cp	r18, r24
    3eac:	39 07       	cpc	r19, r25
    3eae:	4a 07       	cpc	r20, r26
    3eb0:	5b 07       	cpc	r21, r27
    3eb2:	3c f4       	brge	.+14     	; 0x3ec2 <fwrite2+0xa6>
        {
            newSector(fp->addr);
    3eb4:	ab 85       	ldd	r26, Y+11	; 0x0b
    3eb6:	bc 85       	ldd	r27, Y+12	; 0x0c
    3eb8:	12 96       	adiw	r26, 0x02	; 2
    3eba:	8c 91       	ld	r24, X
    3ebc:	90 e0       	ldi	r25, 0x00	; 0
    3ebe:	0e 94 2a 29 	call	0x5254	; 0x5254 <newSector>
        }

        if (fp->fpos + nBytes > fp->size)
    3ec2:	eb 85       	ldd	r30, Y+11	; 0x0b
    3ec4:	fc 85       	ldd	r31, Y+12	; 0x0c
    3ec6:	46 81       	ldd	r20, Z+6	; 0x06
    3ec8:	57 81       	ldd	r21, Z+7	; 0x07
    3eca:	60 85       	ldd	r22, Z+8	; 0x08
    3ecc:	71 85       	ldd	r23, Z+9	; 0x09
    3ece:	09 81       	ldd	r16, Y+1	; 0x01
    3ed0:	1a 81       	ldd	r17, Y+2	; 0x02
    3ed2:	2b 81       	ldd	r18, Y+3	; 0x03
    3ed4:	3c 81       	ldd	r19, Y+4	; 0x04
    3ed6:	04 0f       	add	r16, r20
    3ed8:	15 1f       	adc	r17, r21
    3eda:	26 1f       	adc	r18, r22
    3edc:	37 1f       	adc	r19, r23
    3ede:	84 81       	ldd	r24, Z+4	; 0x04
    3ee0:	95 81       	ldd	r25, Z+5	; 0x05
    3ee2:	a0 e0       	ldi	r26, 0x00	; 0
    3ee4:	b0 e0       	ldi	r27, 0x00	; 0
    3ee6:	80 17       	cp	r24, r16
    3ee8:	91 07       	cpc	r25, r17
    3eea:	a2 07       	cpc	r26, r18
    3eec:	b3 07       	cpc	r27, r19
    3eee:	64 f4       	brge	.+24     	; 0x3f08 <fwrite2+0xec>
        {
            fp->size = fp->fpos + nBytes;
    3ef0:	2d 81       	ldd	r18, Y+5	; 0x05
    3ef2:	3e 81       	ldd	r19, Y+6	; 0x06
    3ef4:	42 0f       	add	r20, r18
    3ef6:	53 1f       	adc	r21, r19
    3ef8:	55 83       	std	Z+5, r21	; 0x05
    3efa:	44 83       	std	Z+4, r20	; 0x04
            fswrite16uint(fp->addr, FILE_SIZEOFFSET, fp->size);
    3efc:	82 81       	ldd	r24, Z+2	; 0x02
    3efe:	90 e0       	ldi	r25, 0x00	; 0
    3f00:	6d e1       	ldi	r22, 0x1D	; 29
    3f02:	70 e0       	ldi	r23, 0x00	; 0
    3f04:	0e 94 db 22 	call	0x45b6	; 0x45b6 <fswrite16uint>
        }
    }
    
    //avoid flash overflow
    if (fp->size > 64000)
    3f08:	ab 85       	ldd	r26, Y+11	; 0x0b
    3f0a:	bc 85       	ldd	r27, Y+12	; 0x0c
    3f0c:	14 96       	adiw	r26, 0x04	; 4
    3f0e:	8d 91       	ld	r24, X+
    3f10:	9c 91       	ld	r25, X
    3f12:	15 97       	sbiw	r26, 0x05	; 5
    3f14:	ba ef       	ldi	r27, 0xFA	; 250
    3f16:	81 30       	cpi	r24, 0x01	; 1
    3f18:	9b 07       	cpc	r25, r27
    3f1a:	08 f0       	brcs	.+2      	; 0x3f1e <fwrite2+0x102>
    3f1c:	a6 c0       	rjmp	.+332    	; 0x406a <fwrite2+0x24e>
    	return 2; 
    	 
    startsector = fp->fpos / 2048;
    3f1e:	eb 85       	ldd	r30, Y+11	; 0x0b
    3f20:	fc 85       	ldd	r31, Y+12	; 0x0c
    3f22:	e6 80       	ldd	r14, Z+6	; 0x06
    3f24:	f7 80       	ldd	r15, Z+7	; 0x07
    3f26:	00 85       	ldd	r16, Z+8	; 0x08
    3f28:	11 85       	ldd	r17, Z+9	; 0x09
    3f2a:	61 2c       	mov	r6, r1
    3f2c:	f8 e0       	ldi	r31, 0x08	; 8
    3f2e:	7f 2e       	mov	r7, r31
    3f30:	81 2c       	mov	r8, r1
    3f32:	91 2c       	mov	r9, r1
    3f34:	c8 01       	movw	r24, r16
    3f36:	b7 01       	movw	r22, r14
    3f38:	a4 01       	movw	r20, r8
    3f3a:	93 01       	movw	r18, r6
    3f3c:	0e 94 20 49 	call	0x9240	; 0x9240 <__divmodsi4>
    3f40:	1b 01       	movw	r2, r22
    3f42:	2c 01       	movw	r4, r24
    3f44:	59 01       	movw	r10, r18
    endsector = (fp->fpos + nBytes - 1) / 2048;
    3f46:	c8 01       	movw	r24, r16
    3f48:	b7 01       	movw	r22, r14
    3f4a:	61 50       	subi	r22, 0x01	; 1
    3f4c:	70 40       	sbci	r23, 0x00	; 0
    3f4e:	80 40       	sbci	r24, 0x00	; 0
    3f50:	90 40       	sbci	r25, 0x00	; 0
    3f52:	29 81       	ldd	r18, Y+1	; 0x01
    3f54:	3a 81       	ldd	r19, Y+2	; 0x02
    3f56:	4b 81       	ldd	r20, Y+3	; 0x03
    3f58:	5c 81       	ldd	r21, Y+4	; 0x04
    3f5a:	62 0f       	add	r22, r18
    3f5c:	73 1f       	adc	r23, r19
    3f5e:	84 1f       	adc	r24, r20
    3f60:	95 1f       	adc	r25, r21
    3f62:	a4 01       	movw	r20, r8
    3f64:	93 01       	movw	r18, r6
    3f66:	0e 94 20 49 	call	0x9240	; 0x9240 <__divmodsi4>
    3f6a:	3a 87       	std	Y+10, r19	; 0x0a
    3f6c:	29 87       	std	Y+9, r18	; 0x09
    if (startsector == endsector)
    3f6e:	a2 16       	cp	r10, r18
    3f70:	b3 06       	cpc	r11, r19
    3f72:	01 f5       	brne	.+64     	; 0x3fb4 <fwrite2+0x198>
    {
        blockoffset = fp->fpos % 2048;
    3f74:	c1 01       	movw	r24, r2
        pageoffset = blockoffset % 256;
        pagenum = blockoffset / 256;
    3f76:	60 e0       	ldi	r22, 0x00	; 0
    3f78:	71 e0       	ldi	r23, 0x01	; 1
    3f7a:	0e 94 eb 48 	call	0x91d6	; 0x91d6 <__divmodhi4>
    3f7e:	8b 01       	movw	r16, r22
    3f80:	e8 2e       	mov	r14, r24
        //      realsector = read8uint(fp->addr, FILE_ADDRPAGEOFFSET+startsector);
        //realsector = read8uint(fp->addr, FILE_ADDRPAGEOFFSET+startsector);
        realsector = getRealSector(fp->addr, startsector);
    3f82:	ab 85       	ldd	r26, Y+11	; 0x0b
    3f84:	bc 85       	ldd	r27, Y+12	; 0x0c
    3f86:	12 96       	adiw	r26, 0x02	; 2
    3f88:	8c 91       	ld	r24, X
    3f8a:	6a 2d       	mov	r22, r10
    3f8c:	0e 94 12 29 	call	0x5224	; 0x5224 <getRealSector>
        pagenum = pagenum + (realsector - 1) * 8;
    3f90:	28 2f       	mov	r18, r24
    3f92:	30 e0       	ldi	r19, 0x00	; 0
    3f94:	21 50       	subi	r18, 0x01	; 1
    3f96:	30 40       	sbci	r19, 0x00	; 0
    3f98:	e3 e0       	ldi	r30, 0x03	; 3
    3f9a:	22 0f       	add	r18, r18
    3f9c:	33 1f       	adc	r19, r19
    3f9e:	ea 95       	dec	r30
    3fa0:	e1 f7       	brne	.-8      	; 0x3f9a <fwrite2+0x17e>
        //now pagenum, offset2 means the actual start location just read it
        writepagestorage(pagenum, pageoffset, buffer, nBytes);
    3fa2:	c9 01       	movw	r24, r18
    3fa4:	80 0f       	add	r24, r16
    3fa6:	91 1f       	adc	r25, r17
    3fa8:	6e 2d       	mov	r22, r14
    3faa:	4f 81       	ldd	r20, Y+7	; 0x07
    3fac:	58 85       	ldd	r21, Y+8	; 0x08
    3fae:	2d 81       	ldd	r18, Y+5	; 0x05
    3fb0:	3e 81       	ldd	r19, Y+6	; 0x06
    3fb2:	56 c0       	rjmp	.+172    	; 0x4060 <fwrite2+0x244>
    }
    else
    {
        blockoffset = fp->fpos % 2048;
    3fb4:	c1 01       	movw	r24, r2
        pageoffset = blockoffset % 256;
    3fb6:	00 e0       	ldi	r16, 0x00	; 0
    3fb8:	11 e0       	ldi	r17, 0x01	; 1
    3fba:	b8 01       	movw	r22, r16
    3fbc:	0e 94 eb 48 	call	0x91d6	; 0x91d6 <__divmodhi4>
    3fc0:	2b 01       	movw	r4, r22
    3fc2:	6c 01       	movw	r12, r24
        pagenum = blockoffset / 256;
        //realsector = read8uint(fp->addr, FILE_ADDRPAGEOFFSET+startsector);
        //realsector = read8uint(fp->addr, FILE_ADDRPAGEOFFSET+startsector);
        realsector = getRealSector(fp->addr, startsector);
    3fc4:	eb 85       	ldd	r30, Y+11	; 0x0b
    3fc6:	fc 85       	ldd	r31, Y+12	; 0x0c
    3fc8:	82 81       	ldd	r24, Z+2	; 0x02
    3fca:	6a 2d       	mov	r22, r10
    3fcc:	0e 94 12 29 	call	0x5224	; 0x5224 <getRealSector>
        pagenum = pagenum + (realsector - 1) * 8;
        readbytes = 256 - pageoffset;
    3fd0:	78 01       	movw	r14, r16
    3fd2:	ec 18       	sub	r14, r12
    3fd4:	fd 08       	sbc	r15, r13
        pageoffset = blockoffset % 256;
        pagenum = blockoffset / 256;
        //realsector = read8uint(fp->addr, FILE_ADDRPAGEOFFSET+startsector);
        //realsector = read8uint(fp->addr, FILE_ADDRPAGEOFFSET+startsector);
        realsector = getRealSector(fp->addr, startsector);
        pagenum = pagenum + (realsector - 1) * 8;
    3fd6:	90 e0       	ldi	r25, 0x00	; 0
    3fd8:	01 97       	sbiw	r24, 0x01	; 1
    3fda:	73 e0       	ldi	r23, 0x03	; 3
    3fdc:	88 0f       	add	r24, r24
    3fde:	99 1f       	adc	r25, r25
    3fe0:	7a 95       	dec	r23
    3fe2:	e1 f7       	brne	.-8      	; 0x3fdc <fwrite2+0x1c0>
        readbytes = 256 - pageoffset;
        //now pagenum, offset2 means the actual start location just read it
        writepagestorage(pagenum, pageoffset, buffer, readbytes);
    3fe4:	84 0d       	add	r24, r4
    3fe6:	95 1d       	adc	r25, r5
    3fe8:	6c 2d       	mov	r22, r12
    3fea:	4f 81       	ldd	r20, Y+7	; 0x07
    3fec:	58 85       	ldd	r21, Y+8	; 0x08
    3fee:	97 01       	movw	r18, r14
    3ff0:	0e 94 06 31 	call	0x620c	; 0x620c <writepagestorage>
        buffer = (void *)((char *)buffer + readbytes);
        blockoffset = (fp->fpos + nBytes - 1) % 2048;
    3ff4:	ab 85       	ldd	r26, Y+11	; 0x0b
    3ff6:	bc 85       	ldd	r27, Y+12	; 0x0c
    3ff8:	16 96       	adiw	r26, 0x06	; 6
    3ffa:	6d 91       	ld	r22, X+
    3ffc:	7d 91       	ld	r23, X+
    3ffe:	8d 91       	ld	r24, X+
    4000:	9c 91       	ld	r25, X
    4002:	19 97       	sbiw	r26, 0x09	; 9
    4004:	61 50       	subi	r22, 0x01	; 1
    4006:	70 40       	sbci	r23, 0x00	; 0
    4008:	80 40       	sbci	r24, 0x00	; 0
    400a:	90 40       	sbci	r25, 0x00	; 0
    400c:	29 81       	ldd	r18, Y+1	; 0x01
    400e:	3a 81       	ldd	r19, Y+2	; 0x02
    4010:	4b 81       	ldd	r20, Y+3	; 0x03
    4012:	5c 81       	ldd	r21, Y+4	; 0x04
    4014:	62 0f       	add	r22, r18
    4016:	73 1f       	adc	r23, r19
    4018:	84 1f       	adc	r24, r20
    401a:	95 1f       	adc	r25, r21
    401c:	a4 01       	movw	r20, r8
    401e:	93 01       	movw	r18, r6
    4020:	0e 94 20 49 	call	0x9240	; 0x9240 <__divmodsi4>
        pageoffset = blockoffset % 256;
        pagenum = blockoffset / 256;
    4024:	cb 01       	movw	r24, r22
    4026:	b8 01       	movw	r22, r16
    4028:	0e 94 eb 48 	call	0x91d6	; 0x91d6 <__divmodhi4>
    402c:	8b 01       	movw	r16, r22
        //realsector = read8uint(fp->addr, FILE_ADDRPAGEOFFSET+endsector);
        //realsector = read8uint(fp->addr, FILE_ADDRPAGEOFFSET+startsector);
        realsector = getRealSector(fp->addr, endsector);
    402e:	ab 85       	ldd	r26, Y+11	; 0x0b
    4030:	bc 85       	ldd	r27, Y+12	; 0x0c
    4032:	12 96       	adiw	r26, 0x02	; 2
    4034:	8c 91       	ld	r24, X
    4036:	69 85       	ldd	r22, Y+9	; 0x09
    4038:	0e 94 12 29 	call	0x5224	; 0x5224 <getRealSector>
        pagenum = pagenum + (realsector - 1) * 8;
    403c:	90 e0       	ldi	r25, 0x00	; 0
    403e:	01 97       	sbiw	r24, 0x01	; 1
    4040:	63 e0       	ldi	r22, 0x03	; 3
    4042:	88 0f       	add	r24, r24
    4044:	99 1f       	adc	r25, r25
    4046:	6a 95       	dec	r22
    4048:	e1 f7       	brne	.-8      	; 0x4042 <fwrite2+0x226>
        realsector = getRealSector(fp->addr, startsector);
        pagenum = pagenum + (realsector - 1) * 8;
        readbytes = 256 - pageoffset;
        //now pagenum, offset2 means the actual start location just read it
        writepagestorage(pagenum, pageoffset, buffer, readbytes);
        buffer = (void *)((char *)buffer + readbytes);
    404a:	4f 81       	ldd	r20, Y+7	; 0x07
    404c:	58 85       	ldd	r21, Y+8	; 0x08
    404e:	4e 0d       	add	r20, r14
    4050:	5f 1d       	adc	r21, r15
        pagenum = blockoffset / 256;
        //realsector = read8uint(fp->addr, FILE_ADDRPAGEOFFSET+endsector);
        //realsector = read8uint(fp->addr, FILE_ADDRPAGEOFFSET+startsector);
        realsector = getRealSector(fp->addr, endsector);
        pagenum = pagenum + (realsector - 1) * 8;
        readbytes = nBytes - readbytes;
    4052:	2d 81       	ldd	r18, Y+5	; 0x05
    4054:	3e 81       	ldd	r19, Y+6	; 0x06
    4056:	2e 19       	sub	r18, r14
    4058:	3f 09       	sbc	r19, r15
        //now pagenum, offset2 means the actual start location just read it
        writepagestorage(pagenum, 0, buffer, readbytes);
    405a:	80 0f       	add	r24, r16
    405c:	91 1f       	adc	r25, r17
    405e:	60 e0       	ldi	r22, 0x00	; 0
    4060:	0e 94 06 31 	call	0x620c	; 0x620c <writepagestorage>
    }
    return 0;
    4064:	20 e0       	ldi	r18, 0x00	; 0
    4066:	30 e0       	ldi	r19, 0x00	; 0
    4068:	02 c0       	rjmp	.+4      	; 0x406e <fwrite2+0x252>
        }
    }
    
    //avoid flash overflow
    if (fp->size > 64000)
    	return 2; 
    406a:	22 e0       	ldi	r18, 0x02	; 2
    406c:	30 e0       	ldi	r19, 0x00	; 0
        readbytes = nBytes - readbytes;
        //now pagenum, offset2 means the actual start location just read it
        writepagestorage(pagenum, 0, buffer, readbytes);
    }
    return 0;
}
    406e:	c9 01       	movw	r24, r18
    4070:	2c 96       	adiw	r28, 0x0c	; 12
    4072:	0f b6       	in	r0, 0x3f	; 63
    4074:	f8 94       	cli
    4076:	de bf       	out	0x3e, r29	; 62
    4078:	0f be       	out	0x3f, r0	; 63
    407a:	cd bf       	out	0x3d, r28	; 61
    407c:	cf 91       	pop	r28
    407e:	df 91       	pop	r29
    4080:	1f 91       	pop	r17
    4082:	0f 91       	pop	r16
    4084:	ff 90       	pop	r15
    4086:	ef 90       	pop	r14
    4088:	df 90       	pop	r13
    408a:	cf 90       	pop	r12
    408c:	bf 90       	pop	r11
    408e:	af 90       	pop	r10
    4090:	9f 90       	pop	r9
    4092:	8f 90       	pop	r8
    4094:	7f 90       	pop	r7
    4096:	6f 90       	pop	r6
    4098:	5f 90       	pop	r5
    409a:	4f 90       	pop	r4
    409c:	3f 90       	pop	r3
    409e:	2f 90       	pop	r2
    40a0:	08 95       	ret

000040a2 <fmove>:

//-------------------------------------------------------------------------
int fmove(char *source, char *target)
{
    40a2:	af 92       	push	r10
    40a4:	bf 92       	push	r11
    40a6:	df 92       	push	r13
    40a8:	ef 92       	push	r14
    40aa:	ff 92       	push	r15
    40ac:	0f 93       	push	r16
    40ae:	1f 93       	push	r17
    40b0:	df 93       	push	r29
    40b2:	cf 93       	push	r28
    40b4:	00 d0       	rcall	.+0      	; 0x40b6 <fmove+0x14>
    40b6:	00 d0       	rcall	.+0      	; 0x40b8 <fmove+0x16>
    40b8:	00 d0       	rcall	.+0      	; 0x40ba <fmove+0x18>
    40ba:	cd b7       	in	r28, 0x3d	; 61
    40bc:	de b7       	in	r29, 0x3e	; 62
    40be:	7c 01       	movw	r14, r24
    40c0:	8b 01       	movw	r16, r22
    int state1, state2;
    uint8_t parent;
    char *p, *q;
    uint8_t namelength;

    p = extractLastName(target);
    40c2:	cb 01       	movw	r24, r22
    40c4:	0e 94 50 23 	call	0x46a0	; 0x46a0 <extractLastName>
    40c8:	9c 01       	movw	r18, r24
    q = target + mystrlen(target);
    40ca:	c8 01       	movw	r24, r16
    40cc:	2d 83       	std	Y+5, r18	; 0x05
    40ce:	3e 83       	std	Y+6, r19	; 0x06
    40d0:	0e 94 d4 36 	call	0x6da8	; 0x6da8 <mystrlen>
    40d4:	5c 01       	movw	r10, r24
    namelength = q - p;
    ret1 = locateFileName(source, &state1);
    40d6:	c7 01       	movw	r24, r14
    40d8:	be 01       	movw	r22, r28
    40da:	6f 5f       	subi	r22, 0xFF	; 255
    40dc:	7f 4f       	sbci	r23, 0xFF	; 255
    40de:	0e 94 d9 27 	call	0x4fb2	; 0x4fb2 <locateFileName>
    40e2:	f8 2e       	mov	r15, r24
    40e4:	e9 2e       	mov	r14, r25
    parent = fsread8uint(ret1, FILE_PARENTOFFSET);
    40e6:	6f e1       	ldi	r22, 0x1F	; 31
    40e8:	70 e0       	ldi	r23, 0x00	; 0
    40ea:	0e 94 89 22 	call	0x4512	; 0x4512 <fsread8uint>
    removeChildNode(parent, ret1);
    40ee:	6f 2d       	mov	r22, r15
    40f0:	0e 94 96 29 	call	0x532c	; 0x532c <removeChildNode>
    ret2 = locateFileName(target, &state2);
    40f4:	c8 01       	movw	r24, r16
    40f6:	be 01       	movw	r22, r28
    40f8:	6d 5f       	subi	r22, 0xFD	; 253
    40fa:	7f 4f       	sbci	r23, 0xFF	; 255
    40fc:	0e 94 d9 27 	call	0x4fb2	; 0x4fb2 <locateFileName>
    4100:	d8 2e       	mov	r13, r24
    fswrite8uint(ret1, FILE_PARENTOFFSET, ret2);
    4102:	8f 2d       	mov	r24, r15
    4104:	9e 2d       	mov	r25, r14
    4106:	6f e1       	ldi	r22, 0x1F	; 31
    4108:	70 e0       	ldi	r23, 0x00	; 0
    410a:	4d 2d       	mov	r20, r13
    410c:	0e 94 c5 22 	call	0x458a	; 0x458a <fswrite8uint>
    uint8_t parent;
    char *p, *q;
    uint8_t namelength;

    p = extractLastName(target);
    q = target + mystrlen(target);
    4110:	0a 0d       	add	r16, r10
    4112:	1b 1d       	adc	r17, r11
    namelength = q - p;
    4114:	2d 81       	ldd	r18, Y+5	; 0x05
    4116:	02 1b       	sub	r16, r18
    ret1 = locateFileName(source, &state1);
    parent = fsread8uint(ret1, FILE_PARENTOFFSET);
    removeChildNode(parent, ret1);
    ret2 = locateFileName(target, &state2);
    fswrite8uint(ret1, FILE_PARENTOFFSET, ret2);
    fswriteBytes(ret1, FILENAMEOFFSET, namelength, p);
    4118:	8f 2d       	mov	r24, r15
    411a:	9e 2d       	mov	r25, r14
    411c:	60 e0       	ldi	r22, 0x00	; 0
    411e:	70 e0       	ldi	r23, 0x00	; 0
    4120:	40 2f       	mov	r20, r16
    4122:	50 e0       	ldi	r21, 0x00	; 0
    4124:	3e 81       	ldd	r19, Y+6	; 0x06
    4126:	0e 94 1a 23 	call	0x4634	; 0x4634 <fswriteBytes>
    fswrite8uint(ret1, FILENAMEOFFSET + namelength, 0);
    412a:	8f 2d       	mov	r24, r15
    412c:	9e 2d       	mov	r25, r14
    412e:	60 2f       	mov	r22, r16
    4130:	70 e0       	ldi	r23, 0x00	; 0
    4132:	40 e0       	ldi	r20, 0x00	; 0
    4134:	0e 94 c5 22 	call	0x458a	; 0x458a <fswrite8uint>
    addChildNode(ret2, ret1);
    4138:	8d 2d       	mov	r24, r13
    413a:	6f 2d       	mov	r22, r15
    413c:	0e 94 68 29 	call	0x52d0	; 0x52d0 <addChildNode>
    return 0;
}
    4140:	80 e0       	ldi	r24, 0x00	; 0
    4142:	90 e0       	ldi	r25, 0x00	; 0
    4144:	26 96       	adiw	r28, 0x06	; 6
    4146:	0f b6       	in	r0, 0x3f	; 63
    4148:	f8 94       	cli
    414a:	de bf       	out	0x3e, r29	; 62
    414c:	0f be       	out	0x3f, r0	; 63
    414e:	cd bf       	out	0x3d, r28	; 61
    4150:	cf 91       	pop	r28
    4152:	df 91       	pop	r29
    4154:	1f 91       	pop	r17
    4156:	0f 91       	pop	r16
    4158:	ff 90       	pop	r15
    415a:	ef 90       	pop	r14
    415c:	df 90       	pop	r13
    415e:	bf 90       	pop	r11
    4160:	af 90       	pop	r10
    4162:	08 95       	ret

00004164 <fcopy>:

//-------------------------------------------------------------------------
int fcopy(char *source, char *target)
{
    4164:	8f 92       	push	r8
    4166:	9f 92       	push	r9
    4168:	af 92       	push	r10
    416a:	bf 92       	push	r11
    416c:	df 92       	push	r13
    416e:	ef 92       	push	r14
    4170:	ff 92       	push	r15
    4172:	0f 93       	push	r16
    4174:	1f 93       	push	r17
    4176:	df 93       	push	r29
    4178:	cf 93       	push	r28
    417a:	00 d0       	rcall	.+0      	; 0x417c <fcopy+0x18>
    417c:	00 d0       	rcall	.+0      	; 0x417e <fcopy+0x1a>
    417e:	00 d0       	rcall	.+0      	; 0x4180 <fcopy+0x1c>
    4180:	cd b7       	in	r28, 0x3d	; 61
    4182:	de b7       	in	r29, 0x3e	; 62
    4184:	7c 01       	movw	r14, r24
    4186:	8b 01       	movw	r16, r22
    char *p;
    char *q;
    int NewNode;
    uint8_t namelength;

    p = extractLastName(target);
    4188:	cb 01       	movw	r24, r22
    418a:	0e 94 50 23 	call	0x46a0	; 0x46a0 <extractLastName>
    418e:	9c 01       	movw	r18, r24
    q = target + mystrlen(target);
    4190:	c8 01       	movw	r24, r16
    4192:	2d 83       	std	Y+5, r18	; 0x05
    4194:	3e 83       	std	Y+6, r19	; 0x06
    4196:	0e 94 d4 36 	call	0x6da8	; 0x6da8 <mystrlen>
    419a:	4c 01       	movw	r8, r24
    namelength = q - p;
    ret1 = locateFileName(source, &state1);
    419c:	c7 01       	movw	r24, r14
    419e:	be 01       	movw	r22, r28
    41a0:	6f 5f       	subi	r22, 0xFF	; 255
    41a2:	7f 4f       	sbci	r23, 0xFF	; 255
    41a4:	0e 94 d9 27 	call	0x4fb2	; 0x4fb2 <locateFileName>
    41a8:	5c 01       	movw	r10, r24
    ret2 = locateFileName(target, &state2);
    41aa:	c8 01       	movw	r24, r16
    41ac:	be 01       	movw	r22, r28
    41ae:	6d 5f       	subi	r22, 0xFD	; 253
    41b0:	7f 4f       	sbci	r23, 0xFF	; 255
    41b2:	0e 94 d9 27 	call	0x4fb2	; 0x4fb2 <locateFileName>
    41b6:	d8 2e       	mov	r13, r24
    NewNode = getVectorNode();
    41b8:	0e 94 d1 2a 	call	0x55a2	; 0x55a2 <getVectorNode>
    41bc:	f8 2e       	mov	r15, r24
    41be:	e9 2e       	mov	r14, r25
    copyVectorNode(ret1, NewNode);
    41c0:	c5 01       	movw	r24, r10
    41c2:	6f 2d       	mov	r22, r15
    41c4:	7e 2d       	mov	r23, r14
    41c6:	0e 94 b3 25 	call	0x4b66	; 0x4b66 <copyVectorNode>
    char *q;
    int NewNode;
    uint8_t namelength;

    p = extractLastName(target);
    q = target + mystrlen(target);
    41ca:	08 0d       	add	r16, r8
    41cc:	19 1d       	adc	r17, r9
    namelength = q - p;
    41ce:	2d 81       	ldd	r18, Y+5	; 0x05
    41d0:	02 1b       	sub	r16, r18
    ret1 = locateFileName(source, &state1);
    ret2 = locateFileName(target, &state2);
    NewNode = getVectorNode();
    copyVectorNode(ret1, NewNode);
    fswriteBytes(NewNode, FILENAMEOFFSET, namelength, p);
    41d2:	8f 2d       	mov	r24, r15
    41d4:	9e 2d       	mov	r25, r14
    41d6:	60 e0       	ldi	r22, 0x00	; 0
    41d8:	70 e0       	ldi	r23, 0x00	; 0
    41da:	40 2f       	mov	r20, r16
    41dc:	50 e0       	ldi	r21, 0x00	; 0
    41de:	3e 81       	ldd	r19, Y+6	; 0x06
    41e0:	0e 94 1a 23 	call	0x4634	; 0x4634 <fswriteBytes>
    fswrite8uint(NewNode, FILENAMEOFFSET + namelength, 0);
    41e4:	8f 2d       	mov	r24, r15
    41e6:	9e 2d       	mov	r25, r14
    41e8:	60 2f       	mov	r22, r16
    41ea:	70 e0       	ldi	r23, 0x00	; 0
    41ec:	40 e0       	ldi	r20, 0x00	; 0
    41ee:	0e 94 c5 22 	call	0x458a	; 0x458a <fswrite8uint>
    fswrite8uint(NewNode, FILE_PARENTOFFSET, ret2);
    41f2:	8f 2d       	mov	r24, r15
    41f4:	9e 2d       	mov	r25, r14
    41f6:	6f e1       	ldi	r22, 0x1F	; 31
    41f8:	70 e0       	ldi	r23, 0x00	; 0
    41fa:	4d 2d       	mov	r20, r13
    41fc:	0e 94 c5 22 	call	0x458a	; 0x458a <fswrite8uint>
    addChildNode(ret2, NewNode);
    4200:	8d 2d       	mov	r24, r13
    4202:	6f 2d       	mov	r22, r15
    4204:	0e 94 68 29 	call	0x52d0	; 0x52d0 <addChildNode>
    4208:	0e e0       	ldi	r16, 0x0E	; 14
    420a:	10 e0       	ldi	r17, 0x00	; 0
    for (i = 0; i < 8; i++)
    {
        uint8_t temp, temp1;

        temp = fsread8uint(ret1, FILE_ADDRPAGEOFFSET + i);
    420c:	c5 01       	movw	r24, r10
    420e:	b8 01       	movw	r22, r16
    4210:	0e 94 89 22 	call	0x4512	; 0x4512 <fsread8uint>
    4214:	88 2e       	mov	r8, r24
        if (temp > 0)
    4216:	88 23       	and	r24, r24
    4218:	79 f0       	breq	.+30     	; 0x4238 <fcopy+0xd4>
        {
            temp1 = getFlashPage();
    421a:	0e 94 f5 29 	call	0x53ea	; 0x53ea <getFlashPage>
    421e:	d8 2e       	mov	r13, r24
            fswrite8uint(NewNode, FILE_ADDRPAGEOFFSET + i, temp1);
    4220:	8f 2d       	mov	r24, r15
    4222:	9e 2d       	mov	r25, r14
    4224:	b8 01       	movw	r22, r16
    4226:	4d 2d       	mov	r20, r13
    4228:	0e 94 c5 22 	call	0x458a	; 0x458a <fswrite8uint>
            copyVectorPage(temp, temp1);
    422c:	88 2d       	mov	r24, r8
    422e:	90 e0       	ldi	r25, 0x00	; 0
    4230:	6d 2d       	mov	r22, r13
    4232:	70 e0       	ldi	r23, 0x00	; 0
    4234:	0e 94 d1 25 	call	0x4ba2	; 0x4ba2 <copyVectorPage>
    4238:	0f 5f       	subi	r16, 0xFF	; 255
    423a:	1f 4f       	sbci	r17, 0xFF	; 255
    copyVectorNode(ret1, NewNode);
    fswriteBytes(NewNode, FILENAMEOFFSET, namelength, p);
    fswrite8uint(NewNode, FILENAMEOFFSET + namelength, 0);
    fswrite8uint(NewNode, FILE_PARENTOFFSET, ret2);
    addChildNode(ret2, NewNode);
    for (i = 0; i < 8; i++)
    423c:	06 31       	cpi	r16, 0x16	; 22
    423e:	11 05       	cpc	r17, r1
    4240:	29 f7       	brne	.-54     	; 0x420c <fcopy+0xa8>
            fswrite8uint(NewNode, FILE_ADDRPAGEOFFSET + i, temp1);
            copyVectorPage(temp, temp1);
        }
    }
    return 0;
}
    4242:	80 e0       	ldi	r24, 0x00	; 0
    4244:	90 e0       	ldi	r25, 0x00	; 0
    4246:	26 96       	adiw	r28, 0x06	; 6
    4248:	0f b6       	in	r0, 0x3f	; 63
    424a:	f8 94       	cli
    424c:	de bf       	out	0x3e, r29	; 62
    424e:	0f be       	out	0x3f, r0	; 63
    4250:	cd bf       	out	0x3d, r28	; 61
    4252:	cf 91       	pop	r28
    4254:	df 91       	pop	r29
    4256:	1f 91       	pop	r17
    4258:	0f 91       	pop	r16
    425a:	ff 90       	pop	r15
    425c:	ef 90       	pop	r14
    425e:	df 90       	pop	r13
    4260:	bf 90       	pop	r11
    4262:	af 90       	pop	r10
    4264:	9f 90       	pop	r9
    4266:	8f 90       	pop	r8
    4268:	08 95       	ret

0000426a <fchangedir>:

//-------------------------------------------------------------------------
void fchangedir(char *path)
{
    426a:	df 93       	push	r29
    426c:	cf 93       	push	r28
    426e:	00 d0       	rcall	.+0      	; 0x4270 <fchangedir+0x6>
    4270:	cd b7       	in	r28, 0x3d	; 61
    4272:	de b7       	in	r29, 0x3e	; 62
    int ret, state;

    ret = locateFileName(path, &state);
    4274:	be 01       	movw	r22, r28
    4276:	6f 5f       	subi	r22, 0xFF	; 255
    4278:	7f 4f       	sbci	r23, 0xFF	; 255
    427a:	0e 94 d9 27 	call	0x4fb2	; 0x4fb2 <locateFileName>
    setPwd(ret);
    427e:	0e 94 65 27 	call	0x4eca	; 0x4eca <setPwd>
    return;
}
    4282:	0f 90       	pop	r0
    4284:	0f 90       	pop	r0
    4286:	cf 91       	pop	r28
    4288:	df 91       	pop	r29
    428a:	08 95       	ret

0000428c <fcurrentdir>:

//-------------------------------------------------------------------------
void fcurrentdir(char *buffer, int size)
{
    428c:	5f 92       	push	r5
    428e:	6f 92       	push	r6
    4290:	7f 92       	push	r7
    4292:	8f 92       	push	r8
    4294:	9f 92       	push	r9
    4296:	af 92       	push	r10
    4298:	bf 92       	push	r11
    429a:	cf 92       	push	r12
    429c:	df 92       	push	r13
    429e:	ef 92       	push	r14
    42a0:	ff 92       	push	r15
    42a2:	0f 93       	push	r16
    42a4:	1f 93       	push	r17
    42a6:	df 93       	push	r29
    42a8:	cf 93       	push	r28
    42aa:	cd b7       	in	r28, 0x3d	; 61
    42ac:	de b7       	in	r29, 0x3e	; 62
    42ae:	2d 97       	sbiw	r28, 0x0d	; 13
    42b0:	0f b6       	in	r0, 0x3f	; 63
    42b2:	f8 94       	cli
    42b4:	de bf       	out	0x3e, r29	; 62
    42b6:	0f be       	out	0x3f, r0	; 63
    42b8:	cd bf       	out	0x3d, r28	; 61
    42ba:	3c 01       	movw	r6, r24
    42bc:	7b 01       	movw	r14, r22
    int len;
    char namebuffer[13];
    int i;
    char *q;

    p = buffer + size - 1;
    42be:	08 94       	sec
    42c0:	e1 08       	sbc	r14, r1
    42c2:	f1 08       	sbc	r15, r1
    42c4:	e8 0e       	add	r14, r24
    42c6:	f9 1e       	adc	r15, r25
    *p = '\0';
    42c8:	f7 01       	movw	r30, r14
    42ca:	10 82       	st	Z, r1
    p--;
    42cc:	67 01       	movw	r12, r14
    42ce:	08 94       	sec
    42d0:	c1 08       	sbc	r12, r1
    42d2:	d1 08       	sbc	r13, r1
    currentP = getPwd();
    42d4:	0e 94 60 27 	call	0x4ec0	; 0x4ec0 <getPwd>
    42d8:	5c 01       	movw	r10, r24
    while (1)
    {
        getName(namebuffer, currentP);
    42da:	4e 01       	movw	r8, r28
    42dc:	08 94       	sec
    42de:	81 1c       	adc	r8, r1
    42e0:	91 1c       	adc	r9, r1
        len = mystrlen(namebuffer);
        mystrncpy(p - len, namebuffer, len);
        *p = '/';
    42e2:	af e2       	ldi	r26, 0x2F	; 47
    42e4:	5a 2e       	mov	r5, r26
    *p = '\0';
    p--;
    currentP = getPwd();
    while (1)
    {
        getName(namebuffer, currentP);
    42e6:	c4 01       	movw	r24, r8
    42e8:	b5 01       	movw	r22, r10
    42ea:	0e 94 a6 26 	call	0x4d4c	; 0x4d4c <getName>
        len = mystrlen(namebuffer);
    42ee:	c4 01       	movw	r24, r8
    42f0:	0e 94 d4 36 	call	0x6da8	; 0x6da8 <mystrlen>
    42f4:	48 2f       	mov	r20, r24
        mystrncpy(p - len, namebuffer, len);
    42f6:	08 2f       	mov	r16, r24
    42f8:	19 2f       	mov	r17, r25
    42fa:	c6 01       	movw	r24, r12
    42fc:	80 1b       	sub	r24, r16
    42fe:	91 0b       	sbc	r25, r17
    4300:	b4 01       	movw	r22, r8
    4302:	0e 94 44 36 	call	0x6c88	; 0x6c88 <mystrncpy>
        *p = '/';
    4306:	f6 01       	movw	r30, r12
    4308:	50 82       	st	Z, r5
        p = p - len - 1;
    430a:	00 95       	com	r16
    430c:	10 95       	com	r17
    430e:	c0 0e       	add	r12, r16
    4310:	d1 1e       	adc	r13, r17
        currentP = fsread8uint(currentP, 31);
    4312:	c5 01       	movw	r24, r10
    4314:	6f e1       	ldi	r22, 0x1F	; 31
    4316:	70 e0       	ldi	r23, 0x00	; 0
    4318:	0e 94 89 22 	call	0x4512	; 0x4512 <fsread8uint>
    431c:	a8 2e       	mov	r10, r24
    431e:	bb 24       	eor	r11, r11
        if (currentP == 0)
    4320:	a1 14       	cp	r10, r1
    4322:	b1 04       	cpc	r11, r1
    4324:	01 f7       	brne	.-64     	; 0x42e6 <fcurrentdir+0x5a>
        {
            break;
        }
    }
    *p = '/';
    4326:	f6 01       	movw	r30, r12
    4328:	50 82       	st	Z, r5
    len = buffer + size - 1 - p;
    432a:	ec 18       	sub	r14, r12
    432c:	fd 08       	sbc	r15, r13
    432e:	d6 01       	movw	r26, r12
    q = buffer;
    4330:	f3 01       	movw	r30, r6
    for (i = 0; i < len; i++)
    4332:	80 e0       	ldi	r24, 0x00	; 0
    4334:	90 e0       	ldi	r25, 0x00	; 0
    4336:	03 c0       	rjmp	.+6      	; 0x433e <fcurrentdir+0xb2>
    {
        *q++ = *p++;
    4338:	2d 91       	ld	r18, X+
    433a:	21 93       	st	Z+, r18
        }
    }
    *p = '/';
    len = buffer + size - 1 - p;
    q = buffer;
    for (i = 0; i < len; i++)
    433c:	01 96       	adiw	r24, 0x01	; 1
    433e:	8e 15       	cp	r24, r14
    4340:	9f 05       	cpc	r25, r15
    4342:	d4 f3       	brlt	.-12     	; 0x4338 <fcurrentdir+0xac>
    {
        *q++ = *p++;
    }

    q--;
    *q = '\0';
    4344:	31 97       	sbiw	r30, 0x01	; 1
    4346:	10 82       	st	Z, r1
    return;
}
    4348:	2d 96       	adiw	r28, 0x0d	; 13
    434a:	0f b6       	in	r0, 0x3f	; 63
    434c:	f8 94       	cli
    434e:	de bf       	out	0x3e, r29	; 62
    4350:	0f be       	out	0x3f, r0	; 63
    4352:	cd bf       	out	0x3d, r28	; 61
    4354:	cf 91       	pop	r28
    4356:	df 91       	pop	r29
    4358:	1f 91       	pop	r17
    435a:	0f 91       	pop	r16
    435c:	ff 90       	pop	r15
    435e:	ef 90       	pop	r14
    4360:	df 90       	pop	r13
    4362:	cf 90       	pop	r12
    4364:	bf 90       	pop	r11
    4366:	af 90       	pop	r10
    4368:	9f 90       	pop	r9
    436a:	8f 90       	pop	r8
    436c:	7f 90       	pop	r7
    436e:	6f 90       	pop	r6
    4370:	5f 90       	pop	r5
    4372:	08 95       	ret

00004374 <finfonode>:

//-------------------------------------------------------------------------
void finfonode(char *buffer, int addr)
{
    4374:	0f 93       	push	r16
    4376:	1f 93       	push	r17
    4378:	cf 93       	push	r28
    437a:	df 93       	push	r29
    437c:	8c 01       	movw	r16, r24
    437e:	eb 01       	movw	r28, r22
    fsreadBytes(addr, FILENAMEOFFSET, 12, buffer);
    4380:	cb 01       	movw	r24, r22
    4382:	60 e0       	ldi	r22, 0x00	; 0
    4384:	70 e0       	ldi	r23, 0x00	; 0
    4386:	4c e0       	ldi	r20, 0x0C	; 12
    4388:	50 e0       	ldi	r21, 0x00	; 0
    438a:	98 01       	movw	r18, r16
    438c:	0e 94 0d 23 	call	0x461a	; 0x461a <fsreadBytes>
    buffer[12] = fsread8uint(addr, TYPEOFFSET);
    4390:	ce 01       	movw	r24, r28
    4392:	6c e0       	ldi	r22, 0x0C	; 12
    4394:	70 e0       	ldi	r23, 0x00	; 0
    4396:	0e 94 89 22 	call	0x4512	; 0x4512 <fsread8uint>
    439a:	f8 01       	movw	r30, r16
    439c:	84 87       	std	Z+12, r24	; 0x0c
    buffer[13] = fsread8uint(addr, 29);
    439e:	ce 01       	movw	r24, r28
    43a0:	6d e1       	ldi	r22, 0x1D	; 29
    43a2:	70 e0       	ldi	r23, 0x00	; 0
    43a4:	0e 94 89 22 	call	0x4512	; 0x4512 <fsread8uint>
    43a8:	f8 01       	movw	r30, r16
    43aa:	85 87       	std	Z+13, r24	; 0x0d
    buffer[14] = fsread8uint(addr, 30);
    43ac:	ce 01       	movw	r24, r28
    43ae:	6e e1       	ldi	r22, 0x1E	; 30
    43b0:	70 e0       	ldi	r23, 0x00	; 0
    43b2:	0e 94 89 22 	call	0x4512	; 0x4512 <fsread8uint>
    43b6:	f8 01       	movw	r30, r16
    43b8:	86 87       	std	Z+14, r24	; 0x0e
}
    43ba:	df 91       	pop	r29
    43bc:	cf 91       	pop	r28
    43be:	1f 91       	pop	r17
    43c0:	0f 91       	pop	r16
    43c2:	08 95       	ret

000043c4 <fsearch>:

//-------------------------------------------------------------------------
void fsearch(uint8_t * addrlist, uint8_t * size, char *string)
{
    43c4:	cf 92       	push	r12
    43c6:	df 92       	push	r13
    43c8:	ef 92       	push	r14
    43ca:	ff 92       	push	r15
    43cc:	0f 93       	push	r16
    43ce:	1f 93       	push	r17
    43d0:	df 93       	push	r29
    43d2:	cf 93       	push	r28
    43d4:	0f 92       	push	r0
    43d6:	cd b7       	in	r28, 0x3d	; 61
    43d8:	de b7       	in	r29, 0x3e	; 62
    43da:	8c 01       	movw	r16, r24
    43dc:	6b 01       	movw	r12, r22
    43de:	7a 01       	movw	r14, r20
    uint8_t i;
    uint8_t *p;

    p = addrlist;
    *size = 0;
    43e0:	fb 01       	movw	r30, r22
    43e2:	10 82       	st	Z, r1
    for (i = 1; i <= INODENUM; i++)
    43e4:	21 e0       	ldi	r18, 0x01	; 1
    {
        if (inodeMatch(i, string) == 1)
    43e6:	82 2f       	mov	r24, r18
    43e8:	b7 01       	movw	r22, r14
    43ea:	29 83       	std	Y+1, r18	; 0x01
    43ec:	0e 94 fd 25 	call	0x4bfa	; 0x4bfa <inodeMatch>
    43f0:	29 81       	ldd	r18, Y+1	; 0x01
    43f2:	81 30       	cpi	r24, 0x01	; 1
    43f4:	91 05       	cpc	r25, r1
    43f6:	51 f4       	brne	.+20     	; 0x440c <fsearch+0x48>
        {
            p[*size] = i;
    43f8:	f6 01       	movw	r30, r12
    43fa:	80 81       	ld	r24, Z
    43fc:	f8 01       	movw	r30, r16
    43fe:	e8 0f       	add	r30, r24
    4400:	f1 1d       	adc	r31, r1
    4402:	20 83       	st	Z, r18
            (*size)++;
    4404:	f6 01       	movw	r30, r12
    4406:	80 81       	ld	r24, Z
    4408:	8f 5f       	subi	r24, 0xFF	; 255
    440a:	80 83       	st	Z, r24
    uint8_t i;
    uint8_t *p;

    p = addrlist;
    *size = 0;
    for (i = 1; i <= INODENUM; i++)
    440c:	2f 5f       	subi	r18, 0xFF	; 255
    440e:	21 36       	cpi	r18, 0x61	; 97
    4410:	51 f7       	brne	.-44     	; 0x43e6 <fsearch+0x22>
            p[*size] = i;
            (*size)++;
        }
    }
    return;
}
    4412:	0f 90       	pop	r0
    4414:	cf 91       	pop	r28
    4416:	df 91       	pop	r29
    4418:	1f 91       	pop	r17
    441a:	0f 91       	pop	r16
    441c:	ff 90       	pop	r15
    441e:	ef 90       	pop	r14
    4420:	df 90       	pop	r13
    4422:	cf 90       	pop	r12
    4424:	08 95       	ret

00004426 <formatSystem>:

//-------------------------------------------------------------------------
void formatSystem()
{
    formatFS();
    4426:	0e 94 9b 24 	call	0x4936	; 0x4936 <formatFS>
}
    442a:	08 95       	ret

0000442c <fdirnode>:

//-------------------------------------------------------------------------
void fdirnode(char *buffer, int size, int addr)
{
    442c:	5f 92       	push	r5
    442e:	6f 92       	push	r6
    4430:	7f 92       	push	r7
    4432:	8f 92       	push	r8
    4434:	9f 92       	push	r9
    4436:	af 92       	push	r10
    4438:	bf 92       	push	r11
    443a:	cf 92       	push	r12
    443c:	df 92       	push	r13
    443e:	ef 92       	push	r14
    4440:	ff 92       	push	r15
    4442:	0f 93       	push	r16
    4444:	1f 93       	push	r17
    4446:	df 93       	push	r29
    4448:	cf 93       	push	r28
    444a:	cd b7       	in	r28, 0x3d	; 61
    444c:	de b7       	in	r29, 0x3e	; 62
    444e:	2d 97       	sbiw	r28, 0x0d	; 13
    4450:	0f b6       	in	r0, 0x3f	; 63
    4452:	f8 94       	cli
    4454:	de bf       	out	0x3e, r29	; 62
    4456:	0f be       	out	0x3f, r0	; 63
    4458:	cd bf       	out	0x3d, r28	; 61
    445a:	3c 01       	movw	r6, r24
    445c:	6b 01       	movw	r12, r22
    int len;
    char namebuffer[13];
    int i;
    char *q;

    p = buffer + size - 1;
    445e:	08 94       	sec
    4460:	c1 08       	sbc	r12, r1
    4462:	d1 08       	sbc	r13, r1
    4464:	c8 0e       	add	r12, r24
    4466:	d9 1e       	adc	r13, r25
    *p = '\0';
    4468:	f6 01       	movw	r30, r12
    446a:	10 82       	st	Z, r1
    p--;
    446c:	76 01       	movw	r14, r12
    446e:	08 94       	sec
    4470:	e1 08       	sbc	r14, r1
    4472:	f1 08       	sbc	r15, r1
    currentP = addr;
    4474:	a4 2e       	mov	r10, r20
    4476:	b5 2e       	mov	r11, r21
    while (1)
    {
        getName(namebuffer, currentP);
    4478:	4e 01       	movw	r8, r28
    447a:	08 94       	sec
    447c:	81 1c       	adc	r8, r1
    447e:	91 1c       	adc	r9, r1
        len = mystrlen(namebuffer);
        mystrncpy(p - len, namebuffer, len);
        *p = '/';
    4480:	bf e2       	ldi	r27, 0x2F	; 47
    4482:	5b 2e       	mov	r5, r27
    *p = '\0';
    p--;
    currentP = addr;
    while (1)
    {
        getName(namebuffer, currentP);
    4484:	c4 01       	movw	r24, r8
    4486:	b5 01       	movw	r22, r10
    4488:	0e 94 a6 26 	call	0x4d4c	; 0x4d4c <getName>
        len = mystrlen(namebuffer);
    448c:	c4 01       	movw	r24, r8
    448e:	0e 94 d4 36 	call	0x6da8	; 0x6da8 <mystrlen>
    4492:	48 2f       	mov	r20, r24
        mystrncpy(p - len, namebuffer, len);
    4494:	08 2f       	mov	r16, r24
    4496:	19 2f       	mov	r17, r25
    4498:	c7 01       	movw	r24, r14
    449a:	80 1b       	sub	r24, r16
    449c:	91 0b       	sbc	r25, r17
    449e:	b4 01       	movw	r22, r8
    44a0:	0e 94 44 36 	call	0x6c88	; 0x6c88 <mystrncpy>
        *p = '/';
    44a4:	f7 01       	movw	r30, r14
    44a6:	50 82       	st	Z, r5
        p = p - len - 1;
    44a8:	00 95       	com	r16
    44aa:	10 95       	com	r17
    44ac:	e0 0e       	add	r14, r16
    44ae:	f1 1e       	adc	r15, r17
        currentP = fsread8uint(currentP, 31);
    44b0:	c5 01       	movw	r24, r10
    44b2:	6f e1       	ldi	r22, 0x1F	; 31
    44b4:	70 e0       	ldi	r23, 0x00	; 0
    44b6:	0e 94 89 22 	call	0x4512	; 0x4512 <fsread8uint>
    44ba:	a8 2e       	mov	r10, r24
    44bc:	bb 24       	eor	r11, r11
        if (currentP == 0)
    44be:	a1 14       	cp	r10, r1
    44c0:	b1 04       	cpc	r11, r1
    44c2:	01 f7       	brne	.-64     	; 0x4484 <fdirnode+0x58>
        {
            break;
        }
    }
    *p = '/';
    44c4:	f7 01       	movw	r30, r14
    44c6:	50 82       	st	Z, r5
    len = buffer + size - 1 - p;
    44c8:	ce 18       	sub	r12, r14
    44ca:	df 08       	sbc	r13, r15
    44cc:	d7 01       	movw	r26, r14
    q = buffer;
    44ce:	f3 01       	movw	r30, r6
    for (i = 0; i < len; i++)
    44d0:	80 e0       	ldi	r24, 0x00	; 0
    44d2:	90 e0       	ldi	r25, 0x00	; 0
    44d4:	03 c0       	rjmp	.+6      	; 0x44dc <fdirnode+0xb0>
    {
        *q++ = *p++;
    44d6:	2d 91       	ld	r18, X+
    44d8:	21 93       	st	Z+, r18
        }
    }
    *p = '/';
    len = buffer + size - 1 - p;
    q = buffer;
    for (i = 0; i < len; i++)
    44da:	01 96       	adiw	r24, 0x01	; 1
    44dc:	8c 15       	cp	r24, r12
    44de:	9d 05       	cpc	r25, r13
    44e0:	d4 f3       	brlt	.-12     	; 0x44d6 <fdirnode+0xaa>
    {
        *q++ = *p++;
    }

    q--;
    *q = '\0';
    44e2:	31 97       	sbiw	r30, 0x01	; 1
    44e4:	10 82       	st	Z, r1
    return;
}
    44e6:	2d 96       	adiw	r28, 0x0d	; 13
    44e8:	0f b6       	in	r0, 0x3f	; 63
    44ea:	f8 94       	cli
    44ec:	de bf       	out	0x3e, r29	; 62
    44ee:	0f be       	out	0x3f, r0	; 63
    44f0:	cd bf       	out	0x3d, r28	; 61
    44f2:	cf 91       	pop	r28
    44f4:	df 91       	pop	r29
    44f6:	1f 91       	pop	r17
    44f8:	0f 91       	pop	r16
    44fa:	ff 90       	pop	r15
    44fc:	ef 90       	pop	r14
    44fe:	df 90       	pop	r13
    4500:	cf 90       	pop	r12
    4502:	bf 90       	pop	r11
    4504:	af 90       	pop	r10
    4506:	9f 90       	pop	r9
    4508:	8f 90       	pop	r8
    450a:	7f 90       	pop	r7
    450c:	6f 90       	pop	r6
    450e:	5f 90       	pop	r5
    4510:	08 95       	ret

00004512 <fsread8uint>:
//-------------------------------------------------------------------------
uint8_t fsread8uint(int inode, int offset)
{
    uint16_t addr;

    addr = inode * INODESIZE + offset;
    4512:	25 e0       	ldi	r18, 0x05	; 5
    4514:	88 0f       	add	r24, r24
    4516:	99 1f       	adc	r25, r25
    4518:	2a 95       	dec	r18
    451a:	e1 f7       	brne	.-8      	; 0x4514 <fsread8uint+0x2>
    return read8uint(addr);
    451c:	86 0f       	add	r24, r22
    451e:	97 1f       	adc	r25, r23
    4520:	0e 94 9b 1a 	call	0x3536	; 0x3536 <read8uint>
}
    4524:	08 95       	ret

00004526 <fsread8int>:
//-------------------------------------------------------------------------
int8_t fsread8int(int inode, int offset)
{
    uint16_t addr;

    addr = inode * INODESIZE + offset;
    4526:	35 e0       	ldi	r19, 0x05	; 5
    4528:	88 0f       	add	r24, r24
    452a:	99 1f       	adc	r25, r25
    452c:	3a 95       	dec	r19
    452e:	e1 f7       	brne	.-8      	; 0x4528 <fsread8int+0x2>
    return read8int(addr);
    4530:	86 0f       	add	r24, r22
    4532:	97 1f       	adc	r25, r23
    4534:	0e 94 9e 1a 	call	0x353c	; 0x353c <read8int>
}
    4538:	08 95       	ret

0000453a <fsread16uint>:
//-------------------------------------------------------------------------
uint16_t fsread16uint(int inode, int offset)
{
    uint16_t addr;

    addr = inode * INODESIZE + offset;
    453a:	45 e0       	ldi	r20, 0x05	; 5
    453c:	88 0f       	add	r24, r24
    453e:	99 1f       	adc	r25, r25
    4540:	4a 95       	dec	r20
    4542:	e1 f7       	brne	.-8      	; 0x453c <fsread16uint+0x2>
    return read16uint(addr);
    4544:	86 0f       	add	r24, r22
    4546:	97 1f       	adc	r25, r23
    4548:	0e 94 a1 1a 	call	0x3542	; 0x3542 <read16uint>
}
    454c:	08 95       	ret

0000454e <fsread16int>:
//-------------------------------------------------------------------------
int16_t fsread16int(int inode, int offset)
{
    uint16_t addr;

    addr = inode * INODESIZE + offset;
    454e:	55 e0       	ldi	r21, 0x05	; 5
    4550:	88 0f       	add	r24, r24
    4552:	99 1f       	adc	r25, r25
    4554:	5a 95       	dec	r21
    4556:	e1 f7       	brne	.-8      	; 0x4550 <fsread16int+0x2>
    return read16int(addr);
    4558:	86 0f       	add	r24, r22
    455a:	97 1f       	adc	r25, r23
    455c:	0e 94 a4 1a 	call	0x3548	; 0x3548 <read16int>
}
    4560:	08 95       	ret

00004562 <fsread32uint>:
//-------------------------------------------------------------------------
uint32_t fsread32uint(int inode, int offset)
{
    uint16_t addr;

    addr = inode * INODESIZE + offset;
    4562:	e5 e0       	ldi	r30, 0x05	; 5
    4564:	88 0f       	add	r24, r24
    4566:	99 1f       	adc	r25, r25
    4568:	ea 95       	dec	r30
    456a:	e1 f7       	brne	.-8      	; 0x4564 <fsread32uint+0x2>
    return read32uint(addr);
    456c:	86 0f       	add	r24, r22
    456e:	97 1f       	adc	r25, r23
    4570:	0e 94 a7 1a 	call	0x354e	; 0x354e <read32uint>
}
    4574:	08 95       	ret

00004576 <fsread32int>:
//-------------------------------------------------------------------------
int32_t fsread32int(int inode, int offset)
{
    uint16_t addr;

    addr = inode * INODESIZE + offset;
    4576:	f5 e0       	ldi	r31, 0x05	; 5
    4578:	88 0f       	add	r24, r24
    457a:	99 1f       	adc	r25, r25
    457c:	fa 95       	dec	r31
    457e:	e1 f7       	brne	.-8      	; 0x4578 <fsread32int+0x2>
    return read32int(addr);
    4580:	86 0f       	add	r24, r22
    4582:	97 1f       	adc	r25, r23
    4584:	0e 94 aa 1a 	call	0x3554	; 0x3554 <read32int>
}
    4588:	08 95       	ret

0000458a <fswrite8uint>:
//-------------------------------------------------------------------------
void fswrite8uint(int inode, int offset, uint8_t value)
{
    uint16_t addr;

    addr = inode * INODESIZE + offset;
    458a:	a5 e0       	ldi	r26, 0x05	; 5
    458c:	88 0f       	add	r24, r24
    458e:	99 1f       	adc	r25, r25
    4590:	aa 95       	dec	r26
    4592:	e1 f7       	brne	.-8      	; 0x458c <fswrite8uint+0x2>
    write8uint(addr, value);
    4594:	86 0f       	add	r24, r22
    4596:	97 1f       	adc	r25, r23
    4598:	64 2f       	mov	r22, r20
    459a:	0e 94 ad 1a 	call	0x355a	; 0x355a <write8uint>
}
    459e:	08 95       	ret

000045a0 <fswrite8int>:
//-------------------------------------------------------------------------
void fswrite8int(int inode, int offset, int8_t value)
{
    uint16_t addr;

    addr = inode * INODESIZE + offset;
    45a0:	b5 e0       	ldi	r27, 0x05	; 5
    45a2:	88 0f       	add	r24, r24
    45a4:	99 1f       	adc	r25, r25
    45a6:	ba 95       	dec	r27
    45a8:	e1 f7       	brne	.-8      	; 0x45a2 <fswrite8int+0x2>
    write8int(addr, value);
    45aa:	86 0f       	add	r24, r22
    45ac:	97 1f       	adc	r25, r23
    45ae:	64 2f       	mov	r22, r20
    45b0:	0e 94 b0 1a 	call	0x3560	; 0x3560 <write8int>
}
    45b4:	08 95       	ret

000045b6 <fswrite16uint>:

//-------------------------------------------------------------------------
void fswrite16uint(int inode, int offset, uint16_t value)
{
    45b6:	9b 01       	movw	r18, r22
    45b8:	ba 01       	movw	r22, r20
    uint16_t addr;

    addr = inode * INODESIZE + offset;
    45ba:	45 e0       	ldi	r20, 0x05	; 5
    45bc:	88 0f       	add	r24, r24
    45be:	99 1f       	adc	r25, r25
    45c0:	4a 95       	dec	r20
    45c2:	e1 f7       	brne	.-8      	; 0x45bc <fswrite16uint+0x6>
    write16uint(addr, value);
    45c4:	82 0f       	add	r24, r18
    45c6:	93 1f       	adc	r25, r19
    45c8:	0e 94 b3 1a 	call	0x3566	; 0x3566 <write16uint>
}
    45cc:	08 95       	ret

000045ce <fswrite16int>:

//-------------------------------------------------------------------------
void fswrite16int(int inode, int offset, int16_t value)
{
    45ce:	9b 01       	movw	r18, r22
    45d0:	ba 01       	movw	r22, r20
    uint16_t addr;

    addr = inode * INODESIZE + offset;
    45d2:	55 e0       	ldi	r21, 0x05	; 5
    45d4:	88 0f       	add	r24, r24
    45d6:	99 1f       	adc	r25, r25
    45d8:	5a 95       	dec	r21
    45da:	e1 f7       	brne	.-8      	; 0x45d4 <fswrite16int+0x6>
    write16int(addr, value);
    45dc:	82 0f       	add	r24, r18
    45de:	93 1f       	adc	r25, r19
    45e0:	0e 94 b6 1a 	call	0x356c	; 0x356c <write16int>
}
    45e4:	08 95       	ret

000045e6 <fswrite32uint>:

//-------------------------------------------------------------------------
void fswrite32uint(int inode, int offset, uint32_t value)
{
    45e6:	fb 01       	movw	r30, r22
    45e8:	ba 01       	movw	r22, r20
    45ea:	a9 01       	movw	r20, r18
    uint16_t addr;

    addr = inode * INODESIZE + offset;
    45ec:	a5 e0       	ldi	r26, 0x05	; 5
    45ee:	88 0f       	add	r24, r24
    45f0:	99 1f       	adc	r25, r25
    45f2:	aa 95       	dec	r26
    45f4:	e1 f7       	brne	.-8      	; 0x45ee <fswrite32uint+0x8>
    write32uint(addr, value);
    45f6:	8e 0f       	add	r24, r30
    45f8:	9f 1f       	adc	r25, r31
    45fa:	0e 94 b9 1a 	call	0x3572	; 0x3572 <write32uint>
}
    45fe:	08 95       	ret

00004600 <fswrite32int>:

//-------------------------------------------------------------------------
void fswrite32int(int inode, int offset, int32_t value)
{
    4600:	fb 01       	movw	r30, r22
    4602:	ba 01       	movw	r22, r20
    4604:	a9 01       	movw	r20, r18
    uint16_t addr;

    addr = inode * INODESIZE + offset;
    4606:	b5 e0       	ldi	r27, 0x05	; 5
    4608:	88 0f       	add	r24, r24
    460a:	99 1f       	adc	r25, r25
    460c:	ba 95       	dec	r27
    460e:	e1 f7       	brne	.-8      	; 0x4608 <fswrite32int+0x8>
    write32uint(addr, value);
    4610:	8e 0f       	add	r24, r30
    4612:	9f 1f       	adc	r25, r31
    4614:	0e 94 b9 1a 	call	0x3572	; 0x3572 <write32uint>
}
    4618:	08 95       	ret

0000461a <fsreadBytes>:

//-------------------------------------------------------------------------
void fsreadBytes(int inode, int offset, int nBytes, void *buffer)
{
    461a:	fb 01       	movw	r30, r22
    461c:	ba 01       	movw	r22, r20
    uint16_t addr;

    addr = inode * INODESIZE + offset;
    461e:	45 e0       	ldi	r20, 0x05	; 5
    4620:	88 0f       	add	r24, r24
    4622:	99 1f       	adc	r25, r25
    4624:	4a 95       	dec	r20
    4626:	e1 f7       	brne	.-8      	; 0x4620 <fsreadBytes+0x6>
    genericreadBytes(addr, nBytes, buffer);
    4628:	8e 0f       	add	r24, r30
    462a:	9f 1f       	adc	r25, r31
    462c:	a9 01       	movw	r20, r18
    462e:	0e 94 92 1a 	call	0x3524	; 0x3524 <genericreadBytes>
}
    4632:	08 95       	ret

00004634 <fswriteBytes>:

//-------------------------------------------------------------------------
void fswriteBytes(int inode, int offset, int nBytes, void *buffer)
{
    4634:	fb 01       	movw	r30, r22
    4636:	ba 01       	movw	r22, r20
    uint16_t addr;

    addr = inode * INODESIZE + offset;
    4638:	55 e0       	ldi	r21, 0x05	; 5
    463a:	88 0f       	add	r24, r24
    463c:	99 1f       	adc	r25, r25
    463e:	5a 95       	dec	r21
    4640:	e1 f7       	brne	.-8      	; 0x463a <fswriteBytes+0x6>
    genericwriteBytes(addr, nBytes, buffer);
    4642:	8e 0f       	add	r24, r30
    4644:	9f 1f       	adc	r25, r31
    4646:	a9 01       	movw	r20, r18
    4648:	0e 94 95 1a 	call	0x352a	; 0x352a <genericwriteBytes>
}
    464c:	08 95       	ret

0000464e <fsinitBytes>:

//-------------------------------------------------------------------------
void fsinitBytes(int inode, int offset, int nBytes, uint8_t value)
{
    464e:	fb 01       	movw	r30, r22
    4650:	ba 01       	movw	r22, r20
    uint16_t addr;

    addr = inode * INODESIZE + offset;
    4652:	a5 e0       	ldi	r26, 0x05	; 5
    4654:	88 0f       	add	r24, r24
    4656:	99 1f       	adc	r25, r25
    4658:	aa 95       	dec	r26
    465a:	e1 f7       	brne	.-8      	; 0x4654 <fsinitBytes+0x6>
    initBytes(addr, nBytes, value);
    465c:	8e 0f       	add	r24, r30
    465e:	9f 1f       	adc	r25, r31
    4660:	42 2f       	mov	r20, r18
    4662:	0e 94 98 1a 	call	0x3530	; 0x3530 <initBytes>
}
    4666:	08 95       	ret

00004668 <extractString>:
{
    char *p, *q;

    q = buffer;
    p = start;
    if (*p == '/')
    4668:	fc 01       	movw	r30, r24
    466a:	20 81       	ld	r18, Z
    466c:	2f 32       	cpi	r18, 0x2F	; 47
    466e:	09 f4       	brne	.+2      	; 0x4672 <extractString+0xa>
    {
        p++;
    4670:	01 96       	adiw	r24, 0x01	; 1
    4672:	fc 01       	movw	r30, r24
char *extractString(char *start, char *buffer)
{
    char *p, *q;

    q = buffer;
    p = start;
    4674:	a6 2f       	mov	r26, r22
    4676:	b7 2f       	mov	r27, r23
    4678:	01 c0       	rjmp	.+2      	; 0x467c <extractString+0x14>
    {
        p++;
    }
    while ((isLetter(*p)) || (*p == '_') || (*p == '.') || (isDigit(*p)))
    {
        *q++ = *p++;
    467a:	2d 93       	st	X+, r18
    467c:	cf 01       	movw	r24, r30
    p = start;
    if (*p == '/')
    {
        p++;
    }
    while ((isLetter(*p)) || (*p == '_') || (*p == '.') || (isDigit(*p)))
    467e:	21 91       	ld	r18, Z+
    4680:	32 2f       	mov	r19, r18
    4682:	31 56       	subi	r19, 0x61	; 97
    4684:	3a 31       	cpi	r19, 0x1A	; 26
    4686:	c8 f3       	brcs	.-14     	; 0x467a <extractString+0x12>
    4688:	30 5e       	subi	r19, 0xE0	; 224
    468a:	3a 31       	cpi	r19, 0x1A	; 26
    468c:	b0 f3       	brcs	.-20     	; 0x467a <extractString+0x12>
    468e:	2f 35       	cpi	r18, 0x5F	; 95
    4690:	a1 f3       	breq	.-24     	; 0x467a <extractString+0x12>
    4692:	2e 32       	cpi	r18, 0x2E	; 46
    4694:	91 f3       	breq	.-28     	; 0x467a <extractString+0x12>
    4696:	3f 5e       	subi	r19, 0xEF	; 239
    4698:	3a 30       	cpi	r19, 0x0A	; 10
    469a:	78 f3       	brcs	.-34     	; 0x467a <extractString+0x12>
    {
        *q++ = *p++;
    }

    *q = '\0';
    469c:	1c 92       	st	X, r1
    return p;
}
    469e:	08 95       	ret

000046a0 <extractLastName>:

//-------------------------------------------------------------------------
char *extractLastName(char *pathname)
{
    46a0:	cf 93       	push	r28
    46a2:	df 93       	push	r29
    46a4:	ec 01       	movw	r28, r24
    char *p, *start;
    int length;

    length = mystrlen(pathname);
    46a6:	0e 94 d4 36 	call	0x6da8	; 0x6da8 <mystrlen>
    p = pathname + (length - 1);
    46aa:	fc 01       	movw	r30, r24
    46ac:	31 97       	sbiw	r30, 0x01	; 1
    46ae:	ec 0f       	add	r30, r28
    46b0:	fd 1f       	adc	r31, r29
    start = pathname;
    while ((*p != '/') && (p != start))
    46b2:	01 c0       	rjmp	.+2      	; 0x46b6 <extractLastName+0x16>
    {
        p--;
    46b4:	31 97       	sbiw	r30, 0x01	; 1
    int length;

    length = mystrlen(pathname);
    p = pathname + (length - 1);
    start = pathname;
    while ((*p != '/') && (p != start))
    46b6:	80 81       	ld	r24, Z
    46b8:	8f 32       	cpi	r24, 0x2F	; 47
    46ba:	21 f0       	breq	.+8      	; 0x46c4 <extractLastName+0x24>
    46bc:	ec 17       	cp	r30, r28
    46be:	fd 07       	cpc	r31, r29
    46c0:	c9 f7       	brne	.-14     	; 0x46b4 <extractLastName+0x14>
    46c2:	01 c0       	rjmp	.+2      	; 0x46c6 <extractLastName+0x26>
    {
        return p;
    }
    else
    {
        return ++p;
    46c4:	31 96       	adiw	r30, 0x01	; 1
    }
}
    46c6:	cf 01       	movw	r24, r30
    46c8:	df 91       	pop	r29
    46ca:	cf 91       	pop	r28
    46cc:	08 95       	ret

000046ce <fileMode>:

//-------------------------------------------------------------------------
int fileMode(char *s)
{
    46ce:	cf 93       	push	r28
    46d0:	df 93       	push	r29
    46d2:	ec 01       	movw	r28, r24
    if (mystrlen(s) == 1)
    46d4:	0e 94 d4 36 	call	0x6da8	; 0x6da8 <mystrlen>
    46d8:	81 30       	cpi	r24, 0x01	; 1
    46da:	91 05       	cpc	r25, r1
    46dc:	61 f4       	brne	.+24     	; 0x46f6 <fileMode+0x28>
    {
        if (s[0] == 'r')
    46de:	88 81       	ld	r24, Y
    46e0:	82 37       	cpi	r24, 0x72	; 114
    46e2:	91 f0       	breq	.+36     	; 0x4708 <fileMode+0x3a>
        {
            return 1;
        }

        if (s[0] == 'w')
    46e4:	87 37       	cpi	r24, 0x77	; 119
    46e6:	99 f0       	breq	.+38     	; 0x470e <fileMode+0x40>
        {
            return 2;
        }

        if (s[0] == 'a')
    46e8:	81 36       	cpi	r24, 0x61	; 97
    46ea:	a1 f0       	breq	.+40     	; 0x4714 <fileMode+0x46>
        {
            return 3;
        }

        if (s[0] == 't')
    46ec:	84 37       	cpi	r24, 0x74	; 116
    46ee:	a9 f4       	brne	.+42     	; 0x471a <fileMode+0x4c>
        {
            return 4;
    46f0:	24 e0       	ldi	r18, 0x04	; 4
    46f2:	30 e0       	ldi	r19, 0x00	; 0
    46f4:	14 c0       	rjmp	.+40     	; 0x471e <fileMode+0x50>
        }
    }
    else if (mystrlen(s) == 2)
    46f6:	ce 01       	movw	r24, r28
    46f8:	0e 94 d4 36 	call	0x6da8	; 0x6da8 <mystrlen>
    46fc:	82 30       	cpi	r24, 0x02	; 2
    46fe:	91 05       	cpc	r25, r1
    4700:	61 f4       	brne	.+24     	; 0x471a <fileMode+0x4c>
    {
        return 5;
    4702:	25 e0       	ldi	r18, 0x05	; 5
    4704:	30 e0       	ldi	r19, 0x00	; 0
    4706:	0b c0       	rjmp	.+22     	; 0x471e <fileMode+0x50>
{
    if (mystrlen(s) == 1)
    {
        if (s[0] == 'r')
        {
            return 1;
    4708:	21 e0       	ldi	r18, 0x01	; 1
    470a:	30 e0       	ldi	r19, 0x00	; 0
    470c:	08 c0       	rjmp	.+16     	; 0x471e <fileMode+0x50>
        }

        if (s[0] == 'w')
        {
            return 2;
    470e:	22 e0       	ldi	r18, 0x02	; 2
    4710:	30 e0       	ldi	r19, 0x00	; 0
    4712:	05 c0       	rjmp	.+10     	; 0x471e <fileMode+0x50>
        }

        if (s[0] == 'a')
        {
            return 3;
    4714:	23 e0       	ldi	r18, 0x03	; 3
    4716:	30 e0       	ldi	r19, 0x00	; 0
    4718:	02 c0       	rjmp	.+4      	; 0x471e <fileMode+0x50>
    {
        return 5;
    }
    else
    {
        return 0;
    471a:	20 e0       	ldi	r18, 0x00	; 0
    471c:	30 e0       	ldi	r19, 0x00	; 0
    }
    return 0;
}
    471e:	c9 01       	movw	r24, r18
    4720:	df 91       	pop	r29
    4722:	cf 91       	pop	r28
    4724:	08 95       	ret

00004726 <checkNodeValid>:




int checkNodeValid(int nodeaddr)
{
    4726:	1f 93       	push	r17
    4728:	cf 93       	push	r28
    472a:	df 93       	push	r29
    472c:	ec 01       	movw	r28, r24
    uint8_t validness;
    uint8_t nodetype;

    validness = fsread8uint(nodeaddr, VALIDOFFSET);
    472e:	6d e0       	ldi	r22, 0x0D	; 13
    4730:	70 e0       	ldi	r23, 0x00	; 0
    4732:	0e 94 89 22 	call	0x4512	; 0x4512 <fsread8uint>
    4736:	18 2f       	mov	r17, r24
    nodetype = fsread8uint(nodeaddr, TYPEOFFSET);
    4738:	ce 01       	movw	r24, r28
    473a:	6c e0       	ldi	r22, 0x0C	; 12
    473c:	70 e0       	ldi	r23, 0x00	; 0
    473e:	0e 94 89 22 	call	0x4512	; 0x4512 <fsread8uint>
    if (validness == 0)
    4742:	11 23       	and	r17, r17
    4744:	19 f0       	breq	.+6      	; 0x474c <checkNodeValid+0x26>
    {
        return 0;
    }
    else
    {
        return (int)nodetype;
    4746:	28 2f       	mov	r18, r24
    4748:	30 e0       	ldi	r19, 0x00	; 0
    474a:	02 c0       	rjmp	.+4      	; 0x4750 <checkNodeValid+0x2a>

    validness = fsread8uint(nodeaddr, VALIDOFFSET);
    nodetype = fsread8uint(nodeaddr, TYPEOFFSET);
    if (validness == 0)
    {
        return 0;
    474c:	20 e0       	ldi	r18, 0x00	; 0
    474e:	30 e0       	ldi	r19, 0x00	; 0
    }
    else
    {
        return (int)nodetype;
    }
}
    4750:	c9 01       	movw	r24, r18
    4752:	df 91       	pop	r29
    4754:	cf 91       	pop	r28
    4756:	1f 91       	pop	r17
    4758:	08 95       	ret

0000475a <buildNewNode>:

//-------------------------------------------------------------------------
void buildNewNode(int addr, char *name, uint8_t uid, uint8_t parent, uint8_t
                  type)
{
    475a:	df 92       	push	r13
    475c:	ef 92       	push	r14
    475e:	ff 92       	push	r15
    4760:	0f 93       	push	r16
    4762:	1f 93       	push	r17
    4764:	cf 93       	push	r28
    4766:	df 93       	push	r29
    4768:	ec 01       	movw	r28, r24
    476a:	7b 01       	movw	r14, r22
    476c:	14 2f       	mov	r17, r20
    476e:	d2 2e       	mov	r13, r18
    uint8_t namelength;

    namelength = mystrlen(name);
    4770:	cb 01       	movw	r24, r22
    4772:	0e 94 d4 36 	call	0x6da8	; 0x6da8 <mystrlen>
    4776:	48 2f       	mov	r20, r24
    if (namelength < 12)
    4778:	8c 30       	cpi	r24, 0x0C	; 12
    477a:	08 f4       	brcc	.+2      	; 0x477e <buildNewNode+0x24>
    {
        namelength++;
    477c:	4f 5f       	subi	r20, 0xFF	; 255
    }
    //consider several types of type
    if (type == DIRNODE)
    477e:	01 30       	cpi	r16, 0x01	; 1
    4780:	61 f4       	brne	.+24     	; 0x479a <buildNewNode+0x40>
    {
        fswriteBytes(addr, FILENAMEOFFSET, namelength, name);
    4782:	ce 01       	movw	r24, r28
    4784:	60 e0       	ldi	r22, 0x00	; 0
    4786:	70 e0       	ldi	r23, 0x00	; 0
    4788:	50 e0       	ldi	r21, 0x00	; 0
    478a:	97 01       	movw	r18, r14
    478c:	0e 94 1a 23 	call	0x4634	; 0x4634 <fswriteBytes>
        fswrite8uint(addr, TYPEOFFSET, type);
    4790:	ce 01       	movw	r24, r28
    4792:	6c e0       	ldi	r22, 0x0C	; 12
    4794:	70 e0       	ldi	r23, 0x00	; 0
    4796:	41 e0       	ldi	r20, 0x01	; 1
    4798:	29 c0       	rjmp	.+82     	; 0x47ec <buildNewNode+0x92>
        fsinitBytes(addr, DIR_ADDRSUBOFFSET, 14, 0);
        fswrite8uint(addr, DIR_UIDOFFSET, uid);
        fswrite16uint(addr, DIR_SIZEOFFSET, 0);
        fswrite8uint(addr, DIR_PARENTOFFSET, parent);
    }
    else if (type == FILENODE)
    479a:	02 30       	cpi	r16, 0x02	; 2
    479c:	61 f4       	brne	.+24     	; 0x47b6 <buildNewNode+0x5c>
    {
        fswriteBytes(addr, FILENAMEOFFSET, namelength, name);
    479e:	ce 01       	movw	r24, r28
    47a0:	60 e0       	ldi	r22, 0x00	; 0
    47a2:	70 e0       	ldi	r23, 0x00	; 0
    47a4:	50 e0       	ldi	r21, 0x00	; 0
    47a6:	97 01       	movw	r18, r14
    47a8:	0e 94 1a 23 	call	0x4634	; 0x4634 <fswriteBytes>
        fswrite8uint(addr, TYPEOFFSET, type);
    47ac:	ce 01       	movw	r24, r28
    47ae:	6c e0       	ldi	r22, 0x0C	; 12
    47b0:	70 e0       	ldi	r23, 0x00	; 0
    47b2:	42 e0       	ldi	r20, 0x02	; 2
    47b4:	1b c0       	rjmp	.+54     	; 0x47ec <buildNewNode+0x92>
        fsinitBytes(addr, FILE_ADDRPAGEOFFSET, 14, 0);
        fswrite8uint(addr, FILE_UIDOFFSET, uid);
        fswrite16uint(addr, FILE_SIZEOFFSET, 0);
        fswrite8uint(addr, FILE_PARENTOFFSET, parent);
    }
    else if (type == DEVNODE)
    47b6:	03 30       	cpi	r16, 0x03	; 3
    47b8:	61 f4       	brne	.+24     	; 0x47d2 <buildNewNode+0x78>
    {
        fswriteBytes(addr, FILENAMEOFFSET, namelength, name);
    47ba:	ce 01       	movw	r24, r28
    47bc:	60 e0       	ldi	r22, 0x00	; 0
    47be:	70 e0       	ldi	r23, 0x00	; 0
    47c0:	50 e0       	ldi	r21, 0x00	; 0
    47c2:	97 01       	movw	r18, r14
    47c4:	0e 94 1a 23 	call	0x4634	; 0x4634 <fswriteBytes>
        fswrite8uint(addr, TYPEOFFSET, type);
    47c8:	ce 01       	movw	r24, r28
    47ca:	6c e0       	ldi	r22, 0x0C	; 12
    47cc:	70 e0       	ldi	r23, 0x00	; 0
    47ce:	43 e0       	ldi	r20, 0x03	; 3
    47d0:	0d c0       	rjmp	.+26     	; 0x47ec <buildNewNode+0x92>
        fsinitBytes(addr, DEV_PROGRAMENTRYOFFSET, 14, 0);
        fswrite8uint(addr, DEV_UIDOFFSET, uid);
        fswrite16uint(addr, DEV_SIZEOFFSET, 0);
        fswrite8uint(addr, DEV_PARENTOFFSET, parent);
    }
    else if (type == APPNODE)
    47d2:	04 30       	cpi	r16, 0x04	; 4
    47d4:	71 f5       	brne	.+92     	; 0x4832 <buildNewNode+0xd8>
    {
        fswriteBytes(addr, FILENAMEOFFSET, namelength, name);
    47d6:	ce 01       	movw	r24, r28
    47d8:	60 e0       	ldi	r22, 0x00	; 0
    47da:	70 e0       	ldi	r23, 0x00	; 0
    47dc:	50 e0       	ldi	r21, 0x00	; 0
    47de:	97 01       	movw	r18, r14
    47e0:	0e 94 1a 23 	call	0x4634	; 0x4634 <fswriteBytes>
        fswrite8uint(addr, TYPEOFFSET, type);
    47e4:	ce 01       	movw	r24, r28
    47e6:	6c e0       	ldi	r22, 0x0C	; 12
    47e8:	70 e0       	ldi	r23, 0x00	; 0
    47ea:	44 e0       	ldi	r20, 0x04	; 4
    47ec:	0e 94 c5 22 	call	0x458a	; 0x458a <fswrite8uint>
        fswrite8uint(addr, VALIDOFFSET, 1);
    47f0:	ce 01       	movw	r24, r28
    47f2:	6d e0       	ldi	r22, 0x0D	; 13
    47f4:	70 e0       	ldi	r23, 0x00	; 0
    47f6:	41 e0       	ldi	r20, 0x01	; 1
    47f8:	0e 94 c5 22 	call	0x458a	; 0x458a <fswrite8uint>
        fsinitBytes(addr, APP_ENTRYOFFSET, 14, 0);
    47fc:	ce 01       	movw	r24, r28
    47fe:	6e e0       	ldi	r22, 0x0E	; 14
    4800:	70 e0       	ldi	r23, 0x00	; 0
    4802:	4e e0       	ldi	r20, 0x0E	; 14
    4804:	50 e0       	ldi	r21, 0x00	; 0
    4806:	20 e0       	ldi	r18, 0x00	; 0
    4808:	0e 94 27 23 	call	0x464e	; 0x464e <fsinitBytes>
        fswrite8uint(addr, APP_UIDOFFSET, uid);
    480c:	ce 01       	movw	r24, r28
    480e:	6c e1       	ldi	r22, 0x1C	; 28
    4810:	70 e0       	ldi	r23, 0x00	; 0
    4812:	41 2f       	mov	r20, r17
    4814:	0e 94 c5 22 	call	0x458a	; 0x458a <fswrite8uint>
        fswrite16uint(addr, APP_SIZEOFFSET, 0);
    4818:	ce 01       	movw	r24, r28
    481a:	6d e1       	ldi	r22, 0x1D	; 29
    481c:	70 e0       	ldi	r23, 0x00	; 0
    481e:	40 e0       	ldi	r20, 0x00	; 0
    4820:	50 e0       	ldi	r21, 0x00	; 0
    4822:	0e 94 db 22 	call	0x45b6	; 0x45b6 <fswrite16uint>
        fswrite8uint(addr, APP_PARENTOFFSET, parent);
    4826:	ce 01       	movw	r24, r28
    4828:	6f e1       	ldi	r22, 0x1F	; 31
    482a:	70 e0       	ldi	r23, 0x00	; 0
    482c:	4d 2d       	mov	r20, r13
    482e:	0e 94 c5 22 	call	0x458a	; 0x458a <fswrite8uint>
    }
    if ((addr == 0) && (parent == 0))
    4832:	20 97       	sbiw	r28, 0x00	; 0
    4834:	11 f4       	brne	.+4      	; 0x483a <buildNewNode+0xe0>
    4836:	dd 20       	and	r13, r13
    4838:	a9 f0       	breq	.+42     	; 0x4864 <buildNewNode+0x10a>
    483a:	0e e0       	ldi	r16, 0x0E	; 14
    483c:	10 e0       	ldi	r17, 0x00	; 0

        for (i = 0; i < 10; i++)
        {
            uint8_t subaddr;

            subaddr = fsread8uint(parent, DIR_ADDRSUBOFFSET + i);
    483e:	8d 2d       	mov	r24, r13
    4840:	90 e0       	ldi	r25, 0x00	; 0
    4842:	b8 01       	movw	r22, r16
    4844:	0e 94 89 22 	call	0x4512	; 0x4512 <fsread8uint>
            if (subaddr == 0)
    4848:	88 23       	and	r24, r24
    484a:	39 f4       	brne	.+14     	; 0x485a <buildNewNode+0x100>
            {
                fswrite8uint(parent, DIR_ADDRSUBOFFSET + i, addr);
    484c:	8d 2d       	mov	r24, r13
    484e:	90 e0       	ldi	r25, 0x00	; 0
    4850:	b8 01       	movw	r22, r16
    4852:	4c 2f       	mov	r20, r28
    4854:	0e 94 c5 22 	call	0x458a	; 0x458a <fswrite8uint>
                break;
    4858:	05 c0       	rjmp	.+10     	; 0x4864 <buildNewNode+0x10a>
    485a:	0f 5f       	subi	r16, 0xFF	; 255
    485c:	1f 4f       	sbci	r17, 0xFF	; 255
    }
    else
    {
        int i;

        for (i = 0; i < 10; i++)
    485e:	08 31       	cpi	r16, 0x18	; 24
    4860:	11 05       	cpc	r17, r1
    4862:	69 f7       	brne	.-38     	; 0x483e <buildNewNode+0xe4>
                break;
            }
        }
    }
    return;
}
    4864:	df 91       	pop	r29
    4866:	cf 91       	pop	r28
    4868:	1f 91       	pop	r17
    486a:	0f 91       	pop	r16
    486c:	ff 90       	pop	r15
    486e:	ef 90       	pop	r14
    4870:	df 90       	pop	r13
    4872:	08 95       	ret

00004874 <printNode>:

//-------------------------------------------------------------------------
void printNode(int addr)
{
    4874:	ef 92       	push	r14
    4876:	ff 92       	push	r15
    4878:	0f 93       	push	r16
    487a:	1f 93       	push	r17
    487c:	df 93       	push	r29
    487e:	cf 93       	push	r28
    4880:	cd b7       	in	r28, 0x3d	; 61
    4882:	de b7       	in	r29, 0x3e	; 62
    4884:	2e 97       	sbiw	r28, 0x0e	; 14
    4886:	0f b6       	in	r0, 0x3f	; 63
    4888:	f8 94       	cli
    488a:	de bf       	out	0x3e, r29	; 62
    488c:	0f be       	out	0x3f, r0	; 63
    488e:	cd bf       	out	0x3d, r28	; 61
    4890:	8c 01       	movw	r16, r24
    uint8_t uid, parent, type, valid;
    uint8_t subdirectory[10];
    int i;
    uint8_t flashdirectory[8];

    filename[12] = '\0';
    4892:	1d 86       	std	Y+13, r1	; 0x0d
    fsreadBytes(addr, FILENAMEOFFSET, 12, filename);
    4894:	60 e0       	ldi	r22, 0x00	; 0
    4896:	70 e0       	ldi	r23, 0x00	; 0
    4898:	4c e0       	ldi	r20, 0x0C	; 12
    489a:	50 e0       	ldi	r21, 0x00	; 0
    489c:	9e 01       	movw	r18, r28
    489e:	2f 5f       	subi	r18, 0xFF	; 255
    48a0:	3f 4f       	sbci	r19, 0xFF	; 255
    48a2:	0e 94 0d 23 	call	0x461a	; 0x461a <fsreadBytes>
    type = fsread8uint(addr, TYPEOFFSET);
    48a6:	c8 01       	movw	r24, r16
    48a8:	6c e0       	ldi	r22, 0x0C	; 12
    48aa:	70 e0       	ldi	r23, 0x00	; 0
    48ac:	0e 94 89 22 	call	0x4512	; 0x4512 <fsread8uint>
    48b0:	28 2f       	mov	r18, r24
    valid = fsread8uint(addr, VALIDOFFSET);
    48b2:	c8 01       	movw	r24, r16
    48b4:	6d e0       	ldi	r22, 0x0D	; 13
    48b6:	70 e0       	ldi	r23, 0x00	; 0
    48b8:	2e 87       	std	Y+14, r18	; 0x0e
    48ba:	0e 94 89 22 	call	0x4512	; 0x4512 <fsread8uint>
    if ((valid > 0) && (type == DIRNODE))
    48be:	2e 85       	ldd	r18, Y+14	; 0x0e
    48c0:	88 23       	and	r24, r24
    48c2:	f9 f0       	breq	.+62     	; 0x4902 <printNode+0x8e>
    48c4:	21 30       	cpi	r18, 0x01	; 1
    48c6:	a1 f5       	brne	.+104    	; 0x4930 <printNode+0xbc>
    48c8:	9e e0       	ldi	r25, 0x0E	; 14
    48ca:	e9 2e       	mov	r14, r25
    48cc:	f1 2c       	mov	r15, r1
    {
        for (i = 0; i < 10; i++)
        {
            subdirectory[i] = fsread8uint(addr, DIR_ADDRSUBOFFSET + i);
    48ce:	c8 01       	movw	r24, r16
    48d0:	b7 01       	movw	r22, r14
    48d2:	0e 94 89 22 	call	0x4512	; 0x4512 <fsread8uint>
    48d6:	08 94       	sec
    48d8:	e1 1c       	adc	r14, r1
    48da:	f1 1c       	adc	r15, r1
    fsreadBytes(addr, FILENAMEOFFSET, 12, filename);
    type = fsread8uint(addr, TYPEOFFSET);
    valid = fsread8uint(addr, VALIDOFFSET);
    if ((valid > 0) && (type == DIRNODE))
    {
        for (i = 0; i < 10; i++)
    48dc:	88 e1       	ldi	r24, 0x18	; 24
    48de:	e8 16       	cp	r14, r24
    48e0:	f1 04       	cpc	r15, r1
    48e2:	a9 f7       	brne	.-22     	; 0x48ce <printNode+0x5a>
    48e4:	0e c0       	rjmp	.+28     	; 0x4902 <printNode+0x8e>
        {
            subdirectory[i] = fsread8uint(addr, DIR_ADDRSUBOFFSET + i);
        }
    }
    if ((valid > 0) && (type == FILENODE))
    48e6:	8e e0       	ldi	r24, 0x0E	; 14
    48e8:	e8 2e       	mov	r14, r24
    48ea:	f1 2c       	mov	r15, r1
    {
        for (i = 0; i < 8; i++)
        {
            flashdirectory[i] = fsread8uint(addr, FILE_ADDRPAGEOFFSET + i);
    48ec:	c8 01       	movw	r24, r16
    48ee:	b7 01       	movw	r22, r14
    48f0:	0e 94 89 22 	call	0x4512	; 0x4512 <fsread8uint>
    48f4:	08 94       	sec
    48f6:	e1 1c       	adc	r14, r1
    48f8:	f1 1c       	adc	r15, r1
            subdirectory[i] = fsread8uint(addr, DIR_ADDRSUBOFFSET + i);
        }
    }
    if ((valid > 0) && (type == FILENODE))
    {
        for (i = 0; i < 8; i++)
    48fa:	86 e1       	ldi	r24, 0x16	; 22
    48fc:	e8 16       	cp	r14, r24
    48fe:	f1 04       	cpc	r15, r1
    4900:	a9 f7       	brne	.-22     	; 0x48ec <printNode+0x78>
        {
            flashdirectory[i] = fsread8uint(addr, FILE_ADDRPAGEOFFSET + i);
        }
    }
    uid = fsread8uint(addr, 28);
    4902:	c8 01       	movw	r24, r16
    4904:	6c e1       	ldi	r22, 0x1C	; 28
    4906:	70 e0       	ldi	r23, 0x00	; 0
    4908:	0e 94 89 22 	call	0x4512	; 0x4512 <fsread8uint>
    parent = fsread8uint(addr, 31);
    490c:	c8 01       	movw	r24, r16
    490e:	6f e1       	ldi	r22, 0x1F	; 31
    4910:	70 e0       	ldi	r23, 0x00	; 0
    4912:	0e 94 89 22 	call	0x4512	; 0x4512 <fsread8uint>
        //                        printf("The %d sub flash is %d\n", i, flashdirectory[i]);
    }
    //        printf("The node parent is %d\n", parent);
    //        printf("*************************\n");
    return;
}
    4916:	2e 96       	adiw	r28, 0x0e	; 14
    4918:	0f b6       	in	r0, 0x3f	; 63
    491a:	f8 94       	cli
    491c:	de bf       	out	0x3e, r29	; 62
    491e:	0f be       	out	0x3f, r0	; 63
    4920:	cd bf       	out	0x3d, r28	; 61
    4922:	cf 91       	pop	r28
    4924:	df 91       	pop	r29
    4926:	1f 91       	pop	r17
    4928:	0f 91       	pop	r16
    492a:	ff 90       	pop	r15
    492c:	ef 90       	pop	r14
    492e:	08 95       	ret
        for (i = 0; i < 10; i++)
        {
            subdirectory[i] = fsread8uint(addr, DIR_ADDRSUBOFFSET + i);
        }
    }
    if ((valid > 0) && (type == FILENODE))
    4930:	22 30       	cpi	r18, 0x02	; 2
    4932:	c9 f2       	breq	.-78     	; 0x48e6 <printNode+0x72>
    4934:	e6 cf       	rjmp	.-52     	; 0x4902 <printNode+0x8e>

00004936 <formatFS>:
    return;
}

//-------------------------------------------------------------------------
void formatFS()
{
    4936:	cf 93       	push	r28
    4938:	df 93       	push	r29
    int i;

    for (i = 0; i <= FILE_SYS_RANGE; i++)
    493a:	c0 e0       	ldi	r28, 0x00	; 0
    493c:	d0 e0       	ldi	r29, 0x00	; 0
    {
        fsinitBytes(i, 0, 32, 0);
    493e:	ce 01       	movw	r24, r28
    4940:	60 e0       	ldi	r22, 0x00	; 0
    4942:	70 e0       	ldi	r23, 0x00	; 0
    4944:	40 e2       	ldi	r20, 0x20	; 32
    4946:	50 e0       	ldi	r21, 0x00	; 0
    4948:	20 e0       	ldi	r18, 0x00	; 0
    494a:	0e 94 27 23 	call	0x464e	; 0x464e <fsinitBytes>
//-------------------------------------------------------------------------
void formatFS()
{
    int i;

    for (i = 0; i <= FILE_SYS_RANGE; i++)
    494e:	21 96       	adiw	r28, 0x01	; 1
    4950:	c1 32       	cpi	r28, 0x21	; 33
    4952:	d1 05       	cpc	r29, r1
    4954:	a1 f7       	brne	.-24     	; 0x493e <formatFS+0x8>
    {
        fsinitBytes(i, 0, 32, 0);
    }
    //  write8uint(i, VALIDOFFSET, 0); 
    initVectorFlash();
    4956:	0e 94 ed 29 	call	0x53da	; 0x53da <initVectorFlash>
    initVectorNode();
    495a:	0e 94 c9 2a 	call	0x5592	; 0x5592 <initVectorNode>
}
    495e:	df 91       	pop	r29
    4960:	cf 91       	pop	r28
    4962:	08 95       	ret

00004964 <formatFSLite>:

//-------------------------------------------------------------------------
void formatFSLite()
{
    initVectorFlash();
    4964:	0e 94 ed 29 	call	0x53da	; 0x53da <initVectorFlash>
    initVectorNode();
    4968:	0e 94 c9 2a 	call	0x5592	; 0x5592 <initVectorNode>
}
    496c:	08 95       	ret

0000496e <deleteNode>:

//-------------------------------------------------------------------------
void deleteNode(int addr)
{
    496e:	cf 92       	push	r12
    4970:	df 92       	push	r13
    4972:	ff 92       	push	r15
    4974:	0f 93       	push	r16
    4976:	1f 93       	push	r17
    4978:	df 93       	push	r29
    497a:	cf 93       	push	r28
    497c:	0f 92       	push	r0
    497e:	cd b7       	in	r28, 0x3d	; 61
    4980:	de b7       	in	r29, 0x3e	; 62
    4982:	6c 01       	movw	r12, r24
    uint8_t type;
    uint8_t parent;

    type = fsread8uint(addr, TYPEOFFSET);
    4984:	6c e0       	ldi	r22, 0x0C	; 12
    4986:	70 e0       	ldi	r23, 0x00	; 0
    4988:	0e 94 89 22 	call	0x4512	; 0x4512 <fsread8uint>
    498c:	08 2f       	mov	r16, r24
    parent = fsread8uint(addr, 31);
    498e:	c6 01       	movw	r24, r12
    4990:	6f e1       	ldi	r22, 0x1F	; 31
    4992:	70 e0       	ldi	r23, 0x00	; 0
    4994:	0e 94 89 22 	call	0x4512	; 0x4512 <fsread8uint>
    4998:	f8 2e       	mov	r15, r24
    if (type == DIRNODE)
    499a:	01 30       	cpi	r16, 0x01	; 1
    499c:	a1 f5       	brne	.+104    	; 0x4a06 <deleteNode+0x98>
    499e:	0e e0       	ldi	r16, 0x0E	; 14
    49a0:	10 e0       	ldi	r17, 0x00	; 0

        for (i = 0; i < 10; i++)
        {
            uint8_t subaddr;

            subaddr = fsread8uint(addr, DIR_ADDRSUBOFFSET + i);
    49a2:	c6 01       	movw	r24, r12
    49a4:	b8 01       	movw	r22, r16
    49a6:	0e 94 89 22 	call	0x4512	; 0x4512 <fsread8uint>
            if (subaddr > 0)
    49aa:	88 23       	and	r24, r24
    49ac:	19 f0       	breq	.+6      	; 0x49b4 <deleteNode+0x46>
            {
                deleteNode(subaddr);
    49ae:	90 e0       	ldi	r25, 0x00	; 0
    49b0:	0e 94 b7 24 	call	0x496e	; 0x496e <deleteNode>
    49b4:	0f 5f       	subi	r16, 0xFF	; 255
    49b6:	1f 4f       	sbci	r17, 0xFF	; 255
    parent = fsread8uint(addr, 31);
    if (type == DIRNODE)
    {
        uint8_t i;

        for (i = 0; i < 10; i++)
    49b8:	08 31       	cpi	r16, 0x18	; 24
    49ba:	11 05       	cpc	r17, r1
    49bc:	91 f7       	brne	.-28     	; 0x49a2 <deleteNode+0x34>
            if (subaddr > 0)
            {
                deleteNode(subaddr);
            }
        }
        fswrite8uint(addr, VALIDOFFSET, 0);
    49be:	c6 01       	movw	r24, r12
    49c0:	6d e0       	ldi	r22, 0x0D	; 13
    49c2:	70 e0       	ldi	r23, 0x00	; 0
    49c4:	40 e0       	ldi	r20, 0x00	; 0
    49c6:	0e 94 c5 22 	call	0x458a	; 0x458a <fswrite8uint>
        if ((addr == 0) && (parent == 0))
    49ca:	c1 14       	cp	r12, r1
    49cc:	d1 04       	cpc	r13, r1
    49ce:	19 f4       	brne	.+6      	; 0x49d6 <deleteNode+0x68>
    49d0:	ff 20       	and	r15, r15
    49d2:	09 f4       	brne	.+2      	; 0x49d6 <deleteNode+0x68>
    49d4:	b0 c0       	rjmp	.+352    	; 0x4b36 <deleteNode+0x1c8>
    49d6:	20 e0       	ldi	r18, 0x00	; 0

            for (i = 0; i < 10; i++)
            {
                uint8_t subaddr;

                subaddr = fsread8uint(parent, DIR_ADDRSUBOFFSET + i);
    49d8:	02 2f       	mov	r16, r18
    49da:	10 e0       	ldi	r17, 0x00	; 0
    49dc:	02 5f       	subi	r16, 0xF2	; 242
    49de:	1f 4f       	sbci	r17, 0xFF	; 255
    49e0:	8f 2d       	mov	r24, r15
    49e2:	90 e0       	ldi	r25, 0x00	; 0
    49e4:	b8 01       	movw	r22, r16
    49e6:	29 83       	std	Y+1, r18	; 0x01
    49e8:	0e 94 89 22 	call	0x4512	; 0x4512 <fsread8uint>
                if (subaddr == addr)
    49ec:	90 e0       	ldi	r25, 0x00	; 0
    49ee:	29 81       	ldd	r18, Y+1	; 0x01
    49f0:	8c 15       	cp	r24, r12
    49f2:	9d 05       	cpc	r25, r13
    49f4:	21 f4       	brne	.+8      	; 0x49fe <deleteNode+0x90>
                {
                    fswrite8uint(parent, DIR_ADDRSUBOFFSET + i, 0);
    49f6:	8f 2d       	mov	r24, r15
    49f8:	90 e0       	ldi	r25, 0x00	; 0
    49fa:	b8 01       	movw	r22, r16
    49fc:	93 c0       	rjmp	.+294    	; 0x4b24 <deleteNode+0x1b6>
        }
        else
        {
            uint8_t i;

            for (i = 0; i < 10; i++)
    49fe:	2f 5f       	subi	r18, 0xFF	; 255
    4a00:	2a 30       	cpi	r18, 0x0A	; 10
    4a02:	51 f7       	brne	.-44     	; 0x49d8 <deleteNode+0x6a>
    4a04:	98 c0       	rjmp	.+304    	; 0x4b36 <deleteNode+0x1c8>
                    break;
                }
            }
        }
    }
    else if (type == FILENODE)
    4a06:	02 30       	cpi	r16, 0x02	; 2
    4a08:	09 f0       	breq	.+2      	; 0x4a0c <deleteNode+0x9e>
    4a0a:	53 c0       	rjmp	.+166    	; 0x4ab2 <deleteNode+0x144>
    {
        char i;
        uint8_t readpage;

        fswrite8uint(addr, VALIDOFFSET, 0);
    4a0c:	c6 01       	movw	r24, r12
    4a0e:	6d e0       	ldi	r22, 0x0D	; 13
    4a10:	70 e0       	ldi	r23, 0x00	; 0
    4a12:	40 e0       	ldi	r20, 0x00	; 0
    4a14:	0e 94 c5 22 	call	0x458a	; 0x458a <fswrite8uint>
        if ((addr == 0) && (parent == 0))
    4a18:	c1 14       	cp	r12, r1
    4a1a:	d1 04       	cpc	r13, r1
    4a1c:	11 f4       	brne	.+4      	; 0x4a22 <deleteNode+0xb4>
    4a1e:	ff 20       	and	r15, r15
    4a20:	89 f0       	breq	.+34     	; 0x4a44 <deleteNode+0xd6>
    4a22:	0e e0       	ldi	r16, 0x0E	; 14
    4a24:	10 e0       	ldi	r17, 0x00	; 0
        {
            for (i = 0; i < 10; i++)
            {
                uint8_t subaddr;

                subaddr = fsread8uint(parent, DIR_ADDRSUBOFFSET + i);
    4a26:	8f 2d       	mov	r24, r15
    4a28:	90 e0       	ldi	r25, 0x00	; 0
    4a2a:	b8 01       	movw	r22, r16
    4a2c:	0e 94 89 22 	call	0x4512	; 0x4512 <fsread8uint>
                if (subaddr == addr)
    4a30:	90 e0       	ldi	r25, 0x00	; 0
    4a32:	8c 15       	cp	r24, r12
    4a34:	9d 05       	cpc	r25, r13
    4a36:	49 f4       	brne	.+18     	; 0x4a4a <deleteNode+0xdc>
                {
                    fswrite8uint(parent, DIR_ADDRSUBOFFSET + i, 0);
    4a38:	8f 2d       	mov	r24, r15
    4a3a:	90 e0       	ldi	r25, 0x00	; 0
    4a3c:	b8 01       	movw	r22, r16
    4a3e:	40 e0       	ldi	r20, 0x00	; 0
    4a40:	0e 94 c5 22 	call	0x458a	; 0x458a <fswrite8uint>
    {
        char i;
        uint8_t readpage;

        fswrite8uint(addr, VALIDOFFSET, 0);
        if ((addr == 0) && (parent == 0))
    4a44:	0e e0       	ldi	r16, 0x0E	; 14
    4a46:	10 e0       	ldi	r17, 0x00	; 0
    4a48:	06 c0       	rjmp	.+12     	; 0x4a56 <deleteNode+0xe8>

                subaddr = fsread8uint(parent, DIR_ADDRSUBOFFSET + i);
                if (subaddr == addr)
                {
                    fswrite8uint(parent, DIR_ADDRSUBOFFSET + i, 0);
                    break;
    4a4a:	0f 5f       	subi	r16, 0xFF	; 255
    4a4c:	1f 4f       	sbci	r17, 0xFF	; 255
        if ((addr == 0) && (parent == 0))
        {
        }
        else
        {
            for (i = 0; i < 10; i++)
    4a4e:	08 31       	cpi	r16, 0x18	; 24
    4a50:	11 05       	cpc	r17, r1
    4a52:	49 f7       	brne	.-46     	; 0x4a26 <deleteNode+0xb8>
    4a54:	f7 cf       	rjmp	.-18     	; 0x4a44 <deleteNode+0xd6>
                }
            }
        }
        for (i = 0; i < 8; i++)
        {
            readpage = fsread8uint(addr, FILE_ADDRPAGEOFFSET + i);
    4a56:	c6 01       	movw	r24, r12
    4a58:	b8 01       	movw	r22, r16
    4a5a:	0e 94 89 22 	call	0x4512	; 0x4512 <fsread8uint>
            if (readpage == 0)
    4a5e:	88 23       	and	r24, r24
    4a60:	41 f0       	breq	.+16     	; 0x4a72 <deleteNode+0x104>
            {
                break;
            }
            else
            {
                releaseFlashPage(readpage);
    4a62:	90 e0       	ldi	r25, 0x00	; 0
    4a64:	0e 94 56 2a 	call	0x54ac	; 0x54ac <releaseFlashPage>
    4a68:	0f 5f       	subi	r16, 0xFF	; 255
    4a6a:	1f 4f       	sbci	r17, 0xFF	; 255
                    fswrite8uint(parent, DIR_ADDRSUBOFFSET + i, 0);
                    break;
                }
            }
        }
        for (i = 0; i < 8; i++)
    4a6c:	06 31       	cpi	r16, 0x16	; 22
    4a6e:	11 05       	cpc	r17, r1
    4a70:	91 f7       	brne	.-28     	; 0x4a56 <deleteNode+0xe8>
            }
        }
        {
            uint8_t currentaddr;

            currentaddr = addr;
    4a72:	fc 2c       	mov	r15, r12
            while (1)
            {
                currentaddr = fsread8uint(currentaddr, FILE_NEXTOFFSET);
    4a74:	8f 2d       	mov	r24, r15
    4a76:	90 e0       	ldi	r25, 0x00	; 0
    4a78:	68 e1       	ldi	r22, 0x18	; 24
    4a7a:	70 e0       	ldi	r23, 0x00	; 0
    4a7c:	0e 94 89 22 	call	0x4512	; 0x4512 <fsread8uint>
    4a80:	f8 2e       	mov	r15, r24
                if (currentaddr > 0)
    4a82:	88 23       	and	r24, r24
    4a84:	09 f4       	brne	.+2      	; 0x4a88 <deleteNode+0x11a>
    4a86:	57 c0       	rjmp	.+174    	; 0x4b36 <deleteNode+0x1c8>
                {
                    releaseVectorNode(currentaddr);
    4a88:	90 e0       	ldi	r25, 0x00	; 0
    4a8a:	0e 94 1c 2b 	call	0x5638	; 0x5638 <releaseVectorNode>
    4a8e:	0e e0       	ldi	r16, 0x0E	; 14
    4a90:	10 e0       	ldi	r17, 0x00	; 0
                    for (i = 0; i < 8; i++)
                    {
                        readpage =
    4a92:	8f 2d       	mov	r24, r15
    4a94:	90 e0       	ldi	r25, 0x00	; 0
    4a96:	b8 01       	movw	r22, r16
    4a98:	0e 94 89 22 	call	0x4512	; 0x4512 <fsread8uint>
                            fsread8uint(currentaddr, FILE_ADDRPAGEOFFSET + i);
                        if (readpage == 0)
    4a9c:	88 23       	and	r24, r24
    4a9e:	51 f3       	breq	.-44     	; 0x4a74 <deleteNode+0x106>
                        {
                            break;
                        }
                        else
                        {
                            releaseFlashPage(readpage);
    4aa0:	90 e0       	ldi	r25, 0x00	; 0
    4aa2:	0e 94 56 2a 	call	0x54ac	; 0x54ac <releaseFlashPage>
    4aa6:	0f 5f       	subi	r16, 0xFF	; 255
    4aa8:	1f 4f       	sbci	r17, 0xFF	; 255
            {
                currentaddr = fsread8uint(currentaddr, FILE_NEXTOFFSET);
                if (currentaddr > 0)
                {
                    releaseVectorNode(currentaddr);
                    for (i = 0; i < 8; i++)
    4aaa:	06 31       	cpi	r16, 0x16	; 22
    4aac:	11 05       	cpc	r17, r1
    4aae:	89 f7       	brne	.-30     	; 0x4a92 <deleteNode+0x124>
    4ab0:	e1 cf       	rjmp	.-62     	; 0x4a74 <deleteNode+0x106>
                    break;
                }
            }
        }
    }
    else if (type == DEVNODE)
    4ab2:	03 30       	cpi	r16, 0x03	; 3
    4ab4:	e1 f4       	brne	.+56     	; 0x4aee <deleteNode+0x180>
    {
        fswrite8uint(addr, VALIDOFFSET, 0);
    4ab6:	c6 01       	movw	r24, r12
    4ab8:	6d e0       	ldi	r22, 0x0D	; 13
    4aba:	70 e0       	ldi	r23, 0x00	; 0
    4abc:	40 e0       	ldi	r20, 0x00	; 0
    4abe:	0e 94 c5 22 	call	0x458a	; 0x458a <fswrite8uint>
        if ((addr == 0) && (parent == 0))
    4ac2:	c1 14       	cp	r12, r1
    4ac4:	d1 04       	cpc	r13, r1
    4ac6:	11 f4       	brne	.+4      	; 0x4acc <deleteNode+0x15e>
    4ac8:	ff 20       	and	r15, r15
    4aca:	a9 f1       	breq	.+106    	; 0x4b36 <deleteNode+0x1c8>
    4acc:	0e e0       	ldi	r16, 0x0E	; 14
    4ace:	10 e0       	ldi	r17, 0x00	; 0

            for (i = 0; i < 10; i++)
            {
                uint8_t subaddr;

                subaddr = fsread8uint(parent, DIR_ADDRSUBOFFSET + i);
    4ad0:	8f 2d       	mov	r24, r15
    4ad2:	90 e0       	ldi	r25, 0x00	; 0
    4ad4:	b8 01       	movw	r22, r16
    4ad6:	0e 94 89 22 	call	0x4512	; 0x4512 <fsread8uint>
                if (subaddr == addr)
    4ada:	90 e0       	ldi	r25, 0x00	; 0
    4adc:	8c 15       	cp	r24, r12
    4ade:	9d 05       	cpc	r25, r13
    4ae0:	f1 f0       	breq	.+60     	; 0x4b1e <deleteNode+0x1b0>
                {
                    fswrite8uint(parent, DIR_ADDRSUBOFFSET + i, 0);
                    break;
    4ae2:	0f 5f       	subi	r16, 0xFF	; 255
    4ae4:	1f 4f       	sbci	r17, 0xFF	; 255
        }
        else
        {
            int i;

            for (i = 0; i < 10; i++)
    4ae6:	08 31       	cpi	r16, 0x18	; 24
    4ae8:	11 05       	cpc	r17, r1
    4aea:	91 f7       	brne	.-28     	; 0x4ad0 <deleteNode+0x162>
    4aec:	24 c0       	rjmp	.+72     	; 0x4b36 <deleteNode+0x1c8>
                    break;
                }
            }
        }
    }
    else if (type == APPNODE)
    4aee:	04 30       	cpi	r16, 0x04	; 4
    4af0:	11 f5       	brne	.+68     	; 0x4b36 <deleteNode+0x1c8>
    {
        fswrite8uint(addr, VALIDOFFSET, 0);
    4af2:	c6 01       	movw	r24, r12
    4af4:	6d e0       	ldi	r22, 0x0D	; 13
    4af6:	70 e0       	ldi	r23, 0x00	; 0
    4af8:	40 e0       	ldi	r20, 0x00	; 0
    4afa:	0e 94 c5 22 	call	0x458a	; 0x458a <fswrite8uint>
        if ((addr == 0) && (parent == 0))
    4afe:	c1 14       	cp	r12, r1
    4b00:	d1 04       	cpc	r13, r1
    4b02:	11 f4       	brne	.+4      	; 0x4b08 <deleteNode+0x19a>
    4b04:	ff 20       	and	r15, r15
    4b06:	b9 f0       	breq	.+46     	; 0x4b36 <deleteNode+0x1c8>
    4b08:	0e e0       	ldi	r16, 0x0E	; 14
    4b0a:	10 e0       	ldi	r17, 0x00	; 0

            for (i = 0; i < 10; i++)
            {
                uint8_t subaddr;

                subaddr = fsread8uint(parent, DIR_ADDRSUBOFFSET + i);
    4b0c:	8f 2d       	mov	r24, r15
    4b0e:	90 e0       	ldi	r25, 0x00	; 0
    4b10:	b8 01       	movw	r22, r16
    4b12:	0e 94 89 22 	call	0x4512	; 0x4512 <fsread8uint>
                if (subaddr == addr)
    4b16:	90 e0       	ldi	r25, 0x00	; 0
    4b18:	8c 15       	cp	r24, r12
    4b1a:	9d 05       	cpc	r25, r13
    4b1c:	39 f4       	brne	.+14     	; 0x4b2c <deleteNode+0x1be>
                {
                    fswrite8uint(parent, DIR_ADDRSUBOFFSET + i, 0);
    4b1e:	8f 2d       	mov	r24, r15
    4b20:	90 e0       	ldi	r25, 0x00	; 0
    4b22:	b8 01       	movw	r22, r16
    4b24:	40 e0       	ldi	r20, 0x00	; 0
    4b26:	0e 94 c5 22 	call	0x458a	; 0x458a <fswrite8uint>
                    break;
    4b2a:	05 c0       	rjmp	.+10     	; 0x4b36 <deleteNode+0x1c8>
    4b2c:	0f 5f       	subi	r16, 0xFF	; 255
    4b2e:	1f 4f       	sbci	r17, 0xFF	; 255
        }
        else
        {
            int i;

            for (i = 0; i < 10; i++)
    4b30:	08 31       	cpi	r16, 0x18	; 24
    4b32:	11 05       	cpc	r17, r1
    4b34:	59 f7       	brne	.-42     	; 0x4b0c <deleteNode+0x19e>
                    break;
                }
            }
        }
    }
    releaseVectorNode(addr);
    4b36:	c6 01       	movw	r24, r12
    4b38:	0e 94 1c 2b 	call	0x5638	; 0x5638 <releaseVectorNode>
}
    4b3c:	0f 90       	pop	r0
    4b3e:	cf 91       	pop	r28
    4b40:	df 91       	pop	r29
    4b42:	1f 91       	pop	r17
    4b44:	0f 91       	pop	r16
    4b46:	ff 90       	pop	r15
    4b48:	df 90       	pop	r13
    4b4a:	cf 90       	pop	r12
    4b4c:	08 95       	ret

00004b4e <buildRootNode>:

//-------------------------------------------------------------------------
void buildRootNode()
{
    4b4e:	0f 93       	push	r16
    buildNewNode(FSROOTNODE, "root", 0, 0, DIRNODE);
    4b50:	80 e0       	ldi	r24, 0x00	; 0
    4b52:	90 e0       	ldi	r25, 0x00	; 0
    4b54:	69 e4       	ldi	r22, 0x49	; 73
    4b56:	71 e0       	ldi	r23, 0x01	; 1
    4b58:	40 e0       	ldi	r20, 0x00	; 0
    4b5a:	20 e0       	ldi	r18, 0x00	; 0
    4b5c:	01 e0       	ldi	r16, 0x01	; 1
    4b5e:	0e 94 ad 23 	call	0x475a	; 0x475a <buildNewNode>
}
    4b62:	0f 91       	pop	r16
    4b64:	08 95       	ret

00004b66 <copyVectorNode>:

//-------------------------------------------------------------------------
void copyVectorNode(int from, int to)
{
    4b66:	ef 92       	push	r14
    4b68:	ff 92       	push	r15
    4b6a:	0f 93       	push	r16
    4b6c:	1f 93       	push	r17
    4b6e:	cf 93       	push	r28
    4b70:	df 93       	push	r29
    4b72:	8c 01       	movw	r16, r24
    4b74:	7b 01       	movw	r14, r22
    int i;

    for (i = 0; i < 32; i++)
    4b76:	c0 e0       	ldi	r28, 0x00	; 0
    4b78:	d0 e0       	ldi	r29, 0x00	; 0
    {
        uint8_t temp;

        temp = fsread8uint(from, i);
    4b7a:	c8 01       	movw	r24, r16
    4b7c:	be 01       	movw	r22, r28
    4b7e:	0e 94 89 22 	call	0x4512	; 0x4512 <fsread8uint>
    4b82:	48 2f       	mov	r20, r24
        fswrite8uint(to, i, temp);
    4b84:	c7 01       	movw	r24, r14
    4b86:	be 01       	movw	r22, r28
    4b88:	0e 94 c5 22 	call	0x458a	; 0x458a <fswrite8uint>
//-------------------------------------------------------------------------
void copyVectorNode(int from, int to)
{
    int i;

    for (i = 0; i < 32; i++)
    4b8c:	21 96       	adiw	r28, 0x01	; 1
    4b8e:	c0 32       	cpi	r28, 0x20	; 32
    4b90:	d1 05       	cpc	r29, r1
    4b92:	99 f7       	brne	.-26     	; 0x4b7a <copyVectorNode+0x14>
        uint8_t temp;

        temp = fsread8uint(from, i);
        fswrite8uint(to, i, temp);
    }
}
    4b94:	df 91       	pop	r29
    4b96:	cf 91       	pop	r28
    4b98:	1f 91       	pop	r17
    4b9a:	0f 91       	pop	r16
    4b9c:	ff 90       	pop	r15
    4b9e:	ef 90       	pop	r14
    4ba0:	08 95       	ret

00004ba2 <copyVectorPage>:

//-------------------------------------------------------------------------
void copyVectorPage(int from, int to)
{
    4ba2:	ef 92       	push	r14
    4ba4:	ff 92       	push	r15
    4ba6:	0f 93       	push	r16
    4ba8:	1f 93       	push	r17
    4baa:	cf 93       	push	r28
    4bac:	df 93       	push	r29
    4bae:	8b 01       	movw	r16, r22
    int i;
    int pagefrom, pageto;

    for (i = 0; i < 8; i++)
    {
        pagefrom = i + (from - 1) * 8;
    4bb0:	7c 01       	movw	r14, r24
    4bb2:	08 94       	sec
    4bb4:	e1 08       	sbc	r14, r1
    4bb6:	f1 08       	sbc	r15, r1
    4bb8:	33 e0       	ldi	r19, 0x03	; 3
    4bba:	ee 0c       	add	r14, r14
    4bbc:	ff 1c       	adc	r15, r15
    4bbe:	3a 95       	dec	r19
    4bc0:	e1 f7       	brne	.-8      	; 0x4bba <copyVectorPage+0x18>
        pageto = i + (to - 1) * 8;
    4bc2:	01 50       	subi	r16, 0x01	; 1
    4bc4:	10 40       	sbci	r17, 0x00	; 0
    4bc6:	23 e0       	ldi	r18, 0x03	; 3
    4bc8:	00 0f       	add	r16, r16
    4bca:	11 1f       	adc	r17, r17
    4bcc:	2a 95       	dec	r18
    4bce:	e1 f7       	brne	.-8      	; 0x4bc8 <copyVectorPage+0x26>
void copyVectorPage(int from, int to)
{
    int i;
    int pagefrom, pageto;

    for (i = 0; i < 8; i++)
    4bd0:	c0 e0       	ldi	r28, 0x00	; 0
    4bd2:	d0 e0       	ldi	r29, 0x00	; 0
        fswrite8uint(to, i, temp);
    }
}

//-------------------------------------------------------------------------
void copyVectorPage(int from, int to)
    4bd4:	be 01       	movw	r22, r28
    4bd6:	60 0f       	add	r22, r16
    4bd8:	71 1f       	adc	r23, r17

    for (i = 0; i < 8; i++)
    {
        pagefrom = i + (from - 1) * 8;
        pageto = i + (to - 1) * 8;
        copyPage(pagefrom, pageto);
    4bda:	ce 01       	movw	r24, r28
    4bdc:	8e 0d       	add	r24, r14
    4bde:	9f 1d       	adc	r25, r15
    4be0:	0e 94 09 31 	call	0x6212	; 0x6212 <copyPage>
void copyVectorPage(int from, int to)
{
    int i;
    int pagefrom, pageto;

    for (i = 0; i < 8; i++)
    4be4:	21 96       	adiw	r28, 0x01	; 1
    4be6:	c8 30       	cpi	r28, 0x08	; 8
    4be8:	d1 05       	cpc	r29, r1
    4bea:	a1 f7       	brne	.-24     	; 0x4bd4 <copyVectorPage+0x32>
        pagefrom = i + (from - 1) * 8;
        pageto = i + (to - 1) * 8;
        copyPage(pagefrom, pageto);
    }
    return;
}
    4bec:	df 91       	pop	r29
    4bee:	cf 91       	pop	r28
    4bf0:	1f 91       	pop	r17
    4bf2:	0f 91       	pop	r16
    4bf4:	ff 90       	pop	r15
    4bf6:	ef 90       	pop	r14
    4bf8:	08 95       	ret

00004bfa <inodeMatch>:

//-------------------------------------------------------------------------
int inodeMatch(uint8_t addr, char *string)
{
    4bfa:	bf 92       	push	r11
    4bfc:	cf 92       	push	r12
    4bfe:	df 92       	push	r13
    4c00:	ef 92       	push	r14
    4c02:	ff 92       	push	r15
    4c04:	0f 93       	push	r16
    4c06:	1f 93       	push	r17
    4c08:	df 93       	push	r29
    4c0a:	cf 93       	push	r28
    4c0c:	cd b7       	in	r28, 0x3d	; 61
    4c0e:	de b7       	in	r29, 0x3e	; 62
    4c10:	2d 97       	sbiw	r28, 0x0d	; 13
    4c12:	0f b6       	in	r0, 0x3f	; 63
    4c14:	f8 94       	cli
    4c16:	de bf       	out	0x3e, r29	; 62
    4c18:	0f be       	out	0x3f, r0	; 63
    4c1a:	cd bf       	out	0x3d, r28	; 61
    4c1c:	08 2f       	mov	r16, r24
    4c1e:	6b 01       	movw	r12, r22
    char temp[13];
    uint8_t length;
    uint8_t i;
    uint8_t valid;

    valid = fsread8uint(addr, VALIDOFFSET);
    4c20:	90 e0       	ldi	r25, 0x00	; 0
    4c22:	6d e0       	ldi	r22, 0x0D	; 13
    4c24:	70 e0       	ldi	r23, 0x00	; 0
    4c26:	0e 94 89 22 	call	0x4512	; 0x4512 <fsread8uint>
    if (valid == 0)
    4c2a:	88 23       	and	r24, r24
    4c2c:	09 f1       	breq	.+66     	; 0x4c70 <inodeMatch+0x76>
    {
        return 0;
    }
    fsreadBytes(addr, FILENAMEOFFSET, 12, temp);
    4c2e:	80 2f       	mov	r24, r16
    4c30:	90 e0       	ldi	r25, 0x00	; 0
    4c32:	60 e0       	ldi	r22, 0x00	; 0
    4c34:	70 e0       	ldi	r23, 0x00	; 0
    4c36:	4c e0       	ldi	r20, 0x0C	; 12
    4c38:	50 e0       	ldi	r21, 0x00	; 0
    4c3a:	7e 01       	movw	r14, r28
    4c3c:	08 94       	sec
    4c3e:	e1 1c       	adc	r14, r1
    4c40:	f1 1c       	adc	r15, r1
    4c42:	97 01       	movw	r18, r14
    4c44:	0e 94 0d 23 	call	0x461a	; 0x461a <fsreadBytes>
    temp[12] = '\0';
    4c48:	1d 86       	std	Y+13, r1	; 0x0d
    length = mystrlen(temp);
    4c4a:	c7 01       	movw	r24, r14
    4c4c:	0e 94 d4 36 	call	0x6da8	; 0x6da8 <mystrlen>
    4c50:	b8 2e       	mov	r11, r24
    for (i = 0; i < length; i++)
    4c52:	00 e0       	ldi	r16, 0x00	; 0
    4c54:	10 e0       	ldi	r17, 0x00	; 0
    4c56:	0a c0       	rjmp	.+20     	; 0x4c6c <inodeMatch+0x72>
    {
        if (superstring(temp + i, string) == 0)
    4c58:	c7 01       	movw	r24, r14
    4c5a:	80 0f       	add	r24, r16
    4c5c:	91 1f       	adc	r25, r17
    4c5e:	b6 01       	movw	r22, r12
    4c60:	0e 94 a7 36 	call	0x6d4e	; 0x6d4e <superstring>
    4c64:	0f 5f       	subi	r16, 0xFF	; 255
    4c66:	1f 4f       	sbci	r17, 0xFF	; 255
    4c68:	00 97       	sbiw	r24, 0x00	; 0
    4c6a:	29 f0       	breq	.+10     	; 0x4c76 <inodeMatch+0x7c>
        return 0;
    }
    fsreadBytes(addr, FILENAMEOFFSET, 12, temp);
    temp[12] = '\0';
    length = mystrlen(temp);
    for (i = 0; i < length; i++)
    4c6c:	0b 15       	cp	r16, r11
    4c6e:	a0 f3       	brcs	.-24     	; 0x4c58 <inodeMatch+0x5e>
    uint8_t valid;

    valid = fsread8uint(addr, VALIDOFFSET);
    if (valid == 0)
    {
        return 0;
    4c70:	20 e0       	ldi	r18, 0x00	; 0
    4c72:	30 e0       	ldi	r19, 0x00	; 0
    4c74:	02 c0       	rjmp	.+4      	; 0x4c7a <inodeMatch+0x80>
    length = mystrlen(temp);
    for (i = 0; i < length; i++)
    {
        if (superstring(temp + i, string) == 0)
        {
            return 1;
    4c76:	21 e0       	ldi	r18, 0x01	; 1
    4c78:	30 e0       	ldi	r19, 0x00	; 0
        }
    }
    return 0;
}
    4c7a:	c9 01       	movw	r24, r18
    4c7c:	2d 96       	adiw	r28, 0x0d	; 13
    4c7e:	0f b6       	in	r0, 0x3f	; 63
    4c80:	f8 94       	cli
    4c82:	de bf       	out	0x3e, r29	; 62
    4c84:	0f be       	out	0x3f, r0	; 63
    4c86:	cd bf       	out	0x3d, r28	; 61
    4c88:	cf 91       	pop	r28
    4c8a:	df 91       	pop	r29
    4c8c:	1f 91       	pop	r17
    4c8e:	0f 91       	pop	r16
    4c90:	ff 90       	pop	r15
    4c92:	ef 90       	pop	r14
    4c94:	df 90       	pop	r13
    4c96:	cf 90       	pop	r12
    4c98:	bf 90       	pop	r11
    4c9a:	08 95       	ret

00004c9c <checkName>:
//filename should be no more than 12 bytes and must end with \0
//the checking goes as follows. It checks the bytes by bytes and make sure that 
//the string mathces. if not match then 1 if \0 and match then 0 otherwise proceeds 
//and the filename must be valid 
int checkName(char *filename, int addr)
{
    4c9c:	bf 92       	push	r11
    4c9e:	cf 92       	push	r12
    4ca0:	df 92       	push	r13
    4ca2:	ef 92       	push	r14
    4ca4:	ff 92       	push	r15
    4ca6:	0f 93       	push	r16
    4ca8:	1f 93       	push	r17
    4caa:	cf 93       	push	r28
    4cac:	df 93       	push	r29
    4cae:	c8 2e       	mov	r12, r24
    4cb0:	09 2f       	mov	r16, r25
    4cb2:	7b 01       	movw	r14, r22
    char *p;
    int i;

    i = 0;
    if (mystrlen(filename) > 12)
    4cb4:	0e 94 d4 36 	call	0x6da8	; 0x6da8 <mystrlen>
    4cb8:	8d 30       	cpi	r24, 0x0D	; 13
    4cba:	91 05       	cpc	r25, r1
    4cbc:	f4 f4       	brge	.+60     	; 0x4cfa <checkName+0x5e>
    {
        return 1;
    }
    if (checkNodeValid(addr) == 0)
    4cbe:	c7 01       	movw	r24, r14
    4cc0:	0e 94 93 23 	call	0x4726	; 0x4726 <checkNodeValid>
    4cc4:	00 97       	sbiw	r24, 0x00	; 0
    4cc6:	c9 f0       	breq	.+50     	; 0x4cfa <checkName+0x5e>
    4cc8:	e6 01       	movw	r28, r12
    4cca:	6e 01       	movw	r12, r28
    4ccc:	d0 2e       	mov	r13, r16
    4cce:	e6 01       	movw	r28, r12
    4cd0:	00 e0       	ldi	r16, 0x00	; 0
    4cd2:	10 e0       	ldi	r17, 0x00	; 0
//check whether the addr block has a file name as pointed to by filename
//filename should be no more than 12 bytes and must end with \0
//the checking goes as follows. It checks the bytes by bytes and make sure that 
//the string mathces. if not match then 1 if \0 and match then 0 otherwise proceeds 
//and the filename must be valid 
int checkName(char *filename, int addr)
    4cd4:	6e 01       	movw	r12, r28
    }
    for (i = 0; i < 12; i++)
    {
        p = filename;
        p += i;
        if ((uint8_t) (*p) != fsread8uint(addr, FILENAMEOFFSET + i))
    4cd6:	b8 80       	ld	r11, Y
    4cd8:	c7 01       	movw	r24, r14
    4cda:	b8 01       	movw	r22, r16
    4cdc:	0e 94 89 22 	call	0x4512	; 0x4512 <fsread8uint>
    4ce0:	b8 16       	cp	r11, r24
    4ce2:	59 f4       	brne	.+22     	; 0x4cfa <checkName+0x5e>
    4ce4:	21 96       	adiw	r28, 0x01	; 1
        {
            return 1;
        }
        else
        {
            if ((*p) == '\0')
    4ce6:	f6 01       	movw	r30, r12
    4ce8:	80 81       	ld	r24, Z
    4cea:	88 23       	and	r24, r24
    4cec:	49 f0       	breq	.+18     	; 0x4d00 <checkName+0x64>
    }
    if (checkNodeValid(addr) == 0)
    {
        return 1;
    }
    for (i = 0; i < 12; i++)
    4cee:	0f 5f       	subi	r16, 0xFF	; 255
    4cf0:	1f 4f       	sbci	r17, 0xFF	; 255
    4cf2:	0c 30       	cpi	r16, 0x0C	; 12
    4cf4:	11 05       	cpc	r17, r1
    4cf6:	71 f7       	brne	.-36     	; 0x4cd4 <checkName+0x38>
    4cf8:	03 c0       	rjmp	.+6      	; 0x4d00 <checkName+0x64>
    {
        p = filename;
        p += i;
        if ((uint8_t) (*p) != fsread8uint(addr, FILENAMEOFFSET + i))
        {
            return 1;
    4cfa:	21 e0       	ldi	r18, 0x01	; 1
    4cfc:	30 e0       	ldi	r19, 0x00	; 0
    4cfe:	02 c0       	rjmp	.+4      	; 0x4d04 <checkName+0x68>
        }
        else
        {
            if ((*p) == '\0')
            {
                return 0;
    4d00:	20 e0       	ldi	r18, 0x00	; 0
    4d02:	30 e0       	ldi	r19, 0x00	; 0
                continue;
            }
        }
    }
    return 0;
}
    4d04:	c9 01       	movw	r24, r18
    4d06:	df 91       	pop	r29
    4d08:	cf 91       	pop	r28
    4d0a:	1f 91       	pop	r17
    4d0c:	0f 91       	pop	r16
    4d0e:	ff 90       	pop	r15
    4d10:	ef 90       	pop	r14
    4d12:	df 90       	pop	r13
    4d14:	cf 90       	pop	r12
    4d16:	bf 90       	pop	r11
    4d18:	08 95       	ret

00004d1a <fullBlock>:

//if the directory is full return 1 else return 0
uint8_t fullBlock(int directory)
{
    4d1a:	0f 93       	push	r16
    4d1c:	1f 93       	push	r17
    4d1e:	cf 93       	push	r28
    4d20:	df 93       	push	r29
    4d22:	8c 01       	movw	r16, r24
    4d24:	ce e0       	ldi	r28, 0x0E	; 14
    4d26:	d0 e0       	ldi	r29, 0x00	; 0

    for (i = 0; i < 10; i++)
    {
        uint8_t subaddr;

        subaddr = fsread8uint(directory, DIR_ADDRSUBOFFSET + i);
    4d28:	c8 01       	movw	r24, r16
    4d2a:	be 01       	movw	r22, r28
    4d2c:	0e 94 89 22 	call	0x4512	; 0x4512 <fsread8uint>
        if (subaddr == 0)
    4d30:	88 23       	and	r24, r24
    4d32:	31 f0       	breq	.+12     	; 0x4d40 <fullBlock+0x26>
    4d34:	21 96       	adiw	r28, 0x01	; 1
//if the directory is full return 1 else return 0
uint8_t fullBlock(int directory)
{
    int i;

    for (i = 0; i < 10; i++)
    4d36:	c8 31       	cpi	r28, 0x18	; 24
    4d38:	d1 05       	cpc	r29, r1
    4d3a:	b1 f7       	brne	.-20     	; 0x4d28 <fullBlock+0xe>
        if (subaddr == 0)
        {
            return 0;
        }
    }
    return 1;
    4d3c:	81 e0       	ldi	r24, 0x01	; 1
    4d3e:	01 c0       	rjmp	.+2      	; 0x4d42 <fullBlock+0x28>
        uint8_t subaddr;

        subaddr = fsread8uint(directory, DIR_ADDRSUBOFFSET + i);
        if (subaddr == 0)
        {
            return 0;
    4d40:	80 e0       	ldi	r24, 0x00	; 0
        }
    }
    return 1;
}
    4d42:	df 91       	pop	r29
    4d44:	cf 91       	pop	r28
    4d46:	1f 91       	pop	r17
    4d48:	0f 91       	pop	r16
    4d4a:	08 95       	ret

00004d4c <getName>:

//-------------------------------------------------------------------------
void getName(char *buffer, int addr)
{
    4d4c:	cf 92       	push	r12
    4d4e:	df 92       	push	r13
    4d50:	ef 92       	push	r14
    4d52:	ff 92       	push	r15
    4d54:	0f 93       	push	r16
    4d56:	1f 93       	push	r17
    4d58:	cf 93       	push	r28
    4d5a:	df 93       	push	r29
    4d5c:	6b 01       	movw	r12, r22
    int i;
    char *p;

    p = buffer;
    for (i = 0; i < 12; i++)
    4d5e:	e8 2e       	mov	r14, r24
    4d60:	e7 01       	movw	r28, r14
    4d62:	7e 01       	movw	r14, r28
    4d64:	f9 2e       	mov	r15, r25
    4d66:	e7 01       	movw	r28, r14
    4d68:	00 e0       	ldi	r16, 0x00	; 0
    4d6a:	10 e0       	ldi	r17, 0x00	; 0
    4d6c:	7e 01       	movw	r14, r28
    {
        *p = fsread8uint(addr, FILENAMEOFFSET + i);
    4d6e:	c6 01       	movw	r24, r12
    4d70:	b8 01       	movw	r22, r16
    4d72:	0e 94 89 22 	call	0x4512	; 0x4512 <fsread8uint>
    4d76:	89 93       	st	Y+, r24
        if ((*p) == '\0')
    4d78:	88 23       	and	r24, r24
    4d7a:	31 f0       	breq	.+12     	; 0x4d88 <getName+0x3c>
    4d7c:	7e 01       	movw	r14, r28
{
    int i;
    char *p;

    p = buffer;
    for (i = 0; i < 12; i++)
    4d7e:	0f 5f       	subi	r16, 0xFF	; 255
    4d80:	1f 4f       	sbci	r17, 0xFF	; 255
    4d82:	0c 30       	cpi	r16, 0x0C	; 12
    4d84:	11 05       	cpc	r17, r1
    4d86:	91 f7       	brne	.-28     	; 0x4d6c <getName+0x20>
            break;
        }

        p++;
    }
    *p = '\0';
    4d88:	f7 01       	movw	r30, r14
    4d8a:	10 82       	st	Z, r1
    return;
}
    4d8c:	df 91       	pop	r29
    4d8e:	cf 91       	pop	r28
    4d90:	1f 91       	pop	r17
    4d92:	0f 91       	pop	r16
    4d94:	ff 90       	pop	r15
    4d96:	ef 90       	pop	r14
    4d98:	df 90       	pop	r13
    4d9a:	cf 90       	pop	r12
    4d9c:	08 95       	ret

00004d9e <changeDirectory>:

//in this one, the directory is checked to see if the file is out there if not return -1 
int changeDirectory(char *filename, int directory)
{
    4d9e:	cf 92       	push	r12
    4da0:	df 92       	push	r13
    4da2:	ef 92       	push	r14
    4da4:	ff 92       	push	r15
    4da6:	0f 93       	push	r16
    4da8:	1f 93       	push	r17
    4daa:	cf 93       	push	r28
    4dac:	df 93       	push	r29
    4dae:	7c 01       	movw	r14, r24
    4db0:	6b 01       	movw	r12, r22
    4db2:	ce e0       	ldi	r28, 0x0E	; 14
    4db4:	d0 e0       	ldi	r29, 0x00	; 0

    for (i = 0; i < 10; i++)
    {
        uint8_t subaddr;

        subaddr = fsread8uint(directory, DIR_ADDRSUBOFFSET + i);
    4db6:	c6 01       	movw	r24, r12
    4db8:	be 01       	movw	r22, r28
    4dba:	0e 94 89 22 	call	0x4512	; 0x4512 <fsread8uint>
        if (checkName(filename, subaddr) == 0)
    4dbe:	08 2f       	mov	r16, r24
    4dc0:	10 e0       	ldi	r17, 0x00	; 0
    4dc2:	c7 01       	movw	r24, r14
    4dc4:	b8 01       	movw	r22, r16
    4dc6:	0e 94 4e 26 	call	0x4c9c	; 0x4c9c <checkName>
    4dca:	00 97       	sbiw	r24, 0x00	; 0
    4dcc:	31 f0       	breq	.+12     	; 0x4dda <changeDirectory+0x3c>
    4dce:	21 96       	adiw	r28, 0x01	; 1
//in this one, the directory is checked to see if the file is out there if not return -1 
int changeDirectory(char *filename, int directory)
{
    int i;

    for (i = 0; i < 10; i++)
    4dd0:	c8 31       	cpi	r28, 0x18	; 24
    4dd2:	d1 05       	cpc	r29, r1
    4dd4:	81 f7       	brne	.-32     	; 0x4db6 <changeDirectory+0x18>
        if (checkName(filename, subaddr) == 0)
        {
            return subaddr;
        }
    }
    return -1;
    4dd6:	0f ef       	ldi	r16, 0xFF	; 255
    4dd8:	1f ef       	ldi	r17, 0xFF	; 255
}
    4dda:	c8 01       	movw	r24, r16
    4ddc:	df 91       	pop	r29
    4dde:	cf 91       	pop	r28
    4de0:	1f 91       	pop	r17
    4de2:	0f 91       	pop	r16
    4de4:	ff 90       	pop	r15
    4de6:	ef 90       	pop	r14
    4de8:	df 90       	pop	r13
    4dea:	cf 90       	pop	r12
    4dec:	08 95       	ret

00004dee <getParentDirectory>:
//-------------------------------------------------------------------------
int getParentDirectory(int directory)
{
    uint8_t parentnode;

    parentnode = fsread8uint(directory, DIR_PARENTOFFSET);
    4dee:	6f e1       	ldi	r22, 0x1F	; 31
    4df0:	70 e0       	ldi	r23, 0x00	; 0
    4df2:	0e 94 89 22 	call	0x4512	; 0x4512 <fsread8uint>
    return parentnode;
}
    4df6:	90 e0       	ldi	r25, 0x00	; 0
    4df8:	08 95       	ret

00004dfa <existBlock>:

//check wehther a block exists. the filename must be single level 
int existBlock(char *filename, int directory)
{
    4dfa:	df 92       	push	r13
    4dfc:	ef 92       	push	r14
    4dfe:	ff 92       	push	r15
    4e00:	0f 93       	push	r16
    4e02:	1f 93       	push	r17
    4e04:	cf 93       	push	r28
    4e06:	df 93       	push	r29
    4e08:	8c 01       	movw	r16, r24
    4e0a:	7b 01       	movw	r14, r22
    4e0c:	ce e0       	ldi	r28, 0x0E	; 14
    4e0e:	d0 e0       	ldi	r29, 0x00	; 0

    for (i = 0; i < 10; i++)
    {
        uint8_t subaddr;

        subaddr = fsread8uint(directory, DIR_ADDRSUBOFFSET + i);
    4e10:	c7 01       	movw	r24, r14
    4e12:	be 01       	movw	r22, r28
    4e14:	0e 94 89 22 	call	0x4512	; 0x4512 <fsread8uint>
    4e18:	d8 2e       	mov	r13, r24
        if (checkName(filename, subaddr) == 0)
    4e1a:	c8 01       	movw	r24, r16
    4e1c:	6d 2d       	mov	r22, r13
    4e1e:	70 e0       	ldi	r23, 0x00	; 0
    4e20:	0e 94 4e 26 	call	0x4c9c	; 0x4c9c <checkName>
    4e24:	00 97       	sbiw	r24, 0x00	; 0
    4e26:	59 f4       	brne	.+22     	; 0x4e3e <existBlock+0x44>
        {
            if (((temp = checkNodeValid(subaddr)) > 0) && (subaddr > 0))
    4e28:	8d 2d       	mov	r24, r13
    4e2a:	90 e0       	ldi	r25, 0x00	; 0
    4e2c:	0e 94 93 23 	call	0x4726	; 0x4726 <checkNodeValid>
    4e30:	88 23       	and	r24, r24
    4e32:	29 f0       	breq	.+10     	; 0x4e3e <existBlock+0x44>
    4e34:	dd 20       	and	r13, r13
    4e36:	19 f0       	breq	.+6      	; 0x4e3e <existBlock+0x44>
            {
                return temp;
    4e38:	28 2f       	mov	r18, r24
    4e3a:	30 e0       	ldi	r19, 0x00	; 0
    4e3c:	06 c0       	rjmp	.+12     	; 0x4e4a <existBlock+0x50>
    4e3e:	21 96       	adiw	r28, 0x01	; 1
int existBlock(char *filename, int directory)
{
    int i;
    uint8_t temp;

    for (i = 0; i < 10; i++)
    4e40:	c8 31       	cpi	r28, 0x18	; 24
    4e42:	d1 05       	cpc	r29, r1
    4e44:	29 f7       	brne	.-54     	; 0x4e10 <existBlock+0x16>
            {
                continue;
            }
        }
    }
    return 0;
    4e46:	20 e0       	ldi	r18, 0x00	; 0
    4e48:	30 e0       	ldi	r19, 0x00	; 0
}
    4e4a:	c9 01       	movw	r24, r18
    4e4c:	df 91       	pop	r29
    4e4e:	cf 91       	pop	r28
    4e50:	1f 91       	pop	r17
    4e52:	0f 91       	pop	r16
    4e54:	ff 90       	pop	r15
    4e56:	ef 90       	pop	r14
    4e58:	df 90       	pop	r13
    4e5a:	08 95       	ret

00004e5c <existBlockAddr>:

//check wehther a block exists. the filename must be single level 
int existBlockAddr(char *filename, int directory)
{
    4e5c:	bf 92       	push	r11
    4e5e:	cf 92       	push	r12
    4e60:	df 92       	push	r13
    4e62:	ef 92       	push	r14
    4e64:	ff 92       	push	r15
    4e66:	0f 93       	push	r16
    4e68:	1f 93       	push	r17
    4e6a:	cf 93       	push	r28
    4e6c:	df 93       	push	r29
    4e6e:	7c 01       	movw	r14, r24
    4e70:	6b 01       	movw	r12, r22
    4e72:	ce e0       	ldi	r28, 0x0E	; 14
    4e74:	d0 e0       	ldi	r29, 0x00	; 0

    for (i = 0; i < 10; i++)
    {
        uint8_t subaddr;

        subaddr = fsread8uint(directory, DIR_ADDRSUBOFFSET + i);
    4e76:	c6 01       	movw	r24, r12
    4e78:	be 01       	movw	r22, r28
    4e7a:	0e 94 89 22 	call	0x4512	; 0x4512 <fsread8uint>
    4e7e:	b8 2e       	mov	r11, r24
        if (checkName(filename, subaddr) == 0)
    4e80:	08 2f       	mov	r16, r24
    4e82:	10 e0       	ldi	r17, 0x00	; 0
    4e84:	c7 01       	movw	r24, r14
    4e86:	b8 01       	movw	r22, r16
    4e88:	0e 94 4e 26 	call	0x4c9c	; 0x4c9c <checkName>
    4e8c:	00 97       	sbiw	r24, 0x00	; 0
    4e8e:	39 f4       	brne	.+14     	; 0x4e9e <existBlockAddr+0x42>
        {
            if (((temp = checkNodeValid(subaddr)) > 0) && (subaddr > 0))
    4e90:	c8 01       	movw	r24, r16
    4e92:	0e 94 93 23 	call	0x4726	; 0x4726 <checkNodeValid>
    4e96:	88 23       	and	r24, r24
    4e98:	11 f0       	breq	.+4      	; 0x4e9e <existBlockAddr+0x42>
    4e9a:	bb 20       	and	r11, r11
    4e9c:	31 f4       	brne	.+12     	; 0x4eaa <existBlockAddr+0x4e>
    4e9e:	21 96       	adiw	r28, 0x01	; 1
int existBlockAddr(char *filename, int directory)
{
    int i;
    uint8_t temp;

    for (i = 0; i < 10; i++)
    4ea0:	c8 31       	cpi	r28, 0x18	; 24
    4ea2:	d1 05       	cpc	r29, r1
    4ea4:	41 f7       	brne	.-48     	; 0x4e76 <existBlockAddr+0x1a>
            {
                continue;
            }
        }
    }
    return 0;
    4ea6:	00 e0       	ldi	r16, 0x00	; 0
    4ea8:	10 e0       	ldi	r17, 0x00	; 0
}
    4eaa:	c8 01       	movw	r24, r16
    4eac:	df 91       	pop	r29
    4eae:	cf 91       	pop	r28
    4eb0:	1f 91       	pop	r17
    4eb2:	0f 91       	pop	r16
    4eb4:	ff 90       	pop	r15
    4eb6:	ef 90       	pop	r14
    4eb8:	df 90       	pop	r13
    4eba:	cf 90       	pop	r12
    4ebc:	bf 90       	pop	r11
    4ebe:	08 95       	ret

00004ec0 <getPwd>:

//return current directory
int getPwd()
{
    return currentdirectory;
}
    4ec0:	80 91 8d 03 	lds	r24, 0x038D
    4ec4:	90 91 8e 03 	lds	r25, 0x038E
    4ec8:	08 95       	ret

00004eca <setPwd>:

//set current directory 
void setPwd(int directory)
{
    currentdirectory = directory;
    4eca:	90 93 8e 03 	sts	0x038E, r25
    4ece:	80 93 8d 03 	sts	0x038D, r24
    return;
}
    4ed2:	08 95       	ret

00004ed4 <emptyDirectory>:

//check directory empty
//returns 0 if it is empty. Returns 1 if otherwise 
int emptyDirectory(int directory)
{
    4ed4:	0f 93       	push	r16
    4ed6:	1f 93       	push	r17
    4ed8:	cf 93       	push	r28
    4eda:	df 93       	push	r29
    4edc:	8c 01       	movw	r16, r24
    4ede:	ce e0       	ldi	r28, 0x0E	; 14
    4ee0:	d0 e0       	ldi	r29, 0x00	; 0

    for (i = 0; i < 10; i++)
    {
        uint8_t subaddr;

        subaddr = fsread8uint(directory, DIR_ADDRSUBOFFSET + i);
    4ee2:	c8 01       	movw	r24, r16
    4ee4:	be 01       	movw	r22, r28
    4ee6:	0e 94 89 22 	call	0x4512	; 0x4512 <fsread8uint>
        if (subaddr > 0)
    4eea:	88 23       	and	r24, r24
    4eec:	39 f4       	brne	.+14     	; 0x4efc <emptyDirectory+0x28>
    4eee:	21 96       	adiw	r28, 0x01	; 1
//returns 0 if it is empty. Returns 1 if otherwise 
int emptyDirectory(int directory)
{
    int i;

    for (i = 0; i < 10; i++)
    4ef0:	c8 31       	cpi	r28, 0x18	; 24
    4ef2:	d1 05       	cpc	r29, r1
    4ef4:	b1 f7       	brne	.-20     	; 0x4ee2 <emptyDirectory+0xe>
        if (subaddr > 0)
        {
            return 1;
        }
    }
    return 0;
    4ef6:	20 e0       	ldi	r18, 0x00	; 0
    4ef8:	30 e0       	ldi	r19, 0x00	; 0
    4efa:	02 c0       	rjmp	.+4      	; 0x4f00 <emptyDirectory+0x2c>
        uint8_t subaddr;

        subaddr = fsread8uint(directory, DIR_ADDRSUBOFFSET + i);
        if (subaddr > 0)
        {
            return 1;
    4efc:	21 e0       	ldi	r18, 0x01	; 1
    4efe:	30 e0       	ldi	r19, 0x00	; 0
        }
    }
    return 0;
}
    4f00:	c9 01       	movw	r24, r18
    4f02:	df 91       	pop	r29
    4f04:	cf 91       	pop	r28
    4f06:	1f 91       	pop	r17
    4f08:	0f 91       	pop	r16
    4f0a:	08 95       	ret

00004f0c <createDir>:

//create a directory
uint8_t createDir(char *filename, int directory)
{
    4f0c:	0f 93       	push	r16
    4f0e:	1f 93       	push	r17
    4f10:	cf 93       	push	r28
    4f12:	df 93       	push	r29
    4f14:	ec 01       	movw	r28, r24
    4f16:	8b 01       	movw	r16, r22
    //fix: should first try to see if there is a directory with the same name
    uint8_t getaddr;

    if (existBlockAddr(filename, directory) > 0)
    4f18:	0e 94 2e 27 	call	0x4e5c	; 0x4e5c <existBlockAddr>
    4f1c:	18 16       	cp	r1, r24
    4f1e:	19 06       	cpc	r1, r25
    4f20:	84 f0       	brlt	.+32     	; 0x4f42 <createDir+0x36>
    {
        return 0;
    }
    if (fullBlock(directory) == 1)
    4f22:	c8 01       	movw	r24, r16
    4f24:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <fullBlock>
    4f28:	81 30       	cpi	r24, 0x01	; 1
    4f2a:	69 f0       	breq	.+26     	; 0x4f46 <createDir+0x3a>
    {
        return 255;
    }
    //this part first inserts a directory and then creates a node 
    getaddr = (uint8_t) getVectorNode();
    4f2c:	0e 94 d1 2a 	call	0x55a2	; 0x55a2 <getVectorNode>
    4f30:	18 2f       	mov	r17, r24
    buildNewNode(getaddr, filename, 0, (uint8_t) directory, DIRNODE);
    4f32:	90 e0       	ldi	r25, 0x00	; 0
    4f34:	be 01       	movw	r22, r28
    4f36:	40 e0       	ldi	r20, 0x00	; 0
    4f38:	20 2f       	mov	r18, r16
    4f3a:	01 e0       	ldi	r16, 0x01	; 1
    4f3c:	0e 94 ad 23 	call	0x475a	; 0x475a <buildNewNode>
    return getaddr;
    4f40:	03 c0       	rjmp	.+6      	; 0x4f48 <createDir+0x3c>
    //fix: should first try to see if there is a directory with the same name
    uint8_t getaddr;

    if (existBlockAddr(filename, directory) > 0)
    {
        return 0;
    4f42:	10 e0       	ldi	r17, 0x00	; 0
    4f44:	01 c0       	rjmp	.+2      	; 0x4f48 <createDir+0x3c>
    }
    if (fullBlock(directory) == 1)
    {
        return 255;
    4f46:	1f ef       	ldi	r17, 0xFF	; 255
    }
    //this part first inserts a directory and then creates a node 
    getaddr = (uint8_t) getVectorNode();
    buildNewNode(getaddr, filename, 0, (uint8_t) directory, DIRNODE);
    return getaddr;
}
    4f48:	81 2f       	mov	r24, r17
    4f4a:	df 91       	pop	r29
    4f4c:	cf 91       	pop	r28
    4f4e:	1f 91       	pop	r17
    4f50:	0f 91       	pop	r16
    4f52:	08 95       	ret

00004f54 <createFileFromDirectory>:

//void foobar()
//{}
//create a file
uint8_t createFileFromDirectory(char *filename, int directory)
{
    4f54:	0f 93       	push	r16
    4f56:	1f 93       	push	r17
    4f58:	cf 93       	push	r28
    4f5a:	df 93       	push	r29
    4f5c:	ec 01       	movw	r28, r24
    4f5e:	8b 01       	movw	r16, r22
    //this part first inserts a directory and then creates a node 
    uint8_t getaddr;

    if (existBlockAddr(filename, directory) > 0)
    4f60:	0e 94 2e 27 	call	0x4e5c	; 0x4e5c <existBlockAddr>
    4f64:	18 16       	cp	r1, r24
    4f66:	19 06       	cpc	r1, r25
    4f68:	84 f0       	brlt	.+32     	; 0x4f8a <createFileFromDirectory+0x36>
    {
        return 0;
    }
    if (fullBlock(directory) == 1)
    4f6a:	c8 01       	movw	r24, r16
    4f6c:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <fullBlock>
    4f70:	81 30       	cpi	r24, 0x01	; 1
    4f72:	69 f0       	breq	.+26     	; 0x4f8e <createFileFromDirectory+0x3a>
    {
        return 255;
    }
    getaddr = (uint8_t) getVectorNode();
    4f74:	0e 94 d1 2a 	call	0x55a2	; 0x55a2 <getVectorNode>
    4f78:	18 2f       	mov	r17, r24
    buildNewNode(getaddr, filename, 0, (uint8_t) directory, FILENODE);
    4f7a:	90 e0       	ldi	r25, 0x00	; 0
    4f7c:	be 01       	movw	r22, r28
    4f7e:	40 e0       	ldi	r20, 0x00	; 0
    4f80:	20 2f       	mov	r18, r16
    4f82:	02 e0       	ldi	r16, 0x02	; 2
    4f84:	0e 94 ad 23 	call	0x475a	; 0x475a <buildNewNode>
    return getaddr;
    4f88:	03 c0       	rjmp	.+6      	; 0x4f90 <createFileFromDirectory+0x3c>
    //this part first inserts a directory and then creates a node 
    uint8_t getaddr;

    if (existBlockAddr(filename, directory) > 0)
    {
        return 0;
    4f8a:	10 e0       	ldi	r17, 0x00	; 0
    4f8c:	01 c0       	rjmp	.+2      	; 0x4f90 <createFileFromDirectory+0x3c>
    }
    if (fullBlock(directory) == 1)
    {
        return 255;
    4f8e:	1f ef       	ldi	r17, 0xFF	; 255
    }
    getaddr = (uint8_t) getVectorNode();
    buildNewNode(getaddr, filename, 0, (uint8_t) directory, FILENODE);
    return getaddr;
}
    4f90:	81 2f       	mov	r24, r17
    4f92:	df 91       	pop	r29
    4f94:	cf 91       	pop	r28
    4f96:	1f 91       	pop	r17
    4f98:	0f 91       	pop	r16
    4f9a:	08 95       	ret

00004f9c <isDirectory>:

//check if the addr block is a directory or not 
int isDirectory(int addr)
{
    if (checkNodeValid(addr) == DIRNODE)
    4f9c:	0e 94 93 23 	call	0x4726	; 0x4726 <checkNodeValid>
    {
        return 1;
    4fa0:	21 e0       	ldi	r18, 0x01	; 1
    4fa2:	30 e0       	ldi	r19, 0x00	; 0
    4fa4:	81 30       	cpi	r24, 0x01	; 1
    4fa6:	91 05       	cpc	r25, r1
    4fa8:	11 f0       	breq	.+4      	; 0x4fae <isDirectory+0x12>
    4faa:	20 e0       	ldi	r18, 0x00	; 0
    4fac:	30 e0       	ldi	r19, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    4fae:	c9 01       	movw	r24, r18
    4fb0:	08 95       	ret

00004fb2 <locateFileName>:
//the pathname is organized as ../ or ./ or name/ or /something and does not end with / 
//sovled
//and the following are the functions this thing uses
//
int locateFileName(char *pathname, int *state)
{
    4fb2:	af 92       	push	r10
    4fb4:	bf 92       	push	r11
    4fb6:	cf 92       	push	r12
    4fb8:	df 92       	push	r13
    4fba:	ef 92       	push	r14
    4fbc:	ff 92       	push	r15
    4fbe:	0f 93       	push	r16
    4fc0:	1f 93       	push	r17
    4fc2:	df 93       	push	r29
    4fc4:	cf 93       	push	r28
    4fc6:	cd b7       	in	r28, 0x3d	; 61
    4fc8:	de b7       	in	r29, 0x3e	; 62
    4fca:	2d 97       	sbiw	r28, 0x0d	; 13
    4fcc:	0f b6       	in	r0, 0x3f	; 63
    4fce:	f8 94       	cli
    4fd0:	de bf       	out	0x3e, r29	; 62
    4fd2:	0f be       	out	0x3f, r0	; 63
    4fd4:	cd bf       	out	0x3d, r28	; 61
    4fd6:	6c 01       	movw	r12, r24
    4fd8:	5b 01       	movw	r10, r22
    int addrTrack;
    char nextString[13];
    int ret;

    //first classify what type of pathname this is 
    p = pathname[0];
    4fda:	fc 01       	movw	r30, r24
    4fdc:	81 91       	ld	r24, Z+
    4fde:	7f 01       	movw	r14, r30
    q = pathname[1];
    4fe0:	f6 01       	movw	r30, r12
    4fe2:	91 81       	ldd	r25, Z+1	; 0x01
}

//return current directory
int getPwd()
{
    return currentdirectory;
    4fe4:	00 91 8d 03 	lds	r16, 0x038D
    4fe8:	10 91 8e 03 	lds	r17, 0x038E
    //first classify what type of pathname this is 
    p = pathname[0];
    q = pathname[1];
    relativestart = pathname;
    addrTrack = getPwd();
    if ((p == '.') && (q == '.'))
    4fec:	8e 32       	cpi	r24, 0x2E	; 46
    4fee:	79 f4       	brne	.+30     	; 0x500e <locateFileName+0x5c>
    4ff0:	9e 32       	cpi	r25, 0x2E	; 46
    4ff2:	51 f4       	brne	.+20     	; 0x5008 <locateFileName+0x56>
    {
        addrTrack = getParentDirectory(addrTrack);
    4ff4:	c8 01       	movw	r24, r16
    4ff6:	0e 94 f7 26 	call	0x4dee	; 0x4dee <getParentDirectory>
    4ffa:	8c 01       	movw	r16, r24
        relativestart = pathname + 2;
    4ffc:	82 e0       	ldi	r24, 0x02	; 2
    4ffe:	e8 2e       	mov	r14, r24
    5000:	f1 2c       	mov	r15, r1
    5002:	ec 0c       	add	r14, r12
    5004:	fd 1c       	adc	r15, r13
    5006:	34 c0       	rjmp	.+104    	; 0x5070 <locateFileName+0xbe>
    }
    else if ((p == '.') && (q == '/'))
    5008:	9f 32       	cpi	r25, 0x2F	; 47
    500a:	19 f4       	brne	.+6      	; 0x5012 <locateFileName+0x60>
    500c:	31 c0       	rjmp	.+98     	; 0x5070 <locateFileName+0xbe>
    {
        relativestart = pathname + 1;
    }
    else if (p == '/')
    500e:	8f 32       	cpi	r24, 0x2F	; 47
    5010:	51 f1       	breq	.+84     	; 0x5066 <locateFileName+0xb4>
    {
        addrTrack = FSROOTNODE;
        relativestart = pathname;
    }
    else if (isLetter(p) == 1)
    5012:	98 2f       	mov	r25, r24
    5014:	91 56       	subi	r25, 0x61	; 97
    5016:	9a 31       	cpi	r25, 0x1A	; 26
    5018:	18 f0       	brcs	.+6      	; 0x5020 <locateFileName+0x6e>
    501a:	81 54       	subi	r24, 0x41	; 65
    501c:	8a 31       	cpi	r24, 0x1A	; 26
    501e:	38 f5       	brcc	.+78     	; 0x506e <locateFileName+0xbc>
    {
        //this case is the "mnae" case, where there may or may not be further stuff behind 
        //buggy place 
        relativestart = extractString(relativestart, (char *)nextString);
    5020:	c6 01       	movw	r24, r12
    5022:	6e 01       	movw	r12, r28
    5024:	08 94       	sec
    5026:	c1 1c       	adc	r12, r1
    5028:	d1 1c       	adc	r13, r1
    502a:	b6 01       	movw	r22, r12
    502c:	0e 94 34 23 	call	0x4668	; 0x4668 <extractString>
    5030:	7c 01       	movw	r14, r24
        if (relativestart == '\0')
    5032:	00 97       	sbiw	r24, 0x00	; 0
    5034:	61 f4       	brne	.+24     	; 0x504e <locateFileName+0x9c>
        {
            if ((ret = existBlock(nextString, addrTrack)) == 0)
    5036:	c6 01       	movw	r24, r12
    5038:	b8 01       	movw	r22, r16
    503a:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <existBlock>
    503e:	00 97       	sbiw	r24, 0x00	; 0
    5040:	79 f1       	breq	.+94     	; 0x50a0 <locateFileName+0xee>
                *state = 0;
                return addrTrack;
            }
            else
            {
                *state = ret;
    5042:	f5 01       	movw	r30, r10
    5044:	91 83       	std	Z+1, r25	; 0x01
    5046:	80 83       	st	Z, r24
                ret = changeDirectory(nextString, addrTrack);
    5048:	c6 01       	movw	r24, r12
    504a:	b8 01       	movw	r22, r16
    504c:	32 c0       	rjmp	.+100    	; 0x50b2 <locateFileName+0x100>
                return ret;
            }
        }
        else
        {
            if ((ret = existBlock(nextString, addrTrack)) == 0)
    504e:	c6 01       	movw	r24, r12
    5050:	b8 01       	movw	r22, r16
    5052:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <existBlock>
    5056:	00 97       	sbiw	r24, 0x00	; 0
    5058:	e9 f1       	breq	.+122    	; 0x50d4 <locateFileName+0x122>
                //ok there is only one string but further strings after that. And this string does not exist    
                return -1;
            }
            else
            {
                addrTrack = changeDirectory(nextString, addrTrack);
    505a:	c6 01       	movw	r24, r12
    505c:	b8 01       	movw	r22, r16
    505e:	0e 94 cf 26 	call	0x4d9e	; 0x4d9e <changeDirectory>
    5062:	8c 01       	movw	r16, r24
    5064:	05 c0       	rjmp	.+10     	; 0x5070 <locateFileName+0xbe>
        relativestart = pathname + 1;
    }
    else if (p == '/')
    {
        addrTrack = FSROOTNODE;
        relativestart = pathname;
    5066:	76 01       	movw	r14, r12
    {
        relativestart = pathname + 1;
    }
    else if (p == '/')
    {
        addrTrack = FSROOTNODE;
    5068:	00 e0       	ldi	r16, 0x00	; 0
    506a:	10 e0       	ldi	r17, 0x00	; 0
    506c:	01 c0       	rjmp	.+2      	; 0x5070 <locateFileName+0xbe>
    int ret;

    //first classify what type of pathname this is 
    p = pathname[0];
    q = pathname[1];
    relativestart = pathname;
    506e:	76 01       	movw	r14, r12
        //Now all cases have been uniform now. It is like /a/b/c type 
        if (isDirectory(addrTrack) == 0)
        {
            return -1;
        }
        relativestart = extractString(relativestart, nextString);
    5070:	6e 01       	movw	r12, r28
    5072:	08 94       	sec
    5074:	c1 1c       	adc	r12, r1
    5076:	d1 1c       	adc	r13, r1
        }
    }
    while (1)
    {
        //Now all cases have been uniform now. It is like /a/b/c type 
        if (isDirectory(addrTrack) == 0)
    5078:	c8 01       	movw	r24, r16
    507a:	0e 94 ce 27 	call	0x4f9c	; 0x4f9c <isDirectory>
    507e:	00 97       	sbiw	r24, 0x00	; 0
    5080:	49 f1       	breq	.+82     	; 0x50d4 <locateFileName+0x122>
        {
            return -1;
        }
        relativestart = extractString(relativestart, nextString);
    5082:	c7 01       	movw	r24, r14
    5084:	b6 01       	movw	r22, r12
    5086:	0e 94 34 23 	call	0x4668	; 0x4668 <extractString>
    508a:	7c 01       	movw	r14, r24
        if (*relativestart == '\0')
    508c:	fc 01       	movw	r30, r24
    508e:	80 81       	ld	r24, Z
    5090:	88 23       	and	r24, r24
    5092:	a1 f4       	brne	.+40     	; 0x50bc <locateFileName+0x10a>
        {
            if ((ret = existBlock(nextString, addrTrack)) == 0)
    5094:	c6 01       	movw	r24, r12
    5096:	b8 01       	movw	r22, r16
    5098:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <existBlock>
    509c:	00 97       	sbiw	r24, 0x00	; 0
    509e:	21 f4       	brne	.+8      	; 0x50a8 <locateFileName+0xf6>
            {
                //ok there is only one string but no further strings after that. And this string does not exist 
                *state = 0;
    50a0:	f5 01       	movw	r30, r10
    50a2:	11 82       	std	Z+1, r1	; 0x01
    50a4:	10 82       	st	Z, r1
                return addrTrack;
    50a6:	18 c0       	rjmp	.+48     	; 0x50d8 <locateFileName+0x126>
            }
            else
            {
                *state = ret;
    50a8:	f5 01       	movw	r30, r10
    50aa:	91 83       	std	Z+1, r25	; 0x01
    50ac:	80 83       	st	Z, r24
                ret = changeDirectory(nextString, addrTrack);
    50ae:	c6 01       	movw	r24, r12
    50b0:	b8 01       	movw	r22, r16
    50b2:	0e 94 cf 26 	call	0x4d9e	; 0x4d9e <changeDirectory>
                return ret;
    50b6:	08 2f       	mov	r16, r24
    50b8:	19 2f       	mov	r17, r25
    50ba:	0e c0       	rjmp	.+28     	; 0x50d8 <locateFileName+0x126>
            }
        }
        else
        {
            if ((ret = existBlock(nextString, addrTrack)) == 0)
    50bc:	c6 01       	movw	r24, r12
    50be:	b8 01       	movw	r22, r16
    50c0:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <existBlock>
    50c4:	00 97       	sbiw	r24, 0x00	; 0
    50c6:	31 f0       	breq	.+12     	; 0x50d4 <locateFileName+0x122>
                //ok there is only one string but further strings after that. And this string does not exist    
                return -1;
            }
            else
            {
                addrTrack = changeDirectory(nextString, addrTrack);
    50c8:	c6 01       	movw	r24, r12
    50ca:	b8 01       	movw	r22, r16
    50cc:	0e 94 cf 26 	call	0x4d9e	; 0x4d9e <changeDirectory>
    50d0:	8c 01       	movw	r16, r24
            }
        }
    }
    50d2:	d2 cf       	rjmp	.-92     	; 0x5078 <locateFileName+0xc6>
        else
        {
            if ((ret = existBlock(nextString, addrTrack)) == 0)
            {
                //ok there is only one string but further strings after that. And this string does not exist    
                return -1;
    50d4:	0f ef       	ldi	r16, 0xFF	; 255
    50d6:	1f ef       	ldi	r17, 0xFF	; 255
            {
                addrTrack = changeDirectory(nextString, addrTrack);
            }
        }
    }
}
    50d8:	c8 01       	movw	r24, r16
    50da:	2d 96       	adiw	r28, 0x0d	; 13
    50dc:	0f b6       	in	r0, 0x3f	; 63
    50de:	f8 94       	cli
    50e0:	de bf       	out	0x3e, r29	; 62
    50e2:	0f be       	out	0x3f, r0	; 63
    50e4:	cd bf       	out	0x3d, r28	; 61
    50e6:	cf 91       	pop	r28
    50e8:	df 91       	pop	r29
    50ea:	1f 91       	pop	r17
    50ec:	0f 91       	pop	r16
    50ee:	ff 90       	pop	r15
    50f0:	ef 90       	pop	r14
    50f2:	df 90       	pop	r13
    50f4:	cf 90       	pop	r12
    50f6:	bf 90       	pop	r11
    50f8:	af 90       	pop	r10
    50fa:	08 95       	ret

000050fc <freeBlocks>:

//-------------------------------------------------------------------------
void freeBlocks(int addr)
{
    50fc:	0f 93       	push	r16
    50fe:	1f 93       	push	r17
    5100:	cf 93       	push	r28
    5102:	df 93       	push	r29
    5104:	8c 01       	movw	r16, r24
    5106:	ce e0       	ldi	r28, 0x0E	; 14
    5108:	d0 e0       	ldi	r29, 0x00	; 0
    int i;
    uint8_t readpage;

    for (i = 0; i < 8; i++)
    {
        readpage = fsread8uint(addr, FILE_ADDRPAGEOFFSET + i);
    510a:	c8 01       	movw	r24, r16
    510c:	be 01       	movw	r22, r28
    510e:	0e 94 89 22 	call	0x4512	; 0x4512 <fsread8uint>
        if (readpage == 0)
    5112:	88 23       	and	r24, r24
    5114:	39 f0       	breq	.+14     	; 0x5124 <freeBlocks+0x28>
        {
            break;
        }
        else
        {
            releaseFlashPage(readpage);
    5116:	90 e0       	ldi	r25, 0x00	; 0
    5118:	0e 94 56 2a 	call	0x54ac	; 0x54ac <releaseFlashPage>
    511c:	21 96       	adiw	r28, 0x01	; 1
void freeBlocks(int addr)
{
    int i;
    uint8_t readpage;

    for (i = 0; i < 8; i++)
    511e:	c6 31       	cpi	r28, 0x16	; 22
    5120:	d1 05       	cpc	r29, r1
    5122:	99 f7       	brne	.-26     	; 0x510a <freeBlocks+0xe>
        {
            releaseFlashPage(readpage);
        }
    }
    return;
}
    5124:	df 91       	pop	r29
    5126:	cf 91       	pop	r28
    5128:	1f 91       	pop	r17
    512a:	0f 91       	pop	r16
    512c:	08 95       	ret

0000512e <openFile>:

//open a file according to the mode and populate the fid section 
void openFile(int addr, int fid, int mode)
{
    512e:	ef 92       	push	r14
    5130:	ff 92       	push	r15
    5132:	0f 93       	push	r16
    5134:	1f 93       	push	r17
    5136:	cf 93       	push	r28
    5138:	df 93       	push	r29
    513a:	f8 2e       	mov	r15, r24
    513c:	e9 2e       	mov	r14, r25
    513e:	8b 01       	movw	r16, r22
    5140:	ea 01       	movw	r28, r20
    fidtable[fid].addr = (uint8_t) addr;
    5142:	cb 01       	movw	r24, r22
    5144:	fb 01       	movw	r30, r22
    5146:	ee 0f       	add	r30, r30
    5148:	ff 1f       	adc	r31, r31
    514a:	23 e0       	ldi	r18, 0x03	; 3
    514c:	88 0f       	add	r24, r24
    514e:	99 1f       	adc	r25, r25
    5150:	2a 95       	dec	r18
    5152:	e1 f7       	brne	.-8      	; 0x514c <openFile+0x1e>
    5154:	e8 0f       	add	r30, r24
    5156:	f9 1f       	adc	r31, r25
    5158:	e7 55       	subi	r30, 0x57	; 87
    515a:	f6 4f       	sbci	r31, 0xF6	; 246
    515c:	f2 82       	std	Z+2, r15	; 0x02
    fidtable[fid].mode = (uint8_t) mode;
    515e:	cb 01       	movw	r24, r22
    5160:	fb 01       	movw	r30, r22
    5162:	ee 0f       	add	r30, r30
    5164:	ff 1f       	adc	r31, r31
    5166:	a3 e0       	ldi	r26, 0x03	; 3
    5168:	88 0f       	add	r24, r24
    516a:	99 1f       	adc	r25, r25
    516c:	aa 95       	dec	r26
    516e:	e1 f7       	brne	.-8      	; 0x5168 <openFile+0x3a>
    5170:	e8 0f       	add	r30, r24
    5172:	f9 1f       	adc	r31, r25
    5174:	e7 55       	subi	r30, 0x57	; 87
    5176:	f6 4f       	sbci	r31, 0xF6	; 246
    5178:	43 83       	std	Z+3, r20	; 0x03
    fidtable[fid].size = fsread16uint(addr, 29);
    517a:	8f 2d       	mov	r24, r15
    517c:	9e 2d       	mov	r25, r14
    517e:	6d e1       	ldi	r22, 0x1D	; 29
    5180:	70 e0       	ldi	r23, 0x00	; 0
    5182:	0e 94 9d 22 	call	0x453a	; 0x453a <fsread16uint>
    5186:	98 01       	movw	r18, r16
    5188:	f8 01       	movw	r30, r16
    518a:	ee 0f       	add	r30, r30
    518c:	ff 1f       	adc	r31, r31
    518e:	63 e0       	ldi	r22, 0x03	; 3
    5190:	22 0f       	add	r18, r18
    5192:	33 1f       	adc	r19, r19
    5194:	6a 95       	dec	r22
    5196:	e1 f7       	brne	.-8      	; 0x5190 <openFile+0x62>
    5198:	e2 0f       	add	r30, r18
    519a:	f3 1f       	adc	r31, r19
    519c:	e7 55       	subi	r30, 0x57	; 87
    519e:	f6 4f       	sbci	r31, 0xF6	; 246
    51a0:	95 83       	std	Z+5, r25	; 0x05
    51a2:	84 83       	std	Z+4, r24	; 0x04
    //mode: 1 read 2 write 3 append 4 truncate 5 rw
    if (mode == 1)
    51a4:	c1 30       	cpi	r28, 0x01	; 1
    51a6:	d1 05       	cpc	r29, r1
    51a8:	29 f1       	breq	.+74     	; 0x51f4 <openFile+0xc6>
    {
        fidtable[fid].fpos = 0;
    }
    if (mode == 2)
    51aa:	c2 30       	cpi	r28, 0x02	; 2
    51ac:	d1 05       	cpc	r29, r1
    51ae:	11 f1       	breq	.+68     	; 0x51f4 <openFile+0xc6>
    {
        fidtable[fid].fpos = 0;
    }
    if (mode == 3)
    51b0:	c3 30       	cpi	r28, 0x03	; 3
    51b2:	d1 05       	cpc	r29, r1
    51b4:	a1 f4       	brne	.+40     	; 0x51de <openFile+0xb0>
    {
        fidtable[fid].fpos = fidtable[fid].size;
    51b6:	98 01       	movw	r18, r16
    51b8:	f8 01       	movw	r30, r16
    51ba:	ee 0f       	add	r30, r30
    51bc:	ff 1f       	adc	r31, r31
    51be:	43 e0       	ldi	r20, 0x03	; 3
    51c0:	22 0f       	add	r18, r18
    51c2:	33 1f       	adc	r19, r19
    51c4:	4a 95       	dec	r20
    51c6:	e1 f7       	brne	.-8      	; 0x51c0 <openFile+0x92>
    51c8:	e2 0f       	add	r30, r18
    51ca:	f3 1f       	adc	r31, r19
    51cc:	e7 55       	subi	r30, 0x57	; 87
    51ce:	f6 4f       	sbci	r31, 0xF6	; 246
    51d0:	a0 e0       	ldi	r26, 0x00	; 0
    51d2:	b0 e0       	ldi	r27, 0x00	; 0
    51d4:	86 83       	std	Z+6, r24	; 0x06
    51d6:	97 83       	std	Z+7, r25	; 0x07
    51d8:	a0 87       	std	Z+8, r26	; 0x08
    51da:	b1 87       	std	Z+9, r27	; 0x09
    51dc:	1c c0       	rjmp	.+56     	; 0x5216 <openFile+0xe8>
    }
    if (mode == 4)
    51de:	c4 30       	cpi	r28, 0x04	; 4
    51e0:	d1 05       	cpc	r29, r1
    51e2:	29 f4       	brne	.+10     	; 0x51ee <openFile+0xc0>
    {
        freeBlocks(addr);
    51e4:	8f 2d       	mov	r24, r15
    51e6:	9e 2d       	mov	r25, r14
    51e8:	0e 94 7e 28 	call	0x50fc	; 0x50fc <freeBlocks>
    51ec:	03 c0       	rjmp	.+6      	; 0x51f4 <openFile+0xc6>
        fidtable[fid].fpos = 0;
    }
    if (mode == 5)
    51ee:	c5 30       	cpi	r28, 0x05	; 5
    51f0:	d1 05       	cpc	r29, r1
    51f2:	89 f4       	brne	.+34     	; 0x5216 <openFile+0xe8>
    {
        fidtable[fid].fpos = 0;
    51f4:	c8 01       	movw	r24, r16
    51f6:	f8 01       	movw	r30, r16
    51f8:	ee 0f       	add	r30, r30
    51fa:	ff 1f       	adc	r31, r31
    51fc:	23 e0       	ldi	r18, 0x03	; 3
    51fe:	88 0f       	add	r24, r24
    5200:	99 1f       	adc	r25, r25
    5202:	2a 95       	dec	r18
    5204:	e1 f7       	brne	.-8      	; 0x51fe <openFile+0xd0>
    5206:	e8 0f       	add	r30, r24
    5208:	f9 1f       	adc	r31, r25
    520a:	e7 55       	subi	r30, 0x57	; 87
    520c:	f6 4f       	sbci	r31, 0xF6	; 246
    520e:	16 82       	std	Z+6, r1	; 0x06
    5210:	17 82       	std	Z+7, r1	; 0x07
    5212:	10 86       	std	Z+8, r1	; 0x08
    5214:	11 86       	std	Z+9, r1	; 0x09
    }
}
    5216:	df 91       	pop	r29
    5218:	cf 91       	pop	r28
    521a:	1f 91       	pop	r17
    521c:	0f 91       	pop	r16
    521e:	ff 90       	pop	r15
    5220:	ef 90       	pop	r14
    5222:	08 95       	ret

00005224 <getRealSector>:

//-------------------------------------------------------------------------
uint8_t getRealSector(uint8_t addr, uint8_t sectornum)
{
    5224:	0f 93       	push	r16
    5226:	1f 93       	push	r17
    5228:	06 2f       	mov	r16, r22
    uint8_t currentaddr;

    currentaddr = addr;
    while (sectornum >= 8)
    522a:	16 2f       	mov	r17, r22
    522c:	06 c0       	rjmp	.+12     	; 0x523a <getRealSector+0x16>
    {
        currentaddr = fsread8uint(currentaddr, FILE_NEXTOFFSET);
    522e:	90 e0       	ldi	r25, 0x00	; 0
    5230:	68 e1       	ldi	r22, 0x18	; 24
    5232:	70 e0       	ldi	r23, 0x00	; 0
    5234:	0e 94 89 22 	call	0x4512	; 0x4512 <fsread8uint>
        sectornum -= 8;
    5238:	18 50       	subi	r17, 0x08	; 8
uint8_t getRealSector(uint8_t addr, uint8_t sectornum)
{
    uint8_t currentaddr;

    currentaddr = addr;
    while (sectornum >= 8)
    523a:	18 30       	cpi	r17, 0x08	; 8
    523c:	c0 f7       	brcc	.-16     	; 0x522e <getRealSector+0xa>
    {
        currentaddr = fsread8uint(currentaddr, FILE_NEXTOFFSET);
        sectornum -= 8;
    }
    return fsread8uint(currentaddr, FILE_ADDRPAGEOFFSET + sectornum);
    523e:	07 70       	andi	r16, 0x07	; 7
    5240:	60 2f       	mov	r22, r16
    5242:	70 e0       	ldi	r23, 0x00	; 0
    5244:	62 5f       	subi	r22, 0xF2	; 242
    5246:	7f 4f       	sbci	r23, 0xFF	; 255
    5248:	90 e0       	ldi	r25, 0x00	; 0
    524a:	0e 94 89 22 	call	0x4512	; 0x4512 <fsread8uint>
}
    524e:	1f 91       	pop	r17
    5250:	0f 91       	pop	r16
    5252:	08 95       	ret

00005254 <newSector>:

//-------------------------------------------------------------------------
void newSector(int addr)
{
    5254:	ef 92       	push	r14
    5256:	ff 92       	push	r15
    5258:	0f 93       	push	r16
    525a:	1f 93       	push	r17
    525c:	cf 93       	push	r28
    525e:	df 93       	push	r29
    5260:	08 2f       	mov	r16, r24
            currentaddr = getnode;
            readpage = getFlashPage();
            fswrite8uint(currentaddr, FILE_ADDRPAGEOFFSET, readpage);
            return;
        }
        currentaddr = next;
    5262:	ce e0       	ldi	r28, 0x0E	; 14
    5264:	d0 e0       	ldi	r29, 0x00	; 0
    // 3 get to the next addr and loop 
    while (1)
    {
        for (i = 0; i < 8; i++)
        {
            readpage = fsread8uint(currentaddr, FILE_ADDRPAGEOFFSET + i);
    5266:	80 2f       	mov	r24, r16
    5268:	90 e0       	ldi	r25, 0x00	; 0
    526a:	be 01       	movw	r22, r28
    526c:	0e 94 89 22 	call	0x4512	; 0x4512 <fsread8uint>
            if (readpage == 0)
    5270:	88 23       	and	r24, r24
    5272:	69 f0       	breq	.+26     	; 0x528e <newSector+0x3a>
    5274:	21 96       	adiw	r28, 0x01	; 1
    // 1 check whether the current 8 pages are occupied or not
    // 2 check the next field is ok or not
    // 3 get to the next addr and loop 
    while (1)
    {
        for (i = 0; i < 8; i++)
    5276:	c6 31       	cpi	r28, 0x16	; 22
    5278:	d1 05       	cpc	r29, r1
    527a:	a9 f7       	brne	.-22     	; 0x5266 <newSector+0x12>
        {
            readpage = getFlashPage();
            fswrite8uint(currentaddr, FILE_ADDRPAGEOFFSET + i, readpage);
            return;
        }
        next = fsread8uint(currentaddr, FILE_NEXTOFFSET);
    527c:	80 2f       	mov	r24, r16
    527e:	90 e0       	ldi	r25, 0x00	; 0
    5280:	68 e1       	ldi	r22, 0x18	; 24
    5282:	70 e0       	ldi	r23, 0x00	; 0
    5284:	0e 94 89 22 	call	0x4512	; 0x4512 <fsread8uint>
        if (next == 0)
    5288:	88 23       	and	r24, r24
    528a:	51 f7       	brne	.-44     	; 0x5260 <newSector+0xc>
    528c:	07 c0       	rjmp	.+14     	; 0x529c <newSector+0x48>
                break;
            }
        }
        if (i < 8)
        {
            readpage = getFlashPage();
    528e:	0e 94 f5 29 	call	0x53ea	; 0x53ea <getFlashPage>
    5292:	48 2f       	mov	r20, r24
            fswrite8uint(currentaddr, FILE_ADDRPAGEOFFSET + i, readpage);
    5294:	80 2f       	mov	r24, r16
    5296:	90 e0       	ldi	r25, 0x00	; 0
    5298:	be 01       	movw	r22, r28
    529a:	11 c0       	rjmp	.+34     	; 0x52be <newSector+0x6a>
            return;
        }
        next = fsread8uint(currentaddr, FILE_NEXTOFFSET);
        if (next == 0)
        {
            getnode = getVectorNode();
    529c:	0e 94 d1 2a 	call	0x55a2	; 0x55a2 <getVectorNode>
    52a0:	18 2f       	mov	r17, r24
            fswrite8uint(currentaddr, FILE_NEXTOFFSET, getnode);
    52a2:	80 2f       	mov	r24, r16
    52a4:	90 e0       	ldi	r25, 0x00	; 0
    52a6:	68 e1       	ldi	r22, 0x18	; 24
    52a8:	70 e0       	ldi	r23, 0x00	; 0
    52aa:	41 2f       	mov	r20, r17
    52ac:	0e 94 c5 22 	call	0x458a	; 0x458a <fswrite8uint>
            currentaddr = getnode;
            readpage = getFlashPage();
    52b0:	0e 94 f5 29 	call	0x53ea	; 0x53ea <getFlashPage>
    52b4:	48 2f       	mov	r20, r24
            fswrite8uint(currentaddr, FILE_ADDRPAGEOFFSET, readpage);
    52b6:	81 2f       	mov	r24, r17
    52b8:	90 e0       	ldi	r25, 0x00	; 0
    52ba:	6e e0       	ldi	r22, 0x0E	; 14
    52bc:	70 e0       	ldi	r23, 0x00	; 0
    52be:	0e 94 c5 22 	call	0x458a	; 0x458a <fswrite8uint>
            return;
        }
        currentaddr = next;
    }
}
    52c2:	df 91       	pop	r29
    52c4:	cf 91       	pop	r28
    52c6:	1f 91       	pop	r17
    52c8:	0f 91       	pop	r16
    52ca:	ff 90       	pop	r15
    52cc:	ef 90       	pop	r14
    52ce:	08 95       	ret

000052d0 <addChildNode>:

//-------------------------------------------------------------------------
void addChildNode(uint8_t addr, uint8_t child)
{
    52d0:	cf 92       	push	r12
    52d2:	df 92       	push	r13
    52d4:	ef 92       	push	r14
    52d6:	ff 92       	push	r15
    52d8:	1f 93       	push	r17
    52da:	df 93       	push	r29
    52dc:	cf 93       	push	r28
    52de:	0f 92       	push	r0
    52e0:	cd b7       	in	r28, 0x3d	; 61
    52e2:	de b7       	in	r29, 0x3e	; 62
    52e4:	18 2f       	mov	r17, r24
    52e6:	46 2f       	mov	r20, r22
    52e8:	5e e0       	ldi	r21, 0x0E	; 14
    52ea:	c5 2e       	mov	r12, r21
    52ec:	d1 2c       	mov	r13, r1

    for (i = 0; i < 10; i++)
    {
        uint8_t subaddr;

        subaddr = fsread8uint(addr, DIR_ADDRSUBOFFSET + i);
    52ee:	81 2f       	mov	r24, r17
    52f0:	90 e0       	ldi	r25, 0x00	; 0
    52f2:	b6 01       	movw	r22, r12
    52f4:	49 83       	std	Y+1, r20	; 0x01
    52f6:	0e 94 89 22 	call	0x4512	; 0x4512 <fsread8uint>
        if (subaddr == 0)
    52fa:	49 81       	ldd	r20, Y+1	; 0x01
    52fc:	88 23       	and	r24, r24
    52fe:	31 f4       	brne	.+12     	; 0x530c <addChildNode+0x3c>
        {
            fswrite8uint(addr, DIR_ADDRSUBOFFSET + i, child);
    5300:	81 2f       	mov	r24, r17
    5302:	90 e0       	ldi	r25, 0x00	; 0
    5304:	b6 01       	movw	r22, r12
    5306:	0e 94 c5 22 	call	0x458a	; 0x458a <fswrite8uint>
            return;
    530a:	07 c0       	rjmp	.+14     	; 0x531a <addChildNode+0x4a>
    530c:	08 94       	sec
    530e:	c1 1c       	adc	r12, r1
    5310:	d1 1c       	adc	r13, r1
//-------------------------------------------------------------------------
void addChildNode(uint8_t addr, uint8_t child)
{
    uint8_t i;

    for (i = 0; i < 10; i++)
    5312:	28 e1       	ldi	r18, 0x18	; 24
    5314:	c2 16       	cp	r12, r18
    5316:	d1 04       	cpc	r13, r1
    5318:	51 f7       	brne	.-44     	; 0x52ee <addChildNode+0x1e>
            fswrite8uint(addr, DIR_ADDRSUBOFFSET + i, child);
            return;
        }
    }
    return;
}
    531a:	0f 90       	pop	r0
    531c:	cf 91       	pop	r28
    531e:	df 91       	pop	r29
    5320:	1f 91       	pop	r17
    5322:	ff 90       	pop	r15
    5324:	ef 90       	pop	r14
    5326:	df 90       	pop	r13
    5328:	cf 90       	pop	r12
    532a:	08 95       	ret

0000532c <removeChildNode>:

//-------------------------------------------------------------------------
void removeChildNode(uint8_t addr, uint8_t child)
{
    532c:	ef 92       	push	r14
    532e:	ff 92       	push	r15
    5330:	0f 93       	push	r16
    5332:	1f 93       	push	r17
    5334:	cf 93       	push	r28
    5336:	df 93       	push	r29
    5338:	18 2f       	mov	r17, r24
    533a:	06 2f       	mov	r16, r22
    533c:	ce e0       	ldi	r28, 0x0E	; 14
    533e:	d0 e0       	ldi	r29, 0x00	; 0

    for (i = 0; i < 10; i++)
    {
        uint8_t subaddr;

        subaddr = fsread8uint(addr, DIR_ADDRSUBOFFSET + i);
    5340:	81 2f       	mov	r24, r17
    5342:	90 e0       	ldi	r25, 0x00	; 0
    5344:	be 01       	movw	r22, r28
    5346:	0e 94 89 22 	call	0x4512	; 0x4512 <fsread8uint>
        if (subaddr == child)
    534a:	80 17       	cp	r24, r16
    534c:	39 f4       	brne	.+14     	; 0x535c <removeChildNode+0x30>
        {
            fswrite8uint(addr, DIR_ADDRSUBOFFSET + i, 0);
    534e:	81 2f       	mov	r24, r17
    5350:	90 e0       	ldi	r25, 0x00	; 0
    5352:	be 01       	movw	r22, r28
    5354:	40 e0       	ldi	r20, 0x00	; 0
    5356:	0e 94 c5 22 	call	0x458a	; 0x458a <fswrite8uint>
            return;
    535a:	04 c0       	rjmp	.+8      	; 0x5364 <removeChildNode+0x38>
    535c:	21 96       	adiw	r28, 0x01	; 1
//-------------------------------------------------------------------------
void removeChildNode(uint8_t addr, uint8_t child)
{
    uint8_t i;

    for (i = 0; i < 10; i++)
    535e:	c8 31       	cpi	r28, 0x18	; 24
    5360:	d1 05       	cpc	r29, r1
    5362:	71 f7       	brne	.-36     	; 0x5340 <removeChildNode+0x14>
            fswrite8uint(addr, DIR_ADDRSUBOFFSET + i, 0);
            return;
        }
    }
    return;
}
    5364:	df 91       	pop	r29
    5366:	cf 91       	pop	r28
    5368:	1f 91       	pop	r17
    536a:	0f 91       	pop	r16
    536c:	ff 90       	pop	r15
    536e:	ef 90       	pop	r14
    5370:	08 95       	ret

00005372 <setbit.clone.0>:
    set += number / 8;
    return (*set & (1 << (number % 8))) != 0;   /* 0 or 1       */
}

//-------------------------------------------------------------------------
static void setbit(char *set, int number, int value)
    5372:	9b 01       	movw	r18, r22
{
    set += number / 8;
    5374:	68 e0       	ldi	r22, 0x08	; 8
    5376:	70 e0       	ldi	r23, 0x00	; 0
    5378:	0e 94 eb 48 	call	0x91d6	; 0x91d6 <__divmodhi4>
    537c:	fb 01       	movw	r30, r22
    537e:	e1 57       	subi	r30, 0x71	; 113
    5380:	fc 4f       	sbci	r31, 0xFC	; 252
    if (value)
    5382:	21 15       	cp	r18, r1
    5384:	31 05       	cpc	r19, r1
    5386:	59 f0       	breq	.+22     	; 0x539e <setbit.clone.0+0x2c>
    {
        *set |= 1 << (number % 8);
    5388:	21 e0       	ldi	r18, 0x01	; 1
    538a:	30 e0       	ldi	r19, 0x00	; 0
    538c:	02 c0       	rjmp	.+4      	; 0x5392 <setbit.clone.0+0x20>
    538e:	22 0f       	add	r18, r18
    5390:	33 1f       	adc	r19, r19
    5392:	8a 95       	dec	r24
    5394:	e2 f7       	brpl	.-8      	; 0x538e <setbit.clone.0+0x1c>
    5396:	80 81       	ld	r24, Z
    5398:	82 2b       	or	r24, r18
    539a:	80 83       	st	Z, r24
    539c:	08 95       	ret
    }                           /* set bit      */
    else
    {
        *set &= ~(1 << (number % 8));
    539e:	21 e0       	ldi	r18, 0x01	; 1
    53a0:	30 e0       	ldi	r19, 0x00	; 0
    53a2:	02 c0       	rjmp	.+4      	; 0x53a8 <setbit.clone.0+0x36>
    53a4:	22 0f       	add	r18, r18
    53a6:	33 1f       	adc	r19, r19
    53a8:	8a 95       	dec	r24
    53aa:	e2 f7       	brpl	.-8      	; 0x53a4 <setbit.clone.0+0x32>
    53ac:	20 95       	com	r18
    53ae:	80 81       	ld	r24, Z
    53b0:	28 23       	and	r18, r24
    53b2:	20 83       	st	Z, r18
    53b4:	08 95       	ret

000053b6 <writeVectorFlashToExternalStorage>:
static char vectorflash[32];

void writeVectorFlashToExternalStorage()
{
#ifdef PLATFORM_AVR
    genericwriteBytes(FLASHVECTORSTART, 32, vectorflash);
    53b6:	8c e6       	ldi	r24, 0x6C	; 108
    53b8:	9c e0       	ldi	r25, 0x0C	; 12
    53ba:	60 e2       	ldi	r22, 0x20	; 32
    53bc:	70 e0       	ldi	r23, 0x00	; 0
    53be:	4f e8       	ldi	r20, 0x8F	; 143
    53c0:	53 e0       	ldi	r21, 0x03	; 3
    53c2:	0e 94 95 1a 	call	0x352a	; 0x352a <genericwriteBytes>
#endif
}
    53c6:	08 95       	ret

000053c8 <readVectorFlashFromExternalStorage>:

//-------------------------------------------------------------------------
void readVectorFlashFromExternalStorage()
{
#ifdef PLATFORM_AVR
    genericreadBytes(FLASHVECTORSTART, 32, vectorflash);
    53c8:	8c e6       	ldi	r24, 0x6C	; 108
    53ca:	9c e0       	ldi	r25, 0x0C	; 12
    53cc:	60 e2       	ldi	r22, 0x20	; 32
    53ce:	70 e0       	ldi	r23, 0x00	; 0
    53d0:	4f e8       	ldi	r20, 0x8F	; 143
    53d2:	53 e0       	ldi	r21, 0x03	; 3
    53d4:	0e 94 92 1a 	call	0x3524	; 0x3524 <genericreadBytes>
#endif
}
    53d8:	08 95       	ret

000053da <initVectorFlash>:
    }                           /* clear bit    */
}

//-------------------------------------------------------------------------
void initVectorFlash()
{
    53da:	ef e8       	ldi	r30, 0x8F	; 143
    53dc:	f3 e0       	ldi	r31, 0x03	; 3
    int i;

    for (i = 0; i < 32; i++)
    {
        vectorflash[i] = 0;
    53de:	11 92       	st	Z+, r1
//-------------------------------------------------------------------------
void initVectorFlash()
{
    int i;

    for (i = 0; i < 32; i++)
    53e0:	83 e0       	ldi	r24, 0x03	; 3
    53e2:	ef 3a       	cpi	r30, 0xAF	; 175
    53e4:	f8 07       	cpc	r31, r24
    53e6:	d9 f7       	brne	.-10     	; 0x53de <initVectorFlash+0x4>
    {
        vectorflash[i] = 0;
    }
}
    53e8:	08 95       	ret

000053ea <getFlashPage>:

//-------------------------------------------------------------------------
int getFlashPage()
{
    53ea:	ef 92       	push	r14
    53ec:	ff 92       	push	r15
    53ee:	cf 93       	push	r28
    53f0:	df 93       	push	r29
    int num;

    for (num = 0; num < 256; num++)
    53f2:	80 e0       	ldi	r24, 0x00	; 0
    53f4:	90 e0       	ldi	r25, 0x00	; 0
}

//-------------------------------------------------------------------------
static int getbit(char *set, int number)
{
    set += number / 8;
    53f6:	fc 01       	movw	r30, r24
    53f8:	23 e0       	ldi	r18, 0x03	; 3
    53fa:	f5 95       	asr	r31
    53fc:	e7 95       	ror	r30
    53fe:	2a 95       	dec	r18
    5400:	e1 f7       	brne	.-8      	; 0x53fa <getFlashPage+0x10>
    return (*set & (1 << (number % 8))) != 0;   /* 0 or 1       */
    5402:	e1 57       	subi	r30, 0x71	; 113
    5404:	fc 4f       	sbci	r31, 0xFC	; 252
    5406:	20 81       	ld	r18, Z
    5408:	33 27       	eor	r19, r19
    540a:	27 fd       	sbrc	r18, 7
    540c:	30 95       	com	r19
    540e:	ac 01       	movw	r20, r24
    5410:	47 70       	andi	r20, 0x07	; 7
    5412:	50 70       	andi	r21, 0x00	; 0
    5414:	02 c0       	rjmp	.+4      	; 0x541a <getFlashPage+0x30>
    5416:	35 95       	asr	r19
    5418:	27 95       	ror	r18
    541a:	4a 95       	dec	r20
    541c:	e2 f7       	brpl	.-8      	; 0x5416 <getFlashPage+0x2c>
    541e:	ec 01       	movw	r28, r24
    5420:	21 96       	adiw	r28, 0x01	; 1
{
    int num;

    for (num = 0; num < 256; num++)
    {
        if (getbit(vectorflash, num) == 0)
    5422:	20 fd       	sbrc	r18, 0
    5424:	05 c0       	rjmp	.+10     	; 0x5430 <getFlashPage+0x46>
        {
            setbit(vectorflash, num, 1);
    5426:	61 e0       	ldi	r22, 0x01	; 1
    5428:	70 e0       	ldi	r23, 0x00	; 0
    542a:	0e 94 b9 29 	call	0x5372	; 0x5372 <setbit.clone.0>
            return num + 1;
    542e:	07 c0       	rjmp	.+14     	; 0x543e <getFlashPage+0x54>
//-------------------------------------------------------------------------
int getFlashPage()
{
    int num;

    for (num = 0; num < 256; num++)
    5430:	ce 01       	movw	r24, r28
    5432:	21 e0       	ldi	r18, 0x01	; 1
    5434:	c0 30       	cpi	r28, 0x00	; 0
    5436:	d2 07       	cpc	r29, r18
    5438:	f1 f6       	brne	.-68     	; 0x53f6 <getFlashPage+0xc>
        {
            setbit(vectorflash, num, 1);
            return num + 1;
        }
    }
    return -1;
    543a:	cf ef       	ldi	r28, 0xFF	; 255
    543c:	df ef       	ldi	r29, 0xFF	; 255
}
    543e:	ce 01       	movw	r24, r28
    5440:	df 91       	pop	r29
    5442:	cf 91       	pop	r28
    5444:	ff 90       	pop	r15
    5446:	ef 90       	pop	r14
    5448:	08 95       	ret

0000544a <scanVectorFlash>:

//-------------------------------------------------------------------------
void scanVectorFlash()
{
    544a:	0f 93       	push	r16
    544c:	1f 93       	push	r17
    544e:	cf 93       	push	r28
    5450:	df 93       	push	r29
    int num, addr;
    uint8_t valid;
    uint8_t type;
    uint8_t readpage;

    for (num = 0; num < 96; num++)
    5452:	c0 e0       	ldi	r28, 0x00	; 0
    5454:	d0 e0       	ldi	r29, 0x00	; 0
    {
        addr = num + 1;
    5456:	21 96       	adiw	r28, 0x01	; 1
        valid = fsread8uint(addr, VALIDOFFSET);
    5458:	ce 01       	movw	r24, r28
    545a:	6d e0       	ldi	r22, 0x0D	; 13
    545c:	70 e0       	ldi	r23, 0x00	; 0
    545e:	0e 94 89 22 	call	0x4512	; 0x4512 <fsread8uint>
    5462:	08 2f       	mov	r16, r24
        type = fsread8uint(addr, TYPEOFFSET);
    5464:	ce 01       	movw	r24, r28
    5466:	6c e0       	ldi	r22, 0x0C	; 12
    5468:	70 e0       	ldi	r23, 0x00	; 0
    546a:	0e 94 89 22 	call	0x4512	; 0x4512 <fsread8uint>
        if ((valid == 1) && (type == FILENODE))
    546e:	01 30       	cpi	r16, 0x01	; 1
    5470:	a9 f4       	brne	.+42     	; 0x549c <scanVectorFlash+0x52>
    5472:	82 30       	cpi	r24, 0x02	; 2
    5474:	99 f4       	brne	.+38     	; 0x549c <scanVectorFlash+0x52>
    5476:	0e e0       	ldi	r16, 0x0E	; 14
    5478:	10 e0       	ldi	r17, 0x00	; 0
        {
            char i;

            for (i = 0; i < 8; i++)
            {
                readpage = fsread8uint(addr, FILE_ADDRPAGEOFFSET + i);
    547a:	ce 01       	movw	r24, r28
    547c:	b8 01       	movw	r22, r16
    547e:	0e 94 89 22 	call	0x4512	; 0x4512 <fsread8uint>
                if (readpage > 0)
    5482:	88 23       	and	r24, r24
    5484:	31 f0       	breq	.+12     	; 0x5492 <scanVectorFlash+0x48>
                {
                    setbit(vectorflash, readpage - 1, 1);
    5486:	90 e0       	ldi	r25, 0x00	; 0
    5488:	01 97       	sbiw	r24, 0x01	; 1
    548a:	61 e0       	ldi	r22, 0x01	; 1
    548c:	70 e0       	ldi	r23, 0x00	; 0
    548e:	0e 94 b9 29 	call	0x5372	; 0x5372 <setbit.clone.0>
    5492:	0f 5f       	subi	r16, 0xFF	; 255
    5494:	1f 4f       	sbci	r17, 0xFF	; 255
        type = fsread8uint(addr, TYPEOFFSET);
        if ((valid == 1) && (type == FILENODE))
        {
            char i;

            for (i = 0; i < 8; i++)
    5496:	06 31       	cpi	r16, 0x16	; 22
    5498:	11 05       	cpc	r17, r1
    549a:	79 f7       	brne	.-34     	; 0x547a <scanVectorFlash+0x30>
    int num, addr;
    uint8_t valid;
    uint8_t type;
    uint8_t readpage;

    for (num = 0; num < 96; num++)
    549c:	c0 36       	cpi	r28, 0x60	; 96
    549e:	d1 05       	cpc	r29, r1
    54a0:	d1 f6       	brne	.-76     	; 0x5456 <scanVectorFlash+0xc>
                    setbit(vectorflash, readpage - 1, 1);
                }
            }
        }
    }
}
    54a2:	df 91       	pop	r29
    54a4:	cf 91       	pop	r28
    54a6:	1f 91       	pop	r17
    54a8:	0f 91       	pop	r16
    54aa:	08 95       	ret

000054ac <releaseFlashPage>:

//-------------------------------------------------------------------------
void releaseFlashPage(int num)
{
    setbit(vectorflash, num - 1, 0);
    54ac:	01 97       	sbiw	r24, 0x01	; 1
    54ae:	60 e0       	ldi	r22, 0x00	; 0
    54b0:	70 e0       	ldi	r23, 0x00	; 0
    54b2:	0e 94 b9 29 	call	0x5372	; 0x5372 <setbit.clone.0>
}
    54b6:	08 95       	ret

000054b8 <countVectorFlash>:
int countVectorFlash()
{
    int count, num;

    count = 0;
    for (num = 0; num < 256; num++)
    54b8:	20 e0       	ldi	r18, 0x00	; 0
    54ba:	30 e0       	ldi	r19, 0x00	; 0
//-------------------------------------------------------------------------
int countVectorFlash()
{
    int count, num;

    count = 0;
    54bc:	80 e0       	ldi	r24, 0x00	; 0
    54be:	90 e0       	ldi	r25, 0x00	; 0
}

//-------------------------------------------------------------------------
static int getbit(char *set, int number)
{
    set += number / 8;
    54c0:	f9 01       	movw	r30, r18
    54c2:	43 e0       	ldi	r20, 0x03	; 3
    54c4:	f5 95       	asr	r31
    54c6:	e7 95       	ror	r30
    54c8:	4a 95       	dec	r20
    54ca:	e1 f7       	brne	.-8      	; 0x54c4 <countVectorFlash+0xc>
    return (*set & (1 << (number % 8))) != 0;   /* 0 or 1       */
    54cc:	e1 57       	subi	r30, 0x71	; 113
    54ce:	fc 4f       	sbci	r31, 0xFC	; 252
    54d0:	40 81       	ld	r20, Z
    54d2:	55 27       	eor	r21, r21
    54d4:	47 fd       	sbrc	r20, 7
    54d6:	50 95       	com	r21
    54d8:	b9 01       	movw	r22, r18
    54da:	67 70       	andi	r22, 0x07	; 7
    54dc:	70 70       	andi	r23, 0x00	; 0
    54de:	02 c0       	rjmp	.+4      	; 0x54e4 <countVectorFlash+0x2c>
    54e0:	55 95       	asr	r21
    54e2:	47 95       	ror	r20
    54e4:	6a 95       	dec	r22
    54e6:	e2 f7       	brpl	.-8      	; 0x54e0 <countVectorFlash+0x28>
    int count, num;

    count = 0;
    for (num = 0; num < 256; num++)
    {
        if (getbit(vectorflash, num) == 1)
    54e8:	40 fd       	sbrc	r20, 0
        {
            count++;
    54ea:	01 96       	adiw	r24, 0x01	; 1
int countVectorFlash()
{
    int count, num;

    count = 0;
    for (num = 0; num < 256; num++)
    54ec:	2f 5f       	subi	r18, 0xFF	; 255
    54ee:	3f 4f       	sbci	r19, 0xFF	; 255
    54f0:	41 e0       	ldi	r20, 0x01	; 1
    54f2:	20 30       	cpi	r18, 0x00	; 0
    54f4:	34 07       	cpc	r19, r20
    54f6:	21 f7       	brne	.-56     	; 0x54c0 <countVectorFlash+0x8>
        if (getbit(vectorflash, num) == 1)
        {
            count++;
        }
    }
    return 256 - count;
    54f8:	28 1b       	sub	r18, r24
    54fa:	39 0b       	sbc	r19, r25
}
    54fc:	c9 01       	movw	r24, r18
    54fe:	08 95       	ret

00005500 <printVectorFlash>:
        else
        {
            data[i] = 1;
        }
    }
}
    5500:	08 95       	ret

00005502 <writeVectorNodeToExternalStorage>:
#include "storageconstants.h"

char vectornode[12];
void writeVectorNodeToExternalStorage()
{
    genericreadBytes(EEPROMVECTORSTART, 12, vectornode);
    5502:	80 e6       	ldi	r24, 0x60	; 96
    5504:	9c e0       	ldi	r25, 0x0C	; 12
    5506:	6c e0       	ldi	r22, 0x0C	; 12
    5508:	70 e0       	ldi	r23, 0x00	; 0
    550a:	4d eb       	ldi	r20, 0xBD	; 189
    550c:	59 e0       	ldi	r21, 0x09	; 9
    550e:	0e 94 92 1a 	call	0x3524	; 0x3524 <genericreadBytes>
}
    5512:	08 95       	ret

00005514 <readVectorNodeFromExternalStorage>:

//-------------------------------------------------------------------------
void readVectorNodeFromExternalStorage()
{
    genericwriteBytes(EEPROMVECTORSTART, 12, vectornode);
    5514:	80 e6       	ldi	r24, 0x60	; 96
    5516:	9c e0       	ldi	r25, 0x0C	; 12
    5518:	6c e0       	ldi	r22, 0x0C	; 12
    551a:	70 e0       	ldi	r23, 0x00	; 0
    551c:	4d eb       	ldi	r20, 0xBD	; 189
    551e:	59 e0       	ldi	r21, 0x09	; 9
    5520:	0e 94 95 1a 	call	0x352a	; 0x352a <genericwriteBytes>
}
    5524:	08 95       	ret

00005526 <getbit>:

//-------------------------------------------------------------------------
int getbit(char *set, int number)
{
    5526:	fc 01       	movw	r30, r24
    5528:	cb 01       	movw	r24, r22
    set += number / 8;
    552a:	68 e0       	ldi	r22, 0x08	; 8
    552c:	70 e0       	ldi	r23, 0x00	; 0
    552e:	0e 94 eb 48 	call	0x91d6	; 0x91d6 <__divmodhi4>
    return (*set & (1 << (number % 8))) != 0;   /* 0 or 1       */
    5532:	e6 0f       	add	r30, r22
    5534:	f7 1f       	adc	r31, r23
    5536:	20 81       	ld	r18, Z
    5538:	33 27       	eor	r19, r19
    553a:	27 fd       	sbrc	r18, 7
    553c:	30 95       	com	r19
    553e:	02 c0       	rjmp	.+4      	; 0x5544 <getbit+0x1e>
    5540:	35 95       	asr	r19
    5542:	27 95       	ror	r18
    5544:	8a 95       	dec	r24
    5546:	e2 f7       	brpl	.-8      	; 0x5540 <getbit+0x1a>
    5548:	21 70       	andi	r18, 0x01	; 1
    554a:	30 70       	andi	r19, 0x00	; 0
}
    554c:	c9 01       	movw	r24, r18
    554e:	08 95       	ret

00005550 <setbit>:

//-------------------------------------------------------------------------
void setbit(char *set, int number, int value)
{
    5550:	fc 01       	movw	r30, r24
    5552:	cb 01       	movw	r24, r22
    5554:	9a 01       	movw	r18, r20
    set += number / 8;
    5556:	68 e0       	ldi	r22, 0x08	; 8
    5558:	70 e0       	ldi	r23, 0x00	; 0
    555a:	0e 94 eb 48 	call	0x91d6	; 0x91d6 <__divmodhi4>
    555e:	e6 0f       	add	r30, r22
    5560:	f7 1f       	adc	r31, r23
    5562:	90 81       	ld	r25, Z
    if (value)
    5564:	21 15       	cp	r18, r1
    5566:	31 05       	cpc	r19, r1
    5568:	49 f0       	breq	.+18     	; 0x557c <setbit+0x2c>
    {
        *set |= 1 << (number % 8);
    556a:	21 e0       	ldi	r18, 0x01	; 1
    556c:	30 e0       	ldi	r19, 0x00	; 0
    556e:	02 c0       	rjmp	.+4      	; 0x5574 <setbit+0x24>
    5570:	22 0f       	add	r18, r18
    5572:	33 1f       	adc	r19, r19
    5574:	8a 95       	dec	r24
    5576:	e2 f7       	brpl	.-8      	; 0x5570 <setbit+0x20>
    5578:	29 2b       	or	r18, r25
    557a:	09 c0       	rjmp	.+18     	; 0x558e <setbit+0x3e>
    }                           /* set bit      */
    else
    {
        *set &= ~(1 << (number % 8));
    557c:	21 e0       	ldi	r18, 0x01	; 1
    557e:	30 e0       	ldi	r19, 0x00	; 0
    5580:	02 c0       	rjmp	.+4      	; 0x5586 <setbit+0x36>
    5582:	22 0f       	add	r18, r18
    5584:	33 1f       	adc	r19, r19
    5586:	8a 95       	dec	r24
    5588:	e2 f7       	brpl	.-8      	; 0x5582 <setbit+0x32>
    558a:	20 95       	com	r18
    558c:	29 23       	and	r18, r25
    558e:	20 83       	st	Z, r18
    5590:	08 95       	ret

00005592 <initVectorNode>:
    }                           /* clear bit    */
}

//-------------------------------------------------------------------------
void initVectorNode()
{
    5592:	ed eb       	ldi	r30, 0xBD	; 189
    5594:	f9 e0       	ldi	r31, 0x09	; 9
    int i;

    for (i = 0; i < 12; i++)
    {
        vectornode[i] = 0;
    5596:	11 92       	st	Z+, r1
//-------------------------------------------------------------------------
void initVectorNode()
{
    int i;

    for (i = 0; i < 12; i++)
    5598:	89 e0       	ldi	r24, 0x09	; 9
    559a:	e9 3c       	cpi	r30, 0xC9	; 201
    559c:	f8 07       	cpc	r31, r24
    559e:	d9 f7       	brne	.-10     	; 0x5596 <initVectorNode+0x4>
    {
        vectornode[i] = 0;
    }
}
    55a0:	08 95       	ret

000055a2 <getVectorNode>:

//-------------------------------------------------------------------------
int getVectorNode()
{
    55a2:	0f 93       	push	r16
    55a4:	1f 93       	push	r17
    55a6:	cf 93       	push	r28
    55a8:	df 93       	push	r29
    int num;

    for (num = 0; num < 96; num++)
    55aa:	c0 e0       	ldi	r28, 0x00	; 0
    55ac:	d0 e0       	ldi	r29, 0x00	; 0
    {
        if (getbit(vectornode, num) == 0)
    55ae:	8d eb       	ldi	r24, 0xBD	; 189
    55b0:	99 e0       	ldi	r25, 0x09	; 9
    55b2:	be 01       	movw	r22, r28
    55b4:	0e 94 93 2a 	call	0x5526	; 0x5526 <getbit>
    55b8:	8e 01       	movw	r16, r28
    55ba:	0f 5f       	subi	r16, 0xFF	; 255
    55bc:	1f 4f       	sbci	r17, 0xFF	; 255
    55be:	00 97       	sbiw	r24, 0x00	; 0
    55c0:	41 f4       	brne	.+16     	; 0x55d2 <getVectorNode+0x30>
        {
            setbit(vectornode, num, 1);
    55c2:	8d eb       	ldi	r24, 0xBD	; 189
    55c4:	99 e0       	ldi	r25, 0x09	; 9
    55c6:	be 01       	movw	r22, r28
    55c8:	41 e0       	ldi	r20, 0x01	; 1
    55ca:	50 e0       	ldi	r21, 0x00	; 0
    55cc:	0e 94 a8 2a 	call	0x5550	; 0x5550 <setbit>
            return num + 1;
    55d0:	06 c0       	rjmp	.+12     	; 0x55de <getVectorNode+0x3c>
//-------------------------------------------------------------------------
int getVectorNode()
{
    int num;

    for (num = 0; num < 96; num++)
    55d2:	e8 01       	movw	r28, r16
    55d4:	00 36       	cpi	r16, 0x60	; 96
    55d6:	11 05       	cpc	r17, r1
    55d8:	51 f7       	brne	.-44     	; 0x55ae <getVectorNode+0xc>
        {
            setbit(vectornode, num, 1);
            return num + 1;
        }
    }
    return -1;
    55da:	0f ef       	ldi	r16, 0xFF	; 255
    55dc:	1f ef       	ldi	r17, 0xFF	; 255
}
    55de:	c8 01       	movw	r24, r16
    55e0:	df 91       	pop	r29
    55e2:	cf 91       	pop	r28
    55e4:	1f 91       	pop	r17
    55e6:	0f 91       	pop	r16
    55e8:	08 95       	ret

000055ea <scanVectorNode>:

//-------------------------------------------------------------------------
void scanVectorNode()
{
    55ea:	0f 93       	push	r16
    55ec:	1f 93       	push	r17
    55ee:	cf 93       	push	r28
    55f0:	df 93       	push	r29
    int num, addr;
    uint8_t valid;

    for (num = 0; num < 96; num++)
    55f2:	c0 e0       	ldi	r28, 0x00	; 0
    55f4:	d0 e0       	ldi	r29, 0x00	; 0
    55f6:	01 c0       	rjmp	.+2      	; 0x55fa <scanVectorNode+0x10>
    55f8:	e8 01       	movw	r28, r16
    {
        addr = num + 1;
    55fa:	8e 01       	movw	r16, r28
    55fc:	0f 5f       	subi	r16, 0xFF	; 255
    55fe:	1f 4f       	sbci	r17, 0xFF	; 255
        valid = fsread8uint(addr, VALIDOFFSET);
    5600:	c8 01       	movw	r24, r16
    5602:	6d e0       	ldi	r22, 0x0D	; 13
    5604:	70 e0       	ldi	r23, 0x00	; 0
    5606:	0e 94 89 22 	call	0x4512	; 0x4512 <fsread8uint>
        if (valid == 0)
    560a:	88 23       	and	r24, r24
    560c:	31 f4       	brne	.+12     	; 0x561a <scanVectorNode+0x30>
        {
            setbit(vectornode, num, 0);
    560e:	8d eb       	ldi	r24, 0xBD	; 189
    5610:	99 e0       	ldi	r25, 0x09	; 9
    5612:	be 01       	movw	r22, r28
    5614:	40 e0       	ldi	r20, 0x00	; 0
    5616:	50 e0       	ldi	r21, 0x00	; 0
    5618:	05 c0       	rjmp	.+10     	; 0x5624 <scanVectorNode+0x3a>
        }
        else
        {
            setbit(vectornode, num, 1);
    561a:	8d eb       	ldi	r24, 0xBD	; 189
    561c:	99 e0       	ldi	r25, 0x09	; 9
    561e:	be 01       	movw	r22, r28
    5620:	41 e0       	ldi	r20, 0x01	; 1
    5622:	50 e0       	ldi	r21, 0x00	; 0
    5624:	0e 94 a8 2a 	call	0x5550	; 0x5550 <setbit>
void scanVectorNode()
{
    int num, addr;
    uint8_t valid;

    for (num = 0; num < 96; num++)
    5628:	00 36       	cpi	r16, 0x60	; 96
    562a:	11 05       	cpc	r17, r1
    562c:	29 f7       	brne	.-54     	; 0x55f8 <scanVectorNode+0xe>
        else
        {
            setbit(vectornode, num, 1);
        }
    }
}
    562e:	df 91       	pop	r29
    5630:	cf 91       	pop	r28
    5632:	1f 91       	pop	r17
    5634:	0f 91       	pop	r16
    5636:	08 95       	ret

00005638 <releaseVectorNode>:

//-------------------------------------------------------------------------
void releaseVectorNode(int num)
{
    setbit(vectornode, num - 1, 0);
    5638:	bc 01       	movw	r22, r24
    563a:	61 50       	subi	r22, 0x01	; 1
    563c:	70 40       	sbci	r23, 0x00	; 0
    563e:	8d eb       	ldi	r24, 0xBD	; 189
    5640:	99 e0       	ldi	r25, 0x09	; 9
    5642:	40 e0       	ldi	r20, 0x00	; 0
    5644:	50 e0       	ldi	r21, 0x00	; 0
    5646:	0e 94 a8 2a 	call	0x5550	; 0x5550 <setbit>
}
    564a:	08 95       	ret

0000564c <countVectorNode>:

//-------------------------------------------------------------------------
int countVectorNode()
{
    564c:	ef 92       	push	r14
    564e:	ff 92       	push	r15
    5650:	0f 93       	push	r16
    5652:	1f 93       	push	r17
    5654:	cf 93       	push	r28
    5656:	df 93       	push	r29
    int num, count;

    count = 0;
    5658:	00 e0       	ldi	r16, 0x00	; 0
    565a:	10 e0       	ldi	r17, 0x00	; 0
    for (num = 0; num < 96; num++)
    565c:	c0 e0       	ldi	r28, 0x00	; 0
    565e:	d0 e0       	ldi	r29, 0x00	; 0
    {
        if (getbit(vectornode, num) == 1)
    5660:	8d eb       	ldi	r24, 0xBD	; 189
    5662:	99 e0       	ldi	r25, 0x09	; 9
    5664:	be 01       	movw	r22, r28
    5666:	0e 94 93 2a 	call	0x5526	; 0x5526 <getbit>
    566a:	81 30       	cpi	r24, 0x01	; 1
    566c:	91 05       	cpc	r25, r1
    566e:	11 f4       	brne	.+4      	; 0x5674 <countVectorNode+0x28>
        {
            count++;
    5670:	0f 5f       	subi	r16, 0xFF	; 255
    5672:	1f 4f       	sbci	r17, 0xFF	; 255
int countVectorNode()
{
    int num, count;

    count = 0;
    for (num = 0; num < 96; num++)
    5674:	21 96       	adiw	r28, 0x01	; 1
    5676:	c0 36       	cpi	r28, 0x60	; 96
    5678:	d1 05       	cpc	r29, r1
    567a:	91 f7       	brne	.-28     	; 0x5660 <countVectorNode+0x14>
        if (getbit(vectornode, num) == 1)
        {
            count++;
        }
    }
    return 96 - count;
    567c:	c0 1b       	sub	r28, r16
    567e:	d1 0b       	sbc	r29, r17
}
    5680:	ce 01       	movw	r24, r28
    5682:	df 91       	pop	r29
    5684:	cf 91       	pop	r28
    5686:	1f 91       	pop	r17
    5688:	0f 91       	pop	r16
    568a:	ff 90       	pop	r15
    568c:	ef 90       	pop	r14
    568e:	08 95       	ret

00005690 <atmel_flash_low>:
*/
 /*static */ inline void atmel_flash_low(void)
{
    uint8_t sreg;

    sreg = SREG;
    5690:	8f b7       	in	r24, 0x3f	; 63
    cli();
    5692:	f8 94       	cli
    // clear flash clock
    ATMEL_FLASH_PORT &= ~(1 << ATMEL_FLASH_CLK);
    5694:	95 98       	cbi	0x12, 5	; 18
    // clear select pin
    ATMEL_FLASH_SELECT &= ~(1 << ATMEL_FLASH_SELECT_PIN);
    5696:	db 98       	cbi	0x1b, 3	; 27
    SREG = sreg;
    5698:	8f bf       	out	0x3f, r24	; 63
}
    569a:	08 95       	ret

0000569c <atmel_flash_high>:
/** @brief Set the flash pin high
*/
 /*static */ inline void atmel_flash_high(void)
{
    // set the pin high
    ATMEL_FLASH_SELECT |= 1 << ATMEL_FLASH_SELECT_PIN;
    569c:	db 9a       	sbi	0x1b, 3	; 27
}
    569e:	08 95       	ret

000056a0 <atmel_flash_get_byte>:
static uint8_t atmel_flash_get_byte(void)
{
    uint8_t spiIn = 0;
    uint8_t sreg;

    sreg = SREG;
    56a0:	2f b7       	in	r18, 0x3f	; 63
    cli();
    56a2:	f8 94       	cli
    BITINIT;
    56a4:	92 b3       	in	r25, 0x12	; 18
    56a6:	97 7d       	andi	r25, 0xD7	; 215
    READBIT(7);
    56a8:	92 bb       	out	0x12, r25	; 18
    56aa:	80 e0       	ldi	r24, 0x00	; 0
    56ac:	95 9a       	sbi	0x12, 5	; 18
    56ae:	82 99       	sbic	0x10, 2	; 16
    56b0:	80 68       	ori	r24, 0x80	; 128
    READBIT(6);
    56b2:	92 bb       	out	0x12, r25	; 18
    56b4:	95 9a       	sbi	0x12, 5	; 18
    56b6:	82 99       	sbic	0x10, 2	; 16
    56b8:	80 64       	ori	r24, 0x40	; 64
    READBIT(5);
    56ba:	92 bb       	out	0x12, r25	; 18
    56bc:	95 9a       	sbi	0x12, 5	; 18
    56be:	82 99       	sbic	0x10, 2	; 16
    56c0:	80 62       	ori	r24, 0x20	; 32
    READBIT(4);
    56c2:	92 bb       	out	0x12, r25	; 18
    56c4:	95 9a       	sbi	0x12, 5	; 18
    56c6:	82 99       	sbic	0x10, 2	; 16
    56c8:	80 61       	ori	r24, 0x10	; 16
    READBIT(3);
    56ca:	92 bb       	out	0x12, r25	; 18
    56cc:	95 9a       	sbi	0x12, 5	; 18
    56ce:	82 99       	sbic	0x10, 2	; 16
    56d0:	88 60       	ori	r24, 0x08	; 8
    READBIT(2);
    56d2:	92 bb       	out	0x12, r25	; 18
    56d4:	95 9a       	sbi	0x12, 5	; 18
    56d6:	82 99       	sbic	0x10, 2	; 16
    56d8:	84 60       	ori	r24, 0x04	; 4
    READBIT(1);
    56da:	92 bb       	out	0x12, r25	; 18
    56dc:	95 9a       	sbi	0x12, 5	; 18
    56de:	82 99       	sbic	0x10, 2	; 16
    56e0:	82 60       	ori	r24, 0x02	; 2
    READBIT(0);
    56e2:	92 bb       	out	0x12, r25	; 18
    56e4:	95 9a       	sbi	0x12, 5	; 18
    56e6:	82 99       	sbic	0x10, 2	; 16
    56e8:	81 60       	ori	r24, 0x01	; 1
    SREG = sreg;
    56ea:	2f bf       	out	0x3f, r18	; 63
    return spiIn;
}
    56ec:	08 95       	ret

000056ee <atmel_flash_send_byte>:

/** @brief Send 1 byte of data from the external flash.
*/
static uint8_t atmel_flash_send_byte(uint8_t spiOut)
{
    56ee:	28 2f       	mov	r18, r24
    uint8_t spiIn = 0;
    uint8_t sreg;

    sreg = SREG;
    56f0:	3f b7       	in	r19, 0x3f	; 63
    cli();
    56f2:	f8 94       	cli
    BITINIT;
    56f4:	92 b3       	in	r25, 0x12	; 18
    56f6:	97 7d       	andi	r25, 0xD7	; 215
    WRITEBIT(7);
    56f8:	92 bb       	out	0x12, r25	; 18
    56fa:	80 e0       	ldi	r24, 0x00	; 0
    56fc:	27 fd       	sbrc	r18, 7
    56fe:	93 9a       	sbi	0x12, 3	; 18
    5700:	95 9a       	sbi	0x12, 5	; 18
    WRITEBIT(6);
    5702:	92 bb       	out	0x12, r25	; 18
    5704:	26 fd       	sbrc	r18, 6
    5706:	93 9a       	sbi	0x12, 3	; 18
    5708:	95 9a       	sbi	0x12, 5	; 18
    WRITEBIT(5);
    570a:	92 bb       	out	0x12, r25	; 18
    570c:	25 fd       	sbrc	r18, 5
    570e:	93 9a       	sbi	0x12, 3	; 18
    5710:	95 9a       	sbi	0x12, 5	; 18
    WRITEBIT(4);
    5712:	92 bb       	out	0x12, r25	; 18
    5714:	24 fd       	sbrc	r18, 4
    5716:	93 9a       	sbi	0x12, 3	; 18
    5718:	95 9a       	sbi	0x12, 5	; 18
    WRITEBIT(3);
    571a:	92 bb       	out	0x12, r25	; 18
    571c:	23 fd       	sbrc	r18, 3
    571e:	93 9a       	sbi	0x12, 3	; 18
    5720:	95 9a       	sbi	0x12, 5	; 18
    WRITEBIT(2);
    5722:	92 bb       	out	0x12, r25	; 18
    5724:	22 fd       	sbrc	r18, 2
    5726:	93 9a       	sbi	0x12, 3	; 18
    5728:	95 9a       	sbi	0x12, 5	; 18
    WRITEBIT(1);
    572a:	92 bb       	out	0x12, r25	; 18
    572c:	21 fd       	sbrc	r18, 1
    572e:	93 9a       	sbi	0x12, 3	; 18
    5730:	95 9a       	sbi	0x12, 5	; 18
    WRITEBIT(0);
    5732:	92 bb       	out	0x12, r25	; 18
    5734:	20 fd       	sbrc	r18, 0
    5736:	93 9a       	sbi	0x12, 3	; 18
    5738:	95 9a       	sbi	0x12, 5	; 18
    SREG = sreg;
    573a:	3f bf       	out	0x3f, r19	; 63
    return spiIn;
}
    573c:	08 95       	ret

0000573e <atmel_flash_write_buffer>:
* @param len Length of data
* @return TRUE if success, else return FALSE
*/
static uint8_t atmel_flash_write_buffer(uint8_t selected, uint16_t offset,
                                        void *reqdata, uint16_t len)
{
    573e:	af 92       	push	r10
    5740:	bf 92       	push	r11
    5742:	cf 92       	push	r12
    5744:	df 92       	push	r13
    5746:	ef 92       	push	r14
    5748:	ff 92       	push	r15
    574a:	0f 93       	push	r16
    574c:	1f 93       	push	r17
    574e:	df 93       	push	r29
    5750:	cf 93       	push	r28
    5752:	00 d0       	rcall	.+0      	; 0x5754 <atmel_flash_write_buffer+0x16>
    5754:	00 d0       	rcall	.+0      	; 0x5756 <atmel_flash_write_buffer+0x18>
    5756:	cd b7       	in	r28, 0x3d	; 61
    5758:	de b7       	in	r29, 0x3e	; 62
    575a:	b4 2e       	mov	r11, r20
    575c:	a5 2e       	mov	r10, r21
    575e:	79 01       	movw	r14, r18
    uint8_t cmd[4], *reqPtr;
    uint16_t i;

    if (selected == 1)
    5760:	81 30       	cpi	r24, 0x01	; 1
    5762:	11 f4       	brne	.+4      	; 0x5768 <atmel_flash_write_buffer+0x2a>
    {
        cmd[0] = C_WRITE_BUFFER1;
    5764:	84 e8       	ldi	r24, 0x84	; 132
    5766:	01 c0       	rjmp	.+2      	; 0x576a <atmel_flash_write_buffer+0x2c>
    }                           // 8 bit of op code
    else
    {
        cmd[0] = C_WRITE_BUFFER2;
    5768:	87 e8       	ldi	r24, 0x87	; 135
    576a:	89 83       	std	Y+1, r24	; 0x01
    }                           // 8 bit of op code
    cmd[1] = 0x00;              // 8 bit don't care code
    576c:	1a 82       	std	Y+2, r1	; 0x02
    cmd[2] = offset >> 8;       // 7 bit don't care code with 1 bit address
    576e:	7b 83       	std	Y+3, r23	; 0x03
    cmd[3] = offset;            // low-order 8 address bits
    5770:	6c 83       	std	Y+4, r22	; 0x04
    reqPtr = (uint8_t *) reqdata;
    // put the cs to low in order to begin writing
    atmel_flash_low();
    5772:	0e 94 48 2b 	call	0x5690	; 0x5690 <atmel_flash_low>
    5776:	8e 01       	movw	r16, r28
    5778:	0f 5f       	subi	r16, 0xFF	; 255
    577a:	1f 4f       	sbci	r17, 0xFF	; 255
* @param offset How far the data will be offset
* @param reqdata Data requested
* @param len Length of data
* @return TRUE if success, else return FALSE
*/
static uint8_t atmel_flash_write_buffer(uint8_t selected, uint16_t offset,
    577c:	85 e0       	ldi	r24, 0x05	; 5
    577e:	c8 2e       	mov	r12, r24
    5780:	d1 2c       	mov	r13, r1
    5782:	cc 0e       	add	r12, r28
    5784:	dd 1e       	adc	r13, r29
    reqPtr = (uint8_t *) reqdata;
    // put the cs to low in order to begin writing
    atmel_flash_low();
    for (i = 0; i < sizeof(cmd); i++)
    {
        atmel_flash_send_byte(cmd[i]);
    5786:	f8 01       	movw	r30, r16
    5788:	81 91       	ld	r24, Z+
    578a:	8f 01       	movw	r16, r30
    578c:	0e 94 77 2b 	call	0x56ee	; 0x56ee <atmel_flash_send_byte>
    cmd[2] = offset >> 8;       // 7 bit don't care code with 1 bit address
    cmd[3] = offset;            // low-order 8 address bits
    reqPtr = (uint8_t *) reqdata;
    // put the cs to low in order to begin writing
    atmel_flash_low();
    for (i = 0; i < sizeof(cmd); i++)
    5790:	0c 15       	cp	r16, r12
    5792:	1d 05       	cpc	r17, r13
    5794:	c1 f7       	brne	.-16     	; 0x5786 <atmel_flash_write_buffer+0x48>
    5796:	c5 01       	movw	r24, r10
    5798:	c9 2e       	mov	r12, r25
    579a:	da 2c       	mov	r13, r10
    579c:	00 e0       	ldi	r16, 0x00	; 0
    579e:	10 e0       	ldi	r17, 0x00	; 0
    57a0:	07 c0       	rjmp	.+14     	; 0x57b0 <atmel_flash_write_buffer+0x72>
    {
        atmel_flash_send_byte(cmd[i]);
    }
    for (i = 0; i < len; i++)
    {
        atmel_flash_send_byte(reqPtr[i]);
    57a2:	f6 01       	movw	r30, r12
    57a4:	81 91       	ld	r24, Z+
    57a6:	6f 01       	movw	r12, r30
    57a8:	0e 94 77 2b 	call	0x56ee	; 0x56ee <atmel_flash_send_byte>
    atmel_flash_low();
    for (i = 0; i < sizeof(cmd); i++)
    {
        atmel_flash_send_byte(cmd[i]);
    }
    for (i = 0; i < len; i++)
    57ac:	0f 5f       	subi	r16, 0xFF	; 255
    57ae:	1f 4f       	sbci	r17, 0xFF	; 255
    57b0:	0e 15       	cp	r16, r14
    57b2:	1f 05       	cpc	r17, r15
    57b4:	b0 f3       	brcs	.-20     	; 0x57a2 <atmel_flash_write_buffer+0x64>
    {
        atmel_flash_send_byte(reqPtr[i]);
    }
    atmel_flash_high();
    57b6:	0e 94 4e 2b 	call	0x569c	; 0x569c <atmel_flash_high>
    return TRUE;
}
    57ba:	81 e0       	ldi	r24, 0x01	; 1
    57bc:	0f 90       	pop	r0
    57be:	0f 90       	pop	r0
    57c0:	0f 90       	pop	r0
    57c2:	0f 90       	pop	r0
    57c4:	cf 91       	pop	r28
    57c6:	df 91       	pop	r29
    57c8:	1f 91       	pop	r17
    57ca:	0f 91       	pop	r16
    57cc:	ff 90       	pop	r15
    57ce:	ef 90       	pop	r14
    57d0:	df 90       	pop	r13
    57d2:	cf 90       	pop	r12
    57d4:	bf 90       	pop	r11
    57d6:	af 90       	pop	r10
    57d8:	08 95       	ret

000057da <atmel_flash_flush_buffer>:
* @param selected Flush buffer to select
* @param page Page to flush to
* @return TRUE if success, else return FALSE
*/
static uint8_t atmel_flash_flush_buffer(uint8_t selected, uint16_t page)
{
    57da:	ef 92       	push	r14
    57dc:	ff 92       	push	r15
    57de:	0f 93       	push	r16
    57e0:	1f 93       	push	r17
    57e2:	df 93       	push	r29
    57e4:	cf 93       	push	r28
    57e6:	00 d0       	rcall	.+0      	; 0x57e8 <atmel_flash_flush_buffer+0xe>
    57e8:	00 d0       	rcall	.+0      	; 0x57ea <atmel_flash_flush_buffer+0x10>
    57ea:	cd b7       	in	r28, 0x3d	; 61
    57ec:	de b7       	in	r29, 0x3e	; 62
    uint8_t i, cmd[4];

    if (selected == 1)
    57ee:	81 30       	cpi	r24, 0x01	; 1
    57f0:	11 f4       	brne	.+4      	; 0x57f6 <atmel_flash_flush_buffer+0x1c>
    {
        cmd[0] = C_FLUSH_BUFFER1;
    57f2:	83 e8       	ldi	r24, 0x83	; 131
    57f4:	01 c0       	rjmp	.+2      	; 0x57f8 <atmel_flash_flush_buffer+0x1e>
    }                           // 8 bit of op code
    else
    {
        cmd[0] = C_FLUSH_BUFFER2;
    57f6:	86 e8       	ldi	r24, 0x86	; 134
    57f8:	89 83       	std	Y+1, r24	; 0x01
    }                           // 8 bit of op code
    cmd[1] = page >> 7;         // 4 bit reserve and high 4 MSB
    57fa:	cb 01       	movw	r24, r22
    57fc:	88 0f       	add	r24, r24
    57fe:	89 2f       	mov	r24, r25
    5800:	88 1f       	adc	r24, r24
    5802:	99 0b       	sbc	r25, r25
    5804:	91 95       	neg	r25
    5806:	8a 83       	std	Y+2, r24	; 0x02
    cmd[2] = page << 1;         // 7 bit page and 1 bit offset MSB
    5808:	66 0f       	add	r22, r22
    580a:	6b 83       	std	Y+3, r22	; 0x03
    cmd[3] = 0x00;              // 8 bit don't care code
    580c:	1c 82       	std	Y+4, r1	; 0x04
    // put the cs to low in order to begin writing
    atmel_flash_low();
    580e:	0e 94 48 2b 	call	0x5690	; 0x5690 <atmel_flash_low>
    5812:	8e 01       	movw	r16, r28
    5814:	0f 5f       	subi	r16, 0xFF	; 255
    5816:	1f 4f       	sbci	r17, 0xFF	; 255
/** @brief Dump the buffer to the memory. 
* @param selected Flush buffer to select
* @param page Page to flush to
* @return TRUE if success, else return FALSE
*/
static uint8_t atmel_flash_flush_buffer(uint8_t selected, uint16_t page)
    5818:	95 e0       	ldi	r25, 0x05	; 5
    581a:	e9 2e       	mov	r14, r25
    581c:	f1 2c       	mov	r15, r1
    581e:	ec 0e       	add	r14, r28
    5820:	fd 1e       	adc	r15, r29
    cmd[3] = 0x00;              // 8 bit don't care code
    // put the cs to low in order to begin writing
    atmel_flash_low();
    for (i = 0; i < sizeof(cmd); i++)
    {
        atmel_flash_send_byte(cmd[i]);
    5822:	f8 01       	movw	r30, r16
    5824:	81 91       	ld	r24, Z+
    5826:	8f 01       	movw	r16, r30
    5828:	0e 94 77 2b 	call	0x56ee	; 0x56ee <atmel_flash_send_byte>
    cmd[1] = page >> 7;         // 4 bit reserve and high 4 MSB
    cmd[2] = page << 1;         // 7 bit page and 1 bit offset MSB
    cmd[3] = 0x00;              // 8 bit don't care code
    // put the cs to low in order to begin writing
    atmel_flash_low();
    for (i = 0; i < sizeof(cmd); i++)
    582c:	0e 15       	cp	r16, r14
    582e:	1f 05       	cpc	r17, r15
    5830:	c1 f7       	brne	.-16     	; 0x5822 <atmel_flash_flush_buffer+0x48>
    {
        atmel_flash_send_byte(cmd[i]);
    }
    atmel_flash_high();
    5832:	0e 94 4e 2b 	call	0x569c	; 0x569c <atmel_flash_high>
    return TRUE;
}
    5836:	81 e0       	ldi	r24, 0x01	; 1
    5838:	0f 90       	pop	r0
    583a:	0f 90       	pop	r0
    583c:	0f 90       	pop	r0
    583e:	0f 90       	pop	r0
    5840:	cf 91       	pop	r28
    5842:	df 91       	pop	r29
    5844:	1f 91       	pop	r17
    5846:	0f 91       	pop	r16
    5848:	ff 90       	pop	r15
    584a:	ef 90       	pop	r14
    584c:	08 95       	ret

0000584e <atmel_flash_busy>:
* A little bit slower than simply holding the clk low, But
* easier
* @return TRUE if busy, else return FALSE
*/
static uint8_t atmel_flash_busy(void)
{
    584e:	0f 93       	push	r16
    5850:	1f 93       	push	r17
    uint8_t status;
    _atomic_t _atomic = _atomic_start();
    5852:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>
    5856:	08 2f       	mov	r16, r24

    atmel_flash_low();
    5858:	0e 94 48 2b 	call	0x5690	; 0x5690 <atmel_flash_low>
    atmel_flash_send_byte(C_REQ_STATUS);
    585c:	87 ed       	ldi	r24, 0xD7	; 215
    585e:	0e 94 77 2b 	call	0x56ee	; 0x56ee <atmel_flash_send_byte>
    //SEND d7h, op code for register request
    status = atmel_flash_get_byte();
    5862:	0e 94 50 2b 	call	0x56a0	; 0x56a0 <atmel_flash_get_byte>
    5866:	18 2f       	mov	r17, r24
    atmel_flash_high();
    5868:	0e 94 4e 2b 	call	0x569c	; 0x569c <atmel_flash_high>
    status &= 0x80;
    _atomic_end(_atomic);
    586c:	80 2f       	mov	r24, r16
    586e:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
    if (status == 0)
    {
        return TRUE;
    5872:	81 2f       	mov	r24, r17
    5874:	80 95       	com	r24
    5876:	88 1f       	adc	r24, r24
    5878:	88 27       	eor	r24, r24
    587a:	88 1f       	adc	r24, r24
    }

    return FALSE;
}
    587c:	1f 91       	pop	r17
    587e:	0f 91       	pop	r16
    5880:	08 95       	ret

00005882 <atmel_flash_fill_buffer>:
* @param selected Fill buffer to select
* @param page Page to fill from
* @return TRUE if success, else return FALSE
*/
static uint8_t atmel_flash_fill_buffer(uint8_t selected, uint16_t page)
{
    5882:	ef 92       	push	r14
    5884:	ff 92       	push	r15
    5886:	0f 93       	push	r16
    5888:	1f 93       	push	r17
    588a:	df 93       	push	r29
    588c:	cf 93       	push	r28
    588e:	00 d0       	rcall	.+0      	; 0x5890 <atmel_flash_fill_buffer+0xe>
    5890:	00 d0       	rcall	.+0      	; 0x5892 <atmel_flash_fill_buffer+0x10>
    5892:	cd b7       	in	r28, 0x3d	; 61
    5894:	de b7       	in	r29, 0x3e	; 62
    5896:	e8 2e       	mov	r14, r24
    5898:	8b 01       	movw	r16, r22
    uint8_t i, cmd[4];

    while (atmel_flash_busy())
    589a:	0e 94 27 2c 	call	0x584e	; 0x584e <atmel_flash_busy>
    589e:	88 23       	and	r24, r24
    58a0:	e1 f7       	brne	.-8      	; 0x589a <atmel_flash_fill_buffer+0x18>
        ;
    atmel_flash_flush_buffer(cur_buff, cur_page);
    58a2:	60 91 b4 03 	lds	r22, 0x03B4
    58a6:	70 91 b5 03 	lds	r23, 0x03B5
    58aa:	80 91 b6 03 	lds	r24, 0x03B6
    58ae:	0e 94 ed 2b 	call	0x57da	; 0x57da <atmel_flash_flush_buffer>
    while (atmel_flash_busy())
    58b2:	0e 94 27 2c 	call	0x584e	; 0x584e <atmel_flash_busy>
    58b6:	88 23       	and	r24, r24
    58b8:	e1 f7       	brne	.-8      	; 0x58b2 <atmel_flash_fill_buffer+0x30>
        ;
    if (selected == 1)
    58ba:	8e 2d       	mov	r24, r14
    58bc:	81 30       	cpi	r24, 0x01	; 1
    58be:	11 f4       	brne	.+4      	; 0x58c4 <atmel_flash_fill_buffer+0x42>
    {
        cmd[0] = C_FILL_BUFFER1;
    58c0:	83 e5       	ldi	r24, 0x53	; 83
    58c2:	01 c0       	rjmp	.+2      	; 0x58c6 <atmel_flash_fill_buffer+0x44>
    }                           // 8 bit of op code
    else
    {
        cmd[0] = C_FILL_BUFFER2;
    58c4:	85 e5       	ldi	r24, 0x55	; 85
    58c6:	89 83       	std	Y+1, r24	; 0x01
    }                           // 8 bit of op code
    cmd[1] = page >> 7;         // 4 bit reserve and high 4 MSB
    58c8:	c8 01       	movw	r24, r16
    58ca:	88 0f       	add	r24, r24
    58cc:	89 2f       	mov	r24, r25
    58ce:	88 1f       	adc	r24, r24
    58d0:	99 0b       	sbc	r25, r25
    58d2:	91 95       	neg	r25
    58d4:	8a 83       	std	Y+2, r24	; 0x02
    cmd[2] = page << 1;         // 7 bit page and 1 bit don't care MSB
    58d6:	00 0f       	add	r16, r16
    58d8:	0b 83       	std	Y+3, r16	; 0x03
    cmd[3] = 0x00;              // 8 bit don't care code
    58da:	1c 82       	std	Y+4, r1	; 0x04
    // put the cs to low in order to begin writing
    atmel_flash_low();
    58dc:	0e 94 48 2b 	call	0x5690	; 0x5690 <atmel_flash_low>
    58e0:	8e 01       	movw	r16, r28
    58e2:	0f 5f       	subi	r16, 0xFF	; 255
    58e4:	1f 4f       	sbci	r17, 0xFF	; 255
/** @brief Read a page from flash memory and fill into the buffer. 
* @param selected Fill buffer to select
* @param page Page to fill from
* @return TRUE if success, else return FALSE
*/
static uint8_t atmel_flash_fill_buffer(uint8_t selected, uint16_t page)
    58e6:	35 e0       	ldi	r19, 0x05	; 5
    58e8:	e3 2e       	mov	r14, r19
    58ea:	f1 2c       	mov	r15, r1
    58ec:	ec 0e       	add	r14, r28
    58ee:	fd 1e       	adc	r15, r29
    cmd[3] = 0x00;              // 8 bit don't care code
    // put the cs to low in order to begin writing
    atmel_flash_low();
    for (i = 0; i < sizeof(cmd); i++)
    {
        atmel_flash_send_byte(cmd[i]);
    58f0:	f8 01       	movw	r30, r16
    58f2:	81 91       	ld	r24, Z+
    58f4:	8f 01       	movw	r16, r30
    58f6:	0e 94 77 2b 	call	0x56ee	; 0x56ee <atmel_flash_send_byte>
    cmd[1] = page >> 7;         // 4 bit reserve and high 4 MSB
    cmd[2] = page << 1;         // 7 bit page and 1 bit don't care MSB
    cmd[3] = 0x00;              // 8 bit don't care code
    // put the cs to low in order to begin writing
    atmel_flash_low();
    for (i = 0; i < sizeof(cmd); i++)
    58fa:	0e 15       	cp	r16, r14
    58fc:	1f 05       	cpc	r17, r15
    58fe:	c1 f7       	brne	.-16     	; 0x58f0 <atmel_flash_fill_buffer+0x6e>
    {
        atmel_flash_send_byte(cmd[i]);
    }
    atmel_flash_high();
    5900:	0e 94 4e 2b 	call	0x569c	; 0x569c <atmel_flash_high>
    return TRUE;
}
    5904:	81 e0       	ldi	r24, 0x01	; 1
    5906:	0f 90       	pop	r0
    5908:	0f 90       	pop	r0
    590a:	0f 90       	pop	r0
    590c:	0f 90       	pop	r0
    590e:	cf 91       	pop	r28
    5910:	df 91       	pop	r29
    5912:	1f 91       	pop	r17
    5914:	0f 91       	pop	r16
    5916:	ff 90       	pop	r15
    5918:	ef 90       	pop	r14
    591a:	08 95       	ret

0000591c <dev_write_atmel_flash>:
}

/** @brief Write p into the current flash address, for count bytes
*/
static uint16_t dev_write_atmel_flash(const void *p, uint16_t count)
{
    591c:	2f 92       	push	r2
    591e:	3f 92       	push	r3
    5920:	4f 92       	push	r4
    5922:	5f 92       	push	r5
    5924:	6f 92       	push	r6
    5926:	7f 92       	push	r7
    5928:	8f 92       	push	r8
    592a:	9f 92       	push	r9
    592c:	af 92       	push	r10
    592e:	bf 92       	push	r11
    5930:	cf 92       	push	r12
    5932:	df 92       	push	r13
    5934:	ef 92       	push	r14
    5936:	ff 92       	push	r15
    5938:	0f 93       	push	r16
    593a:	1f 93       	push	r17
    593c:	df 93       	push	r29
    593e:	cf 93       	push	r28
    5940:	cd b7       	in	r28, 0x3d	; 61
    5942:	de b7       	in	r29, 0x3e	; 62
    5944:	28 97       	sbiw	r28, 0x08	; 8
    5946:	0f b6       	in	r0, 0x3f	; 63
    5948:	f8 94       	cli
    594a:	de bf       	out	0x3e, r29	; 62
    594c:	0f be       	out	0x3f, r0	; 63
    594e:	cd bf       	out	0x3d, r28	; 61
    5950:	6b 01       	movw	r12, r22
    uint16_t page, offset, num_bytes;
    uint16_t index = 0;
    uint8_t *buf = (uint8_t *) p;
    5952:	8d 83       	std	Y+5, r24	; 0x05
    5954:	9e 83       	std	Y+6, r25	; 0x06

    page = atmel_flash_addr / ATMEL_FLASH_PAGE_SIZE;
    5956:	60 91 af 03 	lds	r22, 0x03AF
    595a:	70 91 b0 03 	lds	r23, 0x03B0
    595e:	80 91 b1 03 	lds	r24, 0x03B1
    5962:	90 91 b2 03 	lds	r25, 0x03B2
    5966:	28 e0       	ldi	r18, 0x08	; 8
    5968:	31 e0       	ldi	r19, 0x01	; 1
    596a:	40 e0       	ldi	r20, 0x00	; 0
    596c:	50 e0       	ldi	r21, 0x00	; 0
    596e:	0e 94 fe 48 	call	0x91fc	; 0x91fc <__udivmodsi4>
    5972:	89 01       	movw	r16, r18
    offset = atmel_flash_addr % ATMEL_FLASH_PAGE_SIZE;
    5974:	4b 01       	movw	r8, r22
    while (atmel_flash_busy())
    5976:	0e 94 27 2c 	call	0x584e	; 0x584e <atmel_flash_busy>
    597a:	88 23       	and	r24, r24
    597c:	e1 f7       	brne	.-8      	; 0x5976 <dev_write_atmel_flash+0x5a>
    597e:	66 24       	eor	r6, r6
    5980:	77 24       	eor	r7, r7
        ;
    while (count > 0)
    {
        if (count + offset > ATMEL_FLASH_PAGE_SIZE)
        {
            num_bytes = ATMEL_FLASH_PAGE_SIZE - offset;
    5982:	68 e0       	ldi	r22, 0x08	; 8
    5984:	46 2e       	mov	r4, r22
    5986:	61 e0       	ldi	r22, 0x01	; 1
    5988:	56 2e       	mov	r5, r22
    cmd[0] = C_ERASE_PAGE;      // 8 bit of op code
    cmd[1] = page >> 7;         // 4 bit reserve and high 4 MSB
    cmd[2] = page << 1;         // 7 bit page and 1 bit don't care MSB
    cmd[3] = 0x00;              // 8 bit don't care code
    // put the cs to low in order to begin writing
    atmel_flash_low();
    598a:	1e 01       	movw	r2, r28
    598c:	08 94       	sec
    598e:	21 1c       	adc	r2, r1
    5990:	31 1c       	adc	r3, r1
    return count;
}

/** @brief Write p into the current flash address, for count bytes
*/
static uint16_t dev_write_atmel_flash(const void *p, uint16_t count)
    5992:	ce 01       	movw	r24, r28
    5994:	05 96       	adiw	r24, 0x05	; 5
    5996:	98 87       	std	Y+8, r25	; 0x08
    5998:	8f 83       	std	Y+7, r24	; 0x07
    599a:	8d c0       	rjmp	.+282    	; 0x5ab6 <dev_write_atmel_flash+0x19a>
    offset = atmel_flash_addr % ATMEL_FLASH_PAGE_SIZE;
    while (atmel_flash_busy())
        ;
    while (count > 0)
    {
        if (count + offset > ATMEL_FLASH_PAGE_SIZE)
    599c:	c4 01       	movw	r24, r8
    599e:	8c 0d       	add	r24, r12
    59a0:	9d 1d       	adc	r25, r13
    59a2:	e1 e0       	ldi	r30, 0x01	; 1
    59a4:	89 30       	cpi	r24, 0x09	; 9
    59a6:	9e 07       	cpc	r25, r30
    59a8:	20 f0       	brcs	.+8      	; 0x59b2 <dev_write_atmel_flash+0x96>
        {
            num_bytes = ATMEL_FLASH_PAGE_SIZE - offset;
    59aa:	72 01       	movw	r14, r4
    59ac:	e8 18       	sub	r14, r8
    59ae:	f9 08       	sbc	r15, r9
    59b0:	01 c0       	rjmp	.+2      	; 0x59b4 <dev_write_atmel_flash+0x98>
    offset = atmel_flash_addr % ATMEL_FLASH_PAGE_SIZE;
    while (atmel_flash_busy())
        ;
    while (count > 0)
    {
        if (count + offset > ATMEL_FLASH_PAGE_SIZE)
    59b2:	76 01       	movw	r14, r12
        }
        else
        {
            num_bytes = count;
        }
        if (page != cur_page)
    59b4:	80 91 b4 03 	lds	r24, 0x03B4
    59b8:	90 91 b5 03 	lds	r25, 0x03B5
    59bc:	08 17       	cp	r16, r24
    59be:	19 07       	cpc	r17, r25
    59c0:	09 f4       	brne	.+2      	; 0x59c4 <dev_write_atmel_flash+0xa8>
    59c2:	4d c0       	rjmp	.+154    	; 0x5a5e <dev_write_atmel_flash+0x142>
        {
            if (dirty)
    59c4:	80 91 b3 03 	lds	r24, 0x03B3
    59c8:	88 23       	and	r24, r24
    59ca:	71 f0       	breq	.+28     	; 0x59e8 <dev_write_atmel_flash+0xcc>
            {
                while (atmel_flash_busy())
    59cc:	0e 94 27 2c 	call	0x584e	; 0x584e <atmel_flash_busy>
    59d0:	88 23       	and	r24, r24
    59d2:	e1 f7       	brne	.-8      	; 0x59cc <dev_write_atmel_flash+0xb0>
                    ;
                atmel_flash_flush_buffer(cur_buff, cur_page);
    59d4:	60 91 b4 03 	lds	r22, 0x03B4
    59d8:	70 91 b5 03 	lds	r23, 0x03B5
    59dc:	80 91 b6 03 	lds	r24, 0x03B6
    59e0:	0e 94 ed 2b 	call	0x57da	; 0x57da <atmel_flash_flush_buffer>
                dirty = 0;
    59e4:	10 92 b3 03 	sts	0x03B3, r1
            }
            cur_buff =
    59e8:	80 91 b6 03 	lds	r24, 0x03B6
    59ec:	81 30       	cpi	r24, 0x01	; 1
    59ee:	11 f4       	brne	.+4      	; 0x59f4 <dev_write_atmel_flash+0xd8>
    59f0:	82 e0       	ldi	r24, 0x02	; 2
    59f2:	01 c0       	rjmp	.+2      	; 0x59f6 <dev_write_atmel_flash+0xda>
    59f4:	81 e0       	ldi	r24, 0x01	; 1
    59f6:	80 93 b6 03 	sts	0x03B6, r24
                (cur_buff ==
                 ATMEL_FLASH_BUFFER_1 ? ATMEL_FLASH_BUFFER_2 :
                 ATMEL_FLASH_BUFFER_1);
            cur_page = page;
    59fa:	10 93 b5 03 	sts	0x03B5, r17
    59fe:	00 93 b4 03 	sts	0x03B4, r16
            if (num_bytes < ATMEL_FLASH_PAGE_SIZE)
    5a02:	f8 e0       	ldi	r31, 0x08	; 8
    5a04:	ef 16       	cp	r14, r31
    5a06:	f1 e0       	ldi	r31, 0x01	; 1
    5a08:	ff 06       	cpc	r15, r31
    5a0a:	48 f4       	brcc	.+18     	; 0x5a1e <dev_write_atmel_flash+0x102>
            {
                while (atmel_flash_busy())
    5a0c:	0e 94 27 2c 	call	0x584e	; 0x584e <atmel_flash_busy>
    5a10:	88 23       	and	r24, r24
    5a12:	e1 f7       	brne	.-8      	; 0x5a0c <dev_write_atmel_flash+0xf0>
                    ;
                atmel_flash_fill_buffer(cur_buff, page);
    5a14:	80 91 b6 03 	lds	r24, 0x03B6
    5a18:	b8 01       	movw	r22, r16
    5a1a:	0e 94 41 2c 	call	0x5882	; 0x5882 <atmel_flash_fill_buffer>
            }
            // Erase next page right now
            while (atmel_flash_busy())
    5a1e:	0e 94 27 2c 	call	0x584e	; 0x584e <atmel_flash_busy>
    5a22:	88 23       	and	r24, r24
    5a24:	e1 f7       	brne	.-8      	; 0x5a1e <dev_write_atmel_flash+0x102>
*/
static uint8_t atmel_flash_erase_page(uint16_t page)
{
    uint8_t i, cmd[4];

    cmd[0] = C_ERASE_PAGE;      // 8 bit of op code
    5a26:	21 e8       	ldi	r18, 0x81	; 129
    5a28:	29 83       	std	Y+1, r18	; 0x01
    cmd[1] = page >> 7;         // 4 bit reserve and high 4 MSB
    5a2a:	c8 01       	movw	r24, r16
    5a2c:	88 0f       	add	r24, r24
    5a2e:	89 2f       	mov	r24, r25
    5a30:	88 1f       	adc	r24, r24
    5a32:	99 0b       	sbc	r25, r25
    5a34:	91 95       	neg	r25
    5a36:	8a 83       	std	Y+2, r24	; 0x02
    cmd[2] = page << 1;         // 7 bit page and 1 bit don't care MSB
    5a38:	80 2f       	mov	r24, r16
    5a3a:	88 0f       	add	r24, r24
    5a3c:	8b 83       	std	Y+3, r24	; 0x03
    cmd[3] = 0x00;              // 8 bit don't care code
    5a3e:	1c 82       	std	Y+4, r1	; 0x04
    // put the cs to low in order to begin writing
    atmel_flash_low();
    5a40:	0e 94 48 2b 	call	0x5690	; 0x5690 <atmel_flash_low>
    5a44:	51 01       	movw	r10, r2
    for (i = 0; i < sizeof(cmd); i++)
    {
        atmel_flash_send_byte(cmd[i]);
    5a46:	f5 01       	movw	r30, r10
    5a48:	81 91       	ld	r24, Z+
    5a4a:	5f 01       	movw	r10, r30
    5a4c:	0e 94 77 2b 	call	0x56ee	; 0x56ee <atmel_flash_send_byte>
    cmd[1] = page >> 7;         // 4 bit reserve and high 4 MSB
    cmd[2] = page << 1;         // 7 bit page and 1 bit don't care MSB
    cmd[3] = 0x00;              // 8 bit don't care code
    // put the cs to low in order to begin writing
    atmel_flash_low();
    for (i = 0; i < sizeof(cmd); i++)
    5a50:	8f 81       	ldd	r24, Y+7	; 0x07
    5a52:	98 85       	ldd	r25, Y+8	; 0x08
    5a54:	a8 16       	cp	r10, r24
    5a56:	b9 06       	cpc	r11, r25
    5a58:	b1 f7       	brne	.-20     	; 0x5a46 <dev_write_atmel_flash+0x12a>
    {
        atmel_flash_send_byte(cmd[i]);
    }
    atmel_flash_high();
    5a5a:	0e 94 4e 2b 	call	0x569c	; 0x569c <atmel_flash_high>
            // Erase next page right now
            while (atmel_flash_busy())
                ;
            atmel_flash_erase_page(page);
        }
        atmel_flash_write_buffer(cur_buff, offset, &buf[index], num_bytes);
    5a5e:	4d 81       	ldd	r20, Y+5	; 0x05
    5a60:	5e 81       	ldd	r21, Y+6	; 0x06
    5a62:	46 0d       	add	r20, r6
    5a64:	57 1d       	adc	r21, r7
    5a66:	80 91 b6 03 	lds	r24, 0x03B6
    5a6a:	b4 01       	movw	r22, r8
    5a6c:	97 01       	movw	r18, r14
    5a6e:	0e 94 9f 2b 	call	0x573e	; 0x573e <atmel_flash_write_buffer>
        dirty = 1;
    5a72:	91 e0       	ldi	r25, 0x01	; 1
    5a74:	90 93 b3 03 	sts	0x03B3, r25
        index += num_bytes;
    5a78:	6e 0c       	add	r6, r14
    5a7a:	7f 1c       	adc	r7, r15
        atmel_flash_addr += num_bytes;
    5a7c:	97 01       	movw	r18, r14
    5a7e:	40 e0       	ldi	r20, 0x00	; 0
    5a80:	50 e0       	ldi	r21, 0x00	; 0
    5a82:	80 91 af 03 	lds	r24, 0x03AF
    5a86:	90 91 b0 03 	lds	r25, 0x03B0
    5a8a:	a0 91 b1 03 	lds	r26, 0x03B1
    5a8e:	b0 91 b2 03 	lds	r27, 0x03B2
    5a92:	82 0f       	add	r24, r18
    5a94:	93 1f       	adc	r25, r19
    5a96:	a4 1f       	adc	r26, r20
    5a98:	b5 1f       	adc	r27, r21
    5a9a:	80 93 af 03 	sts	0x03AF, r24
    5a9e:	90 93 b0 03 	sts	0x03B0, r25
    5aa2:	a0 93 b1 03 	sts	0x03B1, r26
    5aa6:	b0 93 b2 03 	sts	0x03B2, r27
        count -= num_bytes;
    5aaa:	ce 18       	sub	r12, r14
    5aac:	df 08       	sbc	r13, r15
        page++;
    5aae:	0f 5f       	subi	r16, 0xFF	; 255
    5ab0:	1f 4f       	sbci	r17, 0xFF	; 255
        offset = 0;
    5ab2:	88 24       	eor	r8, r8
    5ab4:	99 24       	eor	r9, r9

    page = atmel_flash_addr / ATMEL_FLASH_PAGE_SIZE;
    offset = atmel_flash_addr % ATMEL_FLASH_PAGE_SIZE;
    while (atmel_flash_busy())
        ;
    while (count > 0)
    5ab6:	c1 14       	cp	r12, r1
    5ab8:	d1 04       	cpc	r13, r1
    5aba:	09 f0       	breq	.+2      	; 0x5abe <dev_write_atmel_flash+0x1a2>
    5abc:	6f cf       	rjmp	.-290    	; 0x599c <dev_write_atmel_flash+0x80>
        count -= num_bytes;
        page++;
        offset = 0;
    }
    return count;
}
    5abe:	80 e0       	ldi	r24, 0x00	; 0
    5ac0:	90 e0       	ldi	r25, 0x00	; 0
    5ac2:	28 96       	adiw	r28, 0x08	; 8
    5ac4:	0f b6       	in	r0, 0x3f	; 63
    5ac6:	f8 94       	cli
    5ac8:	de bf       	out	0x3e, r29	; 62
    5aca:	0f be       	out	0x3f, r0	; 63
    5acc:	cd bf       	out	0x3d, r28	; 61
    5ace:	cf 91       	pop	r28
    5ad0:	df 91       	pop	r29
    5ad2:	1f 91       	pop	r17
    5ad4:	0f 91       	pop	r16
    5ad6:	ff 90       	pop	r15
    5ad8:	ef 90       	pop	r14
    5ada:	df 90       	pop	r13
    5adc:	cf 90       	pop	r12
    5ade:	bf 90       	pop	r11
    5ae0:	af 90       	pop	r10
    5ae2:	9f 90       	pop	r9
    5ae4:	8f 90       	pop	r8
    5ae6:	7f 90       	pop	r7
    5ae8:	6f 90       	pop	r6
    5aea:	5f 90       	pop	r5
    5aec:	4f 90       	pop	r4
    5aee:	3f 90       	pop	r3
    5af0:	2f 90       	pop	r2
    5af2:	08 95       	ret

00005af4 <dev_read_atmel_flash>:
}

/** @brief Read from the current flash address into p, for count bytes
*/
static uint16_t dev_read_atmel_flash(void *p, uint16_t count)
{
    5af4:	af 92       	push	r10
    5af6:	bf 92       	push	r11
    5af8:	cf 92       	push	r12
    5afa:	df 92       	push	r13
    5afc:	ef 92       	push	r14
    5afe:	ff 92       	push	r15
    5b00:	0f 93       	push	r16
    5b02:	1f 93       	push	r17
    5b04:	df 93       	push	r29
    5b06:	cf 93       	push	r28
    5b08:	cd b7       	in	r28, 0x3d	; 61
    5b0a:	de b7       	in	r29, 0x3e	; 62
    5b0c:	28 97       	sbiw	r28, 0x08	; 8
    5b0e:	0f b6       	in	r0, 0x3f	; 63
    5b10:	f8 94       	cli
    5b12:	de bf       	out	0x3e, r29	; 62
    5b14:	0f be       	out	0x3f, r0	; 63
    5b16:	cd bf       	out	0x3d, r28	; 61
    5b18:	b8 2e       	mov	r11, r24
    5b1a:	a9 2e       	mov	r10, r25
    5b1c:	7b 01       	movw	r14, r22
    uint16_t page, offset;
    uint8_t *buf = (uint8_t *) p;

    page = atmel_flash_addr / ATMEL_FLASH_PAGE_SIZE;
    5b1e:	60 91 af 03 	lds	r22, 0x03AF
    5b22:	70 91 b0 03 	lds	r23, 0x03B0
    5b26:	80 91 b1 03 	lds	r24, 0x03B1
    5b2a:	90 91 b2 03 	lds	r25, 0x03B2
    5b2e:	28 e0       	ldi	r18, 0x08	; 8
    5b30:	31 e0       	ldi	r19, 0x01	; 1
    5b32:	40 e0       	ldi	r20, 0x00	; 0
    5b34:	50 e0       	ldi	r21, 0x00	; 0
    5b36:	0e 94 fe 48 	call	0x91fc	; 0x91fc <__udivmodsi4>
    5b3a:	89 01       	movw	r16, r18
    offset = atmel_flash_addr % ATMEL_FLASH_PAGE_SIZE;
    5b3c:	6b 01       	movw	r12, r22
    if (dirty && page <= cur_page && page + (offset + count) /
    5b3e:	80 91 b3 03 	lds	r24, 0x03B3
    5b42:	88 23       	and	r24, r24
    5b44:	09 f1       	breq	.+66     	; 0x5b88 <dev_read_atmel_flash+0x94>
    5b46:	20 91 b4 03 	lds	r18, 0x03B4
    5b4a:	30 91 b5 03 	lds	r19, 0x03B5
    5b4e:	20 17       	cp	r18, r16
    5b50:	31 07       	cpc	r19, r17
    5b52:	d0 f0       	brcs	.+52     	; 0x5b88 <dev_read_atmel_flash+0x94>
    5b54:	c7 01       	movw	r24, r14
    5b56:	8c 0d       	add	r24, r12
    5b58:	9d 1d       	adc	r25, r13
    5b5a:	68 e0       	ldi	r22, 0x08	; 8
    5b5c:	71 e0       	ldi	r23, 0x01	; 1
    5b5e:	0e 94 d7 48 	call	0x91ae	; 0x91ae <__udivmodhi4>
    5b62:	60 0f       	add	r22, r16
    5b64:	71 1f       	adc	r23, r17
    5b66:	62 17       	cp	r22, r18
    5b68:	73 07       	cpc	r23, r19
    5b6a:	70 f0       	brcs	.+28     	; 0x5b88 <dev_read_atmel_flash+0x94>
        ATMEL_FLASH_PAGE_SIZE >= cur_page)
    {
        while (atmel_flash_busy())
    5b6c:	0e 94 27 2c 	call	0x584e	; 0x584e <atmel_flash_busy>
    5b70:	88 23       	and	r24, r24
    5b72:	e1 f7       	brne	.-8      	; 0x5b6c <dev_read_atmel_flash+0x78>
            ;
        atmel_flash_flush_buffer(cur_buff, cur_page);
    5b74:	60 91 b4 03 	lds	r22, 0x03B4
    5b78:	70 91 b5 03 	lds	r23, 0x03B5
    5b7c:	80 91 b6 03 	lds	r24, 0x03B6
    5b80:	0e 94 ed 2b 	call	0x57da	; 0x57da <atmel_flash_flush_buffer>
        dirty = 0;
    5b84:	10 92 b3 03 	sts	0x03B3, r1
    }
    // Wait for any previous actions to complete
    while (atmel_flash_busy())
    5b88:	0e 94 27 2c 	call	0x584e	; 0x584e <atmel_flash_busy>
    5b8c:	88 23       	and	r24, r24
    5b8e:	e1 f7       	brne	.-8      	; 0x5b88 <dev_read_atmel_flash+0x94>
                                    void *reqData, uint16_t len)
{
    uint8_t cmd[8], *reqPtr;
    uint16_t i;

    cmd[0] = C_READ_THROUGH_MEMORY;     // 8 bit of op code
    5b90:	88 ee       	ldi	r24, 0xE8	; 232
    5b92:	89 83       	std	Y+1, r24	; 0x01
    cmd[1] = (page >> 7);       // 4 bit reserve and high 4 MSB
    5b94:	c8 01       	movw	r24, r16
    5b96:	88 0f       	add	r24, r24
    5b98:	89 2f       	mov	r24, r25
    5b9a:	88 1f       	adc	r24, r24
    5b9c:	99 0b       	sbc	r25, r25
    5b9e:	91 95       	neg	r25
    5ba0:	8a 83       	std	Y+2, r24	; 0x02
    cmd[2] = (page << 1) | offset >> 8; // 7 bit page and 1 bit offset MSB
    5ba2:	00 0f       	add	r16, r16
    5ba4:	0d 29       	or	r16, r13
    5ba6:	0b 83       	std	Y+3, r16	; 0x03
    cmd[3] = offset;            // low-order 8 address bits
    5ba8:	cc 82       	std	Y+4, r12	; 0x04
    cmd[4] = 0x00;
    5baa:	1d 82       	std	Y+5, r1	; 0x05
    cmd[5] = 0x00;
    5bac:	1e 82       	std	Y+6, r1	; 0x06
    cmd[6] = 0x00;
    5bae:	1f 82       	std	Y+7, r1	; 0x07
    cmd[7] = 0x00;
    5bb0:	18 86       	std	Y+8, r1	; 0x08
    reqPtr = (uint8_t *) reqData;
    atmel_flash_low();
    5bb2:	0e 94 48 2b 	call	0x5690	; 0x5690 <atmel_flash_low>
    5bb6:	8e 01       	movw	r16, r28
    5bb8:	0f 5f       	subi	r16, 0xFF	; 255
    5bba:	1f 4f       	sbci	r17, 0xFF	; 255
        ;
}

/** @brief Read from the current flash address into p, for count bytes
*/
static uint16_t dev_read_atmel_flash(void *p, uint16_t count)
    5bbc:	79 e0       	ldi	r23, 0x09	; 9
    5bbe:	c7 2e       	mov	r12, r23
    5bc0:	d1 2c       	mov	r13, r1
    5bc2:	cc 0e       	add	r12, r28
    5bc4:	dd 1e       	adc	r13, r29
    cmd[7] = 0x00;
    reqPtr = (uint8_t *) reqData;
    atmel_flash_low();
    for (i = 0; i < sizeof(cmd); i++)
    {
        atmel_flash_send_byte(cmd[i]);
    5bc6:	f8 01       	movw	r30, r16
    5bc8:	81 91       	ld	r24, Z+
    5bca:	8f 01       	movw	r16, r30
    5bcc:	0e 94 77 2b 	call	0x56ee	; 0x56ee <atmel_flash_send_byte>
    cmd[5] = 0x00;
    cmd[6] = 0x00;
    cmd[7] = 0x00;
    reqPtr = (uint8_t *) reqData;
    atmel_flash_low();
    for (i = 0; i < sizeof(cmd); i++)
    5bd0:	0c 15       	cp	r16, r12
    5bd2:	1d 05       	cpc	r17, r13
    5bd4:	c1 f7       	brne	.-16     	; 0x5bc6 <dev_read_atmel_flash+0xd2>
    5bd6:	c5 01       	movw	r24, r10
    5bd8:	c9 2e       	mov	r12, r25
    5bda:	da 2c       	mov	r13, r10
    5bdc:	00 e0       	ldi	r16, 0x00	; 0
    5bde:	10 e0       	ldi	r17, 0x00	; 0
    5be0:	07 c0       	rjmp	.+14     	; 0x5bf0 <dev_read_atmel_flash+0xfc>
    {
        atmel_flash_send_byte(cmd[i]);
    }
    for (i = 0; i < len; i++)
    {
        reqPtr[i] = atmel_flash_get_byte();
    5be2:	0e 94 50 2b 	call	0x56a0	; 0x56a0 <atmel_flash_get_byte>
    5be6:	f6 01       	movw	r30, r12
    5be8:	81 93       	st	Z+, r24
    5bea:	6f 01       	movw	r12, r30
    atmel_flash_low();
    for (i = 0; i < sizeof(cmd); i++)
    {
        atmel_flash_send_byte(cmd[i]);
    }
    for (i = 0; i < len; i++)
    5bec:	0f 5f       	subi	r16, 0xFF	; 255
    5bee:	1f 4f       	sbci	r17, 0xFF	; 255
    5bf0:	0e 15       	cp	r16, r14
    5bf2:	1f 05       	cpc	r17, r15
    5bf4:	b0 f3       	brcs	.-20     	; 0x5be2 <dev_read_atmel_flash+0xee>
    {
        reqPtr[i] = atmel_flash_get_byte();
    }
    atmel_flash_high();
    5bf6:	0e 94 4e 2b 	call	0x569c	; 0x569c <atmel_flash_high>
    // Wait for any previous actions to complete
    while (atmel_flash_busy())
        ;
    atmel_flash_read_memory(page, offset, buf, count);
    return count;
}
    5bfa:	c7 01       	movw	r24, r14
    5bfc:	28 96       	adiw	r28, 0x08	; 8
    5bfe:	0f b6       	in	r0, 0x3f	; 63
    5c00:	f8 94       	cli
    5c02:	de bf       	out	0x3e, r29	; 62
    5c04:	0f be       	out	0x3f, r0	; 63
    5c06:	cd bf       	out	0x3d, r28	; 61
    5c08:	cf 91       	pop	r28
    5c0a:	df 91       	pop	r29
    5c0c:	1f 91       	pop	r17
    5c0e:	0f 91       	pop	r16
    5c10:	ff 90       	pop	r15
    5c12:	ef 90       	pop	r14
    5c14:	df 90       	pop	r13
    5c16:	cf 90       	pop	r12
    5c18:	bf 90       	pop	r11
    5c1a:	af 90       	pop	r10
    5c1c:	08 95       	ret

00005c1e <atmel_flash_init>:

void atmel_flash_init(void)
{
    uint8_t sreg;

    sreg = SREG;
    5c1e:	8f b7       	in	r24, 0x3f	; 63
    cli();
    5c20:	f8 94       	cli
    // set the flash select pin
    DDRA |= 1 << ATMEL_FLASH_SELECT_PIN;
    5c22:	d3 9a       	sbi	0x1a, 3	; 26
    // set the pin high
    ATMEL_FLASH_SELECT |= 1 << ATMEL_FLASH_SELECT_PIN;
    5c24:	db 9a       	sbi	0x1b, 3	; 27
    // clear flash clock
    ATMEL_FLASH_PORT &= ~(1 << ATMEL_FLASH_CLK);
    5c26:	95 98       	cbi	0x12, 5	; 18
    // set flash clock output direction
    ATMEL_FLASH_DIRE |= 1 << ATMEL_FLASH_CLK;
    5c28:	8d 9a       	sbi	0x11, 5	; 17
    // clear flash out pin
    ATMEL_FLASH_PORT &= ~(1 << ATMEL_FLASH_OUT);
    5c2a:	92 98       	cbi	0x12, 2	; 18
    // set flash out pin direction
    ATMEL_FLASH_DIRE &= ~(1 << ATMEL_FLASH_OUT);
    5c2c:	8a 98       	cbi	0x11, 2	; 17
    // clear flash in pin
    ATMEL_FLASH_PORT |= 1 << ATMEL_FLASH_IN;
    5c2e:	93 9a       	sbi	0x12, 3	; 18
    // set flash in pin direction
    ATMEL_FLASH_DIRE |= 1 << ATMEL_FLASH_IN;
    5c30:	8b 9a       	sbi	0x11, 3	; 17
    SREG = sreg;
    5c32:	8f bf       	out	0x3f, r24	; 63
    atmel_flash_addr = 0;
    5c34:	10 92 af 03 	sts	0x03AF, r1
    5c38:	10 92 b0 03 	sts	0x03B0, r1
    5c3c:	10 92 b1 03 	sts	0x03B1, r1
    5c40:	10 92 b2 03 	sts	0x03B2, r1
    cur_buff = ATMEL_FLASH_BUFFER_1;
    5c44:	81 e0       	ldi	r24, 0x01	; 1
    5c46:	80 93 b6 03 	sts	0x03B6, r24
    cur_page = ATMEL_FLASH_MAX_PAGES;
    5c4a:	80 e0       	ldi	r24, 0x00	; 0
    5c4c:	98 e0       	ldi	r25, 0x08	; 8
    5c4e:	90 93 b5 03 	sts	0x03B5, r25
    5c52:	80 93 b4 03 	sts	0x03B4, r24
    dirty = 0;
    5c56:	10 92 b3 03 	sts	0x03B3, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    5c5a:	8f e3       	ldi	r24, 0x3F	; 63
    5c5c:	9c e9       	ldi	r25, 0x9C	; 156
    5c5e:	01 97       	sbiw	r24, 0x01	; 1
    5c60:	f1 f7       	brne	.-4      	; 0x5c5e <atmel_flash_init+0x40>
    5c62:	00 c0       	rjmp	.+0      	; 0x5c64 <atmel_flash_init+0x46>
    5c64:	00 00       	nop
    
    _delay_ms(20);
}
    5c66:	08 95       	ret

00005c68 <readFlash>:

//-------------------------------------------------------------------------
void readFlash(int pagenum, uint8_t offset, void *buffer, int NumOfBytes)
{
    5c68:	cf 92       	push	r12
    5c6a:	df 92       	push	r13
    5c6c:	ef 92       	push	r14
    5c6e:	ff 92       	push	r15
    5c70:	0f 93       	push	r16
    5c72:	1f 93       	push	r17
    5c74:	cf 93       	push	r28
    5c76:	df 93       	push	r29
    5c78:	6c 01       	movw	r12, r24
    5c7a:	7a 01       	movw	r14, r20
    5c7c:	89 01       	movw	r16, r18
    uint16_t count;

    atmel_flash_addr = pagenum * 264 + offset;
    5c7e:	70 e0       	ldi	r23, 0x00	; 0
    5c80:	28 e0       	ldi	r18, 0x08	; 8
    5c82:	31 e0       	ldi	r19, 0x01	; 1
    5c84:	c2 9e       	mul	r12, r18
    5c86:	c0 01       	movw	r24, r0
    5c88:	c3 9e       	mul	r12, r19
    5c8a:	90 0d       	add	r25, r0
    5c8c:	d2 9e       	mul	r13, r18
    5c8e:	90 0d       	add	r25, r0
    5c90:	11 24       	eor	r1, r1
    5c92:	86 0f       	add	r24, r22
    5c94:	97 1f       	adc	r25, r23
    5c96:	aa 27       	eor	r26, r26
    5c98:	97 fd       	sbrc	r25, 7
    5c9a:	a0 95       	com	r26
    5c9c:	ba 2f       	mov	r27, r26
    5c9e:	80 93 af 03 	sts	0x03AF, r24
    5ca2:	90 93 b0 03 	sts	0x03B0, r25
    5ca6:	a0 93 b1 03 	sts	0x03B1, r26
    5caa:	b0 93 b2 03 	sts	0x03B2, r27
    if (offset + NumOfBytes > 256)
    5cae:	c8 01       	movw	r24, r16
    5cb0:	86 0f       	add	r24, r22
    5cb2:	97 1f       	adc	r25, r23
    5cb4:	21 e0       	ldi	r18, 0x01	; 1
    5cb6:	81 30       	cpi	r24, 0x01	; 1
    5cb8:	92 07       	cpc	r25, r18
    5cba:	2c f0       	brlt	.+10     	; 0x5cc6 <readFlash+0x5e>
    {
        count = 256 - offset;
    5cbc:	c0 e0       	ldi	r28, 0x00	; 0
    5cbe:	d1 e0       	ldi	r29, 0x01	; 1
    5cc0:	c6 1b       	sub	r28, r22
    5cc2:	d7 0b       	sbc	r29, r23
    5cc4:	01 c0       	rjmp	.+2      	; 0x5cc8 <readFlash+0x60>
    }
    else
    {
        count = NumOfBytes;
    5cc6:	e8 01       	movw	r28, r16
    }
    while (atmel_flash_busy())
    5cc8:	0e 94 27 2c 	call	0x584e	; 0x584e <atmel_flash_busy>
    5ccc:	88 23       	and	r24, r24
    5cce:	e1 f7       	brne	.-8      	; 0x5cc8 <readFlash+0x60>
        ;
    dev_read_atmel_flash(buffer, count);
    5cd0:	c7 01       	movw	r24, r14
    5cd2:	be 01       	movw	r22, r28
    5cd4:	0e 94 7a 2d 	call	0x5af4	; 0x5af4 <dev_read_atmel_flash>
    while (atmel_flash_busy())
    5cd8:	0e 94 27 2c 	call	0x584e	; 0x584e <atmel_flash_busy>
    5cdc:	88 23       	and	r24, r24
    5cde:	e1 f7       	brne	.-8      	; 0x5cd8 <readFlash+0x70>
        ;
    buffer = (void *)((char *)buffer + count);
    if (count < NumOfBytes)
    5ce0:	c0 17       	cp	r28, r16
    5ce2:	d1 07       	cpc	r29, r17
    5ce4:	40 f5       	brcc	.+80     	; 0x5d36 <readFlash+0xce>
    {
        atmel_flash_addr = (pagenum + 1) * 264;
    5ce6:	08 94       	sec
    5ce8:	c1 1c       	adc	r12, r1
    5cea:	d1 1c       	adc	r13, r1
    5cec:	28 e0       	ldi	r18, 0x08	; 8
    5cee:	31 e0       	ldi	r19, 0x01	; 1
    5cf0:	c2 9e       	mul	r12, r18
    5cf2:	c0 01       	movw	r24, r0
    5cf4:	c3 9e       	mul	r12, r19
    5cf6:	90 0d       	add	r25, r0
    5cf8:	d2 9e       	mul	r13, r18
    5cfa:	90 0d       	add	r25, r0
    5cfc:	11 24       	eor	r1, r1
    5cfe:	aa 27       	eor	r26, r26
    5d00:	97 fd       	sbrc	r25, 7
    5d02:	a0 95       	com	r26
    5d04:	ba 2f       	mov	r27, r26
    5d06:	80 93 af 03 	sts	0x03AF, r24
    5d0a:	90 93 b0 03 	sts	0x03B0, r25
    5d0e:	a0 93 b1 03 	sts	0x03B1, r26
    5d12:	b0 93 b2 03 	sts	0x03B2, r27
        count = NumOfBytes - count;
    5d16:	0c 1b       	sub	r16, r28
    5d18:	1d 0b       	sbc	r17, r29
        while (atmel_flash_busy())
    5d1a:	0e 94 27 2c 	call	0x584e	; 0x584e <atmel_flash_busy>
    5d1e:	88 23       	and	r24, r24
    5d20:	e1 f7       	brne	.-8      	; 0x5d1a <readFlash+0xb2>
            ;
        dev_read_atmel_flash(buffer, count);
    5d22:	c7 01       	movw	r24, r14
    5d24:	8c 0f       	add	r24, r28
    5d26:	9d 1f       	adc	r25, r29
    5d28:	b8 01       	movw	r22, r16
    5d2a:	0e 94 7a 2d 	call	0x5af4	; 0x5af4 <dev_read_atmel_flash>
        while (atmel_flash_busy())
    5d2e:	0e 94 27 2c 	call	0x584e	; 0x584e <atmel_flash_busy>
    5d32:	88 23       	and	r24, r24
    5d34:	e1 f7       	brne	.-8      	; 0x5d2e <readFlash+0xc6>
            ;
    }
    return;
}
    5d36:	df 91       	pop	r29
    5d38:	cf 91       	pop	r28
    5d3a:	1f 91       	pop	r17
    5d3c:	0f 91       	pop	r16
    5d3e:	ff 90       	pop	r15
    5d40:	ef 90       	pop	r14
    5d42:	df 90       	pop	r13
    5d44:	cf 90       	pop	r12
    5d46:	08 95       	ret

00005d48 <writeFlash>:

//-------------------------------------------------------------------------
void writeFlash(int pagenum, uint8_t offset, void *buffer, int NumOfBytes)
{
    5d48:	cf 92       	push	r12
    5d4a:	df 92       	push	r13
    5d4c:	ef 92       	push	r14
    5d4e:	ff 92       	push	r15
    5d50:	0f 93       	push	r16
    5d52:	1f 93       	push	r17
    5d54:	cf 93       	push	r28
    5d56:	df 93       	push	r29
    5d58:	6c 01       	movw	r12, r24
    5d5a:	7a 01       	movw	r14, r20
    5d5c:	89 01       	movw	r16, r18
    uint16_t count;

    atmel_flash_addr = pagenum * 264 + offset;
    5d5e:	70 e0       	ldi	r23, 0x00	; 0
    5d60:	28 e0       	ldi	r18, 0x08	; 8
    5d62:	31 e0       	ldi	r19, 0x01	; 1
    5d64:	c2 9e       	mul	r12, r18
    5d66:	c0 01       	movw	r24, r0
    5d68:	c3 9e       	mul	r12, r19
    5d6a:	90 0d       	add	r25, r0
    5d6c:	d2 9e       	mul	r13, r18
    5d6e:	90 0d       	add	r25, r0
    5d70:	11 24       	eor	r1, r1
    5d72:	86 0f       	add	r24, r22
    5d74:	97 1f       	adc	r25, r23
    5d76:	aa 27       	eor	r26, r26
    5d78:	97 fd       	sbrc	r25, 7
    5d7a:	a0 95       	com	r26
    5d7c:	ba 2f       	mov	r27, r26
    5d7e:	80 93 af 03 	sts	0x03AF, r24
    5d82:	90 93 b0 03 	sts	0x03B0, r25
    5d86:	a0 93 b1 03 	sts	0x03B1, r26
    5d8a:	b0 93 b2 03 	sts	0x03B2, r27
    if (offset + NumOfBytes > 256)
    5d8e:	c8 01       	movw	r24, r16
    5d90:	86 0f       	add	r24, r22
    5d92:	97 1f       	adc	r25, r23
    5d94:	21 e0       	ldi	r18, 0x01	; 1
    5d96:	81 30       	cpi	r24, 0x01	; 1
    5d98:	92 07       	cpc	r25, r18
    5d9a:	2c f0       	brlt	.+10     	; 0x5da6 <writeFlash+0x5e>
    {
        count = 256 - offset;
    5d9c:	c0 e0       	ldi	r28, 0x00	; 0
    5d9e:	d1 e0       	ldi	r29, 0x01	; 1
    5da0:	c6 1b       	sub	r28, r22
    5da2:	d7 0b       	sbc	r29, r23
    5da4:	01 c0       	rjmp	.+2      	; 0x5da8 <writeFlash+0x60>
    }
    else
    {
        count = NumOfBytes;
    5da6:	e8 01       	movw	r28, r16
    }
    while (atmel_flash_busy())
    5da8:	0e 94 27 2c 	call	0x584e	; 0x584e <atmel_flash_busy>
    5dac:	88 23       	and	r24, r24
    5dae:	e1 f7       	brne	.-8      	; 0x5da8 <writeFlash+0x60>
        ;
    dev_write_atmel_flash(buffer, count);
    5db0:	c7 01       	movw	r24, r14
    5db2:	be 01       	movw	r22, r28
    5db4:	0e 94 8e 2c 	call	0x591c	; 0x591c <dev_write_atmel_flash>
    while (atmel_flash_busy())
    5db8:	0e 94 27 2c 	call	0x584e	; 0x584e <atmel_flash_busy>
    5dbc:	88 23       	and	r24, r24
    5dbe:	e1 f7       	brne	.-8      	; 0x5db8 <writeFlash+0x70>
        ;
    buffer = (void *)((char *)buffer + count);
    if (count < NumOfBytes)
    5dc0:	c0 17       	cp	r28, r16
    5dc2:	d1 07       	cpc	r29, r17
    5dc4:	40 f5       	brcc	.+80     	; 0x5e16 <writeFlash+0xce>
    {
        atmel_flash_addr = (pagenum + 1) * 264;
    5dc6:	08 94       	sec
    5dc8:	c1 1c       	adc	r12, r1
    5dca:	d1 1c       	adc	r13, r1
    5dcc:	28 e0       	ldi	r18, 0x08	; 8
    5dce:	31 e0       	ldi	r19, 0x01	; 1
    5dd0:	c2 9e       	mul	r12, r18
    5dd2:	c0 01       	movw	r24, r0
    5dd4:	c3 9e       	mul	r12, r19
    5dd6:	90 0d       	add	r25, r0
    5dd8:	d2 9e       	mul	r13, r18
    5dda:	90 0d       	add	r25, r0
    5ddc:	11 24       	eor	r1, r1
    5dde:	aa 27       	eor	r26, r26
    5de0:	97 fd       	sbrc	r25, 7
    5de2:	a0 95       	com	r26
    5de4:	ba 2f       	mov	r27, r26
    5de6:	80 93 af 03 	sts	0x03AF, r24
    5dea:	90 93 b0 03 	sts	0x03B0, r25
    5dee:	a0 93 b1 03 	sts	0x03B1, r26
    5df2:	b0 93 b2 03 	sts	0x03B2, r27
        count = NumOfBytes - count;
    5df6:	0c 1b       	sub	r16, r28
    5df8:	1d 0b       	sbc	r17, r29
        while (atmel_flash_busy())
    5dfa:	0e 94 27 2c 	call	0x584e	; 0x584e <atmel_flash_busy>
    5dfe:	88 23       	and	r24, r24
    5e00:	e1 f7       	brne	.-8      	; 0x5dfa <writeFlash+0xb2>
            ;
        dev_write_atmel_flash(buffer, count);
    5e02:	c7 01       	movw	r24, r14
    5e04:	8c 0f       	add	r24, r28
    5e06:	9d 1f       	adc	r25, r29
    5e08:	b8 01       	movw	r22, r16
    5e0a:	0e 94 8e 2c 	call	0x591c	; 0x591c <dev_write_atmel_flash>
        while (atmel_flash_busy())
    5e0e:	0e 94 27 2c 	call	0x584e	; 0x584e <atmel_flash_busy>
    5e12:	88 23       	and	r24, r24
    5e14:	e1 f7       	brne	.-8      	; 0x5e0e <writeFlash+0xc6>
            ;
    }
    return;
}
    5e16:	df 91       	pop	r29
    5e18:	cf 91       	pop	r28
    5e1a:	1f 91       	pop	r17
    5e1c:	0f 91       	pop	r16
    5e1e:	ff 90       	pop	r15
    5e20:	ef 90       	pop	r14
    5e22:	df 90       	pop	r13
    5e24:	cf 90       	pop	r12
    5e26:	08 95       	ret

00005e28 <copyFlash>:

//-------------------------------------------------------------------------
void copyFlash(int sourcepage, int targetpage)
{
    5e28:	0f 93       	push	r16
    5e2a:	1f 93       	push	r17
    5e2c:	cf 93       	push	r28
    5e2e:	df 93       	push	r29
    5e30:	8c 01       	movw	r16, r24
    5e32:	eb 01       	movw	r28, r22
    while (atmel_flash_busy())
    5e34:	0e 94 27 2c 	call	0x584e	; 0x584e <atmel_flash_busy>
    5e38:	88 23       	and	r24, r24
    5e3a:	e1 f7       	brne	.-8      	; 0x5e34 <copyFlash+0xc>
        ;
    atmel_flash_fill_buffer(1, sourcepage);
    5e3c:	81 e0       	ldi	r24, 0x01	; 1
    5e3e:	b8 01       	movw	r22, r16
    5e40:	0e 94 41 2c 	call	0x5882	; 0x5882 <atmel_flash_fill_buffer>
    while (atmel_flash_busy())
    5e44:	0e 94 27 2c 	call	0x584e	; 0x584e <atmel_flash_busy>
    5e48:	88 23       	and	r24, r24
    5e4a:	e1 f7       	brne	.-8      	; 0x5e44 <copyFlash+0x1c>
        ;
    atmel_flash_flush_buffer(1, targetpage);
    5e4c:	81 e0       	ldi	r24, 0x01	; 1
    5e4e:	be 01       	movw	r22, r28
    5e50:	0e 94 ed 2b 	call	0x57da	; 0x57da <atmel_flash_flush_buffer>
    while (atmel_flash_busy())
    5e54:	0e 94 27 2c 	call	0x584e	; 0x584e <atmel_flash_busy>
    5e58:	88 23       	and	r24, r24
    5e5a:	e1 f7       	brne	.-8      	; 0x5e54 <copyFlash+0x2c>
        ;
}
    5e5c:	df 91       	pop	r29
    5e5e:	cf 91       	pop	r28
    5e60:	1f 91       	pop	r17
    5e62:	0f 91       	pop	r16
    5e64:	08 95       	ret

00005e66 <atmel_flash_compare>:
    }
    return count;
}

uint8_t atmel_flash_compare(uint8_t * buf, uint16_t count)
{
    5e66:	2f 92       	push	r2
    5e68:	3f 92       	push	r3
    5e6a:	4f 92       	push	r4
    5e6c:	5f 92       	push	r5
    5e6e:	6f 92       	push	r6
    5e70:	7f 92       	push	r7
    5e72:	8f 92       	push	r8
    5e74:	9f 92       	push	r9
    5e76:	af 92       	push	r10
    5e78:	bf 92       	push	r11
    5e7a:	cf 92       	push	r12
    5e7c:	df 92       	push	r13
    5e7e:	ef 92       	push	r14
    5e80:	ff 92       	push	r15
    5e82:	0f 93       	push	r16
    5e84:	1f 93       	push	r17
    5e86:	df 93       	push	r29
    5e88:	cf 93       	push	r28
    5e8a:	cd b7       	in	r28, 0x3d	; 61
    5e8c:	de b7       	in	r29, 0x3e	; 62
    5e8e:	27 97       	sbiw	r28, 0x07	; 7
    5e90:	0f b6       	in	r0, 0x3f	; 63
    5e92:	f8 94       	cli
    5e94:	de bf       	out	0x3e, r29	; 62
    5e96:	0f be       	out	0x3f, r0	; 63
    5e98:	cd bf       	out	0x3d, r28	; 61
    5e9a:	3c 01       	movw	r6, r24
    5e9c:	7b 01       	movw	r14, r22
    uint16_t page, offset, num_bytes;
    uint16_t index = 0;
    uint8_t compare = 0;

    if (dirty)
    5e9e:	80 91 b3 03 	lds	r24, 0x03B3
    5ea2:	88 23       	and	r24, r24
    5ea4:	71 f0       	breq	.+28     	; 0x5ec2 <atmel_flash_compare+0x5c>
    {
        while (atmel_flash_busy())
    5ea6:	0e 94 27 2c 	call	0x584e	; 0x584e <atmel_flash_busy>
    5eaa:	88 23       	and	r24, r24
    5eac:	e1 f7       	brne	.-8      	; 0x5ea6 <atmel_flash_compare+0x40>
            ;
        atmel_flash_flush_buffer(cur_buff, cur_page);
    5eae:	60 91 b4 03 	lds	r22, 0x03B4
    5eb2:	70 91 b5 03 	lds	r23, 0x03B5
    5eb6:	80 91 b6 03 	lds	r24, 0x03B6
    5eba:	0e 94 ed 2b 	call	0x57da	; 0x57da <atmel_flash_flush_buffer>
        dirty = 0;
    5ebe:	10 92 b3 03 	sts	0x03B3, r1
    }
    // Wait for any previous actions to complete
    while (atmel_flash_busy())
    5ec2:	0e 94 27 2c 	call	0x584e	; 0x584e <atmel_flash_busy>
    5ec6:	88 23       	and	r24, r24
    5ec8:	e1 f7       	brne	.-8      	; 0x5ec2 <atmel_flash_compare+0x5c>
    5eca:	88 24       	eor	r8, r8
    5ecc:	99 24       	eor	r9, r9
    {
        page = atmel_flash_addr / ATMEL_FLASH_PAGE_SIZE;
        offset = atmel_flash_addr % ATMEL_FLASH_PAGE_SIZE;
        if (count + offset > ATMEL_FLASH_PAGE_SIZE)
        {
            num_bytes = ATMEL_FLASH_PAGE_SIZE - offset;
    5ece:	a8 e0       	ldi	r26, 0x08	; 8
    5ed0:	4a 2e       	mov	r4, r26
    5ed2:	a1 e0       	ldi	r26, 0x01	; 1
    5ed4:	5a 2e       	mov	r5, r26
    }                           // 8 bit of op code
    cmd[1] = page >> 7;         // 4 bit reserve and high 4 MSB
    cmd[2] = page << 1;         // 7 bit page and 1 bit offset MSB
    cmd[3] = 0x00;              // 8 bit don't care code
    // put the cs to low in order to begin writing
    atmel_flash_low();
    5ed6:	1e 01       	movw	r2, r28
    5ed8:	08 94       	sec
    5eda:	21 1c       	adc	r2, r1
    5edc:	31 1c       	adc	r3, r1
        offset = 0;
    }
    return count;
}

uint8_t atmel_flash_compare(uint8_t * buf, uint16_t count)
    5ede:	ce 01       	movw	r24, r28
    5ee0:	05 96       	adiw	r24, 0x05	; 5
    5ee2:	9f 83       	std	Y+7, r25	; 0x07
    5ee4:	8e 83       	std	Y+6, r24	; 0x06
    5ee6:	75 c0       	rjmp	.+234    	; 0x5fd2 <atmel_flash_compare+0x16c>
    // Wait for any previous actions to complete
    while (atmel_flash_busy())
        ;
    while (count > 0)
    {
        page = atmel_flash_addr / ATMEL_FLASH_PAGE_SIZE;
    5ee8:	60 91 af 03 	lds	r22, 0x03AF
    5eec:	70 91 b0 03 	lds	r23, 0x03B0
    5ef0:	80 91 b1 03 	lds	r24, 0x03B1
    5ef4:	90 91 b2 03 	lds	r25, 0x03B2
    5ef8:	28 e0       	ldi	r18, 0x08	; 8
    5efa:	31 e0       	ldi	r19, 0x01	; 1
    5efc:	40 e0       	ldi	r20, 0x00	; 0
    5efe:	50 e0       	ldi	r21, 0x00	; 0
    5f00:	0e 94 fe 48 	call	0x91fc	; 0x91fc <__udivmodsi4>
    5f04:	59 01       	movw	r10, r18
        offset = atmel_flash_addr % ATMEL_FLASH_PAGE_SIZE;
    5f06:	6b 01       	movw	r12, r22
        if (count + offset > ATMEL_FLASH_PAGE_SIZE)
    5f08:	c7 01       	movw	r24, r14
    5f0a:	8c 0d       	add	r24, r12
    5f0c:	9d 1d       	adc	r25, r13
    5f0e:	e1 e0       	ldi	r30, 0x01	; 1
    5f10:	89 30       	cpi	r24, 0x09	; 9
    5f12:	9e 07       	cpc	r25, r30
    5f14:	20 f0       	brcs	.+8      	; 0x5f1e <atmel_flash_compare+0xb8>
        {
            num_bytes = ATMEL_FLASH_PAGE_SIZE - offset;
    5f16:	82 01       	movw	r16, r4
    5f18:	0c 19       	sub	r16, r12
    5f1a:	1d 09       	sbc	r17, r13
    5f1c:	01 c0       	rjmp	.+2      	; 0x5f20 <atmel_flash_compare+0xba>
        ;
    while (count > 0)
    {
        page = atmel_flash_addr / ATMEL_FLASH_PAGE_SIZE;
        offset = atmel_flash_addr % ATMEL_FLASH_PAGE_SIZE;
        if (count + offset > ATMEL_FLASH_PAGE_SIZE)
    5f1e:	87 01       	movw	r16, r14
        else
        {
            num_bytes = count;
        }
        // Are we not comparing a whole page?
        if (num_bytes < ATMEL_FLASH_PAGE_SIZE)
    5f20:	f1 e0       	ldi	r31, 0x01	; 1
    5f22:	08 30       	cpi	r16, 0x08	; 8
    5f24:	1f 07       	cpc	r17, r31
    5f26:	40 f4       	brcc	.+16     	; 0x5f38 <atmel_flash_compare+0xd2>
        {
            atmel_flash_fill_buffer(ATMEL_FLASH_DEFAULT_BUFFER, page);
    5f28:	81 e0       	ldi	r24, 0x01	; 1
    5f2a:	b5 01       	movw	r22, r10
    5f2c:	0e 94 41 2c 	call	0x5882	; 0x5882 <atmel_flash_fill_buffer>
            while (atmel_flash_busy())
    5f30:	0e 94 27 2c 	call	0x584e	; 0x584e <atmel_flash_busy>
    5f34:	88 23       	and	r24, r24
    5f36:	e1 f7       	brne	.-8      	; 0x5f30 <atmel_flash_compare+0xca>
                ;
        }
        // Write the data we want to compare to the buffer
        atmel_flash_write_buffer(ATMEL_FLASH_DEFAULT_BUFFER, offset,
    5f38:	a3 01       	movw	r20, r6
    5f3a:	48 0d       	add	r20, r8
    5f3c:	59 1d       	adc	r21, r9
    5f3e:	81 e0       	ldi	r24, 0x01	; 1
    5f40:	b6 01       	movw	r22, r12
    5f42:	98 01       	movw	r18, r16
    5f44:	0e 94 9f 2b 	call	0x573e	; 0x573e <atmel_flash_write_buffer>
{
    uint8_t i, cmd[4], status;

    if (selected == 1)
    {
        cmd[0] = C_COMPARE_BUFFER1;
    5f48:	20 e6       	ldi	r18, 0x60	; 96
    5f4a:	29 83       	std	Y+1, r18	; 0x01
    }                           // 8 bit of op code
    else
    {
        cmd[0] = C_COMPARE_BUFFER2;
    }                           // 8 bit of op code
    cmd[1] = page >> 7;         // 4 bit reserve and high 4 MSB
    5f4c:	c5 01       	movw	r24, r10
    5f4e:	88 0f       	add	r24, r24
    5f50:	89 2f       	mov	r24, r25
    5f52:	88 1f       	adc	r24, r24
    5f54:	99 0b       	sbc	r25, r25
    5f56:	91 95       	neg	r25
    5f58:	8a 83       	std	Y+2, r24	; 0x02
    cmd[2] = page << 1;         // 7 bit page and 1 bit offset MSB
    5f5a:	aa 0c       	add	r10, r10
    5f5c:	ab 82       	std	Y+3, r10	; 0x03
    cmd[3] = 0x00;              // 8 bit don't care code
    5f5e:	1c 82       	std	Y+4, r1	; 0x04
    // put the cs to low in order to begin writing
    atmel_flash_low();
    5f60:	0e 94 48 2b 	call	0x5690	; 0x5690 <atmel_flash_low>
    5f64:	61 01       	movw	r12, r2
    for (i = 0; i < sizeof(cmd); i++)
    {
        atmel_flash_send_byte(cmd[i]);
    5f66:	f6 01       	movw	r30, r12
    5f68:	81 91       	ld	r24, Z+
    5f6a:	6f 01       	movw	r12, r30
    5f6c:	0e 94 77 2b 	call	0x56ee	; 0x56ee <atmel_flash_send_byte>
    cmd[1] = page >> 7;         // 4 bit reserve and high 4 MSB
    cmd[2] = page << 1;         // 7 bit page and 1 bit offset MSB
    cmd[3] = 0x00;              // 8 bit don't care code
    // put the cs to low in order to begin writing
    atmel_flash_low();
    for (i = 0; i < sizeof(cmd); i++)
    5f70:	8e 81       	ldd	r24, Y+6	; 0x06
    5f72:	9f 81       	ldd	r25, Y+7	; 0x07
    5f74:	c8 16       	cp	r12, r24
    5f76:	d9 06       	cpc	r13, r25
    5f78:	b1 f7       	brne	.-20     	; 0x5f66 <atmel_flash_compare+0x100>
    {
        atmel_flash_send_byte(cmd[i]);
    }
    atmel_flash_high();
    5f7a:	0e 94 4e 2b 	call	0x569c	; 0x569c <atmel_flash_high>
    do
    {
        atmel_flash_low();
    5f7e:	0e 94 48 2b 	call	0x5690	; 0x5690 <atmel_flash_low>
        atmel_flash_send_byte(C_REQ_STATUS);
    5f82:	87 ed       	ldi	r24, 0xD7	; 215
    5f84:	0e 94 77 2b 	call	0x56ee	; 0x56ee <atmel_flash_send_byte>
        //SEND d7h, op code for register request
        status = atmel_flash_get_byte();
    5f88:	0e 94 50 2b 	call	0x56a0	; 0x56a0 <atmel_flash_get_byte>
        atmel_flash_high();
    5f8c:	8d 83       	std	Y+5, r24	; 0x05
    5f8e:	0e 94 4e 2b 	call	0x569c	; 0x569c <atmel_flash_high>
    }

    while (status & 0x80);      // wait until comparison is complete
    5f92:	8d 81       	ldd	r24, Y+5	; 0x05
    5f94:	87 fd       	sbrc	r24, 7
    5f96:	f3 cf       	rjmp	.-26     	; 0x5f7e <atmel_flash_compare+0x118>
        }
        // Write the data we want to compare to the buffer
        atmel_flash_write_buffer(ATMEL_FLASH_DEFAULT_BUFFER, offset,
                                 &buf[index], num_bytes);
        // Compare the buffer to main memory
        if (atmel_flash_compare_buffer(ATMEL_FLASH_DEFAULT_BUFFER, page))
    5f98:	86 fd       	sbrc	r24, 6
    5f9a:	21 c0       	rjmp	.+66     	; 0x5fde <atmel_flash_compare+0x178>
        {
            compare = 1;
            break;
        }
        index += num_bytes;
    5f9c:	80 0e       	add	r8, r16
    5f9e:	91 1e       	adc	r9, r17
        atmel_flash_addr += num_bytes;
    5fa0:	98 01       	movw	r18, r16
    5fa2:	40 e0       	ldi	r20, 0x00	; 0
    5fa4:	50 e0       	ldi	r21, 0x00	; 0
    5fa6:	80 91 af 03 	lds	r24, 0x03AF
    5faa:	90 91 b0 03 	lds	r25, 0x03B0
    5fae:	a0 91 b1 03 	lds	r26, 0x03B1
    5fb2:	b0 91 b2 03 	lds	r27, 0x03B2
    5fb6:	82 0f       	add	r24, r18
    5fb8:	93 1f       	adc	r25, r19
    5fba:	a4 1f       	adc	r26, r20
    5fbc:	b5 1f       	adc	r27, r21
    5fbe:	80 93 af 03 	sts	0x03AF, r24
    5fc2:	90 93 b0 03 	sts	0x03B0, r25
    5fc6:	a0 93 b1 03 	sts	0x03B1, r26
    5fca:	b0 93 b2 03 	sts	0x03B2, r27
        count -= num_bytes;
    5fce:	e0 1a       	sub	r14, r16
    5fd0:	f1 0a       	sbc	r15, r17
        dirty = 0;
    }
    // Wait for any previous actions to complete
    while (atmel_flash_busy())
        ;
    while (count > 0)
    5fd2:	e1 14       	cp	r14, r1
    5fd4:	f1 04       	cpc	r15, r1
    5fd6:	09 f0       	breq	.+2      	; 0x5fda <atmel_flash_compare+0x174>
    5fd8:	87 cf       	rjmp	.-242    	; 0x5ee8 <atmel_flash_compare+0x82>

uint8_t atmel_flash_compare(uint8_t * buf, uint16_t count)
{
    uint16_t page, offset, num_bytes;
    uint16_t index = 0;
    uint8_t compare = 0;
    5fda:	80 e0       	ldi	r24, 0x00	; 0
    5fdc:	01 c0       	rjmp	.+2      	; 0x5fe0 <atmel_flash_compare+0x17a>
        atmel_flash_write_buffer(ATMEL_FLASH_DEFAULT_BUFFER, offset,
                                 &buf[index], num_bytes);
        // Compare the buffer to main memory
        if (atmel_flash_compare_buffer(ATMEL_FLASH_DEFAULT_BUFFER, page))
        {
            compare = 1;
    5fde:	81 e0       	ldi	r24, 0x01	; 1
        index += num_bytes;
        atmel_flash_addr += num_bytes;
        count -= num_bytes;
    }
    // In case we exited the loop early, act like we read the whole range
    atmel_flash_addr += count;
    5fe0:	00 e0       	ldi	r16, 0x00	; 0
    5fe2:	10 e0       	ldi	r17, 0x00	; 0
    5fe4:	20 91 af 03 	lds	r18, 0x03AF
    5fe8:	30 91 b0 03 	lds	r19, 0x03B0
    5fec:	40 91 b1 03 	lds	r20, 0x03B1
    5ff0:	50 91 b2 03 	lds	r21, 0x03B2
    5ff4:	2e 0d       	add	r18, r14
    5ff6:	3f 1d       	adc	r19, r15
    5ff8:	40 1f       	adc	r20, r16
    5ffa:	51 1f       	adc	r21, r17
    5ffc:	20 93 af 03 	sts	0x03AF, r18
    6000:	30 93 b0 03 	sts	0x03B0, r19
    6004:	40 93 b1 03 	sts	0x03B1, r20
    6008:	50 93 b2 03 	sts	0x03B2, r21
    return compare;
}
    600c:	27 96       	adiw	r28, 0x07	; 7
    600e:	0f b6       	in	r0, 0x3f	; 63
    6010:	f8 94       	cli
    6012:	de bf       	out	0x3e, r29	; 62
    6014:	0f be       	out	0x3f, r0	; 63
    6016:	cd bf       	out	0x3d, r28	; 61
    6018:	cf 91       	pop	r28
    601a:	df 91       	pop	r29
    601c:	1f 91       	pop	r17
    601e:	0f 91       	pop	r16
    6020:	ff 90       	pop	r15
    6022:	ef 90       	pop	r14
    6024:	df 90       	pop	r13
    6026:	cf 90       	pop	r12
    6028:	bf 90       	pop	r11
    602a:	af 90       	pop	r10
    602c:	9f 90       	pop	r9
    602e:	8f 90       	pop	r8
    6030:	7f 90       	pop	r7
    6032:	6f 90       	pop	r6
    6034:	5f 90       	pop	r5
    6036:	4f 90       	pop	r4
    6038:	3f 90       	pop	r3
    603a:	2f 90       	pop	r2
    603c:	08 95       	ret

0000603e <atmel_flash_crc>:


uint16_t atmel_flash_crc(uint32_t count)
{
    603e:	4f 92       	push	r4
    6040:	5f 92       	push	r5
    6042:	6f 92       	push	r6
    6044:	7f 92       	push	r7
    6046:	8f 92       	push	r8
    6048:	9f 92       	push	r9
    604a:	af 92       	push	r10
    604c:	bf 92       	push	r11
    604e:	cf 92       	push	r12
    6050:	df 92       	push	r13
    6052:	ef 92       	push	r14
    6054:	ff 92       	push	r15
    6056:	0f 93       	push	r16
    6058:	1f 93       	push	r17
    605a:	df 93       	push	r29
    605c:	cf 93       	push	r28
    605e:	cd b7       	in	r28, 0x3d	; 61
    6060:	de b7       	in	r29, 0x3e	; 62
    6062:	28 97       	sbiw	r28, 0x08	; 8
    6064:	0f b6       	in	r0, 0x3f	; 63
    6066:	f8 94       	cli
    6068:	de bf       	out	0x3e, r29	; 62
    606a:	0f be       	out	0x3f, r0	; 63
    606c:	cd bf       	out	0x3d, r28	; 61
    606e:	2b 01       	movw	r4, r22
    6070:	3c 01       	movw	r6, r24
    uint16_t page, offset, crc;

    page = atmel_flash_addr / ATMEL_FLASH_PAGE_SIZE;
    6072:	60 91 af 03 	lds	r22, 0x03AF
    6076:	70 91 b0 03 	lds	r23, 0x03B0
    607a:	80 91 b1 03 	lds	r24, 0x03B1
    607e:	90 91 b2 03 	lds	r25, 0x03B2
    6082:	f8 e0       	ldi	r31, 0x08	; 8
    6084:	cf 2e       	mov	r12, r31
    6086:	f1 e0       	ldi	r31, 0x01	; 1
    6088:	df 2e       	mov	r13, r31
    608a:	e1 2c       	mov	r14, r1
    608c:	f1 2c       	mov	r15, r1
    608e:	a7 01       	movw	r20, r14
    6090:	96 01       	movw	r18, r12
    6092:	0e 94 fe 48 	call	0x91fc	; 0x91fc <__udivmodsi4>
    6096:	89 01       	movw	r16, r18
    offset = atmel_flash_addr % ATMEL_FLASH_PAGE_SIZE;
    6098:	4b 01       	movw	r8, r22
    if (dirty && page <= cur_page && page + (offset + count) /
    609a:	80 91 b3 03 	lds	r24, 0x03B3
    609e:	88 23       	and	r24, r24
    60a0:	71 f1       	breq	.+92     	; 0x60fe <atmel_flash_crc+0xc0>
    60a2:	a0 90 b4 03 	lds	r10, 0x03B4
    60a6:	b0 90 b5 03 	lds	r11, 0x03B5
    60aa:	a2 16       	cp	r10, r18
    60ac:	b3 06       	cpc	r11, r19
    60ae:	38 f1       	brcs	.+78     	; 0x60fe <atmel_flash_crc+0xc0>
    60b0:	b4 01       	movw	r22, r8
    60b2:	80 e0       	ldi	r24, 0x00	; 0
    60b4:	90 e0       	ldi	r25, 0x00	; 0
    60b6:	64 0d       	add	r22, r4
    60b8:	75 1d       	adc	r23, r5
    60ba:	86 1d       	adc	r24, r6
    60bc:	97 1d       	adc	r25, r7
    60be:	a7 01       	movw	r20, r14
    60c0:	96 01       	movw	r18, r12
    60c2:	0e 94 fe 48 	call	0x91fc	; 0x91fc <__udivmodsi4>
    60c6:	c8 01       	movw	r24, r16
    60c8:	a0 e0       	ldi	r26, 0x00	; 0
    60ca:	b0 e0       	ldi	r27, 0x00	; 0
    60cc:	28 0f       	add	r18, r24
    60ce:	39 1f       	adc	r19, r25
    60d0:	4a 1f       	adc	r20, r26
    60d2:	5b 1f       	adc	r21, r27
        ATMEL_FLASH_PAGE_SIZE >= cur_page)
    60d4:	cc 24       	eor	r12, r12
    60d6:	dd 24       	eor	r13, r13
{
    uint16_t page, offset, crc;

    page = atmel_flash_addr / ATMEL_FLASH_PAGE_SIZE;
    offset = atmel_flash_addr % ATMEL_FLASH_PAGE_SIZE;
    if (dirty && page <= cur_page && page + (offset + count) /
    60d8:	2a 15       	cp	r18, r10
    60da:	3b 05       	cpc	r19, r11
    60dc:	4c 05       	cpc	r20, r12
    60de:	5d 05       	cpc	r21, r13
    60e0:	70 f0       	brcs	.+28     	; 0x60fe <atmel_flash_crc+0xc0>
        ATMEL_FLASH_PAGE_SIZE >= cur_page)
    {
        while (atmel_flash_busy())
    60e2:	0e 94 27 2c 	call	0x584e	; 0x584e <atmel_flash_busy>
    60e6:	88 23       	and	r24, r24
    60e8:	e1 f7       	brne	.-8      	; 0x60e2 <atmel_flash_crc+0xa4>
            ;
        atmel_flash_flush_buffer(cur_buff, cur_page);
    60ea:	60 91 b4 03 	lds	r22, 0x03B4
    60ee:	70 91 b5 03 	lds	r23, 0x03B5
    60f2:	80 91 b6 03 	lds	r24, 0x03B6
    60f6:	0e 94 ed 2b 	call	0x57da	; 0x57da <atmel_flash_flush_buffer>
        dirty = 0;
    60fa:	10 92 b3 03 	sts	0x03B3, r1
    }
    // Wait for any previous actions to complete
    while (atmel_flash_busy())
    60fe:	0e 94 27 2c 	call	0x584e	; 0x584e <atmel_flash_busy>
    6102:	88 23       	and	r24, r24
    6104:	e1 f7       	brne	.-8      	; 0x60fe <atmel_flash_crc+0xc0>
{
    uint8_t cmd[8];
    uint16_t crc;
    uint32_t i;

    cmd[0] = C_READ_THROUGH_MEMORY;     // 8 bit of op code
    6106:	88 ee       	ldi	r24, 0xE8	; 232
    6108:	89 83       	std	Y+1, r24	; 0x01
    cmd[1] = (page >> 7);       // 4 bit reserve and high 4 MSB
    610a:	c8 01       	movw	r24, r16
    610c:	88 0f       	add	r24, r24
    610e:	89 2f       	mov	r24, r25
    6110:	88 1f       	adc	r24, r24
    6112:	99 0b       	sbc	r25, r25
    6114:	91 95       	neg	r25
    6116:	8a 83       	std	Y+2, r24	; 0x02
    cmd[2] = (page << 1) | offset >> 8; // 7 bit page and 1 bit offset MSB
    6118:	00 0f       	add	r16, r16
    611a:	09 29       	or	r16, r9
    611c:	0b 83       	std	Y+3, r16	; 0x03
    cmd[3] = offset;            // low-order 8 address bits
    611e:	8c 82       	std	Y+4, r8	; 0x04
    cmd[4] = 0x00;
    6120:	1d 82       	std	Y+5, r1	; 0x05
    cmd[5] = 0x00;
    6122:	1e 82       	std	Y+6, r1	; 0x06
    cmd[6] = 0x00;
    6124:	1f 82       	std	Y+7, r1	; 0x07
    cmd[7] = 0x00;
    6126:	18 86       	std	Y+8, r1	; 0x08
    atmel_flash_low();
    6128:	0e 94 48 2b 	call	0x5690	; 0x5690 <atmel_flash_low>
    612c:	8e 01       	movw	r16, r28
    612e:	0f 5f       	subi	r16, 0xFF	; 255
    6130:	1f 4f       	sbci	r17, 0xFF	; 255
    atmel_flash_addr += count;
    return compare;
}


uint16_t atmel_flash_crc(uint32_t count)
    6132:	79 e0       	ldi	r23, 0x09	; 9
    6134:	c7 2e       	mov	r12, r23
    6136:	d1 2c       	mov	r13, r1
    6138:	cc 0e       	add	r12, r28
    613a:	dd 1e       	adc	r13, r29
    cmd[6] = 0x00;
    cmd[7] = 0x00;
    atmel_flash_low();
    for (i = 0; i < sizeof(cmd); i++)
    {
        atmel_flash_send_byte(cmd[i]);
    613c:	f8 01       	movw	r30, r16
    613e:	81 91       	ld	r24, Z+
    6140:	8f 01       	movw	r16, r30
    6142:	0e 94 77 2b 	call	0x56ee	; 0x56ee <atmel_flash_send_byte>
    cmd[4] = 0x00;
    cmd[5] = 0x00;
    cmd[6] = 0x00;
    cmd[7] = 0x00;
    atmel_flash_low();
    for (i = 0; i < sizeof(cmd); i++)
    6146:	0c 15       	cp	r16, r12
    6148:	1d 05       	cpc	r17, r13
    614a:	c1 f7       	brne	.-16     	; 0x613c <atmel_flash_crc+0xfe>
    614c:	cc 24       	eor	r12, r12
    614e:	dd 24       	eor	r13, r13
    6150:	76 01       	movw	r14, r12
    6152:	0f ef       	ldi	r16, 0xFF	; 255
    6154:	1f ef       	ldi	r17, 0xFF	; 255
                    crc = crc + 1;
                }

                if (xor_flag)
                {
                    crc = crc ^ 0x1021 /*POLY*/;
    6156:	61 e2       	ldi	r22, 0x21	; 33
    6158:	a6 2e       	mov	r10, r22
    615a:	60 e1       	ldi	r22, 0x10	; 16
    615c:	b6 2e       	mov	r11, r22
    615e:	19 c0       	rjmp	.+50     	; 0x6192 <atmel_flash_crc+0x154>

        crc = 0xFFFF /*INITIAL_VALUE */ ;
        for (i = 0; i < len; i++)
        {
            // Read the current byte from flash
            byte = atmel_flash_get_byte();
    6160:	0e 94 50 2b 	call	0x56a0	; 0x56a0 <atmel_flash_get_byte>
    6164:	48 e0       	ldi	r20, 0x08	; 8
            v = 0x80;
    6166:	90 e8       	ldi	r25, 0x80	; 128
            for (bit = 0; bit < 8; bit++)
            {
                if (crc & 0x8000)
    6168:	98 01       	movw	r18, r16
                else
                {
                    xor_flag = 0;
                }

                crc = crc << 1;
    616a:	00 0f       	add	r16, r16
    616c:	11 1f       	adc	r17, r17
                if (byte & v)
    616e:	59 2f       	mov	r21, r25
    6170:	58 23       	and	r21, r24
    6172:	11 f0       	breq	.+4      	; 0x6178 <atmel_flash_crc+0x13a>
                {
                    crc = crc + 1;
    6174:	0f 5f       	subi	r16, 0xFF	; 255
    6176:	1f 4f       	sbci	r17, 0xFF	; 255
                }

                if (xor_flag)
    6178:	37 ff       	sbrs	r19, 7
    617a:	02 c0       	rjmp	.+4      	; 0x6180 <atmel_flash_crc+0x142>
                {
                    crc = crc ^ 0x1021 /*POLY*/;
    617c:	0a 25       	eor	r16, r10
    617e:	1b 25       	eor	r17, r11
    6180:	41 50       	subi	r20, 0x01	; 1
        for (i = 0; i < len; i++)
        {
            // Read the current byte from flash
            byte = atmel_flash_get_byte();
            v = 0x80;
            for (bit = 0; bit < 8; bit++)
    6182:	11 f0       	breq	.+4      	; 0x6188 <atmel_flash_crc+0x14a>
                if (xor_flag)
                {
                    crc = crc ^ 0x1021 /*POLY*/;
                }

                v = v >> 1;
    6184:	96 95       	lsr	r25
    6186:	f0 cf       	rjmp	.-32     	; 0x6168 <atmel_flash_crc+0x12a>
    // The following code was adapted directly from crc.c
    {
        uint8_t v, xor_flag, byte, bit;

        crc = 0xFFFF /*INITIAL_VALUE */ ;
        for (i = 0; i < len; i++)
    6188:	08 94       	sec
    618a:	c1 1c       	adc	r12, r1
    618c:	d1 1c       	adc	r13, r1
    618e:	e1 1c       	adc	r14, r1
    6190:	f1 1c       	adc	r15, r1
    6192:	c4 14       	cp	r12, r4
    6194:	d5 04       	cpc	r13, r5
    6196:	e6 04       	cpc	r14, r6
    6198:	f7 04       	cpc	r15, r7
    619a:	10 f3       	brcs	.-60     	; 0x6160 <atmel_flash_crc+0x122>
    619c:	40 e1       	ldi	r20, 0x10	; 16
            }

            crc = crc << 1;
            if (xor_flag)
            {
                crc = crc ^ 0x1021 /*POLY*/;
    619e:	81 e2       	ldi	r24, 0x21	; 33
    61a0:	90 e1       	ldi	r25, 0x10	; 16
                v = v >> 1;
            }
        }
        for (bit = 0; bit < 16; bit++)
        {
            if (crc & 0x8000)
    61a2:	98 01       	movw	r18, r16
            else
            {
                xor_flag = 0;
            }

            crc = crc << 1;
    61a4:	00 0f       	add	r16, r16
    61a6:	11 1f       	adc	r17, r17
            if (xor_flag)
    61a8:	37 ff       	sbrs	r19, 7
    61aa:	02 c0       	rjmp	.+4      	; 0x61b0 <atmel_flash_crc+0x172>
            {
                crc = crc ^ 0x1021 /*POLY*/;
    61ac:	08 27       	eor	r16, r24
    61ae:	19 27       	eor	r17, r25
    61b0:	41 50       	subi	r20, 0x01	; 1
                }

                v = v >> 1;
            }
        }
        for (bit = 0; bit < 16; bit++)
    61b2:	b9 f7       	brne	.-18     	; 0x61a2 <atmel_flash_crc+0x164>
            {
                crc = crc ^ 0x1021 /*POLY*/;
            }
        }
    }
    atmel_flash_high();
    61b4:	0e 94 4e 2b 	call	0x569c	; 0x569c <atmel_flash_high>
    // Wait for any previous actions to complete
    while (atmel_flash_busy())
        ;
    crc = atmel_flash_crc_memory(page, offset, count);
    return crc;
}
    61b8:	c8 01       	movw	r24, r16
    61ba:	28 96       	adiw	r28, 0x08	; 8
    61bc:	0f b6       	in	r0, 0x3f	; 63
    61be:	f8 94       	cli
    61c0:	de bf       	out	0x3e, r29	; 62
    61c2:	0f be       	out	0x3f, r0	; 63
    61c4:	cd bf       	out	0x3d, r28	; 61
    61c6:	cf 91       	pop	r28
    61c8:	df 91       	pop	r29
    61ca:	1f 91       	pop	r17
    61cc:	0f 91       	pop	r16
    61ce:	ff 90       	pop	r15
    61d0:	ef 90       	pop	r14
    61d2:	df 90       	pop	r13
    61d4:	cf 90       	pop	r12
    61d6:	bf 90       	pop	r11
    61d8:	af 90       	pop	r10
    61da:	9f 90       	pop	r9
    61dc:	8f 90       	pop	r8
    61de:	7f 90       	pop	r7
    61e0:	6f 90       	pop	r6
    61e2:	5f 90       	pop	r5
    61e4:	4f 90       	pop	r4
    61e6:	08 95       	ret

000061e8 <atmel_flash_pagesize>:

//-------------------------------------------------------------------------
inline uint16_t atmel_flash_pagesize()
{
    return 256;
}
    61e8:	80 e0       	ldi	r24, 0x00	; 0
    61ea:	91 e0       	ldi	r25, 0x01	; 1
    61ec:	08 95       	ret

000061ee <atmel_flash_pagenumber>:

//-------------------------------------------------------------------------
inline uint16_t atmel_flash_pagenumber()
{
    return 2048;
}
    61ee:	80 e0       	ldi	r24, 0x00	; 0
    61f0:	98 e0       	ldi	r25, 0x08	; 8
    61f2:	08 95       	ret

000061f4 <getpagesize>:


//Get the size of each page
uint16_t getpagesize()
{
    return atmel_flash_pagesize();
    61f4:	0e 94 f4 30 	call	0x61e8	; 0x61e8 <atmel_flash_pagesize>
}
    61f8:	08 95       	ret

000061fa <getpagenumber>:

//Get the total number of pages
uint16_t getpagenumber()
{
    return atmel_flash_pagenumber();
    61fa:	0e 94 f7 30 	call	0x61ee	; 0x61ee <atmel_flash_pagenumber>
}
    61fe:	08 95       	ret

00006200 <pagestorageinit>:

//Init the page storage
void pagestorageinit()
{
    atmel_flash_init();
    6200:	0e 94 0f 2e 	call	0x5c1e	; 0x5c1e <atmel_flash_init>
}
    6204:	08 95       	ret

00006206 <readpagestorage>:

//Read from a page. Intra-page only.
void readpagestorage(int pagenum, uint8_t offset, void *buffer, int NumOfBytes)
{
    readFlash(pagenum, offset, buffer, NumOfBytes);
    6206:	0e 94 34 2e 	call	0x5c68	; 0x5c68 <readFlash>
}
    620a:	08 95       	ret

0000620c <writepagestorage>:

//Write to a page.  Intra-page only. 
void writepagestorage(int pagenum, uint8_t offset, void *buffer, int
                      NumOfBytes)
{
    writeFlash(pagenum, offset, buffer, NumOfBytes);
    620c:	0e 94 a4 2e 	call	0x5d48	; 0x5d48 <writeFlash>
}
    6210:	08 95       	ret

00006212 <copyPage>:

void copyPage(int sourcepage, int targetpage)
{		
	   copyFlash(sourcepage, targetpage); 
    6212:	0e 94 14 2f 	call	0x5e28	; 0x5e28 <copyFlash>
}
    6216:	08 95       	ret

00006218 <HPLClock_Timer3_Start>:
void HPLClock_Timer3_Start()
{
    //Prescaler 0
    //TCCR1B |= (1 << 0); // Timer1 (Clock)
    //Set up the tccr to be driven by the clock with cycle wise driven 
    sbi(TCCR3B, CS30);
    6218:	ea e8       	ldi	r30, 0x8A	; 138
    621a:	f0 e0       	ldi	r31, 0x00	; 0
    621c:	80 81       	ld	r24, Z
    621e:	81 60       	ori	r24, 0x01	; 1
    6220:	80 83       	st	Z, r24
    //Configure Timer1 to be CTC mode 
    sbi(TCCR3B, WGM32);
    6222:	80 81       	ld	r24, Z
    6224:	88 60       	ori	r24, 0x08	; 8
    6226:	80 83       	st	Z, r24
    //Enable interrupt 
    sbi(ETIMSK, OCIE3A);
    6228:	ed e7       	ldi	r30, 0x7D	; 125
    622a:	f0 e0       	ldi	r31, 0x00	; 0
    622c:	80 81       	ld	r24, Z
    622e:	80 61       	ori	r24, 0x10	; 16
    6230:	80 83       	st	Z, r24

    sbi(ETIFR, OCF3A);
    6232:	ec e7       	ldi	r30, 0x7C	; 124
    6234:	f0 e0       	ldi	r31, 0x00	; 0
    6236:	80 81       	ld	r24, Z
    6238:	80 61       	ori	r24, 0x10	; 16
    623a:	80 83       	st	Z, r24
    //Once the 50000 compared, then itnerrupt 
    //So one interrupt every 50000 cpu cycles 
    OCR3A = 50000;
    623c:	80 e5       	ldi	r24, 0x50	; 80
    623e:	93 ec       	ldi	r25, 0xC3	; 195
    6240:	90 93 87 00 	sts	0x0087, r25
    6244:	80 93 86 00 	sts	0x0086, r24
    //Counters 
    lowcounter = highcounter = 0;
    6248:	10 92 ce 09 	sts	0x09CE, r1
    624c:	10 92 cd 09 	sts	0x09CD, r1
    6250:	80 91 cd 09 	lds	r24, 0x09CD
    6254:	90 91 ce 09 	lds	r25, 0x09CE
    6258:	90 93 d4 09 	sts	0x09D4, r25
    625c:	80 93 d3 09 	sts	0x09D3, r24
    //Zero timer
    TCNT3 = 0;
    6260:	10 92 89 00 	sts	0x0089, r1
    6264:	10 92 88 00 	sts	0x0088, r1
	historyvalue = 0; 
    6268:	10 92 c9 09 	sts	0x09C9, r1
    626c:	10 92 ca 09 	sts	0x09CA, r1
    6270:	10 92 cb 09 	sts	0x09CB, r1
    6274:	10 92 cc 09 	sts	0x09CC, r1
}
    6278:	08 95       	ret

0000627a <HPLClock_Timer3_Stop>:

//-------------------------------------------------------------------------
void HPLClock_Timer3_Stop()
{
    //stop the timer 
    cbi(TCCR3B, CS30);
    627a:	ea e8       	ldi	r30, 0x8A	; 138
    627c:	f0 e0       	ldi	r31, 0x00	; 0
    627e:	80 81       	ld	r24, Z
    6280:	8e 7f       	andi	r24, 0xFE	; 254
    6282:	80 83       	st	Z, r24
}
    6284:	08 95       	ret

00006286 <HPLClock_readTimeCounterHigh>:

//-------------------------------------------------------------------------
uint16_t HPLClock_readTimeCounterHigh()
{
    return highcounter;
    6286:	20 91 cd 09 	lds	r18, 0x09CD
    628a:	30 91 ce 09 	lds	r19, 0x09CE
}
    628e:	c9 01       	movw	r24, r18
    6290:	08 95       	ret

00006292 <HPLClock_readTimeCounterLow>:

//-------------------------------------------------------------------------
inline uint32_t HPLClock_readTimeCounterLow()
{
    6292:	1f 93       	push	r17
    6294:	cf 93       	push	r28
    6296:	df 93       	push	r29
    uint16_t m;
    uint32_t retval;
    uint16_t tempcounter;
    unsigned char sreg;

    sreg = SREG;
    6298:	1f b7       	in	r17, 0x3f	; 63
    //Disable interrupt
    asm volatile ("cli");
    629a:	f8 94       	cli

    temp = TCNT3;
    629c:	c0 91 88 00 	lds	r28, 0x0088
    62a0:	d0 91 89 00 	lds	r29, 0x0089
    //check against the problem when the read of TCNT is not atomic 
    m = temp & 0xff;
    62a4:	ce 01       	movw	r24, r28
    62a6:	90 70       	andi	r25, 0x00	; 0
    if ((m == 0xfe) || (m == 0xff))
    62a8:	8e 5f       	subi	r24, 0xFE	; 254
    62aa:	90 40       	sbci	r25, 0x00	; 0
    62ac:	82 30       	cpi	r24, 0x02	; 2
    62ae:	91 05       	cpc	r25, r1
    62b0:	10 f4       	brcc	.+4      	; 0x62b6 <HPLClock_readTimeCounterLow+0x24>
    {
        temp = temp - 0x100;
    62b2:	c0 50       	subi	r28, 0x00	; 0
    62b4:	d1 40       	sbci	r29, 0x01	; 1
    }
    //Solve the problem that the counter might should have increased 
    if (temp <= 1)
    62b6:	c2 30       	cpi	r28, 0x02	; 2
    62b8:	d1 05       	cpc	r29, r1
    62ba:	38 f4       	brcc	.+14     	; 0x62ca <HPLClock_readTimeCounterLow+0x38>
    {
        tempcounter = lowcounter + 1;
    62bc:	60 91 d3 09 	lds	r22, 0x09D3
    62c0:	70 91 d4 09 	lds	r23, 0x09D4
    62c4:	6f 5f       	subi	r22, 0xFF	; 255
    62c6:	7f 4f       	sbci	r23, 0xFF	; 255
    62c8:	04 c0       	rjmp	.+8      	; 0x62d2 <HPLClock_readTimeCounterLow+0x40>
    }
    else
    {
        tempcounter = lowcounter;
    62ca:	60 91 d3 09 	lds	r22, 0x09D3
    62ce:	70 91 d4 09 	lds	r23, 0x09D4
    }
    //get the return value 
    retval = (((uint32_t) tempcounter) * 50000) + (uint32_t) temp;
    62d2:	80 e0       	ldi	r24, 0x00	; 0
    62d4:	90 e0       	ldi	r25, 0x00	; 0
    62d6:	20 e5       	ldi	r18, 0x50	; 80
    62d8:	33 ec       	ldi	r19, 0xC3	; 195
    62da:	40 e0       	ldi	r20, 0x00	; 0
    62dc:	50 e0       	ldi	r21, 0x00	; 0
    62de:	0e 94 b8 48 	call	0x9170	; 0x9170 <__mulsi3>
    62e2:	9b 01       	movw	r18, r22
    62e4:	ac 01       	movw	r20, r24
    62e6:	ce 01       	movw	r24, r28
    62e8:	a0 e0       	ldi	r26, 0x00	; 0
    62ea:	b0 e0       	ldi	r27, 0x00	; 0
    62ec:	28 0f       	add	r18, r24
    62ee:	39 1f       	adc	r19, r25
    62f0:	4a 1f       	adc	r20, r26
    62f2:	5b 1f       	adc	r21, r27
    //restore sreg
    SREG = sreg;
    62f4:	1f bf       	out	0x3f, r17	; 63
    //return 
	if (historyvalue > retval)
    62f6:	80 91 c9 09 	lds	r24, 0x09C9
    62fa:	90 91 ca 09 	lds	r25, 0x09CA
    62fe:	a0 91 cb 09 	lds	r26, 0x09CB
    6302:	b0 91 cc 09 	lds	r27, 0x09CC
    6306:	28 17       	cp	r18, r24
    6308:	39 07       	cpc	r19, r25
    630a:	4a 07       	cpc	r20, r26
    630c:	5b 07       	cpc	r21, r27
    630e:	20 f4       	brcc	.+8      	; 0x6318 <HPLClock_readTimeCounterLow+0x86>
	 {
	  retval += 50000;
    6310:	20 5b       	subi	r18, 0xB0	; 176
    6312:	3c 43       	sbci	r19, 0x3C	; 60
    6314:	4f 4f       	sbci	r20, 0xFF	; 255
    6316:	5f 4f       	sbci	r21, 0xFF	; 255
	  
	 }

   historyvalue = retval; 
    6318:	20 93 c9 09 	sts	0x09C9, r18
    631c:	30 93 ca 09 	sts	0x09CA, r19
    6320:	40 93 cb 09 	sts	0x09CB, r20
    6324:	50 93 cc 09 	sts	0x09CC, r21
	 
    

    return retval;
}
    6328:	b9 01       	movw	r22, r18
    632a:	ca 01       	movw	r24, r20
    632c:	df 91       	pop	r29
    632e:	cf 91       	pop	r28
    6330:	1f 91       	pop	r17
    6332:	08 95       	ret

00006334 <HPLClock_Clock_readCounter>:

//-------------------------------------------------------------------------
inline uint8_t HPLClock_Clock_readCounter(void)
{
    return TCNT0;
    6334:	82 b7       	in	r24, 0x32	; 50
    //return * (volatile unsigned char *)(unsigned int )& * (volatile unsigned char *)(0x32 + 0x20);
}
    6336:	08 95       	ret

00006338 <HPLClock_Clock_getInterval>:

//-------------------------------------------------------------------------

inline uint8_t HPLClock_Clock_getInterval(void)
{
    return OCR0;
    6338:	81 b7       	in	r24, 0x31	; 49
    //return * (volatile unsigned char *)(unsigned int )& * (volatile unsigned char *)(0x31 + 0x20);
}
    633a:	08 95       	ret

0000633c <HPLClock_Clock_fire>:
//-------------------------------------------------------------------------
inline result_t HPLClock_Clock_fire(void)
{
    unsigned char result;

    result = TimerM_Clock_fire();
    633c:	0e 94 c5 35 	call	0x6b8a	; 0x6b8a <TimerM_Clock_fire>
    return result;
}
    6340:	08 95       	ret

00006342 <HPLClock_Clock_setInterval>:

//-------------------------------------------------------------------------
inline void HPLClock_Clock_setInterval(uint8_t value)
{
    OCR0 = value;
    6342:	81 bf       	out	0x31, r24	; 49
    //* (volatile unsigned char *)(unsigned int )& * (volatile unsigned char *)(0x31 + 0x20) = value;
}
    6344:	08 95       	ret

00006346 <HPLClock_Clock_setRate>:

//-------------------------------------------------------------------------
inline result_t HPLClock_Clock_setRate(char interval, char scale)
{
    6346:	1f 93       	push	r17
    6348:	df 93       	push	r29
    634a:	cf 93       	push	r28
    634c:	0f 92       	push	r0
    634e:	cd b7       	in	r28, 0x3d	; 61
    6350:	de b7       	in	r29, 0x3e	; 62
    6352:	18 2f       	mov	r17, r24
    scale &= 0x7;
    6354:	67 70       	andi	r22, 0x07	; 7
    scale |= 0x8;
    //shoudl be 1011 here in scale 
    {
        _atomic_t _atomic = _atomic_start();
    6356:	69 83       	std	Y+1, r22	; 0x01
    6358:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>

        {
            cbi(TIMSK, TOIE0);
    635c:	97 b7       	in	r25, 0x37	; 55
    635e:	9e 7f       	andi	r25, 0xFE	; 254
    6360:	97 bf       	out	0x37, r25	; 55
            cbi(TIMSK, OCIE0);  //Disable TC0 interrupt
    6362:	97 b7       	in	r25, 0x37	; 55
    6364:	9d 7f       	andi	r25, 0xFD	; 253
    6366:	97 bf       	out	0x37, r25	; 55
            sbi(ASSR, AS0);     //set Timer/Counter0 to be asynchronous
    6368:	90 b7       	in	r25, 0x30	; 48
    636a:	98 60       	ori	r25, 0x08	; 8
    636c:	90 bf       	out	0x30, r25	; 48

//-------------------------------------------------------------------------
inline result_t HPLClock_Clock_setRate(char interval, char scale)
{
    scale &= 0x7;
    scale |= 0x8;
    636e:	69 81       	ldd	r22, Y+1	; 0x01
    6370:	68 60       	ori	r22, 0x08	; 8
            cbi(TIMSK, TOIE0);
            cbi(TIMSK, OCIE0);  //Disable TC0 interrupt
            sbi(ASSR, AS0);     //set Timer/Counter0 to be asynchronous
            //from the CPU clock with a second external
            //clock(32,768kHz)driving it.
            outp(scale, TCCR0); //prescale the timer to be clock/128 to make it
    6372:	63 bf       	out	0x33, r22	; 51
            outp(0, TCNT0);
    6374:	12 be       	out	0x32, r1	; 50
            outp(interval, OCR0);
    6376:	11 bf       	out	0x31, r17	; 49
            sbi(TIMSK, OCIE0);
    6378:	97 b7       	in	r25, 0x37	; 55
    637a:	92 60       	ori	r25, 0x02	; 2
    637c:	97 bf       	out	0x37, r25	; 55
          
        }
        _atomic_end(_atomic);
    637e:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
    }
    return SUCCESS;
}
    6382:	81 e0       	ldi	r24, 0x01	; 1
    6384:	0f 90       	pop	r0
    6386:	cf 91       	pop	r28
    6388:	df 91       	pop	r29
    638a:	1f 91       	pop	r17
    638c:	08 95       	ret

0000638e <__vector_15>:

//-------------------------------------------------------------------------
_INTERRUPT(SIG_OUTPUT_COMPARE0)
{
    638e:	78 94       	sei
    6390:	1f 92       	push	r1
    6392:	0f 92       	push	r0
    6394:	0f b6       	in	r0, 0x3f	; 63
    6396:	0f 92       	push	r0
    6398:	0b b6       	in	r0, 0x3b	; 59
    639a:	0f 92       	push	r0
    639c:	11 24       	eor	r1, r1
    639e:	0f 93       	push	r16
    63a0:	1f 93       	push	r17
    63a2:	2f 93       	push	r18
    63a4:	3f 93       	push	r19
    63a6:	4f 93       	push	r20
    63a8:	5f 93       	push	r21
    63aa:	6f 93       	push	r22
    63ac:	7f 93       	push	r23
    63ae:	8f 93       	push	r24
    63b0:	9f 93       	push	r25
    63b2:	af 93       	push	r26
    63b4:	bf 93       	push	r27
    63b6:	ef 93       	push	r30
    63b8:	ff 93       	push	r31
    _atomic_t _atomic;
    uint8_t isthreadtrue;

    isthreadtrue = 0;
    _atomic = _atomic_start();
    63ba:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>
    63be:	08 2f       	mov	r16, r24
    if (is_thread())
    63c0:	0e 94 30 15 	call	0x2a60	; 0x2a60 <is_thread>
    63c4:	88 23       	and	r24, r24
    63c6:	71 f0       	breq	.+28     	; 0x63e4 <__vector_15+0x56>
    {
        isthreadtrue = 1;
        SWAP_STACK_PTR(stackinterrupt_ptr, old_stack_ptr);
    63c8:	2d b7       	in	r18, 0x3d	; 61
    63ca:	3e b7       	in	r19, 0x3e	; 62
    63cc:	30 93 a4 09 	sts	0x09A4, r19
    63d0:	20 93 a3 09 	sts	0x09A3, r18
    63d4:	20 91 1f 09 	lds	r18, 0x091F
    63d8:	30 91 20 09 	lds	r19, 0x0920
    63dc:	3e bf       	out	0x3e, r19	; 62
    63de:	2d bf       	out	0x3d, r18	; 61

    isthreadtrue = 0;
    _atomic = _atomic_start();
    if (is_thread())
    {
        isthreadtrue = 1;
    63e0:	11 e0       	ldi	r17, 0x01	; 1
    63e2:	01 c0       	rjmp	.+2      	; 0x63e6 <__vector_15+0x58>
_INTERRUPT(SIG_OUTPUT_COMPARE0)
{
    _atomic_t _atomic;
    uint8_t isthreadtrue;

    isthreadtrue = 0;
    63e4:	10 e0       	ldi	r17, 0x00	; 0
    if (is_thread())
    {
        isthreadtrue = 1;
        SWAP_STACK_PTR(stackinterrupt_ptr, old_stack_ptr);
    }
    _atomic_end(_atomic);
    63e6:	80 2f       	mov	r24, r16
    63e8:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
    {
        _atomic = _atomic_start();
    63ec:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>
        {
            if (HPLClock_set_flag)
    63f0:	90 91 d1 09 	lds	r25, 0x09D1
    63f4:	99 23       	and	r25, r25
    63f6:	69 f0       	breq	.+26     	; 0x6412 <__vector_15+0x84>
            {
                HPLClock_mscale = HPLClock_nextScale;
    63f8:	90 91 d0 09 	lds	r25, 0x09D0
    63fc:	90 93 cf 09 	sts	0x09CF, r25
                HPLClock_nextScale |= 0x8;
    6400:	98 60       	ori	r25, 0x08	; 8
    6402:	90 93 d0 09 	sts	0x09D0, r25
                outp(HPLClock_nextScale, TCCR0);
    6406:	93 bf       	out	0x33, r25	; 51
                outp(HPLClock_minterval, OCR0);
    6408:	90 91 d2 09 	lds	r25, 0x09D2
    640c:	91 bf       	out	0x31, r25	; 49
                HPLClock_set_flag = 0;
    640e:	10 92 d1 09 	sts	0x09D1, r1
            }
        }
        _atomic_end(_atomic);
    6412:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
//-------------------------------------------------------------------------
inline result_t HPLClock_Clock_fire(void)
{
    unsigned char result;

    result = TimerM_Clock_fire();
    6416:	0e 94 c5 35 	call	0x6b8a	; 0x6b8a <TimerM_Clock_fire>
            }
        }
        _atomic_end(_atomic);
    }
    HPLClock_Clock_fire();
    _atomic = _atomic_start();
    641a:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>
    if (isthreadtrue == 1)
    641e:	11 30       	cpi	r17, 0x01	; 1
    6420:	61 f4       	brne	.+24     	; 0x643a <__vector_15+0xac>
    {
        isthreadtrue = 0;
        SWAP_STACK_PTR(old_stack_ptr, stackinterrupt_ptr);
    6422:	2d b7       	in	r18, 0x3d	; 61
    6424:	3e b7       	in	r19, 0x3e	; 62
    6426:	30 93 20 09 	sts	0x0920, r19
    642a:	20 93 1f 09 	sts	0x091F, r18
    642e:	20 91 a3 09 	lds	r18, 0x09A3
    6432:	30 91 a4 09 	lds	r19, 0x09A4
    6436:	3e bf       	out	0x3e, r19	; 62
    6438:	2d bf       	out	0x3d, r18	; 61
        //thread_yield();
    }
    _atomic_end(_atomic);
    643a:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
    //SHOWME(timer 0 end\n);
}
    643e:	ff 91       	pop	r31
    6440:	ef 91       	pop	r30
    6442:	bf 91       	pop	r27
    6444:	af 91       	pop	r26
    6446:	9f 91       	pop	r25
    6448:	8f 91       	pop	r24
    644a:	7f 91       	pop	r23
    644c:	6f 91       	pop	r22
    644e:	5f 91       	pop	r21
    6450:	4f 91       	pop	r20
    6452:	3f 91       	pop	r19
    6454:	2f 91       	pop	r18
    6456:	1f 91       	pop	r17
    6458:	0f 91       	pop	r16
    645a:	0f 90       	pop	r0
    645c:	0b be       	out	0x3b, r0	; 59
    645e:	0f 90       	pop	r0
    6460:	0f be       	out	0x3f, r0	; 63
    6462:	0f 90       	pop	r0
    6464:	1f 90       	pop	r1
    6466:	18 95       	reti

00006468 <__vector_26>:

//_INTERRUPT(SIG_OUTPUT_COMPARE0)
//void __vector_15() __attribute__ ((interrupt, spontaneous, C))
//void __attribute((interrupt))   __vector_15(void)
ISR(TIMER3_COMPA_vect)
{
    6468:	1f 92       	push	r1
    646a:	0f 92       	push	r0
    646c:	0f b6       	in	r0, 0x3f	; 63
    646e:	0f 92       	push	r0
    6470:	0b b6       	in	r0, 0x3b	; 59
    6472:	0f 92       	push	r0
    6474:	11 24       	eor	r1, r1
    6476:	2f 93       	push	r18
    6478:	3f 93       	push	r19
    647a:	4f 93       	push	r20
    647c:	5f 93       	push	r21
    647e:	6f 93       	push	r22
    6480:	7f 93       	push	r23
    6482:	8f 93       	push	r24
    6484:	9f 93       	push	r25
    6486:	af 93       	push	r26
    6488:	bf 93       	push	r27
    648a:	ef 93       	push	r30
    648c:	ff 93       	push	r31
    _atomic_t _atomic;

    _atomic = _atomic_start_avr();
    648e:	0e 94 be 03 	call	0x77c	; 0x77c <_atomic_start_avr>
    lowcounter++;
    6492:	20 91 d3 09 	lds	r18, 0x09D3
    6496:	30 91 d4 09 	lds	r19, 0x09D4
    649a:	2f 5f       	subi	r18, 0xFF	; 255
    649c:	3f 4f       	sbci	r19, 0xFF	; 255
    649e:	30 93 d4 09 	sts	0x09D4, r19
    64a2:	20 93 d3 09 	sts	0x09D3, r18
    if (lowcounter == 50000)
    64a6:	20 91 d3 09 	lds	r18, 0x09D3
    64aa:	30 91 d4 09 	lds	r19, 0x09D4
    64ae:	93 ec       	ldi	r25, 0xC3	; 195
    64b0:	20 35       	cpi	r18, 0x50	; 80
    64b2:	39 07       	cpc	r19, r25
    64b4:	71 f4       	brne	.+28     	; 0x64d2 <__vector_26+0x6a>
    {
        highcounter++;
    64b6:	20 91 cd 09 	lds	r18, 0x09CD
    64ba:	30 91 ce 09 	lds	r19, 0x09CE
    64be:	2f 5f       	subi	r18, 0xFF	; 255
    64c0:	3f 4f       	sbci	r19, 0xFF	; 255
    64c2:	30 93 ce 09 	sts	0x09CE, r19
    64c6:	20 93 cd 09 	sts	0x09CD, r18
        lowcounter = 0;
    64ca:	10 92 d4 09 	sts	0x09D4, r1
    64ce:	10 92 d3 09 	sts	0x09D3, r1
    }
    _atomic_end_avr(_atomic);
    64d2:	0e 94 c1 03 	call	0x782	; 0x782 <_atomic_end_avr>
}
    64d6:	ff 91       	pop	r31
    64d8:	ef 91       	pop	r30
    64da:	bf 91       	pop	r27
    64dc:	af 91       	pop	r26
    64de:	9f 91       	pop	r25
    64e0:	8f 91       	pop	r24
    64e2:	7f 91       	pop	r23
    64e4:	6f 91       	pop	r22
    64e6:	5f 91       	pop	r21
    64e8:	4f 91       	pop	r20
    64ea:	3f 91       	pop	r19
    64ec:	2f 91       	pop	r18
    64ee:	0f 90       	pop	r0
    64f0:	0b be       	out	0x3b, r0	; 59
    64f2:	0f 90       	pop	r0
    64f4:	0f be       	out	0x3f, r0	; 63
    64f6:	0f 90       	pop	r0
    64f8:	1f 90       	pop	r1
    64fa:	18 95       	reti

000064fc <GenericTimerInit>:
  //  currentcounter = 0;
  // currentpower = 3; 
  // enabled = true;
    for (i = 0; i < 8; i++)
    {
        timercallback[i] = NULL;
    64fc:	10 92 d6 09 	sts	0x09D6, r1
    6500:	10 92 d5 09 	sts	0x09D5, r1
    6504:	10 92 d8 09 	sts	0x09D8, r1
    6508:	10 92 d7 09 	sts	0x09D7, r1
    650c:	10 92 da 09 	sts	0x09DA, r1
    6510:	10 92 d9 09 	sts	0x09D9, r1
    6514:	10 92 dc 09 	sts	0x09DC, r1
    6518:	10 92 db 09 	sts	0x09DB, r1
    651c:	10 92 de 09 	sts	0x09DE, r1
    6520:	10 92 dd 09 	sts	0x09DD, r1
    6524:	10 92 e0 09 	sts	0x09E0, r1
    6528:	10 92 df 09 	sts	0x09DF, r1
    652c:	10 92 e2 09 	sts	0x09E2, r1
    6530:	10 92 e1 09 	sts	0x09E1, r1
    6534:	10 92 e4 09 	sts	0x09E4, r1
    6538:	10 92 e3 09 	sts	0x09E3, r1
    }
#ifdef PLATFORM_AVR
    return TimerM_StdControl_init();
    653c:	0e 94 6a 33 	call	0x66d4	; 0x66d4 <TimerM_StdControl_init>
#endif

    
}
    6540:	08 95       	ret

00006542 <GenericTimerStart>:

//-------------------------------------------------------------------------
inline result_t GenericTimerStart(uint8_t id, char type, uint32_t interval)
{
#ifdef PLATFORM_AVR
    return TimerM_Timer_start(id, type, interval);
    6542:	0e 94 dc 33 	call	0x67b8	; 0x67b8 <TimerM_Timer_start>
#endif
}
    6546:	08 95       	ret

00006548 <GenericTimerStop>:

//-------------------------------------------------------------------------
inline result_t GenericTimerStop(uint8_t id)
{
#ifdef PLATFORM_AVR
    return TimerM_Timer_stop(id);
    6548:	0e 94 85 33 	call	0x670a	; 0x670a <TimerM_Timer_stop>
#endif
}
    654c:	08 95       	ret

0000654e <setTimerCallBackFunction>:

//-------------------------------------------------------------------------
void setTimerCallBackFunction(uint8_t currentthreadindex, uint16_t period,
                              uint16_t type, void (*fp) ())
{
    654e:	fb 01       	movw	r30, r22
    6550:	64 2f       	mov	r22, r20
    timercallback[currentthreadindex] = fp;
    6552:	a8 2f       	mov	r26, r24
    6554:	b0 e0       	ldi	r27, 0x00	; 0
    6556:	aa 0f       	add	r26, r26
    6558:	bb 1f       	adc	r27, r27
    655a:	ab 52       	subi	r26, 0x2B	; 43
    655c:	b6 4f       	sbci	r27, 0xF6	; 246
    655e:	2d 93       	st	X+, r18
    6560:	3c 93       	st	X, r19
    GenericTimerStart(currentthreadindex + 18, type, period);
    6562:	9f 01       	movw	r18, r30
    6564:	40 e0       	ldi	r20, 0x00	; 0
    6566:	50 e0       	ldi	r21, 0x00	; 0

//-------------------------------------------------------------------------
inline result_t GenericTimerStart(uint8_t id, char type, uint32_t interval)
{
#ifdef PLATFORM_AVR
    return TimerM_Timer_start(id, type, interval);
    6568:	8e 5e       	subi	r24, 0xEE	; 238
    656a:	0e 94 dc 33 	call	0x67b8	; 0x67b8 <TimerM_Timer_start>
void setTimerCallBackFunction(uint8_t currentthreadindex, uint16_t period,
                              uint16_t type, void (*fp) ())
{
    timercallback[currentthreadindex] = fp;
    GenericTimerStart(currentthreadindex + 18, type, period);
}
    656e:	08 95       	ret

00006570 <timercallbackinvoke>:

//-------------------------------------------------------------------------
void timercallbackinvoke(uint8_t id)
{
    uint8_t index = id - 18;
    6570:	82 51       	subi	r24, 0x12	; 18

    if (timercallback[index] != NULL)
    6572:	e8 2f       	mov	r30, r24
    6574:	f0 e0       	ldi	r31, 0x00	; 0
    6576:	ee 0f       	add	r30, r30
    6578:	ff 1f       	adc	r31, r31
    657a:	eb 52       	subi	r30, 0x2B	; 43
    657c:	f6 4f       	sbci	r31, 0xF6	; 246
    657e:	01 90       	ld	r0, Z+
    6580:	f0 81       	ld	r31, Z
    6582:	e0 2d       	mov	r30, r0
    6584:	30 97       	sbiw	r30, 0x00	; 0
    6586:	09 f0       	breq	.+2      	; 0x658a <timercallbackinvoke+0x1a>
    {
        (*timercallback[index]) ();
    6588:	09 95       	icall
    658a:	08 95       	ret

0000658c <GenericTimerFired>:


    unsigned char result;
    
    //0, 1, 2 for threads
    switch (id)
    658c:	86 30       	cpi	r24, 0x06	; 6
    658e:	81 f1       	breq	.+96     	; 0x65f0 <GenericTimerFired+0x64>
    6590:	87 30       	cpi	r24, 0x07	; 7
    6592:	70 f4       	brcc	.+28     	; 0x65b0 <GenericTimerFired+0x24>
    6594:	82 30       	cpi	r24, 0x02	; 2
    6596:	21 f1       	breq	.+72     	; 0x65e0 <GenericTimerFired+0x54>
    6598:	83 30       	cpi	r24, 0x03	; 3
    659a:	28 f4       	brcc	.+10     	; 0x65a6 <GenericTimerFired+0x1a>
    659c:	88 23       	and	r24, r24
    659e:	d1 f0       	breq	.+52     	; 0x65d4 <GenericTimerFired+0x48>
    65a0:	81 30       	cpi	r24, 0x01	; 1
    65a2:	b1 f5       	brne	.+108    	; 0x6610 <GenericTimerFired+0x84>
    65a4:	19 c0       	rjmp	.+50     	; 0x65d8 <GenericTimerFired+0x4c>
    65a6:	84 30       	cpi	r24, 0x04	; 4
    65a8:	f9 f0       	breq	.+62     	; 0x65e8 <GenericTimerFired+0x5c>
    65aa:	85 30       	cpi	r24, 0x05	; 5
    65ac:	f8 f4       	brcc	.+62     	; 0x65ec <GenericTimerFired+0x60>
    65ae:	1a c0       	rjmp	.+52     	; 0x65e4 <GenericTimerFired+0x58>
    65b0:	8b 30       	cpi	r24, 0x0B	; 11
    65b2:	29 f1       	breq	.+74     	; 0x65fe <GenericTimerFired+0x72>
    65b4:	8c 30       	cpi	r24, 0x0C	; 12
    65b6:	38 f4       	brcc	.+14     	; 0x65c6 <GenericTimerFired+0x3a>
    65b8:	89 30       	cpi	r24, 0x09	; 9
    65ba:	61 f1       	breq	.+88     	; 0x6614 <GenericTimerFired+0x88>
    65bc:	8a 30       	cpi	r24, 0x0A	; 10
    65be:	e0 f4       	brcc	.+56     	; 0x65f8 <GenericTimerFired+0x6c>
    65c0:	87 30       	cpi	r24, 0x07	; 7
    65c2:	31 f5       	brne	.+76     	; 0x6610 <GenericTimerFired+0x84>
    65c4:	17 c0       	rjmp	.+46     	; 0x65f4 <GenericTimerFired+0x68>
    65c6:	8e 30       	cpi	r24, 0x0E	; 14
    65c8:	e9 f0       	breq	.+58     	; 0x6604 <GenericTimerFired+0x78>
    65ca:	8f 30       	cpi	r24, 0x0F	; 15
    65cc:	f1 f0       	breq	.+60     	; 0x660a <GenericTimerFired+0x7e>
    65ce:	8c 30       	cpi	r24, 0x0C	; 12
    65d0:	f9 f4       	brne	.+62     	; 0x6610 <GenericTimerFired+0x84>
    65d2:	20 c0       	rjmp	.+64     	; 0x6614 <GenericTimerFired+0x88>
    {
    case 0:
        ServiceTimerFired(0);
    65d4:	80 e0       	ldi	r24, 0x00	; 0
    65d6:	01 c0       	rjmp	.+2      	; 0x65da <GenericTimerFired+0x4e>
        break;
    case 1:
        ServiceTimerFired(1);
    65d8:	81 e0       	ldi	r24, 0x01	; 1
    65da:	0e 94 9b 18 	call	0x3136	; 0x3136 <ServiceTimerFired>
         break;
    65de:	1a c0       	rjmp	.+52     	; 0x6614 <GenericTimerFired+0x88>
    case 2:
        ServiceTimerFired(2);
    65e0:	82 e0       	ldi	r24, 0x02	; 2
    65e2:	fb cf       	rjmp	.-10     	; 0x65da <GenericTimerFired+0x4e>
        break;
    case 3:
        ServiceTimerFired(3);
    65e4:	83 e0       	ldi	r24, 0x03	; 3
    65e6:	f9 cf       	rjmp	.-14     	; 0x65da <GenericTimerFired+0x4e>
        break;
    case 4:
        ServiceTimerFired(4);
    65e8:	84 e0       	ldi	r24, 0x04	; 4
    65ea:	f7 cf       	rjmp	.-18     	; 0x65da <GenericTimerFired+0x4e>
        break;
    case 5:
        ServiceTimerFired(5);
    65ec:	85 e0       	ldi	r24, 0x05	; 5
    65ee:	f5 cf       	rjmp	.-22     	; 0x65da <GenericTimerFired+0x4e>
        break;
    case 6:
        ServiceTimerFired(6);
    65f0:	86 e0       	ldi	r24, 0x06	; 6
    65f2:	f3 cf       	rjmp	.-26     	; 0x65da <GenericTimerFired+0x4e>
        break;
    case 7:
        ServiceTimerFired(7);
    65f4:	87 e0       	ldi	r24, 0x07	; 7
    65f6:	f1 cf       	rjmp	.-30     	; 0x65da <GenericTimerFired+0x4e>
        }
#endif
        break;
#if defined(PLATFORM_AVR) && defined(RADIO_CC2420)
    case 10:
        hplcc2420interruptm_FIFOTimer_fired();
    65f8:	0e 94 5d 11 	call	0x22ba	; 0x22ba <hplcc2420interruptm_FIFOTimer_fired>
        break;
    65fc:	0b c0       	rjmp	.+22     	; 0x6614 <GenericTimerFired+0x88>
    case 11:
        hplcc2420interruptm_CCATimer_fired();
    65fe:	0e 94 93 11 	call	0x2326	; 0x2326 <hplcc2420interruptm_CCATimer_fired>
        break;
    6602:	08 c0       	rjmp	.+16     	; 0x6614 <GenericTimerFired+0x88>
	   break;  
       
   
	
	case 14:
		GenericInitTimerFired();
    6604:	0e 94 92 02 	call	0x524	; 0x524 <GenericInitTimerFired>
		break;
    6608:	05 c0       	rjmp	.+10     	; 0x6614 <GenericTimerFired+0x88>
	
	case 15:
		reportTrace();
    660a:	0e 94 c5 02 	call	0x58a	; 0x58a <reportTrace>
		break; 	
    660e:	02 c0       	rjmp	.+4      	; 0x6614 <GenericTimerFired+0x88>
	
    default:
        timercallbackinvoke(id);
    6610:	0e 94 b8 32 	call	0x6570	; 0x6570 <timercallbackinvoke>
        result = SUCCESS;
    }
    return SUCCESS;
}
    6614:	81 e0       	ldi	r24, 0x01	; 1
    6616:	08 95       	ret

00006618 <getCurrentTimeStamp>:

static currentTimeUnit internaltime1, internaltime2;
static uint8_t timeselect;

currentTimeUnit *getCurrentTimeStamp()
{
    6618:	ef 92       	push	r14
    661a:	ff 92       	push	r15
    661c:	0f 93       	push	r16
    661e:	1f 93       	push	r17
    6620:	cf 93       	push	r28
    6622:	df 93       	push	r29

    uint16_t counter1, counter2;
    uint32_t resolution;

    counter1 = HPLClock_readTimeCounterHigh();
    6624:	0e 94 43 31 	call	0x6286	; 0x6286 <HPLClock_readTimeCounterHigh>
    6628:	ec 01       	movw	r28, r24
    resolution = HPLClock_readTimeCounterLow();
    662a:	0e 94 49 31 	call	0x6292	; 0x6292 <HPLClock_readTimeCounterLow>
    662e:	7b 01       	movw	r14, r22
    6630:	8c 01       	movw	r16, r24
    counter2 = HPLClock_readTimeCounterHigh();
    6632:	0e 94 43 31 	call	0x6286	; 0x6286 <HPLClock_readTimeCounterHigh>
    if (counter1 == counter2)
    6636:	c8 17       	cp	r28, r24
    6638:	d9 07       	cpc	r29, r25
    663a:	49 f0       	breq	.+18     	; 0x664e <getCurrentTimeStamp+0x36>
    {
    }
    else
    {
        counter1 = HPLClock_readTimeCounterHigh();
    663c:	0e 94 43 31 	call	0x6286	; 0x6286 <HPLClock_readTimeCounterHigh>
    6640:	ec 01       	movw	r28, r24
        resolution = HPLClock_readTimeCounterLow();
    6642:	0e 94 49 31 	call	0x6292	; 0x6292 <HPLClock_readTimeCounterLow>
    6646:	7b 01       	movw	r14, r22
    6648:	8c 01       	movw	r16, r24
        counter2 = HPLClock_readTimeCounterHigh();
    664a:	0e 94 43 31 	call	0x6286	; 0x6286 <HPLClock_readTimeCounterHigh>
    }
    if (timeselect == 1)
    664e:	80 91 b7 03 	lds	r24, 0x03B7
    6652:	81 30       	cpi	r24, 0x01	; 1
    6654:	91 f4       	brne	.+36     	; 0x667a <getCurrentTimeStamp+0x62>
    {
        internaltime1.counter = counter1;
    6656:	d0 93 b9 03 	sts	0x03B9, r29
    665a:	c0 93 b8 03 	sts	0x03B8, r28
        internaltime1.resolution = resolution;
    665e:	e0 92 ba 03 	sts	0x03BA, r14
    6662:	f0 92 bb 03 	sts	0x03BB, r15
    6666:	00 93 bc 03 	sts	0x03BC, r16
    666a:	10 93 bd 03 	sts	0x03BD, r17
        timeselect = 2;
    666e:	82 e0       	ldi	r24, 0x02	; 2
    6670:	80 93 b7 03 	sts	0x03B7, r24
        return &internaltime1;
    6674:	28 eb       	ldi	r18, 0xB8	; 184
    6676:	33 e0       	ldi	r19, 0x03	; 3
    6678:	16 c0       	rjmp	.+44     	; 0x66a6 <getCurrentTimeStamp+0x8e>
    }
    if (timeselect == 2)
    667a:	82 30       	cpi	r24, 0x02	; 2
    667c:	91 f4       	brne	.+36     	; 0x66a2 <getCurrentTimeStamp+0x8a>
    {
        timeselect = 1;
    667e:	81 e0       	ldi	r24, 0x01	; 1
    6680:	80 93 b7 03 	sts	0x03B7, r24
        internaltime2.counter = counter1;
    6684:	d0 93 bf 03 	sts	0x03BF, r29
    6688:	c0 93 be 03 	sts	0x03BE, r28
        internaltime2.resolution = resolution;
    668c:	e0 92 c0 03 	sts	0x03C0, r14
    6690:	f0 92 c1 03 	sts	0x03C1, r15
    6694:	00 93 c2 03 	sts	0x03C2, r16
    6698:	10 93 c3 03 	sts	0x03C3, r17
        return &internaltime2;
    669c:	2e eb       	ldi	r18, 0xBE	; 190
    669e:	33 e0       	ldi	r19, 0x03	; 3
    66a0:	02 c0       	rjmp	.+4      	; 0x66a6 <getCurrentTimeStamp+0x8e>
    }

    return NULL;
    66a2:	20 e0       	ldi	r18, 0x00	; 0
    66a4:	30 e0       	ldi	r19, 0x00	; 0
}
    66a6:	c9 01       	movw	r24, r18
    66a8:	df 91       	pop	r29
    66aa:	cf 91       	pop	r28
    66ac:	1f 91       	pop	r17
    66ae:	0f 91       	pop	r16
    66b0:	ff 90       	pop	r15
    66b2:	ef 90       	pop	r14
    66b4:	08 95       	ret

000066b6 <getCurrentCounterHigh>:

//-------------------------------------------------------------------------
uint16_t getCurrentCounterHigh()
{

    return HPLClock_readTimeCounterHigh();
    66b6:	0e 94 43 31 	call	0x6286	; 0x6286 <HPLClock_readTimeCounterHigh>

}
    66ba:	08 95       	ret

000066bc <getCurrentResolution>:
{

    uint32_t test;
    //printfstr("test0\n");
    
    test= HPLClock_readTimeCounterLow();
    66bc:	0e 94 49 31 	call	0x6292	; 0x6292 <HPLClock_readTimeCounterLow>
    //printfintegeru32(test);
    return test;

}
}
    66c0:	08 95       	ret

000066c2 <GenericTimingStart>:

//-------------------------------------------------------------------------
void GenericTimingStart()
{

    timeselect = 1;
    66c2:	81 e0       	ldi	r24, 0x01	; 1
    66c4:	80 93 b7 03 	sts	0x03B7, r24
    HPLClock_Timer3_Start();
    66c8:	0e 94 0c 31 	call	0x6218	; 0x6218 <HPLClock_Timer3_Start>

}
    66cc:	08 95       	ret

000066ce <GenericTimingStop>:

//-------------------------------------------------------------------------
void GenericTimingStop()
{

    HPLClock_Timer3_Stop();
    66ce:	0e 94 3d 31 	call	0x627a	; 0x627a <HPLClock_Timer3_Stop>

}
    66d2:	08 95       	ret

000066d4 <TimerM_StdControl_init>:
{
    TimerM_maxTimerInterval = 230
};
inline result_t TimerM_StdControl_init(void)
{
    TimerM_mState = 0;
    66d4:	10 92 e6 09 	sts	0x09E6, r1
    66d8:	10 92 e7 09 	sts	0x09E7, r1
    66dc:	10 92 e8 09 	sts	0x09E8, r1
    66e0:	10 92 e9 09 	sts	0x09E9, r1
    TimerM_setIntervalFlag = 0;
    66e4:	10 92 ed 09 	sts	0x09ED, r1
    TimerM_queue_head = TimerM_queue_tail = -1;
    66e8:	8f ef       	ldi	r24, 0xFF	; 255
    66ea:	80 93 e5 09 	sts	0x09E5, r24
    66ee:	80 93 00 0a 	sts	0x0A00, r24
    TimerM_queue_size = 0;
    66f2:	10 92 ea 09 	sts	0x09EA, r1
    TimerM_mScale = 3;
    66f6:	83 e0       	ldi	r24, 0x03	; 3
    66f8:	80 93 eb 09 	sts	0x09EB, r24
    TimerM_mInterval = TimerM_maxTimerInterval;
    66fc:	86 ee       	ldi	r24, 0xE6	; 230
    66fe:	80 93 ec 09 	sts	0x09EC, r24
//-------------------------------------------------------------------------
inline result_t TimerM_Clock_setRate(char interval, char scale)
{
    unsigned char result;

    result = HPLClock_Clock_setRate(interval, scale);
    6702:	63 e0       	ldi	r22, 0x03	; 3
    6704:	0e 94 a3 31 	call	0x6346	; 0x6346 <HPLClock_Clock_setRate>
    TimerM_queue_head = TimerM_queue_tail = -1;
    TimerM_queue_size = 0;
    TimerM_mScale = 3;
    TimerM_mInterval = TimerM_maxTimerInterval;
    return TimerM_Clock_setRate(TimerM_mInterval, TimerM_mScale);
}
    6708:	08 95       	ret

0000670a <TimerM_Timer_stop>:

//-------------------------------------------------------------------------
inline uint8_t TimerM_Timer_stop(uint8_t id)
{
    670a:	ef 92       	push	r14
    670c:	ff 92       	push	r15
    670e:	0f 93       	push	r16
    6710:	1f 93       	push	r17
    if (id > NUM_TIMERS)
    6712:	81 31       	cpi	r24, 0x11	; 17
    6714:	08 f0       	brcs	.+2      	; 0x6718 <TimerM_Timer_stop+0xe>
    6716:	48 c0       	rjmp	.+144    	; 0x67a8 <TimerM_Timer_stop+0x9e>
    {
        return FAIL;
    }
    if (TimerM_mState & (0x1L << id))
    6718:	91 e0       	ldi	r25, 0x01	; 1
    671a:	e9 2e       	mov	r14, r25
    671c:	f1 2c       	mov	r15, r1
    671e:	01 2d       	mov	r16, r1
    6720:	11 2d       	mov	r17, r1
    6722:	04 c0       	rjmp	.+8      	; 0x672c <TimerM_Timer_stop+0x22>
    6724:	ee 0c       	add	r14, r14
    6726:	ff 1c       	adc	r15, r15
    6728:	00 1f       	adc	r16, r16
    672a:	11 1f       	adc	r17, r17
    672c:	8a 95       	dec	r24
    672e:	d2 f7       	brpl	.-12     	; 0x6724 <TimerM_Timer_stop+0x1a>
    6730:	80 91 e6 09 	lds	r24, 0x09E6
    6734:	90 91 e7 09 	lds	r25, 0x09E7
    6738:	a0 91 e8 09 	lds	r26, 0x09E8
    673c:	b0 91 e9 09 	lds	r27, 0x09E9
    6740:	8e 21       	and	r24, r14
    6742:	9f 21       	and	r25, r15
    6744:	a0 23       	and	r26, r16
    6746:	b1 23       	and	r27, r17
    6748:	00 97       	sbiw	r24, 0x00	; 0
    674a:	a1 05       	cpc	r26, r1
    674c:	b1 05       	cpc	r27, r1
    674e:	61 f1       	breq	.+88     	; 0x67a8 <TimerM_Timer_stop+0x9e>
    {
        _atomic_t _atomic = _atomic_start();
    6750:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>

        TimerM_mState &= ~(0x1L << id);
    6754:	e0 94       	com	r14
    6756:	f0 94       	com	r15
    6758:	00 95       	com	r16
    675a:	10 95       	com	r17
    675c:	20 91 e6 09 	lds	r18, 0x09E6
    6760:	30 91 e7 09 	lds	r19, 0x09E7
    6764:	40 91 e8 09 	lds	r20, 0x09E8
    6768:	50 91 e9 09 	lds	r21, 0x09E9
    676c:	2e 21       	and	r18, r14
    676e:	3f 21       	and	r19, r15
    6770:	40 23       	and	r20, r16
    6772:	51 23       	and	r21, r17
    6774:	20 93 e6 09 	sts	0x09E6, r18
    6778:	30 93 e7 09 	sts	0x09E7, r19
    677c:	40 93 e8 09 	sts	0x09E8, r20
    6780:	50 93 e9 09 	sts	0x09E9, r21
        _atomic_end(_atomic);
    6784:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
        if (!TimerM_mState)
    6788:	80 91 e6 09 	lds	r24, 0x09E6
    678c:	90 91 e7 09 	lds	r25, 0x09E7
    6790:	a0 91 e8 09 	lds	r26, 0x09E8
    6794:	b0 91 e9 09 	lds	r27, 0x09E9
    6798:	00 97       	sbiw	r24, 0x00	; 0
    679a:	a1 05       	cpc	r26, r1
    679c:	b1 05       	cpc	r27, r1
    679e:	31 f4       	brne	.+12     	; 0x67ac <TimerM_Timer_stop+0xa2>
        {
            TimerM_setIntervalFlag = 1;
    67a0:	81 e0       	ldi	r24, 0x01	; 1
    67a2:	80 93 ed 09 	sts	0x09ED, r24
    67a6:	03 c0       	rjmp	.+6      	; 0x67ae <TimerM_Timer_stop+0xa4>
        }
        return SUCCESS;
    }
    return FAIL;
    67a8:	80 e0       	ldi	r24, 0x00	; 0
    67aa:	01 c0       	rjmp	.+2      	; 0x67ae <TimerM_Timer_stop+0xa4>
        _atomic_end(_atomic);
        if (!TimerM_mState)
        {
            TimerM_setIntervalFlag = 1;
        }
        return SUCCESS;
    67ac:	81 e0       	ldi	r24, 0x01	; 1
    }
    return FAIL;
}
    67ae:	1f 91       	pop	r17
    67b0:	0f 91       	pop	r16
    67b2:	ff 90       	pop	r15
    67b4:	ef 90       	pop	r14
    67b6:	08 95       	ret

000067b8 <TimerM_Timer_start>:

//-------------------------------------------------------------------------
inline result_t TimerM_Timer_start(uint8_t id, char type, uint32_t interval)
{
    67b8:	cf 92       	push	r12
    67ba:	df 92       	push	r13
    67bc:	ef 92       	push	r14
    67be:	ff 92       	push	r15
    67c0:	0f 93       	push	r16
    67c2:	1f 93       	push	r17
    67c4:	cf 93       	push	r28
    67c6:	df 93       	push	r29
    67c8:	d8 2e       	mov	r13, r24
    67ca:	79 01       	movw	r14, r18
    67cc:	8a 01       	movw	r16, r20
    uint8_t diff;

    if (id >= NUM_TIMERS)
    67ce:	80 31       	cpi	r24, 0x10	; 16
    67d0:	08 f0       	brcs	.+2      	; 0x67d4 <TimerM_Timer_start+0x1c>
    67d2:	5e c0       	rjmp	.+188    	; 0x6890 <TimerM_Timer_start+0xd8>
    {
        return FAIL;
    }
    if (type > TIMER_ONE_SHOT)
    67d4:	62 30       	cpi	r22, 0x02	; 2
    67d6:	0c f0       	brlt	.+2      	; 0x67da <TimerM_Timer_start+0x22>
    67d8:	5b c0       	rjmp	.+182    	; 0x6890 <TimerM_Timer_start+0xd8>
    {
        return FAIL;
    }
    if (type == TIMER_REPEAT && interval <= 2)
    67da:	66 23       	and	r22, r22
    67dc:	31 f4       	brne	.+12     	; 0x67ea <TimerM_Timer_start+0x32>
    67de:	23 30       	cpi	r18, 0x03	; 3
    67e0:	31 05       	cpc	r19, r1
    67e2:	41 05       	cpc	r20, r1
    67e4:	51 05       	cpc	r21, r1
    67e6:	08 f4       	brcc	.+2      	; 0x67ea <TimerM_Timer_start+0x32>
    67e8:	53 c0       	rjmp	.+166    	; 0x6890 <TimerM_Timer_start+0xd8>
    {
        return FAIL;
    }
    TimerM_mTimerList[id].ticks = interval;
    67ea:	8d 2d       	mov	r24, r13
    67ec:	90 e0       	ldi	r25, 0x00	; 0
    67ee:	ec 01       	movw	r28, r24
    67f0:	23 e0       	ldi	r18, 0x03	; 3
    67f2:	cc 0f       	add	r28, r28
    67f4:	dd 1f       	adc	r29, r29
    67f6:	2a 95       	dec	r18
    67f8:	e1 f7       	brne	.-8      	; 0x67f2 <TimerM_Timer_start+0x3a>
    67fa:	c8 0f       	add	r28, r24
    67fc:	d9 1f       	adc	r29, r25
    67fe:	cf 5f       	subi	r28, 0xFF	; 255
    6800:	d5 4f       	sbci	r29, 0xF5	; 245
    6802:	e9 82       	std	Y+1, r14	; 0x01
    6804:	fa 82       	std	Y+2, r15	; 0x02
    6806:	0b 83       	std	Y+3, r16	; 0x03
    6808:	1c 83       	std	Y+4, r17	; 0x04
    TimerM_mTimerList[id].type = type;
    680a:	68 83       	st	Y, r22
    {
        _atomic_t _atomic = _atomic_start();
    680c:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>
    6810:	c8 2e       	mov	r12, r24
//-------------------------------------------------------------------------
inline uint8_t TimerM_Clock_readCounter(void)
{
    unsigned char result;

    result = HPLClock_Clock_readCounter();
    6812:	0e 94 9a 31 	call	0x6334	; 0x6334 <HPLClock_Clock_readCounter>
    {
        _atomic_t _atomic = _atomic_start();

        {
            diff = TimerM_Clock_readCounter();
            interval += diff;
    6816:	e8 0e       	add	r14, r24
    6818:	f1 1c       	adc	r15, r1
    681a:	01 1d       	adc	r16, r1
    681c:	11 1d       	adc	r17, r1
            TimerM_mTimerList[id].ticksLeft = interval;
    681e:	ed 82       	std	Y+5, r14	; 0x05
    6820:	fe 82       	std	Y+6, r15	; 0x06
    6822:	0f 83       	std	Y+7, r16	; 0x07
    6824:	18 87       	std	Y+8, r17	; 0x08
            TimerM_mState |= 0x1L << id;
    6826:	21 e0       	ldi	r18, 0x01	; 1
    6828:	30 e0       	ldi	r19, 0x00	; 0
    682a:	40 e0       	ldi	r20, 0x00	; 0
    682c:	50 e0       	ldi	r21, 0x00	; 0
    682e:	04 c0       	rjmp	.+8      	; 0x6838 <TimerM_Timer_start+0x80>
    6830:	22 0f       	add	r18, r18
    6832:	33 1f       	adc	r19, r19
    6834:	44 1f       	adc	r20, r20
    6836:	55 1f       	adc	r21, r21
    6838:	da 94       	dec	r13
    683a:	d2 f7       	brpl	.-12     	; 0x6830 <TimerM_Timer_start+0x78>
    683c:	80 91 e6 09 	lds	r24, 0x09E6
    6840:	90 91 e7 09 	lds	r25, 0x09E7
    6844:	a0 91 e8 09 	lds	r26, 0x09E8
    6848:	b0 91 e9 09 	lds	r27, 0x09E9
    684c:	82 2b       	or	r24, r18
    684e:	93 2b       	or	r25, r19
    6850:	a4 2b       	or	r26, r20
    6852:	b5 2b       	or	r27, r21
    6854:	80 93 e6 09 	sts	0x09E6, r24
    6858:	90 93 e7 09 	sts	0x09E7, r25
    685c:	a0 93 e8 09 	sts	0x09E8, r26
    6860:	b0 93 e9 09 	sts	0x09E9, r27
            if (interval < TimerM_mInterval)
    6864:	80 91 ec 09 	lds	r24, 0x09EC
    6868:	90 e0       	ldi	r25, 0x00	; 0
    686a:	a0 e0       	ldi	r26, 0x00	; 0
    686c:	b0 e0       	ldi	r27, 0x00	; 0
    686e:	e8 16       	cp	r14, r24
    6870:	f9 06       	cpc	r15, r25
    6872:	0a 07       	cpc	r16, r26
    6874:	1b 07       	cpc	r17, r27
    6876:	38 f4       	brcc	.+14     	; 0x6886 <TimerM_Timer_start+0xce>
            {
                TimerM_mInterval = interval;
    6878:	e0 92 ec 09 	sts	0x09EC, r14
}

//-------------------------------------------------------------------------
inline void TimerM_Clock_setInterval(uint8_t interval)
{
    HPLClock_Clock_setInterval(interval);
    687c:	8e 2d       	mov	r24, r14
    687e:	0e 94 a1 31 	call	0x6342	; 0x6342 <HPLClock_Clock_setInterval>
            TimerM_mState |= 0x1L << id;
            if (interval < TimerM_mInterval)
            {
                TimerM_mInterval = interval;
                TimerM_Clock_setInterval(TimerM_mInterval);
                TimerM_setIntervalFlag = 0;
    6882:	10 92 ed 09 	sts	0x09ED, r1
            }
        }
        _atomic_end(_atomic);
    6886:	8c 2d       	mov	r24, r12
    6888:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
    }
    return SUCCESS;
    688c:	81 e0       	ldi	r24, 0x01	; 1
    688e:	01 c0       	rjmp	.+2      	; 0x6892 <TimerM_Timer_start+0xda>
    {
        return FAIL;
    }
    if (type == TIMER_REPEAT && interval <= 2)
    {
        return FAIL;
    6890:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        _atomic_end(_atomic);
    }
    return SUCCESS;
}
    6892:	df 91       	pop	r29
    6894:	cf 91       	pop	r28
    6896:	1f 91       	pop	r17
    6898:	0f 91       	pop	r16
    689a:	ff 90       	pop	r15
    689c:	ef 90       	pop	r14
    689e:	df 90       	pop	r13
    68a0:	cf 90       	pop	r12
    68a2:	08 95       	ret

000068a4 <TimerM_Clock_setRate>:
//-------------------------------------------------------------------------
inline result_t TimerM_Clock_setRate(char interval, char scale)
{
    unsigned char result;

    result = HPLClock_Clock_setRate(interval, scale);
    68a4:	0e 94 a3 31 	call	0x6346	; 0x6346 <HPLClock_Clock_setRate>
    return result;
}
    68a8:	08 95       	ret

000068aa <TimerM_adjustInterval>:

//-------------------------------------------------------------------------
void TimerM_adjustInterval(void)
{
    68aa:	8f 92       	push	r8
    68ac:	9f 92       	push	r9
    68ae:	af 92       	push	r10
    68b0:	bf 92       	push	r11
    68b2:	df 92       	push	r13
    68b4:	ef 92       	push	r14
    68b6:	ff 92       	push	r15
    68b8:	0f 93       	push	r16
    68ba:	1f 93       	push	r17
    uint8_t i;
    uint8_t val = TimerM_maxTimerInterval;

    if (TimerM_mState)
    68bc:	80 91 e6 09 	lds	r24, 0x09E6
    68c0:	90 91 e7 09 	lds	r25, 0x09E7
    68c4:	a0 91 e8 09 	lds	r26, 0x09E8
    68c8:	b0 91 e9 09 	lds	r27, 0x09E9
    68cc:	00 97       	sbiw	r24, 0x00	; 0
    68ce:	a1 05       	cpc	r26, r1
    68d0:	b1 05       	cpc	r27, r1
    68d2:	e1 f1       	breq	.+120    	; 0x694c <TimerM_adjustInterval+0xa2>
    68d4:	e6 e0       	ldi	r30, 0x06	; 6
    68d6:	fa e0       	ldi	r31, 0x0A	; 10
    68d8:	60 e0       	ldi	r22, 0x00	; 0
    68da:	70 e0       	ldi	r23, 0x00	; 0
    68dc:	46 ee       	ldi	r20, 0xE6	; 230
    68de:	d4 2e       	mov	r13, r20
    {
        for (i = 0; i < NUM_TIMERS; i++)
        {
            if (TimerM_mState & (0x1L << i) && TimerM_mTimerList[i].ticksLeft
    68e0:	31 e0       	ldi	r19, 0x01	; 1
    68e2:	83 2e       	mov	r8, r19
    68e4:	91 2c       	mov	r9, r1
    68e6:	a1 2c       	mov	r10, r1
    68e8:	b1 2c       	mov	r11, r1
    68ea:	a5 01       	movw	r20, r10
    68ec:	94 01       	movw	r18, r8
    68ee:	06 2e       	mov	r0, r22
    68f0:	04 c0       	rjmp	.+8      	; 0x68fa <TimerM_adjustInterval+0x50>
    68f2:	22 0f       	add	r18, r18
    68f4:	33 1f       	adc	r19, r19
    68f6:	44 1f       	adc	r20, r20
    68f8:	55 1f       	adc	r21, r21
    68fa:	0a 94       	dec	r0
    68fc:	d2 f7       	brpl	.-12     	; 0x68f2 <TimerM_adjustInterval+0x48>
    68fe:	28 23       	and	r18, r24
    6900:	39 23       	and	r19, r25
    6902:	4a 23       	and	r20, r26
    6904:	5b 23       	and	r21, r27
    6906:	21 15       	cp	r18, r1
    6908:	31 05       	cpc	r19, r1
    690a:	41 05       	cpc	r20, r1
    690c:	51 05       	cpc	r21, r1
    690e:	71 f0       	breq	.+28     	; 0x692c <TimerM_adjustInterval+0x82>
    6910:	e0 80       	ld	r14, Z
    6912:	f1 80       	ldd	r15, Z+1	; 0x01
    6914:	02 81       	ldd	r16, Z+2	; 0x02
    6916:	13 81       	ldd	r17, Z+3	; 0x03
                < val)
    6918:	2d 2d       	mov	r18, r13
    691a:	30 e0       	ldi	r19, 0x00	; 0
    691c:	40 e0       	ldi	r20, 0x00	; 0
    691e:	50 e0       	ldi	r21, 0x00	; 0

    if (TimerM_mState)
    {
        for (i = 0; i < NUM_TIMERS; i++)
        {
            if (TimerM_mState & (0x1L << i) && TimerM_mTimerList[i].ticksLeft
    6920:	e2 16       	cp	r14, r18
    6922:	f3 06       	cpc	r15, r19
    6924:	04 07       	cpc	r16, r20
    6926:	15 07       	cpc	r17, r21
    6928:	0c f4       	brge	.+2      	; 0x692c <TimerM_adjustInterval+0x82>
                < val)
            {
                val = TimerM_mTimerList[i].ticksLeft;
    692a:	de 2c       	mov	r13, r14
    692c:	6f 5f       	subi	r22, 0xFF	; 255
    692e:	7f 4f       	sbci	r23, 0xFF	; 255
    6930:	39 96       	adiw	r30, 0x09	; 9
    uint8_t i;
    uint8_t val = TimerM_maxTimerInterval;

    if (TimerM_mState)
    {
        for (i = 0; i < NUM_TIMERS; i++)
    6932:	60 31       	cpi	r22, 0x10	; 16
    6934:	71 05       	cpc	r23, r1
    6936:	c9 f6       	brne	.-78     	; 0x68ea <TimerM_adjustInterval+0x40>
            {
                val = TimerM_mTimerList[i].ticksLeft;
            }
        }
        {
            _atomic_t _atomic = _atomic_start();
    6938:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>
    693c:	e8 2e       	mov	r14, r24
//-------------------------------------------------------------------------
inline uint8_t TimerM_Clock_readCounter(void)
{
    unsigned char result;

    result = HPLClock_Clock_readCounter();
    693e:	0e 94 9a 31 	call	0x6334	; 0x6334 <HPLClock_Clock_readCounter>
        }
        {
            _atomic_t _atomic = _atomic_start();

            {
                i = TimerM_Clock_readCounter() + 3;
    6942:	8d 5f       	subi	r24, 0xFD	; 253
//-------------------------------------------------------------------------
inline uint8_t TimerM_Clock_readCounter(void)
{
    unsigned char result;

    result = HPLClock_Clock_readCounter();
    6944:	8d 15       	cp	r24, r13
    6946:	30 f4       	brcc	.+12     	; 0x6954 <TimerM_adjustInterval+0xaa>
    6948:	8d 2d       	mov	r24, r13
    694a:	04 c0       	rjmp	.+8      	; 0x6954 <TimerM_adjustInterval+0xaa>
        }
    }
    else
    {
        {
            _atomic_t _atomic = _atomic_start();
    694c:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>
    6950:	e8 2e       	mov	r14, r24

            {
                TimerM_mInterval = TimerM_maxTimerInterval;
    6952:	86 ee       	ldi	r24, 0xE6	; 230
    6954:	80 93 ec 09 	sts	0x09EC, r24
}

//-------------------------------------------------------------------------
inline void TimerM_Clock_setInterval(uint8_t interval)
{
    HPLClock_Clock_setInterval(interval);
    6958:	0e 94 a1 31 	call	0x6342	; 0x6342 <HPLClock_Clock_setInterval>
            _atomic_t _atomic = _atomic_start();

            {
                TimerM_mInterval = TimerM_maxTimerInterval;
                TimerM_Clock_setInterval(TimerM_mInterval);
                TimerM_setIntervalFlag = 0;
    695c:	10 92 ed 09 	sts	0x09ED, r1
            }
            _atomic_end(_atomic);
    6960:	8e 2d       	mov	r24, r14
    6962:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
        }
    }
}
    6966:	1f 91       	pop	r17
    6968:	0f 91       	pop	r16
    696a:	ff 90       	pop	r15
    696c:	ef 90       	pop	r14
    696e:	df 90       	pop	r13
    6970:	bf 90       	pop	r11
    6972:	af 90       	pop	r10
    6974:	9f 90       	pop	r9
    6976:	8f 90       	pop	r8
    6978:	08 95       	ret

0000697a <TimerM_enqueue>:

//-------------------------------------------------------------------------
inline void TimerM_enqueue(uint8_t value)
{
    if (TimerM_queue_tail == NUM_TIMERS - 1)
    697a:	90 91 e5 09 	lds	r25, 0x09E5
    697e:	9f 30       	cpi	r25, 0x0F	; 15
    6980:	19 f4       	brne	.+6      	; 0x6988 <TimerM_enqueue+0xe>
    {
        TimerM_queue_tail = -1;
    6982:	9f ef       	ldi	r25, 0xFF	; 255
    6984:	90 93 e5 09 	sts	0x09E5, r25
    }
    TimerM_queue_tail++;
    6988:	e0 91 e5 09 	lds	r30, 0x09E5
    698c:	ef 5f       	subi	r30, 0xFF	; 255
    698e:	e0 93 e5 09 	sts	0x09E5, r30
    TimerM_queue_size++;
    6992:	90 91 ea 09 	lds	r25, 0x09EA
    6996:	9f 5f       	subi	r25, 0xFF	; 255
    6998:	90 93 ea 09 	sts	0x09EA, r25
    TimerM_queue[(uint8_t) TimerM_queue_tail] = value;
    699c:	f0 e0       	ldi	r31, 0x00	; 0
    699e:	e2 51       	subi	r30, 0x12	; 18
    69a0:	f6 4f       	sbci	r31, 0xF6	; 246
    69a2:	80 83       	st	Z, r24
}
    69a4:	08 95       	ret

000069a6 <TimerM_HandleFire>:
    }
}

//-------------------------------------------------------------------------
inline void TimerM_HandleFire(void)
{
    69a6:	2f 92       	push	r2
    69a8:	3f 92       	push	r3
    69aa:	4f 92       	push	r4
    69ac:	5f 92       	push	r5
    69ae:	7f 92       	push	r7
    69b0:	8f 92       	push	r8
    69b2:	9f 92       	push	r9
    69b4:	af 92       	push	r10
    69b6:	bf 92       	push	r11
    69b8:	cf 92       	push	r12
    69ba:	df 92       	push	r13
    69bc:	ef 92       	push	r14
    69be:	ff 92       	push	r15
    69c0:	0f 93       	push	r16
    69c2:	1f 93       	push	r17
    69c4:	cf 93       	push	r28
    69c6:	df 93       	push	r29
    uint8_t i;
    uint16_t int_out;

    TimerM_setIntervalFlag = 1;
    69c8:	81 e0       	ldi	r24, 0x01	; 1
    69ca:	80 93 ed 09 	sts	0x09ED, r24
    {
        _atomic_t _atomic = _atomic_start();
    69ce:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>

        {
            int_out = TimerM_interval_outstanding;
    69d2:	80 90 fe 09 	lds	r8, 0x09FE
    69d6:	90 90 ff 09 	lds	r9, 0x09FF
            TimerM_interval_outstanding = 0;
    69da:	10 92 ff 09 	sts	0x09FF, r1
    69de:	10 92 fe 09 	sts	0x09FE, r1
        }
        _atomic_end(_atomic);
    69e2:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
    }
    if (TimerM_mState)
    69e6:	80 91 e6 09 	lds	r24, 0x09E6
    69ea:	90 91 e7 09 	lds	r25, 0x09E7
    69ee:	a0 91 e8 09 	lds	r26, 0x09E8
    69f2:	b0 91 e9 09 	lds	r27, 0x09E9
    69f6:	00 97       	sbiw	r24, 0x00	; 0
    69f8:	a1 05       	cpc	r26, r1
    69fa:	b1 05       	cpc	r27, r1
    69fc:	09 f4       	brne	.+2      	; 0x6a00 <TimerM_HandleFire+0x5a>
    69fe:	80 c0       	rjmp	.+256    	; 0x6b00 <TimerM_HandleFire+0x15a>
    6a00:	c1 e0       	ldi	r28, 0x01	; 1
    6a02:	da e0       	ldi	r29, 0x0A	; 10
    6a04:	00 e0       	ldi	r16, 0x00	; 0
    6a06:	10 e0       	ldi	r17, 0x00	; 0
    {
        for (i = 0; i < NUM_TIMERS; i++)
        {
            if (TimerM_mState & (0x1L << i))
    6a08:	51 e0       	ldi	r21, 0x01	; 1
    6a0a:	25 2e       	mov	r2, r21
    6a0c:	31 2c       	mov	r3, r1
    6a0e:	41 2c       	mov	r4, r1
    6a10:	51 2c       	mov	r5, r1
            {
                TimerM_mTimerList[i].ticksLeft -= int_out;
    6a12:	aa 24       	eor	r10, r10
    6a14:	bb 24       	eor	r11, r11
            int_out = TimerM_interval_outstanding;
            TimerM_interval_outstanding = 0;
        }
        _atomic_end(_atomic);
    }
    if (TimerM_mState)
    6a16:	70 2e       	mov	r7, r16
    {
        for (i = 0; i < NUM_TIMERS; i++)
        {
            if (TimerM_mState & (0x1L << i))
    6a18:	72 01       	movw	r14, r4
    6a1a:	61 01       	movw	r12, r2
    6a1c:	00 2e       	mov	r0, r16
    6a1e:	04 c0       	rjmp	.+8      	; 0x6a28 <TimerM_HandleFire+0x82>
    6a20:	cc 0c       	add	r12, r12
    6a22:	dd 1c       	adc	r13, r13
    6a24:	ee 1c       	adc	r14, r14
    6a26:	ff 1c       	adc	r15, r15
    6a28:	0a 94       	dec	r0
    6a2a:	d2 f7       	brpl	.-12     	; 0x6a20 <TimerM_HandleFire+0x7a>
    6a2c:	80 91 e6 09 	lds	r24, 0x09E6
    6a30:	90 91 e7 09 	lds	r25, 0x09E7
    6a34:	a0 91 e8 09 	lds	r26, 0x09E8
    6a38:	b0 91 e9 09 	lds	r27, 0x09E9
    6a3c:	8c 21       	and	r24, r12
    6a3e:	9d 21       	and	r25, r13
    6a40:	ae 21       	and	r26, r14
    6a42:	bf 21       	and	r27, r15
    6a44:	00 97       	sbiw	r24, 0x00	; 0
    6a46:	a1 05       	cpc	r26, r1
    6a48:	b1 05       	cpc	r27, r1
    6a4a:	09 f4       	brne	.+2      	; 0x6a4e <TimerM_HandleFire+0xa8>
    6a4c:	52 c0       	rjmp	.+164    	; 0x6af2 <TimerM_HandleFire+0x14c>
            {
                TimerM_mTimerList[i].ticksLeft -= int_out;
    6a4e:	8d 81       	ldd	r24, Y+5	; 0x05
    6a50:	9e 81       	ldd	r25, Y+6	; 0x06
    6a52:	af 81       	ldd	r26, Y+7	; 0x07
    6a54:	b8 85       	ldd	r27, Y+8	; 0x08
    6a56:	88 19       	sub	r24, r8
    6a58:	99 09       	sbc	r25, r9
    6a5a:	aa 09       	sbc	r26, r10
    6a5c:	bb 09       	sbc	r27, r11
    6a5e:	8d 83       	std	Y+5, r24	; 0x05
    6a60:	9e 83       	std	Y+6, r25	; 0x06
    6a62:	af 83       	std	Y+7, r26	; 0x07
    6a64:	b8 87       	std	Y+8, r27	; 0x08
                if (TimerM_mTimerList[i].ticksLeft <= 2)
    6a66:	83 30       	cpi	r24, 0x03	; 3
    6a68:	91 05       	cpc	r25, r1
    6a6a:	a1 05       	cpc	r26, r1
    6a6c:	b1 05       	cpc	r27, r1
    6a6e:	0c f0       	brlt	.+2      	; 0x6a72 <TimerM_HandleFire+0xcc>
    6a70:	40 c0       	rjmp	.+128    	; 0x6af2 <TimerM_HandleFire+0x14c>
                {
                    if (postTask(TimerM_signalOneTimer, 7))
    6a72:	8e eb       	ldi	r24, 0xBE	; 190
    6a74:	95 e3       	ldi	r25, 0x35	; 53
    6a76:	67 e0       	ldi	r22, 0x07	; 7
    6a78:	0e 94 88 14 	call	0x2910	; 0x2910 <postTask>
    6a7c:	88 23       	and	r24, r24
    6a7e:	81 f1       	breq	.+96     	; 0x6ae0 <TimerM_HandleFire+0x13a>
                    {
                        if (TimerM_mTimerList[i].type == TIMER_REPEAT)
    6a80:	88 81       	ld	r24, Y
    6a82:	88 23       	and	r24, r24
    6a84:	89 f4       	brne	.+34     	; 0x6aa8 <TimerM_HandleFire+0x102>
                        {
                            TimerM_mTimerList[i].ticksLeft +=
    6a86:	8d 81       	ldd	r24, Y+5	; 0x05
    6a88:	9e 81       	ldd	r25, Y+6	; 0x06
    6a8a:	af 81       	ldd	r26, Y+7	; 0x07
    6a8c:	b8 85       	ldd	r27, Y+8	; 0x08
    6a8e:	29 81       	ldd	r18, Y+1	; 0x01
    6a90:	3a 81       	ldd	r19, Y+2	; 0x02
    6a92:	4b 81       	ldd	r20, Y+3	; 0x03
    6a94:	5c 81       	ldd	r21, Y+4	; 0x04
    6a96:	82 0f       	add	r24, r18
    6a98:	93 1f       	adc	r25, r19
    6a9a:	a4 1f       	adc	r26, r20
    6a9c:	b5 1f       	adc	r27, r21
    6a9e:	8d 83       	std	Y+5, r24	; 0x05
    6aa0:	9e 83       	std	Y+6, r25	; 0x06
    6aa2:	af 83       	std	Y+7, r26	; 0x07
    6aa4:	b8 87       	std	Y+8, r27	; 0x08
    6aa6:	18 c0       	rjmp	.+48     	; 0x6ad8 <TimerM_HandleFire+0x132>
                                TimerM_mTimerList[i].ticks;
                        }
                        else
                        {
                            TimerM_mState &= ~(0x1L << i);
    6aa8:	c0 94       	com	r12
    6aaa:	d0 94       	com	r13
    6aac:	e0 94       	com	r14
    6aae:	f0 94       	com	r15
    6ab0:	80 91 e6 09 	lds	r24, 0x09E6
    6ab4:	90 91 e7 09 	lds	r25, 0x09E7
    6ab8:	a0 91 e8 09 	lds	r26, 0x09E8
    6abc:	b0 91 e9 09 	lds	r27, 0x09E9
    6ac0:	8c 21       	and	r24, r12
    6ac2:	9d 21       	and	r25, r13
    6ac4:	ae 21       	and	r26, r14
    6ac6:	bf 21       	and	r27, r15
    6ac8:	80 93 e6 09 	sts	0x09E6, r24
    6acc:	90 93 e7 09 	sts	0x09E7, r25
    6ad0:	a0 93 e8 09 	sts	0x09E8, r26
    6ad4:	b0 93 e9 09 	sts	0x09E9, r27
                        }
                        TimerM_enqueue(i);
    6ad8:	87 2d       	mov	r24, r7
    6ada:	0e 94 bd 34 	call	0x697a	; 0x697a <TimerM_enqueue>
    6ade:	09 c0       	rjmp	.+18     	; 0x6af2 <TimerM_HandleFire+0x14c>
                    else
                    {
                        {
                        }
                        ;
                        TimerM_mTimerList[i].ticksLeft = TimerM_mInterval;
    6ae0:	80 91 ec 09 	lds	r24, 0x09EC
    6ae4:	90 e0       	ldi	r25, 0x00	; 0
    6ae6:	a0 e0       	ldi	r26, 0x00	; 0
    6ae8:	b0 e0       	ldi	r27, 0x00	; 0
    6aea:	8d 83       	std	Y+5, r24	; 0x05
    6aec:	9e 83       	std	Y+6, r25	; 0x06
    6aee:	af 83       	std	Y+7, r26	; 0x07
    6af0:	b8 87       	std	Y+8, r27	; 0x08
    6af2:	0f 5f       	subi	r16, 0xFF	; 255
    6af4:	1f 4f       	sbci	r17, 0xFF	; 255
    6af6:	29 96       	adiw	r28, 0x09	; 9
        }
        _atomic_end(_atomic);
    }
    if (TimerM_mState)
    {
        for (i = 0; i < NUM_TIMERS; i++)
    6af8:	00 31       	cpi	r16, 0x10	; 16
    6afa:	11 05       	cpc	r17, r1
    6afc:	09 f0       	breq	.+2      	; 0x6b00 <TimerM_HandleFire+0x15a>
    6afe:	8b cf       	rjmp	.-234    	; 0x6a16 <TimerM_HandleFire+0x70>
                }
            }
        }
    }
    {
        _atomic_t _atomic = _atomic_start();
    6b00:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>

        int_out = TimerM_interval_outstanding;
    6b04:	c0 91 fe 09 	lds	r28, 0x09FE
    6b08:	d0 91 ff 09 	lds	r29, 0x09FF
        _atomic_end(_atomic);
    6b0c:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
    }
    if (int_out == 0)
    6b10:	20 97       	sbiw	r28, 0x00	; 0
    6b12:	11 f4       	brne	.+4      	; 0x6b18 <TimerM_HandleFire+0x172>
    {
        TimerM_adjustInterval();
    6b14:	0e 94 55 34 	call	0x68aa	; 0x68aa <TimerM_adjustInterval>
    }
}
    6b18:	df 91       	pop	r29
    6b1a:	cf 91       	pop	r28
    6b1c:	1f 91       	pop	r17
    6b1e:	0f 91       	pop	r16
    6b20:	ff 90       	pop	r15
    6b22:	ef 90       	pop	r14
    6b24:	df 90       	pop	r13
    6b26:	cf 90       	pop	r12
    6b28:	bf 90       	pop	r11
    6b2a:	af 90       	pop	r10
    6b2c:	9f 90       	pop	r9
    6b2e:	8f 90       	pop	r8
    6b30:	7f 90       	pop	r7
    6b32:	5f 90       	pop	r5
    6b34:	4f 90       	pop	r4
    6b36:	3f 90       	pop	r3
    6b38:	2f 90       	pop	r2
    6b3a:	08 95       	ret

00006b3c <TimerM_Timer_default_fired>:

//-------------------------------------------------------------------------
inline result_t TimerM_Timer_default_fired(uint8_t id)
{
    return SUCCESS;
}
    6b3c:	81 e0       	ldi	r24, 0x01	; 1
    6b3e:	08 95       	ret

00006b40 <TimerM_Timer_fired>:

//-------------------------------------------------------------------------
inline result_t TimerM_Timer_fired(uint8_t id)
{
    GenericTimerFired(id);
    6b40:	0e 94 c6 32 	call	0x658c	; 0x658c <GenericTimerFired>
    return SUCCESS;
}
    6b44:	81 e0       	ldi	r24, 0x01	; 1
    6b46:	08 95       	ret

00006b48 <TimerM_dequeue>:

//-------------------------------------------------------------------------
inline uint8_t TimerM_dequeue(void)
{
    if (TimerM_queue_size == 0)
    6b48:	80 91 ea 09 	lds	r24, 0x09EA
    6b4c:	88 23       	and	r24, r24
    6b4e:	a1 f0       	breq	.+40     	; 0x6b78 <TimerM_dequeue+0x30>
    {
        return NUM_TIMERS;
    }
    if (TimerM_queue_head == NUM_TIMERS - 1)
    6b50:	90 91 00 0a 	lds	r25, 0x0A00
    6b54:	9f 30       	cpi	r25, 0x0F	; 15
    6b56:	19 f4       	brne	.+6      	; 0x6b5e <TimerM_dequeue+0x16>
    {
        TimerM_queue_head = -1;
    6b58:	9f ef       	ldi	r25, 0xFF	; 255
    6b5a:	90 93 00 0a 	sts	0x0A00, r25
    }
    TimerM_queue_head++;
    6b5e:	e0 91 00 0a 	lds	r30, 0x0A00
    6b62:	ef 5f       	subi	r30, 0xFF	; 255
    6b64:	e0 93 00 0a 	sts	0x0A00, r30
    TimerM_queue_size--;
    6b68:	81 50       	subi	r24, 0x01	; 1
    6b6a:	80 93 ea 09 	sts	0x09EA, r24
    return TimerM_queue[(uint8_t) TimerM_queue_head];
    6b6e:	f0 e0       	ldi	r31, 0x00	; 0
    6b70:	e2 51       	subi	r30, 0x12	; 18
    6b72:	f6 4f       	sbci	r31, 0xF6	; 246
    6b74:	80 81       	ld	r24, Z
    6b76:	08 95       	ret
//-------------------------------------------------------------------------
inline uint8_t TimerM_dequeue(void)
{
    if (TimerM_queue_size == 0)
    {
        return NUM_TIMERS;
    6b78:	80 e1       	ldi	r24, 0x10	; 16
        TimerM_queue_head = -1;
    }
    TimerM_queue_head++;
    TimerM_queue_size--;
    return TimerM_queue[(uint8_t) TimerM_queue_head];
}
    6b7a:	08 95       	ret

00006b7c <TimerM_signalOneTimer>:

//-------------------------------------------------------------------------
inline void TimerM_signalOneTimer(void)
{
    uint8_t itimer = TimerM_dequeue();
    6b7c:	0e 94 a4 35 	call	0x6b48	; 0x6b48 <TimerM_dequeue>

    if (itimer < NUM_TIMERS)
    6b80:	80 31       	cpi	r24, 0x10	; 16
    6b82:	10 f4       	brcc	.+4      	; 0x6b88 <TimerM_signalOneTimer+0xc>
}

//-------------------------------------------------------------------------
inline result_t TimerM_Timer_fired(uint8_t id)
{
    GenericTimerFired(id);
    6b84:	0e 94 c6 32 	call	0x658c	; 0x658c <GenericTimerFired>
    6b88:	08 95       	ret

00006b8a <TimerM_Clock_fire>:
    }
}

//-------------------------------------------------------------------------
inline result_t TimerM_Clock_fire(void)
{
    6b8a:	1f 93       	push	r17
    6b8c:	cf 93       	push	r28
    6b8e:	df 93       	push	r29
    {
        _atomic_t _atomic = _atomic_start();
    6b90:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>
    6b94:	18 2f       	mov	r17, r24

        {
            if (TimerM_interval_outstanding == 0)
    6b96:	20 91 fe 09 	lds	r18, 0x09FE
    6b9a:	30 91 ff 09 	lds	r19, 0x09FF
    6b9e:	21 15       	cp	r18, r1
    6ba0:	31 05       	cpc	r19, r1
    6ba2:	29 f4       	brne	.+10     	; 0x6bae <TimerM_Clock_fire+0x24>
            {
                postTask(TimerM_HandleFire, 12);
    6ba4:	83 ed       	ldi	r24, 0xD3	; 211
    6ba6:	94 e3       	ldi	r25, 0x34	; 52
    6ba8:	6c e0       	ldi	r22, 0x0C	; 12
    6baa:	0e 94 88 14 	call	0x2910	; 0x2910 <postTask>
            }
            else
            {
            }
            ;
            TimerM_interval_outstanding += TimerM_Clock_getInterval() + 1;
    6bae:	c0 91 fe 09 	lds	r28, 0x09FE
    6bb2:	d0 91 ff 09 	lds	r29, 0x09FF
//-------------------------------------------------------------------------
inline uint8_t TimerM_Clock_getInterval(void)
{
    unsigned char result;

    result = HPLClock_Clock_getInterval();
    6bb6:	0e 94 9c 31 	call	0x6338	; 0x6338 <HPLClock_Clock_getInterval>
            }
            else
            {
            }
            ;
            TimerM_interval_outstanding += TimerM_Clock_getInterval() + 1;
    6bba:	21 96       	adiw	r28, 0x01	; 1
    6bbc:	c8 0f       	add	r28, r24
    6bbe:	d1 1d       	adc	r29, r1
    6bc0:	d0 93 ff 09 	sts	0x09FF, r29
    6bc4:	c0 93 fe 09 	sts	0x09FE, r28
        }
        _atomic_end(_atomic);
    6bc8:	81 2f       	mov	r24, r17
    6bca:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
    }
    return SUCCESS;
}
    6bce:	81 e0       	ldi	r24, 0x01	; 1
    6bd0:	df 91       	pop	r29
    6bd2:	cf 91       	pop	r28
    6bd4:	1f 91       	pop	r17
    6bd6:	08 95       	ret

00006bd8 <TimerM_StdControl_start>:

//-------------------------------------------------------------------------
inline result_t TimerM_StdControl_start(void)
{
    return SUCCESS;
}
    6bd8:	81 e0       	ldi	r24, 0x01	; 1
    6bda:	08 95       	ret

00006bdc <TimerM_Clock_readCounter>:
//-------------------------------------------------------------------------
inline uint8_t TimerM_Clock_readCounter(void)
{
    unsigned char result;

    result = HPLClock_Clock_readCounter();
    6bdc:	0e 94 9a 31 	call	0x6334	; 0x6334 <HPLClock_Clock_readCounter>
    return result;
}
    6be0:	08 95       	ret

00006be2 <TimerM_Clock_getInterval>:
//-------------------------------------------------------------------------
inline uint8_t TimerM_Clock_getInterval(void)
{
    unsigned char result;

    result = HPLClock_Clock_getInterval();
    6be2:	0e 94 9c 31 	call	0x6338	; 0x6338 <HPLClock_Clock_getInterval>
    return result;
}
    6be6:	08 95       	ret

00006be8 <TimerM_Clock_setInterval>:

//-------------------------------------------------------------------------
inline void TimerM_Clock_setInterval(uint8_t interval)
{
    HPLClock_Clock_setInterval(interval);
    6be8:	0e 94 a1 31 	call	0x6342	; 0x6342 <HPLClock_Clock_setInterval>
}
    6bec:	08 95       	ret

00006bee <is_host_lsb>:

#include "byteorder.h"

//-------------------------------------------------------------------------
inline int is_host_lsb(void)
{
    6bee:	df 93       	push	r29
    6bf0:	cf 93       	push	r28
    6bf2:	00 d0       	rcall	.+0      	; 0x6bf4 <is_host_lsb+0x6>
    6bf4:	cd b7       	in	r28, 0x3d	; 61
    6bf6:	de b7       	in	r29, 0x3e	; 62
    const uint8_t n[2] = {
    6bf8:	81 e0       	ldi	r24, 0x01	; 1
    6bfa:	89 83       	std	Y+1, r24	; 0x01
    6bfc:	1a 82       	std	Y+2, r1	; 0x02
        1, 0
    };
    return *(uint16_t *) n == 1;
    6bfe:	21 e0       	ldi	r18, 0x01	; 1
    6c00:	30 e0       	ldi	r19, 0x00	; 0
    6c02:	89 81       	ldd	r24, Y+1	; 0x01
    6c04:	9a 81       	ldd	r25, Y+2	; 0x02
    6c06:	81 30       	cpi	r24, 0x01	; 1
    6c08:	91 05       	cpc	r25, r1
    6c0a:	11 f0       	breq	.+4      	; 0x6c10 <is_host_lsb+0x22>
    6c0c:	20 e0       	ldi	r18, 0x00	; 0
    6c0e:	30 e0       	ldi	r19, 0x00	; 0
}
    6c10:	c9 01       	movw	r24, r18
    6c12:	0f 90       	pop	r0
    6c14:	0f 90       	pop	r0
    6c16:	cf 91       	pop	r28
    6c18:	df 91       	pop	r29
    6c1a:	08 95       	ret

00006c1c <toLSB16>:

//-------------------------------------------------------------------------
inline uint16_t toLSB16(uint16_t a)
{
    6c1c:	ef 92       	push	r14
    6c1e:	ff 92       	push	r15
    6c20:	cf 93       	push	r28
    6c22:	df 93       	push	r29
    6c24:	ec 01       	movw	r28, r24
    return is_host_lsb()? a : (a << 8) | (a >> 8);
    6c26:	0e 94 f7 35 	call	0x6bee	; 0x6bee <is_host_lsb>
    6c2a:	00 97       	sbiw	r24, 0x00	; 0
    6c2c:	19 f4       	brne	.+6      	; 0x6c34 <toLSB16+0x18>
    6c2e:	dc 27       	eor	r29, r28
    6c30:	cd 27       	eor	r28, r29
    6c32:	dc 27       	eor	r29, r28
}
    6c34:	ce 01       	movw	r24, r28
    6c36:	df 91       	pop	r29
    6c38:	cf 91       	pop	r28
    6c3a:	ff 90       	pop	r15
    6c3c:	ef 90       	pop	r14
    6c3e:	08 95       	ret

00006c40 <fromLSB16>:

//-------------------------------------------------------------------------
inline uint16_t fromLSB16(uint16_t a)
{
    6c40:	ef 92       	push	r14
    6c42:	ff 92       	push	r15
    6c44:	cf 93       	push	r28
    6c46:	df 93       	push	r29
    6c48:	ec 01       	movw	r28, r24
    return is_host_lsb()? a : (a << 8) | (a >> 8);
    6c4a:	0e 94 f7 35 	call	0x6bee	; 0x6bee <is_host_lsb>
    6c4e:	00 97       	sbiw	r24, 0x00	; 0
    6c50:	19 f4       	brne	.+6      	; 0x6c58 <fromLSB16+0x18>
    6c52:	dc 27       	eor	r29, r28
    6c54:	cd 27       	eor	r28, r29
    6c56:	dc 27       	eor	r29, r28
}
    6c58:	ce 01       	movw	r24, r28
    6c5a:	df 91       	pop	r29
    6c5c:	cf 91       	pop	r28
    6c5e:	ff 90       	pop	r15
    6c60:	ef 90       	pop	r14
    6c62:	08 95       	ret

00006c64 <mystrcpy>:
//-------------------------------------------------------------------------
void mystrcpy(char *dest, const char *src)
{
    int i;

    i = 0;
    6c64:	26 2f       	mov	r18, r22
    6c66:	37 2f       	mov	r19, r23
    6c68:	d9 01       	movw	r26, r18
    6c6a:	fc 01       	movw	r30, r24
    6c6c:	20 e0       	ldi	r18, 0x00	; 0
    6c6e:	30 e0       	ldi	r19, 0x00	; 0
    while (src[i] != '\0')
    6c70:	03 c0       	rjmp	.+6      	; 0x6c78 <mystrcpy+0x14>
    {
        dest[i] = src[i];
    6c72:	41 93       	st	Z+, r20
        i++;
    6c74:	2f 5f       	subi	r18, 0xFF	; 255
    6c76:	3f 4f       	sbci	r19, 0xFF	; 255
void mystrcpy(char *dest, const char *src)
{
    int i;

    i = 0;
    while (src[i] != '\0')
    6c78:	4d 91       	ld	r20, X+
    6c7a:	44 23       	and	r20, r20
    6c7c:	d1 f7       	brne	.-12     	; 0x6c72 <mystrcpy+0xe>
    {
        dest[i] = src[i];
        i++;
    }
    dest[i] = '\0';
    6c7e:	82 0f       	add	r24, r18
    6c80:	93 1f       	adc	r25, r19
    6c82:	fc 01       	movw	r30, r24
    6c84:	10 82       	st	Z, r1
}
    6c86:	08 95       	ret

00006c88 <mystrncpy>:
//-------------------------------------------------------------------------
void mystrncpy(char *dest, const char *src, uint8_t n)
{
    int i;

    for (i = 0; i < n; i++)
    6c88:	26 2f       	mov	r18, r22
    6c8a:	37 2f       	mov	r19, r23
    6c8c:	f9 01       	movw	r30, r18
    6c8e:	28 2f       	mov	r18, r24
    6c90:	39 2f       	mov	r19, r25
    6c92:	d9 01       	movw	r26, r18
    6c94:	80 e0       	ldi	r24, 0x00	; 0
    6c96:	90 e0       	ldi	r25, 0x00	; 0
    6c98:	50 e0       	ldi	r21, 0x00	; 0
    6c9a:	03 c0       	rjmp	.+6      	; 0x6ca2 <mystrncpy+0x1a>
    {
        dest[i] = src[i];
    6c9c:	21 91       	ld	r18, Z+
    6c9e:	2d 93       	st	X+, r18
//-------------------------------------------------------------------------
void mystrncpy(char *dest, const char *src, uint8_t n)
{
    int i;

    for (i = 0; i < n; i++)
    6ca0:	01 96       	adiw	r24, 0x01	; 1
    6ca2:	84 17       	cp	r24, r20
    6ca4:	95 07       	cpc	r25, r21
    6ca6:	d4 f3       	brlt	.-12     	; 0x6c9c <mystrncpy+0x14>
    {
        dest[i] = src[i];
    }
}
    6ca8:	08 95       	ret

00006caa <str_from_integer>:
    base[length1 + length2] = '\0';
}

//-------------------------------------------------------------------------
char *str_from_integer(int num)
{
    6caa:	cf 92       	push	r12
    6cac:	df 92       	push	r13
    6cae:	ff 92       	push	r15
    6cb0:	0f 93       	push	r16
    6cb2:	1f 93       	push	r17
    6cb4:	df 93       	push	r29
    6cb6:	cf 93       	push	r28
    6cb8:	00 d0       	rcall	.+0      	; 0x6cba <str_from_integer+0x10>
    6cba:	cd b7       	in	r28, 0x3d	; 61
    6cbc:	de b7       	in	r29, 0x3e	; 62
    6cbe:	6c 01       	movw	r12, r24
    do
    {
        remainder = internal % 10;
        temp[offset] = dec2asciichar(remainder);
        internal = internal / 10;
        offset--;
    6cc0:	d7 fe       	sbrs	r13, 7
    6cc2:	04 c0       	rjmp	.+8      	; 0x6ccc <str_from_integer+0x22>
    6cc4:	88 27       	eor	r24, r24
    6cc6:	99 27       	eor	r25, r25
    6cc8:	8c 19       	sub	r24, r12
    6cca:	9d 09       	sbc	r25, r13
    }
    else
    {
        internal = num;
    }
    temp[6] = '\0';
    6ccc:	10 92 ca 03 	sts	0x03CA, r1
{
    static char temp[7];
    int internal;
    uint8_t length;
    uint8_t i;
    uint8_t offset = 5;
    6cd0:	25 e0       	ldi	r18, 0x05	; 5
    6cd2:	f2 2e       	mov	r15, r18
        internal = num;
    }
    temp[6] = '\0';
    do
    {
        remainder = internal % 10;
    6cd4:	0a e0       	ldi	r16, 0x0A	; 10
    6cd6:	10 e0       	ldi	r17, 0x00	; 0
    6cd8:	b8 01       	movw	r22, r16
    6cda:	0e 94 eb 48 	call	0x91d6	; 0x91d6 <__divmodhi4>
        temp[offset] = dec2asciichar(remainder);
    6cde:	69 83       	std	Y+1, r22	; 0x01
    6ce0:	7a 83       	std	Y+2, r23	; 0x02
    6ce2:	0e 94 1f 37 	call	0x6e3e	; 0x6e3e <dec2asciichar>
    6ce6:	ef 2d       	mov	r30, r15
    6ce8:	f0 e0       	ldi	r31, 0x00	; 0
    6cea:	ec 53       	subi	r30, 0x3C	; 60
    6cec:	fc 4f       	sbci	r31, 0xFC	; 252
    6cee:	80 83       	st	Z, r24
        internal = internal / 10;
    6cf0:	69 81       	ldd	r22, Y+1	; 0x01
    6cf2:	86 2f       	mov	r24, r22
    6cf4:	7a 81       	ldd	r23, Y+2	; 0x02
    6cf6:	97 2f       	mov	r25, r23
        offset--;
    6cf8:	fa 94       	dec	r15
    }

    while (internal != 0);
    6cfa:	00 97       	sbiw	r24, 0x00	; 0
    6cfc:	69 f7       	brne	.-38     	; 0x6cd8 <str_from_integer+0x2e>
    if (num < 0)
    6cfe:	d7 fe       	sbrs	r13, 7
    6d00:	09 c0       	rjmp	.+18     	; 0x6d14 <str_from_integer+0x6a>
    {
        temp[offset] = '-';
    6d02:	ef 2d       	mov	r30, r15
    6d04:	f0 e0       	ldi	r31, 0x00	; 0
    6d06:	ec 53       	subi	r30, 0x3C	; 60
    6d08:	fc 4f       	sbci	r31, 0xFC	; 252
    6d0a:	8d e2       	ldi	r24, 0x2D	; 45
    6d0c:	80 83       	st	Z, r24
        if (offset == 0)
    6d0e:	ff 20       	and	r15, r15
    6d10:	91 f0       	breq	.+36     	; 0x6d36 <str_from_integer+0x8c>
        {
            return temp;
        }
        else
        {
            offset--;
    6d12:	fa 94       	dec	r15
    }
    {
        length = 7 - offset - 1;
        for (i = 0; i < length; i++)
        {
            temp[i] = temp[i + offset + 1];
    6d14:	ef 2d       	mov	r30, r15
    6d16:	f0 e0       	ldi	r31, 0x00	; 0
    }
    base[length1 + length2] = '\0';
}

//-------------------------------------------------------------------------
char *str_from_integer(int num)
    6d18:	eb 53       	subi	r30, 0x3B	; 59
    6d1a:	fc 4f       	sbci	r31, 0xFC	; 252
        {
            return temp;
        }
        else
        {
            offset--;
    6d1c:	a4 ec       	ldi	r26, 0xC4	; 196
    6d1e:	b3 e0       	ldi	r27, 0x03	; 3
        }
    }
    {
        length = 7 - offset - 1;
    6d20:	86 e0       	ldi	r24, 0x06	; 6
    6d22:	8f 19       	sub	r24, r15
    }
    base[length1 + length2] = '\0';
}

//-------------------------------------------------------------------------
char *str_from_integer(int num)
    6d24:	90 e0       	ldi	r25, 0x00	; 0
    6d26:	8a 0f       	add	r24, r26
    6d28:	9b 1f       	adc	r25, r27
            offset--;
        }
    }
    {
        length = 7 - offset - 1;
        for (i = 0; i < length; i++)
    6d2a:	02 c0       	rjmp	.+4      	; 0x6d30 <str_from_integer+0x86>
        {
            temp[i] = temp[i + offset + 1];
    6d2c:	21 91       	ld	r18, Z+
    6d2e:	2d 93       	st	X+, r18
            offset--;
        }
    }
    {
        length = 7 - offset - 1;
        for (i = 0; i < length; i++)
    6d30:	a8 17       	cp	r26, r24
    6d32:	b9 07       	cpc	r27, r25
    6d34:	d9 f7       	brne	.-10     	; 0x6d2c <str_from_integer+0x82>
        {
            temp[i] = temp[i + offset + 1];
        }
    }
    return temp;
}
    6d36:	84 ec       	ldi	r24, 0xC4	; 196
    6d38:	93 e0       	ldi	r25, 0x03	; 3
    6d3a:	0f 90       	pop	r0
    6d3c:	0f 90       	pop	r0
    6d3e:	cf 91       	pop	r28
    6d40:	df 91       	pop	r29
    6d42:	1f 91       	pop	r17
    6d44:	0f 91       	pop	r16
    6d46:	ff 90       	pop	r15
    6d48:	df 90       	pop	r13
    6d4a:	cf 90       	pop	r12
    6d4c:	08 95       	ret

00006d4e <superstring>:
        return 0;
    }

    if ((*q == '\0') && (*p == '\0'))
    {
        return 0;
    6d4e:	28 2f       	mov	r18, r24
    6d50:	39 2f       	mov	r19, r25
    6d52:	d9 01       	movw	r26, r18
    6d54:	86 2f       	mov	r24, r22
    6d56:	97 2f       	mov	r25, r23
    6d58:	fc 01       	movw	r30, r24
    //else return 1
    char *p, *q;

    p = string1;
    q = string2;
    while ((*p == *q) && (*p != '\0'))
    6d5a:	9d 91       	ld	r25, X+
    6d5c:	81 91       	ld	r24, Z+
    6d5e:	98 17       	cp	r25, r24
    6d60:	19 f4       	brne	.+6      	; 0x6d68 <superstring+0x1a>
    6d62:	99 23       	and	r25, r25
    6d64:	d1 f7       	brne	.-12     	; 0x6d5a <superstring+0xc>
    6d66:	04 c0       	rjmp	.+8      	; 0x6d70 <superstring+0x22>
    }
    return temp;
}

//-------------------------------------------------------------------------
int superstring(char *string1, char *string2)
    6d68:	21 e0       	ldi	r18, 0x01	; 1
    6d6a:	30 e0       	ldi	r19, 0x00	; 0
    6d6c:	88 23       	and	r24, r24
    6d6e:	11 f4       	brne	.+4      	; 0x6d74 <superstring+0x26>
    6d70:	20 e0       	ldi	r18, 0x00	; 0
    6d72:	30 e0       	ldi	r19, 0x00	; 0
    {
        return 0;
    }

    return 1;
}
    6d74:	c9 01       	movw	r24, r18
    6d76:	08 95       	ret

00006d78 <mystrncmp>:

//-------------------------------------------------------------------------
int mystrncmp(char *s, uint8_t start1, char *t, uint8_t start2, uint8_t length)
{
    6d78:	0f 93       	push	r16
    6d7a:	fa 01       	movw	r30, r20

    return 1;
}

//-------------------------------------------------------------------------
int mystrncmp(char *s, uint8_t start1, char *t, uint8_t start2, uint8_t length)
    6d7c:	dc 01       	movw	r26, r24
    6d7e:	a6 0f       	add	r26, r22
    6d80:	b1 1d       	adc	r27, r1
    6d82:	e2 0f       	add	r30, r18
    6d84:	f1 1d       	adc	r31, r1
{
    uint8_t i;

    for (i = 0; i < length; i++)
    6d86:	80 e0       	ldi	r24, 0x00	; 0
    6d88:	05 c0       	rjmp	.+10     	; 0x6d94 <mystrncmp+0x1c>
    {
        if (s[i + start1] != t[i + start2])
    6d8a:	2d 91       	ld	r18, X+
    6d8c:	91 91       	ld	r25, Z+
    6d8e:	29 17       	cp	r18, r25
    6d90:	31 f4       	brne	.+12     	; 0x6d9e <mystrncmp+0x26>
//-------------------------------------------------------------------------
int mystrncmp(char *s, uint8_t start1, char *t, uint8_t start2, uint8_t length)
{
    uint8_t i;

    for (i = 0; i < length; i++)
    6d92:	8f 5f       	subi	r24, 0xFF	; 255
    6d94:	80 17       	cp	r24, r16
    6d96:	c8 f3       	brcs	.-14     	; 0x6d8a <mystrncmp+0x12>
        if (s[i + start1] != t[i + start2])
        {
            return 1;
        }
    }
    return 0;
    6d98:	20 e0       	ldi	r18, 0x00	; 0
    6d9a:	30 e0       	ldi	r19, 0x00	; 0
    6d9c:	02 c0       	rjmp	.+4      	; 0x6da2 <mystrncmp+0x2a>

    for (i = 0; i < length; i++)
    {
        if (s[i + start1] != t[i + start2])
        {
            return 1;
    6d9e:	21 e0       	ldi	r18, 0x01	; 1
    6da0:	30 e0       	ldi	r19, 0x00	; 0
        }
    }
    return 0;
}
    6da2:	c9 01       	movw	r24, r18
    6da4:	0f 91       	pop	r16
    6da6:	08 95       	ret

00006da8 <mystrlen>:

//--------------------------------------------------------------------------
int mystrlen(char *s)
{
    int count = 0;
    6da8:	28 2f       	mov	r18, r24
    6daa:	39 2f       	mov	r19, r25
    6dac:	f9 01       	movw	r30, r18
    6dae:	20 e0       	ldi	r18, 0x00	; 0
    6db0:	30 e0       	ldi	r19, 0x00	; 0

    while (s[count] != '\0')
    6db2:	02 c0       	rjmp	.+4      	; 0x6db8 <mystrlen+0x10>
    {
        count++;
    6db4:	2f 5f       	subi	r18, 0xFF	; 255
    6db6:	3f 4f       	sbci	r19, 0xFF	; 255
//--------------------------------------------------------------------------
int mystrlen(char *s)
{
    int count = 0;

    while (s[count] != '\0')
    6db8:	81 91       	ld	r24, Z+
    6dba:	88 23       	and	r24, r24
    6dbc:	d9 f7       	brne	.-10     	; 0x6db4 <mystrlen+0xc>
    {
        count++;
    }

    return count;
}
    6dbe:	c9 01       	movw	r24, r18
    6dc0:	08 95       	ret

00006dc2 <strappend>:
    }
}

//-------------------------------------------------------------------------
void strappend(char *base, char *string)
{
    6dc2:	ef 92       	push	r14
    6dc4:	ff 92       	push	r15
    6dc6:	0f 93       	push	r16
    6dc8:	1f 93       	push	r17
    6dca:	cf 93       	push	r28
    6dcc:	df 93       	push	r29
    6dce:	ec 01       	movw	r28, r24
    6dd0:	8b 01       	movw	r16, r22
    int length1, length2;
    uint8_t i;

    length1 = mystrlen(base);
    6dd2:	0e 94 d4 36 	call	0x6da8	; 0x6da8 <mystrlen>
    6dd6:	7c 01       	movw	r14, r24
    length2 = mystrlen(string);
    6dd8:	c8 01       	movw	r24, r16
    6dda:	0e 94 d4 36 	call	0x6da8	; 0x6da8 <mystrlen>
    for (i = 0; i < length2; i++)
    6dde:	40 e0       	ldi	r20, 0x00	; 0
    6de0:	ce 0d       	add	r28, r14
    6de2:	df 1d       	adc	r29, r15
    6de4:	09 c0       	rjmp	.+18     	; 0x6df8 <strappend+0x36>
    {
        base[i + length1] = string[i];
    6de6:	fe 01       	movw	r30, r28
    6de8:	e2 0f       	add	r30, r18
    6dea:	f3 1f       	adc	r31, r19
    6dec:	20 0f       	add	r18, r16
    6dee:	31 1f       	adc	r19, r17
    6df0:	d9 01       	movw	r26, r18
    6df2:	2c 91       	ld	r18, X
    6df4:	20 83       	st	Z, r18
    int length1, length2;
    uint8_t i;

    length1 = mystrlen(base);
    length2 = mystrlen(string);
    for (i = 0; i < length2; i++)
    6df6:	4f 5f       	subi	r20, 0xFF	; 255
    6df8:	24 2f       	mov	r18, r20
    6dfa:	30 e0       	ldi	r19, 0x00	; 0
    6dfc:	28 17       	cp	r18, r24
    6dfe:	39 07       	cpc	r19, r25
    6e00:	94 f3       	brlt	.-28     	; 0x6de6 <strappend+0x24>
    {
        base[i + length1] = string[i];
    }
    base[length1 + length2] = '\0';
    6e02:	c8 0f       	add	r28, r24
    6e04:	d9 1f       	adc	r29, r25
    6e06:	18 82       	st	Y, r1
}
    6e08:	df 91       	pop	r29
    6e0a:	cf 91       	pop	r28
    6e0c:	1f 91       	pop	r17
    6e0e:	0f 91       	pop	r16
    6e10:	ff 90       	pop	r15
    6e12:	ef 90       	pop	r14
    6e14:	08 95       	ret

00006e16 <rcombine>:
#ifdef PLATFORM_AVR
#include "../hardware/avrhardware.h"
#endif
inline result_t rcombine(result_t r1, result_t r2)
{
    return r1 == FAIL ? FAIL : r2;
    6e16:	88 23       	and	r24, r24
    6e18:	09 f4       	brne	.+2      	; 0x6e1c <rcombine+0x6>
    6e1a:	60 e0       	ldi	r22, 0x00	; 0
}
    6e1c:	86 2f       	mov	r24, r22
    6e1e:	08 95       	ret

00006e20 <hex2value>:
uint16_t hex2value(uint8_t hex)
{
    char a = (char)hex;
    uint16_t high;

    if ((a >= '0') && (a <= '9'))
    6e20:	98 2f       	mov	r25, r24
    6e22:	90 53       	subi	r25, 0x30	; 48
    6e24:	28 2f       	mov	r18, r24
    6e26:	33 27       	eor	r19, r19
    6e28:	27 fd       	sbrc	r18, 7
    6e2a:	30 95       	com	r19
    6e2c:	9a 30       	cpi	r25, 0x0A	; 10
    6e2e:	18 f4       	brcc	.+6      	; 0x6e36 <hex2value+0x16>
    {
        high = a - '0';
    6e30:	20 53       	subi	r18, 0x30	; 48
    6e32:	30 40       	sbci	r19, 0x00	; 0
    6e34:	02 c0       	rjmp	.+4      	; 0x6e3a <hex2value+0x1a>
    }
    else
    {
        high = a - 'A' + 10;
    6e36:	27 53       	subi	r18, 0x37	; 55
    6e38:	30 40       	sbci	r19, 0x00	; 0
    }

    return high;
}
    6e3a:	c9 01       	movw	r24, r18
    6e3c:	08 95       	ret

00006e3e <dec2asciichar>:

//-------------------------------------------------------------------------
char dec2asciichar(uint8_t value)
{
    if ( /*( value >= 0 ) && */ (value <= 9))
    6e3e:	8a 30       	cpi	r24, 0x0A	; 10
    6e40:	10 f4       	brcc	.+4      	; 0x6e46 <dec2asciichar+0x8>
    {
        return (char)(value + 0x30);
    6e42:	80 5d       	subi	r24, 0xD0	; 208
    6e44:	08 95       	ret
    }
    else
    {
        return 0;
    6e46:	80 e0       	ldi	r24, 0x00	; 0
    }
}
    6e48:	08 95       	ret

00006e4a <_atomic_start>:

//-------------------------------------------------------------------------
_atomic_t _atomic_start(void)
{
#ifdef PLATFORM_AVR
    _atomic_t result = _atomic_start_avr();
    6e4a:	0e 94 be 03 	call	0x77c	; 0x77c <_atomic_start_avr>
#endif
    return result;
}
    6e4e:	08 95       	ret

00006e50 <_atomic_end>:

//-------------------------------------------------------------------------
void _atomic_end(_atomic_t oldSreg)
{
#ifdef PLATFORM_AVR
    _atomic_end_avr(oldSreg);
    6e50:	0e 94 c1 03 	call	0x782	; 0x782 <_atomic_end_avr>
#endif
}
    6e54:	08 95       	ret

00006e56 <nmemset>:

//-------------------------------------------------------------------------
inline void *nmemset(void *to, int val, size_t n)
{
    char *cto = to;
    6e56:	28 2f       	mov	r18, r24
    6e58:	39 2f       	mov	r19, r25
    6e5a:	f9 01       	movw	r30, r18

    while (n--)
    6e5c:	03 c0       	rjmp	.+6      	; 0x6e64 <nmemset+0xe>
    {
        *cto++ = val;
    6e5e:	61 93       	st	Z+, r22
    6e60:	41 50       	subi	r20, 0x01	; 1
    6e62:	50 40       	sbci	r21, 0x00	; 0
//-------------------------------------------------------------------------
inline void *nmemset(void *to, int val, size_t n)
{
    char *cto = to;

    while (n--)
    6e64:	41 15       	cp	r20, r1
    6e66:	51 05       	cpc	r21, r1
    6e68:	d1 f7       	brne	.-12     	; 0x6e5e <nmemset+0x8>
    {
        *cto++ = val;
    }

    return to;
}
    6e6a:	08 95       	ret

00006e6c <getRandomNumber>:
uint16_t getRandomNumber()
{
    uint16_t ret;

#ifdef PLATFORM_AVR
    ret = rand();
    6e6c:	0e 94 89 49 	call	0x9312	; 0x9312 <rand>
#endif
    return ret;
}
    6e70:	08 95       	ret

00006e72 <WakeupMe>:
}

//-------------------------------------------------------------------------
void WakeupMe()
{
    thisthread->state = STATE_ACTIVE;
    6e72:	e0 91 31 0c 	lds	r30, 0x0C31
    6e76:	f0 91 32 0c 	lds	r31, 0x0C32
    6e7a:	82 e0       	ldi	r24, 0x02	; 2
    6e7c:	82 83       	std	Z+2, r24	; 0x02
    postNewThreadTask();
    6e7e:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <postNewThreadTask>
}
    6e82:	08 95       	ret

00006e84 <init_breakpoint_table>:

void init_breakpoint_table()
{
   int i;
   for (i=0; i< NUM_BREAKPOINTS; i++)
     br_state[i].active = 0; 	
    6e84:	10 92 9d 0b 	sts	0x0B9D, r1
    6e88:	10 92 a6 0b 	sts	0x0BA6, r1
    6e8c:	10 92 af 0b 	sts	0x0BAF, r1
	
}
    6e90:	08 95       	ret

00006e92 <get_breakpoint_index>:
uint8_t get_breakpoint_index()
{
    int i; 	
	  for (i=0; i< NUM_BREAKPOINTS; i++)
     {
     	  if ( br_state[i].active == 0)
    6e92:	80 91 9d 0b 	lds	r24, 0x0B9D
    6e96:	88 23       	and	r24, r24
    6e98:	59 f0       	breq	.+22     	; 0x6eb0 <get_breakpoint_index+0x1e>
    6e9a:	80 91 a6 0b 	lds	r24, 0x0BA6
    6e9e:	88 23       	and	r24, r24
    6ea0:	51 f0       	breq	.+20     	; 0x6eb6 <get_breakpoint_index+0x24>
    6ea2:	80 91 af 0b 	lds	r24, 0x0BAF
    6ea6:	88 23       	and	r24, r24
    6ea8:	a9 f4       	brne	.+42     	; 0x6ed4 <get_breakpoint_index+0x42>


uint8_t get_breakpoint_index()
{
    int i; 	
	  for (i=0; i< NUM_BREAKPOINTS; i++)
    6eaa:	82 e0       	ldi	r24, 0x02	; 2
    6eac:	90 e0       	ldi	r25, 0x00	; 0
    6eae:	05 c0       	rjmp	.+10     	; 0x6eba <get_breakpoint_index+0x28>
    6eb0:	80 e0       	ldi	r24, 0x00	; 0
    6eb2:	90 e0       	ldi	r25, 0x00	; 0
    6eb4:	02 c0       	rjmp	.+4      	; 0x6eba <get_breakpoint_index+0x28>
    6eb6:	81 e0       	ldi	r24, 0x01	; 1
    6eb8:	90 e0       	ldi	r25, 0x00	; 0
     {
     	  if ( br_state[i].active == 0)
     	  	{
     	  		 br_state[i].active = 1; 
    6eba:	fc 01       	movw	r30, r24
    6ebc:	23 e0       	ldi	r18, 0x03	; 3
    6ebe:	ee 0f       	add	r30, r30
    6ec0:	ff 1f       	adc	r31, r31
    6ec2:	2a 95       	dec	r18
    6ec4:	e1 f7       	brne	.-8      	; 0x6ebe <get_breakpoint_index+0x2c>
    6ec6:	e8 0f       	add	r30, r24
    6ec8:	f9 1f       	adc	r31, r25
    6eca:	eb 56       	subi	r30, 0x6B	; 107
    6ecc:	f4 4f       	sbci	r31, 0xF4	; 244
    6ece:	21 e0       	ldi	r18, 0x01	; 1
    6ed0:	20 87       	std	Z+8, r18	; 0x08
     	  		 return i; 
    6ed2:	08 95       	ret
     	    }
	   } 
	   return 255;  
    6ed4:	8f ef       	ldi	r24, 0xFF	; 255
}
    6ed6:	08 95       	ret

00006ed8 <reply_debugging_print>:
 

//-------------------------------------------------------------------------
//Note that this function should consider splitting a message into multiple pieces, if the requested memory chunk is too large 
void reply_debugging_print(uint8_t * receivebuffer)
{
    6ed8:	bf 92       	push	r11
    6eda:	cf 92       	push	r12
    6edc:	df 92       	push	r13
    6ede:	ef 92       	push	r14
    6ee0:	ff 92       	push	r15
    6ee2:	0f 93       	push	r16
    6ee4:	1f 93       	push	r17
    6ee6:	cf 93       	push	r28
    6ee8:	df 93       	push	r29
    6eea:	fc 01       	movw	r30, r24
    uint16_t addr;
    uint16_t size;
    uint8_t chunkindex;
    uint8_t numOfChunks;

    addr = ((uint16_t) receivebuffer[3]) * 256 + (receivebuffer[4]);
    6eec:	80 e0       	ldi	r24, 0x00	; 0
    6eee:	ec 01       	movw	r28, r24
    6ef0:	84 81       	ldd	r24, Z+4	; 0x04
    6ef2:	c8 0f       	add	r28, r24
    6ef4:	d1 1d       	adc	r29, r1
    size = (uint16_t) receivebuffer[5] * 256 + receivebuffer[6];
    6ef6:	15 81       	ldd	r17, Z+5	; 0x05
    6ef8:	00 e0       	ldi	r16, 0x00	; 0
    6efa:	86 81       	ldd	r24, Z+6	; 0x06
    6efc:	08 0f       	add	r16, r24
    6efe:	11 1d       	adc	r17, r1
    numOfChunks = size / 24 + 1;
    6f00:	c8 01       	movw	r24, r16
    6f02:	68 e1       	ldi	r22, 0x18	; 24
    6f04:	70 e0       	ldi	r23, 0x00	; 0
    6f06:	0e 94 d7 48 	call	0x91ae	; 0x91ae <__udivmodhi4>
    6f0a:	e6 2e       	mov	r14, r22
    6f0c:	e3 94       	inc	r14
    {
        reply[0] = 24 + 6;
        reply[1] = 91;
        reply[2] = nodeid;
        reply[3] = chunkindex;
        reply[4] = size / 256;
    6f0e:	d1 2e       	mov	r13, r17
    uint8_t numOfChunks;

    addr = ((uint16_t) receivebuffer[3]) * 256 + (receivebuffer[4]);
    size = (uint16_t) receivebuffer[5] * 256 + receivebuffer[6];
    numOfChunks = size / 24 + 1;
    for (chunkindex = 0; chunkindex < numOfChunks; chunkindex++)
    6f10:	ff 24       	eor	r15, r15
    {
        reply[0] = 24 + 6;
    6f12:	4e e1       	ldi	r20, 0x1E	; 30
    6f14:	c4 2e       	mov	r12, r20
        reply[1] = 91;
    6f16:	3b e5       	ldi	r19, 0x5B	; 91
    6f18:	b3 2e       	mov	r11, r19
    uint8_t numOfChunks;

    addr = ((uint16_t) receivebuffer[3]) * 256 + (receivebuffer[4]);
    size = (uint16_t) receivebuffer[5] * 256 + receivebuffer[6];
    numOfChunks = size / 24 + 1;
    for (chunkindex = 0; chunkindex < numOfChunks; chunkindex++)
    6f1a:	1f c0       	rjmp	.+62     	; 0x6f5a <reply_debugging_print+0x82>
    {
        reply[0] = 24 + 6;
    6f1c:	c0 92 c9 0b 	sts	0x0BC9, r12
        reply[1] = 91;
    6f20:	b0 92 ca 0b 	sts	0x0BCA, r11
        reply[2] = nodeid;
    6f24:	80 91 33 0c 	lds	r24, 0x0C33
    6f28:	80 93 cb 0b 	sts	0x0BCB, r24
        reply[3] = chunkindex;
    6f2c:	f0 92 cc 0b 	sts	0x0BCC, r15
        reply[4] = size / 256;
    6f30:	d0 92 cd 0b 	sts	0x0BCD, r13
        reply[5] = size % 256;
    6f34:	00 93 ce 0b 	sts	0x0BCE, r16
        //Note that this expose some piece of memory that is NOT part of the requested data 
        mystrncpy((char *)&reply[6], (char *)addr, 24);
    6f38:	8f ec       	ldi	r24, 0xCF	; 207
    6f3a:	9b e0       	ldi	r25, 0x0B	; 11
    6f3c:	be 01       	movw	r22, r28
    6f3e:	48 e1       	ldi	r20, 0x18	; 24
    6f40:	0e 94 44 36 	call	0x6c88	; 0x6c88 <mystrncpy>
        addr = addr + 24;
    6f44:	68 96       	adiw	r28, 0x18	; 24
        StandardSocketSend(0xefef, 0xffff, 32, reply);
    6f46:	8f ee       	ldi	r24, 0xEF	; 239
    6f48:	9f ee       	ldi	r25, 0xEF	; 239
    6f4a:	6f ef       	ldi	r22, 0xFF	; 255
    6f4c:	7f ef       	ldi	r23, 0xFF	; 255
    6f4e:	40 e2       	ldi	r20, 0x20	; 32
    6f50:	29 ec       	ldi	r18, 0xC9	; 201
    6f52:	3b e0       	ldi	r19, 0x0B	; 11
    6f54:	0e 94 5d 02 	call	0x4ba	; 0x4ba <StandardSocketSend>
    uint8_t numOfChunks;

    addr = ((uint16_t) receivebuffer[3]) * 256 + (receivebuffer[4]);
    size = (uint16_t) receivebuffer[5] * 256 + receivebuffer[6];
    numOfChunks = size / 24 + 1;
    for (chunkindex = 0; chunkindex < numOfChunks; chunkindex++)
    6f58:	f3 94       	inc	r15
    6f5a:	fe 14       	cp	r15, r14
    6f5c:	f8 f2       	brcs	.-66     	; 0x6f1c <reply_debugging_print+0x44>
        mystrncpy((char *)&reply[6], (char *)addr, 24);
        addr = addr + 24;
        StandardSocketSend(0xefef, 0xffff, 32, reply);
    }
    //printStringN(reply,32); 
}
    6f5e:	df 91       	pop	r29
    6f60:	cf 91       	pop	r28
    6f62:	1f 91       	pop	r17
    6f64:	0f 91       	pop	r16
    6f66:	ff 90       	pop	r15
    6f68:	ef 90       	pop	r14
    6f6a:	df 90       	pop	r13
    6f6c:	cf 90       	pop	r12
    6f6e:	bf 90       	pop	r11
    6f70:	08 95       	ret

00006f72 <reply_debugging_set>:

//this is the reply for the set command 
void reply_debugging_set(uint8_t * receivebuffer)
{
    6f72:	fc 01       	movw	r30, r24
    uint16_t addr;
    uint8_t size;
    uint8_t i;

    addr = (uint16_t) receivebuffer[3] * 256 + receivebuffer[4];
    6f74:	93 81       	ldd	r25, Z+3	; 0x03
    6f76:	80 e0       	ldi	r24, 0x00	; 0
    6f78:	24 81       	ldd	r18, Z+4	; 0x04
    6f7a:	dc 01       	movw	r26, r24
    6f7c:	a2 0f       	add	r26, r18
    6f7e:	b1 1d       	adc	r27, r1
    size = receivebuffer[5];
    6f80:	95 81       	ldd	r25, Z+5	; 0x05
    }
    //printStringN(reply,32); 
}

//this is the reply for the set command 
void reply_debugging_set(uint8_t * receivebuffer)
    6f82:	36 96       	adiw	r30, 0x06	; 6
    uint8_t size;
    uint8_t i;

    addr = (uint16_t) receivebuffer[3] * 256 + receivebuffer[4];
    size = receivebuffer[5];
    for (i = 0; i < size; i++)
    6f84:	03 c0       	rjmp	.+6      	; 0x6f8c <reply_debugging_set+0x1a>
    {
        *((unsigned char *)(addr + i)) = receivebuffer[6 + i];
    6f86:	21 91       	ld	r18, Z+
    6f88:	2d 93       	st	X+, r18
    uint8_t size;
    uint8_t i;

    addr = (uint16_t) receivebuffer[3] * 256 + receivebuffer[4];
    size = receivebuffer[5];
    for (i = 0; i < size; i++)
    6f8a:	8f 5f       	subi	r24, 0xFF	; 255
    6f8c:	89 17       	cp	r24, r25
    6f8e:	d8 f3       	brcs	.-10     	; 0x6f86 <reply_debugging_set+0x14>
    {
        *((unsigned char *)(addr + i)) = receivebuffer[6 + i];
    }
    reply[0] = 3;
    6f90:	83 e0       	ldi	r24, 0x03	; 3
    6f92:	80 93 c9 0b 	sts	0x0BC9, r24
    reply[1] = 96;
    6f96:	80 e6       	ldi	r24, 0x60	; 96
    6f98:	80 93 ca 0b 	sts	0x0BCA, r24
    reply[2] = nodeid;
    6f9c:	80 91 33 0c 	lds	r24, 0x0C33
    6fa0:	80 93 cb 0b 	sts	0x0BCB, r24
    //mystrncpy(&reply[3], (unsigned char *)addr, size); 
    StandardSocketSend(0xefef, 0xffff, 32, reply);
    6fa4:	8f ee       	ldi	r24, 0xEF	; 239
    6fa6:	9f ee       	ldi	r25, 0xEF	; 239
    6fa8:	6f ef       	ldi	r22, 0xFF	; 255
    6faa:	7f ef       	ldi	r23, 0xFF	; 255
    6fac:	40 e2       	ldi	r20, 0x20	; 32
    6fae:	29 ec       	ldi	r18, 0xC9	; 201
    6fb0:	3b e0       	ldi	r19, 0x0B	; 11
    6fb2:	0e 94 5d 02 	call	0x4ba	; 0x4ba <StandardSocketSend>
    //printStringN(reply,32); 
}
    6fb6:	08 95       	ret

00006fb8 <reply_debugging_insert_avr_breakpoint>:

//-------------------------------------------------------------------------
void reply_debugging_insert_avr_breakpoint(uint8_t * receivebuffer)
{
    6fb8:	8f 92       	push	r8
    6fba:	9f 92       	push	r9
    6fbc:	af 92       	push	r10
    6fbe:	bf 92       	push	r11
    6fc0:	cf 92       	push	r12
    6fc2:	df 92       	push	r13
    6fc4:	ef 92       	push	r14
    6fc6:	ff 92       	push	r15
    6fc8:	0f 93       	push	r16
    6fca:	1f 93       	push	r17
    6fcc:	df 93       	push	r29
    6fce:	cf 93       	push	r28
    6fd0:	cd b7       	in	r28, 0x3d	; 61
    6fd2:	de b7       	in	r29, 0x3e	; 62
    6fd4:	27 97       	sbiw	r28, 0x07	; 7
    6fd6:	0f b6       	in	r0, 0x3f	; 63
    6fd8:	f8 94       	cli
    6fda:	de bf       	out	0x3e, r29	; 62
    6fdc:	0f be       	out	0x3f, r0	; 63
    6fde:	cd bf       	out	0x3d, r28	; 61
    6fe0:	8c 01       	movw	r16, r24
    uint8_t offset;
    uint8_t instructions[6];
    uint32_t temp; 
    uint8_t index; 
    
    pagecount = (uint16_t) receivebuffer[3] * 256 + receivebuffer[4];
    6fe2:	dc 01       	movw	r26, r24
    6fe4:	13 96       	adiw	r26, 0x03	; 3
    6fe6:	9c 91       	ld	r25, X
    6fe8:	13 97       	sbiw	r26, 0x03	; 3
    6fea:	80 e0       	ldi	r24, 0x00	; 0
    6fec:	14 96       	adiw	r26, 0x04	; 4
    6fee:	2c 91       	ld	r18, X
    6ff0:	14 97       	sbiw	r26, 0x04	; 4
    6ff2:	4c 01       	movw	r8, r24
    6ff4:	82 0e       	add	r8, r18
    6ff6:	91 1c       	adc	r9, r1
    offset = receivebuffer[5];
    6ff8:	15 96       	adiw	r26, 0x05	; 5
    6ffa:	6c 91       	ld	r22, X
    
    temp = (uint32_t)pagecount * 256 + (uint32_t)offset; 
    6ffc:	64 01       	movw	r12, r8
    6ffe:	ee 24       	eor	r14, r14
    7000:	ff 24       	eor	r15, r15
    7002:	fe 2c       	mov	r15, r14
    7004:	ed 2c       	mov	r14, r13
    7006:	dc 2c       	mov	r13, r12
    7008:	cc 24       	eor	r12, r12
    700a:	c6 0e       	add	r12, r22
    700c:	d1 1c       	adc	r13, r1
    700e:	e1 1c       	adc	r14, r1
    7010:	f1 1c       	adc	r15, r1
    temp = temp/2; 
    
    index = get_breakpoint_index();
    7012:	6f 83       	std	Y+7, r22	; 0x07
    7014:	0e 94 49 37 	call	0x6e92	; 0x6e92 <get_breakpoint_index>
    br_state[index].addr = temp;
    7018:	90 e0       	ldi	r25, 0x00	; 0
    701a:	5c 01       	movw	r10, r24
    701c:	63 e0       	ldi	r22, 0x03	; 3
    701e:	aa 0c       	add	r10, r10
    7020:	bb 1c       	adc	r11, r11
    7022:	6a 95       	dec	r22
    7024:	e1 f7       	brne	.-8      	; 0x701e <reply_debugging_insert_avr_breakpoint+0x66>
    7026:	a8 0e       	add	r10, r24
    7028:	b9 1e       	adc	r11, r25
    702a:	f5 01       	movw	r30, r10
    702c:	eb 56       	subi	r30, 0x6B	; 107
    702e:	f4 4f       	sbci	r31, 0xF4	; 244
    
    pagecount = (uint16_t) receivebuffer[3] * 256 + receivebuffer[4];
    offset = receivebuffer[5];
    
    temp = (uint32_t)pagecount * 256 + (uint32_t)offset; 
    temp = temp/2; 
    7030:	f6 94       	lsr	r15
    7032:	e7 94       	ror	r14
    7034:	d7 94       	ror	r13
    7036:	c7 94       	ror	r12
    
    index = get_breakpoint_index();
    br_state[index].addr = temp;
    7038:	d1 82       	std	Z+1, r13	; 0x01
    703a:	c0 82       	st	Z, r12
    
    boot_insertBreakPoint(pagecount, offset, instructions);
    703c:	c4 01       	movw	r24, r8
    703e:	6f 81       	ldd	r22, Y+7	; 0x07
    7040:	6e 01       	movw	r12, r28
    7042:	08 94       	sec
    7044:	c1 1c       	adc	r12, r1
    7046:	d1 1c       	adc	r13, r1
    7048:	a6 01       	movw	r20, r12
    704a:	0e 94 7d f2 	call	0x1e4fa	; 0x1e4fa <boot_insertBreakPoint>
    reply[0] = 12;
    704e:	8c e0       	ldi	r24, 0x0C	; 12
    7050:	80 93 c9 0b 	sts	0x0BC9, r24
    reply[1] = 92;
    7054:	8c e5       	ldi	r24, 0x5C	; 92
    7056:	80 93 ca 0b 	sts	0x0BCA, r24
    reply[2] = nodeid;
    705a:	80 91 33 0c 	lds	r24, 0x0C33
    705e:	80 93 cb 0b 	sts	0x0BCB, r24
    reply[3] = receivebuffer[3];
    7062:	f8 01       	movw	r30, r16
    7064:	83 81       	ldd	r24, Z+3	; 0x03
    7066:	80 93 cc 0b 	sts	0x0BCC, r24
    reply[4] = receivebuffer[4];
    706a:	84 81       	ldd	r24, Z+4	; 0x04
    706c:	80 93 cd 0b 	sts	0x0BCD, r24
    reply[5] = receivebuffer[5];
    7070:	85 81       	ldd	r24, Z+5	; 0x05
    7072:	80 93 ce 0b 	sts	0x0BCE, r24
    7076:	f6 01       	movw	r30, r12
    7078:	8f ec       	ldi	r24, 0xCF	; 207
    707a:	9b e0       	ldi	r25, 0x0B	; 11
    StandardSocketSend(0xefef, 0xffff, 32, reply);
    //printStringN(reply,32); 
}

//-------------------------------------------------------------------------
void reply_debugging_insert_avr_breakpoint(uint8_t * receivebuffer)
    707c:	b5 01       	movw	r22, r10
    707e:	69 56       	subi	r22, 0x69	; 105
    7080:	74 4f       	sbci	r23, 0xF4	; 244
    7082:	9e 01       	movw	r18, r28
    7084:	29 5f       	subi	r18, 0xF9	; 249
    7086:	3f 4f       	sbci	r19, 0xFF	; 255
    reply[3] = receivebuffer[3];
    reply[4] = receivebuffer[4];
    reply[5] = receivebuffer[5];
    for (offset = 0; offset < 6; offset++)
    {
        reply[6 + offset] = instructions[offset];
    7088:	41 91       	ld	r20, Z+
    708a:	dc 01       	movw	r26, r24
    708c:	4d 93       	st	X+, r20
    708e:	cd 01       	movw	r24, r26
         br_state[index].breakpointinstructions[offset] = instructions[offset]; 
    7090:	db 01       	movw	r26, r22
    7092:	4d 93       	st	X+, r20
    7094:	bd 01       	movw	r22, r26
    reply[1] = 92;
    reply[2] = nodeid;
    reply[3] = receivebuffer[3];
    reply[4] = receivebuffer[4];
    reply[5] = receivebuffer[5];
    for (offset = 0; offset < 6; offset++)
    7096:	e2 17       	cp	r30, r18
    7098:	f3 07       	cpc	r31, r19
    709a:	b1 f7       	brne	.-20     	; 0x7088 <reply_debugging_insert_avr_breakpoint+0xd0>
    {
        reply[6 + offset] = instructions[offset];
         br_state[index].breakpointinstructions[offset] = instructions[offset]; 
    }
    StandardSocketSend(0xefef, 0xffff, 32, reply);
    709c:	8f ee       	ldi	r24, 0xEF	; 239
    709e:	9f ee       	ldi	r25, 0xEF	; 239
    70a0:	6f ef       	ldi	r22, 0xFF	; 255
    70a2:	7f ef       	ldi	r23, 0xFF	; 255
    70a4:	40 e2       	ldi	r20, 0x20	; 32
    70a6:	29 ec       	ldi	r18, 0xC9	; 201
    70a8:	3b e0       	ldi	r19, 0x0B	; 11
    70aa:	0e 94 5d 02 	call	0x4ba	; 0x4ba <StandardSocketSend>
    StandardSocketSend(0xefef, 0xffff, 32, reply);
    70ae:	8f ee       	ldi	r24, 0xEF	; 239
    70b0:	9f ee       	ldi	r25, 0xEF	; 239
    70b2:	6f ef       	ldi	r22, 0xFF	; 255
    70b4:	7f ef       	ldi	r23, 0xFF	; 255
    70b6:	40 e2       	ldi	r20, 0x20	; 32
    70b8:	29 ec       	ldi	r18, 0xC9	; 201
    70ba:	3b e0       	ldi	r19, 0x0B	; 11
    70bc:	0e 94 5d 02 	call	0x4ba	; 0x4ba <StandardSocketSend>
    StandardSocketSend(0xefef, 0xffff, 32, reply);
    70c0:	8f ee       	ldi	r24, 0xEF	; 239
    70c2:	9f ee       	ldi	r25, 0xEF	; 239
    70c4:	6f ef       	ldi	r22, 0xFF	; 255
    70c6:	7f ef       	ldi	r23, 0xFF	; 255
    70c8:	40 e2       	ldi	r20, 0x20	; 32
    70ca:	29 ec       	ldi	r18, 0xC9	; 201
    70cc:	3b e0       	ldi	r19, 0x0B	; 11
    70ce:	0e 94 5d 02 	call	0x4ba	; 0x4ba <StandardSocketSend>
}
    70d2:	27 96       	adiw	r28, 0x07	; 7
    70d4:	0f b6       	in	r0, 0x3f	; 63
    70d6:	f8 94       	cli
    70d8:	de bf       	out	0x3e, r29	; 62
    70da:	0f be       	out	0x3f, r0	; 63
    70dc:	cd bf       	out	0x3d, r28	; 61
    70de:	cf 91       	pop	r28
    70e0:	df 91       	pop	r29
    70e2:	1f 91       	pop	r17
    70e4:	0f 91       	pop	r16
    70e6:	ff 90       	pop	r15
    70e8:	ef 90       	pop	r14
    70ea:	df 90       	pop	r13
    70ec:	cf 90       	pop	r12
    70ee:	bf 90       	pop	r11
    70f0:	af 90       	pop	r10
    70f2:	9f 90       	pop	r9
    70f4:	8f 90       	pop	r8
    70f6:	08 95       	ret

000070f8 <reply_debugging_remove_avr_breakpoint>:
//And the thread dump and thread_state_restore should be the next task. 
//and this task should check the address to see which location is the address to be need. 
//use uint32_t because uint16_t is too small 
#ifdef PLATFORM_AVR
void reply_debugging_remove_avr_breakpoint(uint8_t * receivebuffer)
{
    70f8:	4f 92       	push	r4
    70fa:	5f 92       	push	r5
    70fc:	6f 92       	push	r6
    70fe:	7f 92       	push	r7
    7100:	9f 92       	push	r9
    7102:	af 92       	push	r10
    7104:	bf 92       	push	r11
    7106:	cf 92       	push	r12
    7108:	df 92       	push	r13
    710a:	ef 92       	push	r14
    710c:	ff 92       	push	r15
    710e:	0f 93       	push	r16
    7110:	1f 93       	push	r17
    7112:	cf 93       	push	r28
    7114:	df 93       	push	r29
    7116:	2c 01       	movw	r4, r24
    uint16_t pagecount;
    uint8_t offset;
    uint8_t i;
    uint8_t breakpointfound = 0;

    addrbreakpoint = ((uint16_t) receivebuffer[3] * 256) + receivebuffer[4];
    7118:	dc 01       	movw	r26, r24
    711a:	13 96       	adiw	r26, 0x03	; 3
    711c:	7c 91       	ld	r23, X
    711e:	13 97       	sbiw	r26, 0x03	; 3
    7120:	60 e0       	ldi	r22, 0x00	; 0
    7122:	14 96       	adiw	r26, 0x04	; 4
    7124:	8c 91       	ld	r24, X
    7126:	68 0f       	add	r22, r24
    7128:	71 1d       	adc	r23, r1
    712a:	80 e0       	ldi	r24, 0x00	; 0
    712c:	90 e0       	ldi	r25, 0x00	; 0
    712e:	c7 e2       	ldi	r28, 0x27	; 39
    7130:	d9 e0       	ldi	r29, 0x09	; 9
    7132:	e0 e0       	ldi	r30, 0x00	; 0
    7134:	f0 e0       	ldi	r31, 0x00	; 0
    for (i = 0; i < LITE_MAX_THREADS; i++)
    {
        if (thread_table[i].state == STATE_BREAK)
    7136:	07 e2       	ldi	r16, 0x27	; 39
    7138:	10 e0       	ldi	r17, 0x00	; 0
    uint16_t pagecount;
    uint8_t offset;
    uint8_t i;
    uint8_t breakpointfound = 0;

    addrbreakpoint = ((uint16_t) receivebuffer[3] * 256) + receivebuffer[4];
    713a:	9e 2e       	mov	r9, r30
    for (i = 0; i < LITE_MAX_THREADS; i++)
    {
        if (thread_table[i].state == STATE_BREAK)
    713c:	e0 9f       	mul	r30, r16
    713e:	90 01       	movw	r18, r0
    7140:	e1 9f       	mul	r30, r17
    7142:	30 0d       	add	r19, r0
    7144:	f0 9f       	mul	r31, r16
    7146:	30 0d       	add	r19, r0
    7148:	11 24       	eor	r1, r1
    714a:	29 5d       	subi	r18, 0xD9	; 217
    714c:	36 4f       	sbci	r19, 0xF6	; 246
    714e:	42 e0       	ldi	r20, 0x02	; 2
    7150:	a4 2e       	mov	r10, r20
    7152:	b1 2c       	mov	r11, r1
    7154:	a2 0e       	add	r10, r18
    7156:	b3 1e       	adc	r11, r19
    7158:	d9 01       	movw	r26, r18
    715a:	12 96       	adiw	r26, 0x02	; 2
    715c:	2c 91       	ld	r18, X
    715e:	12 97       	sbiw	r26, 0x02	; 2
    7160:	28 30       	cpi	r18, 0x08	; 8
    7162:	61 f5       	brne	.+88     	; 0x71bc <reply_debugging_remove_avr_breakpoint+0xc4>
        {
            uint8_t *tempptr = (uint8_t *) thread_table[i].sp + 47;
    7164:	28 81       	ld	r18, Y
    7166:	39 81       	ldd	r19, Y+1	; 0x01
    7168:	bf e2       	ldi	r27, 0x2F	; 47
    716a:	eb 2e       	mov	r14, r27
    716c:	f1 2c       	mov	r15, r1
    716e:	e2 0e       	add	r14, r18
    7170:	f3 1e       	adc	r15, r19
            uint16_t addr =
                (((uint16_t) (*tempptr)) * 256 + *(tempptr + 1) - 3);
    7172:	a0 e3       	ldi	r26, 0x30	; 48
    7174:	ca 2e       	mov	r12, r26
    7176:	d1 2c       	mov	r13, r1
    7178:	c2 0e       	add	r12, r18
    717a:	d3 1e       	adc	r13, r19
    717c:	d9 01       	movw	r26, r18
    717e:	9f 96       	adiw	r26, 0x2f	; 47
    7180:	7c 90       	ld	r7, X
    7182:	9f 97       	sbiw	r26, 0x2f	; 47
    7184:	66 24       	eor	r6, r6
    7186:	d0 96       	adiw	r26, 0x30	; 48
    7188:	2c 91       	ld	r18, X
    718a:	d0 97       	sbiw	r26, 0x30	; 48
    718c:	a3 01       	movw	r20, r6
    718e:	42 0f       	add	r20, r18
    7190:	51 1d       	adc	r21, r1
    7192:	9a 01       	movw	r18, r20
    for (i = 0; i < LITE_MAX_THREADS; i++)
    {
        if (thread_table[i].state == STATE_BREAK)
        {
            uint8_t *tempptr = (uint8_t *) thread_table[i].sp + 47;
            uint16_t addr =
    7194:	23 50       	subi	r18, 0x03	; 3
    7196:	30 40       	sbci	r19, 0x00	; 0
                (((uint16_t) (*tempptr)) * 256 + *(tempptr + 1) - 3);
            if (addr == addrbreakpoint)
    7198:	40 e0       	ldi	r20, 0x00	; 0
    719a:	50 e0       	ldi	r21, 0x00	; 0
    719c:	26 17       	cp	r18, r22
    719e:	37 07       	cpc	r19, r23
    71a0:	48 07       	cpc	r20, r24
    71a2:	59 07       	cpc	r21, r25
    71a4:	59 f4       	brne	.+22     	; 0x71bc <reply_debugging_remove_avr_breakpoint+0xc4>
            {
                thread_table[i].state = STATE_ACTIVE;
    71a6:	22 e0       	ldi	r18, 0x02	; 2
    71a8:	d5 01       	movw	r26, r10
    71aa:	2c 93       	st	X, r18
                *tempptr = addrbreakpoint / 256;
    71ac:	f7 01       	movw	r30, r14
    71ae:	70 83       	st	Z, r23
                *(tempptr + 1) = addrbreakpoint % 256;
    71b0:	d6 01       	movw	r26, r12
    71b2:	6c 93       	st	X, r22
                break;
            }
        }
    }
    if (i < LITE_MAX_THREADS)
    71b4:	b9 2d       	mov	r27, r9
    71b6:	b3 30       	cpi	r27, 0x03	; 3
    71b8:	48 f0       	brcs	.+18     	; 0x71cc <reply_debugging_remove_avr_breakpoint+0xd4>
    71ba:	06 c0       	rjmp	.+12     	; 0x71c8 <reply_debugging_remove_avr_breakpoint+0xd0>
    71bc:	31 96       	adiw	r30, 0x01	; 1
    71be:	a7 96       	adiw	r28, 0x27	; 39
    uint8_t offset;
    uint8_t i;
    uint8_t breakpointfound = 0;

    addrbreakpoint = ((uint16_t) receivebuffer[3] * 256) + receivebuffer[4];
    for (i = 0; i < LITE_MAX_THREADS; i++)
    71c0:	e3 30       	cpi	r30, 0x03	; 3
    71c2:	f1 05       	cpc	r31, r1
    71c4:	09 f0       	breq	.+2      	; 0x71c8 <reply_debugging_remove_avr_breakpoint+0xd0>
    71c6:	b9 cf       	rjmp	.-142    	; 0x713a <reply_debugging_remove_avr_breakpoint+0x42>
{
    uint32_t addrbreakpoint;
    uint16_t pagecount;
    uint8_t offset;
    uint8_t i;
    uint8_t breakpointfound = 0;
    71c8:	80 e0       	ldi	r24, 0x00	; 0
    71ca:	11 c0       	rjmp	.+34     	; 0x71ee <reply_debugging_remove_avr_breakpoint+0xf6>
            }
        }
    }
    if (i < LITE_MAX_THREADS)
    {
        pagecount = addrbreakpoint / 128;
    71cc:	8b 01       	movw	r16, r22
    71ce:	9c 01       	movw	r18, r24
    71d0:	e7 e0       	ldi	r30, 0x07	; 7
    71d2:	36 95       	lsr	r19
    71d4:	27 95       	ror	r18
    71d6:	17 95       	ror	r17
    71d8:	07 95       	ror	r16
    71da:	ea 95       	dec	r30
    71dc:	d1 f7       	brne	.-12     	; 0x71d2 <reply_debugging_remove_avr_breakpoint+0xda>
        offset = addrbreakpoint * 2 % 256;
    71de:	66 0f       	add	r22, r22
        boot_removeBreakPoint(pagecount, offset, &receivebuffer[5]);
    71e0:	a2 01       	movw	r20, r4
    71e2:	4b 5f       	subi	r20, 0xFB	; 251
    71e4:	5f 4f       	sbci	r21, 0xFF	; 255
    71e6:	c8 01       	movw	r24, r16
    71e8:	0e 94 72 f0 	call	0x1e0e4	; 0x1e0e4 <boot_removeBreakPoint>
        breakpointfound = 1;
    71ec:	81 e0       	ldi	r24, 0x01	; 1
    }
    reply[0] = 5;
    71ee:	95 e0       	ldi	r25, 0x05	; 5
    71f0:	90 93 c9 0b 	sts	0x0BC9, r25
    reply[1] = 93;
    71f4:	9d e5       	ldi	r25, 0x5D	; 93
    71f6:	90 93 ca 0b 	sts	0x0BCA, r25
    reply[2] = nodeid;
    71fa:	90 91 33 0c 	lds	r25, 0x0C33
    71fe:	90 93 cb 0b 	sts	0x0BCB, r25
    reply[3] = breakpointfound;
    7202:	80 93 cc 0b 	sts	0x0BCC, r24
    StandardSocketSend(0xefef, 0xffff, 32, reply);
    7206:	8f ee       	ldi	r24, 0xEF	; 239
    7208:	9f ee       	ldi	r25, 0xEF	; 239
    720a:	6f ef       	ldi	r22, 0xFF	; 255
    720c:	7f ef       	ldi	r23, 0xFF	; 255
    720e:	40 e2       	ldi	r20, 0x20	; 32
    7210:	29 ec       	ldi	r18, 0xC9	; 201
    7212:	3b e0       	ldi	r19, 0x0B	; 11
    7214:	0e 94 5d 02 	call	0x4ba	; 0x4ba <StandardSocketSend>
}
    7218:	df 91       	pop	r29
    721a:	cf 91       	pop	r28
    721c:	1f 91       	pop	r17
    721e:	0f 91       	pop	r16
    7220:	ff 90       	pop	r15
    7222:	ef 90       	pop	r14
    7224:	df 90       	pop	r13
    7226:	cf 90       	pop	r12
    7228:	bf 90       	pop	r11
    722a:	af 90       	pop	r10
    722c:	9f 90       	pop	r9
    722e:	7f 90       	pop	r7
    7230:	6f 90       	pop	r6
    7232:	5f 90       	pop	r5
    7234:	4f 90       	pop	r4
    7236:	08 95       	ret

00007238 <reply_thread_state_snapshot_tofile>:
//this should copy the thread information into a file 
//The packet should contain the information regarding the user 
//THe packet should contain the index of the thread and the file name that will be written as the new file 
//the file name part requires careful debugging of the file system 
void reply_thread_state_snapshot_tofile(uint8_t * receivebuffer)
{
    7238:	8f 92       	push	r8
    723a:	9f 92       	push	r9
    723c:	af 92       	push	r10
    723e:	bf 92       	push	r11
    7240:	df 92       	push	r13
    7242:	ef 92       	push	r14
    7244:	ff 92       	push	r15
    7246:	0f 93       	push	r16
    7248:	1f 93       	push	r17
    724a:	cf 93       	push	r28
    724c:	df 93       	push	r29
    724e:	ec 01       	movw	r28, r24
    uint8_t i;
    uint8_t testtrue = 0;

    receivebuffer[receivebuffer[0]] = '\0';
    7250:	88 81       	ld	r24, Y
    7252:	fe 01       	movw	r30, r28
    7254:	e8 0f       	add	r30, r24
    7256:	f1 1d       	adc	r31, r1
    7258:	10 82       	st	Z, r1
    725a:	ee 24       	eor	r14, r14
    725c:	ff 24       	eor	r15, r15
    for (i = 0; i < LITE_MAX_THREADS; i++)
    {
        if (thread_table[i].state != STATE_NULL)
    725e:	67 e2       	ldi	r22, 0x27	; 39
    7260:	a6 2e       	mov	r10, r22
    7262:	b1 2c       	mov	r11, r1
        {
            if (superstring
                ((char *)thread_table[i].threadName,
    7264:	55 e0       	ldi	r21, 0x05	; 5
    7266:	85 2e       	mov	r8, r21
    7268:	91 2c       	mov	r9, r1
    726a:	8c 0e       	add	r8, r28
    726c:	9d 1e       	adc	r9, r29
    uint8_t testtrue = 0;

    receivebuffer[receivebuffer[0]] = '\0';
    for (i = 0; i < LITE_MAX_THREADS; i++)
    {
        if (thread_table[i].state != STATE_NULL)
    726e:	ea 9c       	mul	r14, r10
    7270:	c0 01       	movw	r24, r0
    7272:	eb 9c       	mul	r14, r11
    7274:	90 0d       	add	r25, r0
    7276:	fa 9c       	mul	r15, r10
    7278:	90 0d       	add	r25, r0
    727a:	11 24       	eor	r1, r1
    727c:	8c 01       	movw	r16, r24
    727e:	09 5d       	subi	r16, 0xD9	; 217
    7280:	16 4f       	sbci	r17, 0xF6	; 246
    7282:	f8 01       	movw	r30, r16
    7284:	22 81       	ldd	r18, Z+2	; 0x02
    7286:	22 23       	and	r18, r18
    7288:	39 f0       	breq	.+14     	; 0x7298 <reply_thread_state_snapshot_tofile+0x60>
        {
            if (superstring
                ((char *)thread_table[i].threadName,
    728a:	84 5d       	subi	r24, 0xD4	; 212
    728c:	96 4f       	sbci	r25, 0xF6	; 246
    728e:	b4 01       	movw	r22, r8
    7290:	0e 94 a7 36 	call	0x6d4e	; 0x6d4e <superstring>
    receivebuffer[receivebuffer[0]] = '\0';
    for (i = 0; i < LITE_MAX_THREADS; i++)
    {
        if (thread_table[i].state != STATE_NULL)
        {
            if (superstring
    7294:	00 97       	sbiw	r24, 0x00	; 0
    7296:	41 f0       	breq	.+16     	; 0x72a8 <reply_thread_state_snapshot_tofile+0x70>
    7298:	08 94       	sec
    729a:	e1 1c       	adc	r14, r1
    729c:	f1 1c       	adc	r15, r1
{
    uint8_t i;
    uint8_t testtrue = 0;

    receivebuffer[receivebuffer[0]] = '\0';
    for (i = 0; i < LITE_MAX_THREADS; i++)
    729e:	f3 e0       	ldi	r31, 0x03	; 3
    72a0:	ef 16       	cp	r14, r31
    72a2:	f1 04       	cpc	r15, r1
    72a4:	21 f7       	brne	.-56     	; 0x726e <reply_thread_state_snapshot_tofile+0x36>
    72a6:	39 c0       	rjmp	.+114    	; 0x731a <reply_thread_state_snapshot_tofile+0xe2>
                testtrue = i;
                break;
            }
        }
    }
    if (testtrue != 0)
    72a8:	ee 20       	and	r14, r14
    72aa:	b9 f1       	breq	.+110    	; 0x731a <reply_thread_state_snapshot_tofile+0xe2>
    {
        receivebuffer[receivebuffer[3] + 5] = '/';
    72ac:	8b 81       	ldd	r24, Y+3	; 0x03
    72ae:	fe 01       	movw	r30, r28
    72b0:	e8 0f       	add	r30, r24
    72b2:	f1 1d       	adc	r31, r1
    72b4:	8f e2       	ldi	r24, 0x2F	; 47
    72b6:	85 83       	std	Z+5, r24	; 0x05
    uint16_t threadramsize;
    uint8_t *internal_ram_start;
    threadsize = sizeof(struct thread);
    threadramsize =
        (uint16_t) ((uint8_t *) thread_table[index].ramend -
                    (uint8_t *) thread_table[index].ramstart + 1);
    72b8:	f8 01       	movw	r30, r16
    72ba:	a1 88       	ldd	r10, Z+17	; 0x11
    72bc:	b2 88       	ldd	r11, Z+18	; 0x12
    uint8_t threadsize;
    uint16_t threadramsize;
    uint8_t *internal_ram_start;
    threadsize = sizeof(struct thread);
    threadramsize =
        (uint16_t) ((uint8_t *) thread_table[index].ramend -
    72be:	03 89       	ldd	r16, Z+19	; 0x13
    72c0:	14 89       	ldd	r17, Z+20	; 0x14
    72c2:	0f 5f       	subi	r16, 0xFF	; 255
    72c4:	1f 4f       	sbci	r17, 0xFF	; 255
                    (uint8_t *) thread_table[index].ramstart + 1);
    72c6:	0a 19       	sub	r16, r10
    72c8:	1b 09       	sbc	r17, r11
    }
    if (testtrue != 0)
    {
        receivebuffer[receivebuffer[3] + 5] = '/';
        thread_state_snapshot(testtrue,
                              (uint8_t *) & receivebuffer[receivebuffer[3] +
    72ca:	8b 81       	ldd	r24, Y+3	; 0x03
    72cc:	90 e0       	ldi	r25, 0x00	; 0
    72ce:	05 96       	adiw	r24, 0x05	; 5
    threadsize = sizeof(struct thread);
    threadramsize =
        (uint16_t) ((uint8_t *) thread_table[index].ramend -
                    (uint8_t *) thread_table[index].ramstart + 1);
    internal_ram_start = (uint8_t *) thread_table[index].ramstart;
    fp = fsopen((char *)filename, "w");
    72d0:	8c 0f       	add	r24, r28
    72d2:	9d 1f       	adc	r25, r29
    72d4:	6e e4       	ldi	r22, 0x4E	; 78
    72d6:	71 e0       	ldi	r23, 0x01	; 1
    72d8:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <fsopen>
    72dc:	ec 01       	movw	r28, r24
    fwrite2(fp, &thread_table[index], threadsize);
    72de:	67 e2       	ldi	r22, 0x27	; 39
    72e0:	fe 2d       	mov	r31, r14
    72e2:	f6 9f       	mul	r31, r22
    72e4:	b0 01       	movw	r22, r0
    72e6:	11 24       	eor	r1, r1
    72e8:	69 5d       	subi	r22, 0xD9	; 217
    72ea:	76 4f       	sbci	r23, 0xF6	; 246
    72ec:	47 e2       	ldi	r20, 0x27	; 39
    72ee:	50 e0       	ldi	r21, 0x00	; 0
    72f0:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <fwrite2>
    fseek2(fp, threadsize, 1);
    72f4:	ce 01       	movw	r24, r28
    72f6:	47 e2       	ldi	r20, 0x27	; 39
    72f8:	50 e0       	ldi	r21, 0x00	; 0
    72fa:	60 e0       	ldi	r22, 0x00	; 0
    72fc:	70 e0       	ldi	r23, 0x00	; 0
    72fe:	21 e0       	ldi	r18, 0x01	; 1
    7300:	30 e0       	ldi	r19, 0x00	; 0
    7302:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <fseek2>
    fwrite2(fp, internal_ram_start, threadramsize);
    7306:	ce 01       	movw	r24, r28
    7308:	b5 01       	movw	r22, r10
    730a:	a8 01       	movw	r20, r16
    730c:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <fwrite2>
    fclose2(fp);
    7310:	ce 01       	movw	r24, r28
    7312:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <fclose2>
    7316:	8e 2d       	mov	r24, r14
    7318:	01 c0       	rjmp	.+2      	; 0x731c <reply_thread_state_snapshot_tofile+0xe4>
                testtrue = i;
                break;
            }
        }
    }
    if (testtrue != 0)
    731a:	80 e0       	ldi	r24, 0x00	; 0
        receivebuffer[receivebuffer[3] + 5] = '/';
        thread_state_snapshot(testtrue,
                              (uint8_t *) & receivebuffer[receivebuffer[3] +
                                                          5]);
    }
    reply[0] = 4;
    731c:	94 e0       	ldi	r25, 0x04	; 4
    731e:	90 93 c9 0b 	sts	0x0BC9, r25
    reply[1] = 94;
    7322:	9e e5       	ldi	r25, 0x5E	; 94
    7324:	90 93 ca 0b 	sts	0x0BCA, r25
    reply[2] = nodeid;
    7328:	90 91 33 0c 	lds	r25, 0x0C33
    732c:	90 93 cb 0b 	sts	0x0BCB, r25
    reply[3] = testtrue;
    7330:	80 93 cc 0b 	sts	0x0BCC, r24
    StandardSocketSend(0xefef, 0xffff, 32, reply);
    7334:	8f ee       	ldi	r24, 0xEF	; 239
    7336:	9f ee       	ldi	r25, 0xEF	; 239
    7338:	6f ef       	ldi	r22, 0xFF	; 255
    733a:	7f ef       	ldi	r23, 0xFF	; 255
    733c:	40 e2       	ldi	r20, 0x20	; 32
    733e:	29 ec       	ldi	r18, 0xC9	; 201
    7340:	3b e0       	ldi	r19, 0x0B	; 11
    7342:	0e 94 5d 02 	call	0x4ba	; 0x4ba <StandardSocketSend>
}
    7346:	df 91       	pop	r29
    7348:	cf 91       	pop	r28
    734a:	1f 91       	pop	r17
    734c:	0f 91       	pop	r16
    734e:	ff 90       	pop	r15
    7350:	ef 90       	pop	r14
    7352:	df 90       	pop	r13
    7354:	bf 90       	pop	r11
    7356:	af 90       	pop	r10
    7358:	9f 90       	pop	r9
    735a:	8f 90       	pop	r8
    735c:	08 95       	ret

0000735e <reply_thread_state_restore_fromfile>:

//this should copy the thread information from the file to the thread
//the packet should ocntain the file name as well as the index of the thread to be restored
//note that it will check the file size to ensure that is sufficient information for the thread to be restored
void reply_thread_state_restore_fromfile(uint8_t * receivebuffer)
{
    735e:	cf 92       	push	r12
    7360:	df 92       	push	r13
    7362:	ef 92       	push	r14
    7364:	ff 92       	push	r15
    7366:	0f 93       	push	r16
    7368:	1f 93       	push	r17
    736a:	cf 93       	push	r28
    736c:	df 93       	push	r29
    736e:	ec 01       	movw	r28, r24
    uint8_t i;
    uint8_t testtrue = 0;

    receivebuffer[receivebuffer[0]] = '\0';
    7370:	88 81       	ld	r24, Y
    7372:	fe 01       	movw	r30, r28
    7374:	e8 0f       	add	r30, r24
    7376:	f1 1d       	adc	r31, r1
    7378:	10 82       	st	Z, r1
    737a:	00 e0       	ldi	r16, 0x00	; 0
    737c:	10 e0       	ldi	r17, 0x00	; 0
    for (i = 0; i < LITE_MAX_THREADS; i++)
    {
        if (thread_table[i].state != STATE_NULL)
    737e:	e7 e2       	ldi	r30, 0x27	; 39
    7380:	ce 2e       	mov	r12, r30
    7382:	d1 2c       	mov	r13, r1
        {
            if (superstring
                ((char *)thread_table[i].threadName,
    7384:	75 e0       	ldi	r23, 0x05	; 5
    7386:	e7 2e       	mov	r14, r23
    7388:	f1 2c       	mov	r15, r1
    738a:	ec 0e       	add	r14, r28
    738c:	fd 1e       	adc	r15, r29
    uint8_t testtrue = 0;

    receivebuffer[receivebuffer[0]] = '\0';
    for (i = 0; i < LITE_MAX_THREADS; i++)
    {
        if (thread_table[i].state != STATE_NULL)
    738e:	0c 9d       	mul	r16, r12
    7390:	c0 01       	movw	r24, r0
    7392:	0d 9d       	mul	r16, r13
    7394:	90 0d       	add	r25, r0
    7396:	1c 9d       	mul	r17, r12
    7398:	90 0d       	add	r25, r0
    739a:	11 24       	eor	r1, r1
    739c:	fc 01       	movw	r30, r24
    739e:	e9 5d       	subi	r30, 0xD9	; 217
    73a0:	f6 4f       	sbci	r31, 0xF6	; 246
    73a2:	22 81       	ldd	r18, Z+2	; 0x02
    73a4:	22 23       	and	r18, r18
    73a6:	39 f0       	breq	.+14     	; 0x73b6 <reply_thread_state_restore_fromfile+0x58>
        {
            if (superstring
                ((char *)thread_table[i].threadName,
    73a8:	84 5d       	subi	r24, 0xD4	; 212
    73aa:	96 4f       	sbci	r25, 0xF6	; 246
    73ac:	b7 01       	movw	r22, r14
    73ae:	0e 94 a7 36 	call	0x6d4e	; 0x6d4e <superstring>
    receivebuffer[receivebuffer[0]] = '\0';
    for (i = 0; i < LITE_MAX_THREADS; i++)
    {
        if (thread_table[i].state != STATE_NULL)
        {
            if (superstring
    73b2:	00 97       	sbiw	r24, 0x00	; 0
    73b4:	39 f0       	breq	.+14     	; 0x73c4 <reply_thread_state_restore_fromfile+0x66>
    73b6:	0f 5f       	subi	r16, 0xFF	; 255
    73b8:	1f 4f       	sbci	r17, 0xFF	; 255
{
    uint8_t i;
    uint8_t testtrue = 0;

    receivebuffer[receivebuffer[0]] = '\0';
    for (i = 0; i < LITE_MAX_THREADS; i++)
    73ba:	03 30       	cpi	r16, 0x03	; 3
    73bc:	11 05       	cpc	r17, r1
    73be:	39 f7       	brne	.-50     	; 0x738e <reply_thread_state_restore_fromfile+0x30>
//the packet should ocntain the file name as well as the index of the thread to be restored
//note that it will check the file size to ensure that is sufficient information for the thread to be restored
void reply_thread_state_restore_fromfile(uint8_t * receivebuffer)
{
    uint8_t i;
    uint8_t testtrue = 0;
    73c0:	ff 24       	eor	r15, r15
    73c2:	01 c0       	rjmp	.+2      	; 0x73c6 <reply_thread_state_restore_fromfile+0x68>
    receivebuffer[receivebuffer[0]] = '\0';
    for (i = 0; i < LITE_MAX_THREADS; i++)
    {
        if (thread_table[i].state != STATE_NULL)
        {
            if (superstring
    73c4:	f0 2e       	mov	r15, r16
                break;
            }
        }
    }
    i = receivebuffer[3];
    receivebuffer[5 + i] = '/';
    73c6:	8b 81       	ldd	r24, Y+3	; 0x03
    73c8:	90 e0       	ldi	r25, 0x00	; 0
    73ca:	05 96       	adiw	r24, 0x05	; 5
    73cc:	8c 0f       	add	r24, r28
    73ce:	9d 1f       	adc	r25, r29
    73d0:	2f e2       	ldi	r18, 0x2F	; 47
    73d2:	fc 01       	movw	r30, r24
    73d4:	20 83       	st	Z, r18
    if (testtrue != 0)
    73d6:	ff 20       	and	r15, r15
    73d8:	a9 f1       	breq	.+106    	; 0x7444 <reply_thread_state_restore_fromfile+0xe6>
    uint8_t threadsize;
    uint16_t threadramsize;
    uint8_t *internal_ram_start;
    threadsize = sizeof(struct thread);
    threadramsize =
        (uint16_t) ((uint8_t *) thread_table[index].ramend -
    73da:	4f 2d       	mov	r20, r15
    73dc:	50 e0       	ldi	r21, 0x00	; 0
                    (uint8_t *) thread_table[index].ramstart + 1);
    73de:	27 e2       	ldi	r18, 0x27	; 39
    73e0:	30 e0       	ldi	r19, 0x00	; 0
    73e2:	42 9f       	mul	r20, r18
    73e4:	f0 01       	movw	r30, r0
    73e6:	43 9f       	mul	r20, r19
    73e8:	f0 0d       	add	r31, r0
    73ea:	52 9f       	mul	r21, r18
    73ec:	f0 0d       	add	r31, r0
    73ee:	11 24       	eor	r1, r1
    73f0:	e9 5d       	subi	r30, 0xD9	; 217
    73f2:	f6 4f       	sbci	r31, 0xF6	; 246
    73f4:	c1 88       	ldd	r12, Z+17	; 0x11
    73f6:	d2 88       	ldd	r13, Z+18	; 0x12
    uint8_t threadsize;
    uint16_t threadramsize;
    uint8_t *internal_ram_start;
    threadsize = sizeof(struct thread);
    threadramsize =
        (uint16_t) ((uint8_t *) thread_table[index].ramend -
    73f8:	c3 89       	ldd	r28, Z+19	; 0x13
    73fa:	d4 89       	ldd	r29, Z+20	; 0x14
    73fc:	21 96       	adiw	r28, 0x01	; 1
                    (uint8_t *) thread_table[index].ramstart + 1);
    73fe:	cc 19       	sub	r28, r12
    7400:	dd 09       	sbc	r29, r13
    internal_ram_start = (uint8_t *) thread_table[index].ramstart;
    fp = fsopen((char *)filename, "r");
    7402:	60 e5       	ldi	r22, 0x50	; 80
    7404:	71 e0       	ldi	r23, 0x01	; 1
    7406:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <fsopen>
    740a:	8c 01       	movw	r16, r24
    fread2(fp, &thread_table[index], threadsize);
    740c:	67 e2       	ldi	r22, 0x27	; 39
    740e:	ff 2d       	mov	r31, r15
    7410:	f6 9f       	mul	r31, r22
    7412:	b0 01       	movw	r22, r0
    7414:	11 24       	eor	r1, r1
    7416:	69 5d       	subi	r22, 0xD9	; 217
    7418:	76 4f       	sbci	r23, 0xF6	; 246
    741a:	47 e2       	ldi	r20, 0x27	; 39
    741c:	50 e0       	ldi	r21, 0x00	; 0
    741e:	0e 94 25 1e 	call	0x3c4a	; 0x3c4a <fread2>
    fseek2(fp, threadsize, 1);
    7422:	c8 01       	movw	r24, r16
    7424:	47 e2       	ldi	r20, 0x27	; 39
    7426:	50 e0       	ldi	r21, 0x00	; 0
    7428:	60 e0       	ldi	r22, 0x00	; 0
    742a:	70 e0       	ldi	r23, 0x00	; 0
    742c:	21 e0       	ldi	r18, 0x01	; 1
    742e:	30 e0       	ldi	r19, 0x00	; 0
    7430:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <fseek2>
    fread2(fp, internal_ram_start, threadramsize);
    7434:	c8 01       	movw	r24, r16
    7436:	b6 01       	movw	r22, r12
    7438:	ae 01       	movw	r20, r28
    743a:	0e 94 25 1e 	call	0x3c4a	; 0x3c4a <fread2>
    fclose2(fp);
    743e:	c8 01       	movw	r24, r16
    7440:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <fclose2>
    receivebuffer[5 + i] = '/';
    if (testtrue != 0)
    {
        thread_state_restore(testtrue, (uint8_t *) & receivebuffer[5 + i]);
    }
    reply[0] = 4;
    7444:	84 e0       	ldi	r24, 0x04	; 4
    7446:	80 93 c9 0b 	sts	0x0BC9, r24
    reply[1] = 95;
    744a:	8f e5       	ldi	r24, 0x5F	; 95
    744c:	80 93 ca 0b 	sts	0x0BCA, r24
    reply[2] = nodeid;
    7450:	80 91 33 0c 	lds	r24, 0x0C33
    7454:	80 93 cb 0b 	sts	0x0BCB, r24
    reply[3] = testtrue;
    7458:	f0 92 cc 0b 	sts	0x0BCC, r15
    StandardSocketSend(0xefef, 0xffff, 32, reply);
    745c:	8f ee       	ldi	r24, 0xEF	; 239
    745e:	9f ee       	ldi	r25, 0xEF	; 239
    7460:	6f ef       	ldi	r22, 0xFF	; 255
    7462:	7f ef       	ldi	r23, 0xFF	; 255
    7464:	40 e2       	ldi	r20, 0x20	; 32
    7466:	29 ec       	ldi	r18, 0xC9	; 201
    7468:	3b e0       	ldi	r19, 0x0B	; 11
    746a:	0e 94 5d 02 	call	0x4ba	; 0x4ba <StandardSocketSend>
}
    746e:	df 91       	pop	r29
    7470:	cf 91       	pop	r28
    7472:	1f 91       	pop	r17
    7474:	0f 91       	pop	r16
    7476:	ff 90       	pop	r15
    7478:	ef 90       	pop	r14
    747a:	df 90       	pop	r13
    747c:	cf 90       	pop	r12
    747e:	08 95       	ret

00007480 <reply_ls_networkname>:

//-------------------------------------------------------------------------
void reply_ls_networkname()
{
    7480:	0f 93       	push	r16
    7482:	1f 93       	push	r17
    7484:	cf 93       	push	r28
    7486:	df 93       	push	r29
    //   uint16_t temp2; 
    uint8_t temp = mystrlen(networkid);
    7488:	03 ec       	ldi	r16, 0xC3	; 195
    748a:	17 e0       	ldi	r17, 0x07	; 7
    748c:	c8 01       	movw	r24, r16
    748e:	0e 94 d4 36 	call	0x6da8	; 0x6da8 <mystrlen>
    7492:	48 2f       	mov	r20, r24
    uint16_t randomsleep;

    reply[0] = temp + 3;
    7494:	c9 ec       	ldi	r28, 0xC9	; 201
    7496:	db e0       	ldi	r29, 0x0B	; 11
    7498:	8d 5f       	subi	r24, 0xFD	; 253
    749a:	80 93 c9 0b 	sts	0x0BC9, r24
    reply[1] = 101;
    749e:	85 e6       	ldi	r24, 0x65	; 101
    74a0:	80 93 ca 0b 	sts	0x0BCA, r24
    //   foobar(); 
    reply[2] = nodeid;
    74a4:	80 91 33 0c 	lds	r24, 0x0C33
    74a8:	80 93 cb 0b 	sts	0x0BCB, r24
    mystrncpy((char *)&reply[3], networkid, temp);
    74ac:	ce 01       	movw	r24, r28
    74ae:	03 96       	adiw	r24, 0x03	; 3
    74b0:	b8 01       	movw	r22, r16
    74b2:	0e 94 44 36 	call	0x6c88	; 0x6c88 <mystrncpy>
    randomsleep = getRandomNumber() % 400;
    74b6:	0e 94 36 37 	call	0x6e6c	; 0x6e6c <getRandomNumber>
    74ba:	60 e9       	ldi	r22, 0x90	; 144
    74bc:	71 e0       	ldi	r23, 0x01	; 1
    74be:	0e 94 d7 48 	call	0x91ae	; 0x91ae <__udivmodhi4>
    sleepThread(randomsleep);
    74c2:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <sleepThread>
    // for (temp2=0;temp2<9000;temp2++)
    // {
    StandardSocketSend(0xefef, 0xffff, 32, reply);
    74c6:	8f ee       	ldi	r24, 0xEF	; 239
    74c8:	9f ee       	ldi	r25, 0xEF	; 239
    74ca:	6f ef       	ldi	r22, 0xFF	; 255
    74cc:	7f ef       	ldi	r23, 0xFF	; 255
    74ce:	40 e2       	ldi	r20, 0x20	; 32
    74d0:	9e 01       	movw	r18, r28
    74d2:	0e 94 5d 02 	call	0x4ba	; 0x4ba <StandardSocketSend>
    // sleepThread(20);
    // }
    //   printStringN(reply,32); 
    //printString("hello,reply2!\n\0");
}
    74d6:	df 91       	pop	r29
    74d8:	cf 91       	pop	r28
    74da:	1f 91       	pop	r17
    74dc:	0f 91       	pop	r16
    74de:	08 95       	ret

000074e0 <reply_ls_nodename>:

//-------------------------------------------------------------------------
void reply_ls_nodename(uint8_t * receivebuffer)
{
    74e0:	0f 93       	push	r16
    uint8_t temp = receivebuffer[0] - 3;
    74e2:	fc 01       	movw	r30, r24
    74e4:	00 81       	ld	r16, Z
    74e6:	03 50       	subi	r16, 0x03	; 3
    uint16_t randomsleep;

    if (mystrncmp((char *)receivebuffer, 3, (char *)networkid, 0, temp) == 0)
    74e8:	63 e0       	ldi	r22, 0x03	; 3
    74ea:	43 ec       	ldi	r20, 0xC3	; 195
    74ec:	57 e0       	ldi	r21, 0x07	; 7
    74ee:	20 e0       	ldi	r18, 0x00	; 0
    74f0:	0e 94 bc 36 	call	0x6d78	; 0x6d78 <mystrncmp>
    74f4:	00 97       	sbiw	r24, 0x00	; 0
    74f6:	31 f5       	brne	.+76     	; 0x7544 <reply_ls_nodename+0x64>
    {
        temp = mystrlen(filenameid);
    74f8:	80 eb       	ldi	r24, 0xB0	; 176
    74fa:	97 e0       	ldi	r25, 0x07	; 7
    74fc:	0e 94 d4 36 	call	0x6da8	; 0x6da8 <mystrlen>
    7500:	48 2f       	mov	r20, r24
        reply[0] = temp + 3;
    7502:	8d 5f       	subi	r24, 0xFD	; 253
    7504:	80 93 c9 0b 	sts	0x0BC9, r24
        reply[1] = 102;
    7508:	86 e6       	ldi	r24, 0x66	; 102
    750a:	80 93 ca 0b 	sts	0x0BCA, r24
        reply[2] = nodeid;
    750e:	80 91 33 0c 	lds	r24, 0x0C33
    7512:	80 93 cb 0b 	sts	0x0BCB, r24
        mystrncpy((char *)&reply[3], filenameid, temp);
    7516:	8c ec       	ldi	r24, 0xCC	; 204
    7518:	9b e0       	ldi	r25, 0x0B	; 11
    751a:	60 eb       	ldi	r22, 0xB0	; 176
    751c:	77 e0       	ldi	r23, 0x07	; 7
    751e:	0e 94 44 36 	call	0x6c88	; 0x6c88 <mystrncpy>
        randomsleep = getRandomNumber() % 400;
    7522:	0e 94 36 37 	call	0x6e6c	; 0x6e6c <getRandomNumber>
    7526:	60 e9       	ldi	r22, 0x90	; 144
    7528:	71 e0       	ldi	r23, 0x01	; 1
    752a:	0e 94 d7 48 	call	0x91ae	; 0x91ae <__udivmodhi4>
        sleepThread(randomsleep);
    752e:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <sleepThread>
        StandardSocketSend(0xefef, 0xffff, 32, reply);
    7532:	8f ee       	ldi	r24, 0xEF	; 239
    7534:	9f ee       	ldi	r25, 0xEF	; 239
    7536:	6f ef       	ldi	r22, 0xFF	; 255
    7538:	7f ef       	ldi	r23, 0xFF	; 255
    753a:	40 e2       	ldi	r20, 0x20	; 32
    753c:	29 ec       	ldi	r18, 0xC9	; 201
    753e:	3b e0       	ldi	r19, 0x0B	; 11
    7540:	0e 94 5d 02 	call	0x4ba	; 0x4ba <StandardSocketSend>
        //printStringN(reply,32); 
    }
}
    7544:	0f 91       	pop	r16
    7546:	08 95       	ret

00007548 <reply_ls_short>:
//Get the block information of sub directory and files using simplfied version 
void reply_ls_short(uint8_t block)
{
    //Actually this is not used because to ensure that the system is simple, we only use the long version 
    return;
}
    7548:	08 95       	ret

0000754a <reply_ls_long>:

//Get the block information of sub directory and files using long version 
void reply_ls_long(uint8_t block)
{
    754a:	ef 92       	push	r14
    754c:	ff 92       	push	r15
    754e:	0f 93       	push	r16
    7550:	1f 93       	push	r17
    7552:	cf 93       	push	r28
    7554:	df 93       	push	r29
    7556:	08 2f       	mov	r16, r24
    uint8_t blockindex;
    uint8_t childblock;
    uint8_t seq = 0;

    if (openedfile != NULL)
    7558:	20 91 93 0b 	lds	r18, 0x0B93
    755c:	30 91 94 0b 	lds	r19, 0x0B94
    7560:	21 15       	cp	r18, r1
    7562:	31 05       	cpc	r19, r1
    7564:	21 f0       	breq	.+8      	; 0x756e <reply_ls_long+0x24>
    {
        //fclose2( openedfile );
        openedfile = NULL;
    7566:	10 92 94 0b 	sts	0x0B94, r1
    756a:	10 92 93 0b 	sts	0x0B93, r1
    return;
}

//Get the block information of sub directory and files using long version 
void reply_ls_long(uint8_t block)
{
    756e:	ce e0       	ldi	r28, 0x0E	; 14
    7570:	d0 e0       	ldi	r29, 0x00	; 0
    7572:	10 e0       	ldi	r17, 0x00	; 0
        childblock = fsread8uint(block, DIR_ADDRSUBOFFSET + blockindex);
        if (childblock == 0)
        {
            continue;
        }
        reply[0] = 32;
    7574:	a0 e2       	ldi	r26, 0x20	; 32
    7576:	ea 2e       	mov	r14, r26
        reply[1] = 104;
    7578:	f8 e6       	ldi	r31, 0x68	; 104
    757a:	ff 2e       	mov	r15, r31
        //fclose2( openedfile );
        openedfile = NULL;
    }
    for (blockindex = 0; blockindex < 10; blockindex++)
    {
        childblock = fsread8uint(block, DIR_ADDRSUBOFFSET + blockindex);
    757c:	80 2f       	mov	r24, r16
    757e:	90 e0       	ldi	r25, 0x00	; 0
    7580:	be 01       	movw	r22, r28
    7582:	0e 94 89 22 	call	0x4512	; 0x4512 <fsread8uint>
    7586:	68 2f       	mov	r22, r24
        if (childblock == 0)
    7588:	88 23       	and	r24, r24
    758a:	f9 f0       	breq	.+62     	; 0x75ca <reply_ls_long+0x80>
        {
            continue;
        }
        reply[0] = 32;
    758c:	e0 92 c9 0b 	sts	0x0BC9, r14
        reply[1] = 104;
    7590:	f0 92 ca 0b 	sts	0x0BCA, r15
        reply[2] = nodeid;
    7594:	80 91 33 0c 	lds	r24, 0x0C33
    7598:	80 93 cb 0b 	sts	0x0BCB, r24
        reply[3] = childblock;
    759c:	60 93 cc 0b 	sts	0x0BCC, r22
        reply[4] = seq;
    75a0:	10 93 cd 0b 	sts	0x0BCD, r17
        seq++;
    75a4:	1f 5f       	subi	r17, 0xFF	; 255
        finfonode((char *)&reply[5], (int)childblock);
    75a6:	8e ec       	ldi	r24, 0xCE	; 206
    75a8:	9b e0       	ldi	r25, 0x0B	; 11
    75aa:	70 e0       	ldi	r23, 0x00	; 0
    75ac:	0e 94 ba 21 	call	0x4374	; 0x4374 <finfonode>
	    sleepThread(20);
    75b0:	84 e1       	ldi	r24, 0x14	; 20
    75b2:	90 e0       	ldi	r25, 0x00	; 0
    75b4:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <sleepThread>
	
        StandardSocketSend(0xefef, 0xffff, 32, reply);
    75b8:	8f ee       	ldi	r24, 0xEF	; 239
    75ba:	9f ee       	ldi	r25, 0xEF	; 239
    75bc:	6f ef       	ldi	r22, 0xFF	; 255
    75be:	7f ef       	ldi	r23, 0xFF	; 255
    75c0:	40 e2       	ldi	r20, 0x20	; 32
    75c2:	29 ec       	ldi	r18, 0xC9	; 201
    75c4:	3b e0       	ldi	r19, 0x0B	; 11
    75c6:	0e 94 5d 02 	call	0x4ba	; 0x4ba <StandardSocketSend>
    75ca:	21 96       	adiw	r28, 0x01	; 1
    if (openedfile != NULL)
    {
        //fclose2( openedfile );
        openedfile = NULL;
    }
    for (blockindex = 0; blockindex < 10; blockindex++)
    75cc:	c8 31       	cpi	r28, 0x18	; 24
    75ce:	d1 05       	cpc	r29, r1
    75d0:	a9 f6       	brne	.-86     	; 0x757c <reply_ls_long+0x32>
	    sleepThread(20);
	
        StandardSocketSend(0xefef, 0xffff, 32, reply);
        //     printStringN(reply,32); 
    }
}
    75d2:	df 91       	pop	r29
    75d4:	cf 91       	pop	r28
    75d6:	1f 91       	pop	r17
    75d8:	0f 91       	pop	r16
    75da:	ff 90       	pop	r15
    75dc:	ef 90       	pop	r14
    75de:	08 95       	ret

000075e0 <reply_mkdir>:

//-------------------------------------------------------------------------
void reply_mkdir(uint8_t * receivebuffer)
{
    75e0:	df 92       	push	r13
    75e2:	ef 92       	push	r14
    75e4:	ff 92       	push	r15
    75e6:	0f 93       	push	r16
    75e8:	1f 93       	push	r17
    75ea:	df 93       	push	r29
    75ec:	cf 93       	push	r28
    75ee:	cd b7       	in	r28, 0x3d	; 61
    75f0:	de b7       	in	r29, 0x3e	; 62
    75f2:	2d 97       	sbiw	r28, 0x0d	; 13
    75f4:	0f b6       	in	r0, 0x3f	; 63
    75f6:	f8 94       	cli
    75f8:	de bf       	out	0x3e, r29	; 62
    75fa:	0f be       	out	0x3f, r0	; 63
    75fc:	cd bf       	out	0x3d, r28	; 61
    75fe:	8c 01       	movw	r16, r24
    uint8_t blockid;
    char dirname[13];
    uint8_t newblockid;

    blockid = receivebuffer[3];
    7600:	fc 01       	movw	r30, r24
    7602:	d3 80       	ldd	r13, Z+3	; 0x03
    mystrncpy(dirname, (char *)&receivebuffer[4], receivebuffer[0] - 4);
    7604:	9c 01       	movw	r18, r24
    7606:	2c 5f       	subi	r18, 0xFC	; 252
    7608:	3f 4f       	sbci	r19, 0xFF	; 255
    760a:	40 81       	ld	r20, Z
    760c:	44 50       	subi	r20, 0x04	; 4
    760e:	7e 01       	movw	r14, r28
    7610:	08 94       	sec
    7612:	e1 1c       	adc	r14, r1
    7614:	f1 1c       	adc	r15, r1
    7616:	c7 01       	movw	r24, r14
    7618:	b9 01       	movw	r22, r18
    761a:	0e 94 44 36 	call	0x6c88	; 0x6c88 <mystrncpy>
    dirname[receivebuffer[0] - 4] = '\0';
    761e:	f8 01       	movw	r30, r16
    7620:	80 81       	ld	r24, Z
    7622:	fe 01       	movw	r30, r28
    7624:	33 97       	sbiw	r30, 0x03	; 3
    7626:	e8 0f       	add	r30, r24
    7628:	f1 1d       	adc	r31, r1
    762a:	10 82       	st	Z, r1
    newblockid = createDir(dirname, (int)blockid);
    762c:	c7 01       	movw	r24, r14
    762e:	6d 2d       	mov	r22, r13
    7630:	70 e0       	ldi	r23, 0x00	; 0
    7632:	0e 94 86 27 	call	0x4f0c	; 0x4f0c <createDir>
    reply[0] = 4;
    7636:	94 e0       	ldi	r25, 0x04	; 4
    7638:	90 93 c9 0b 	sts	0x0BC9, r25
    reply[1] = 141;
    763c:	9d e8       	ldi	r25, 0x8D	; 141
    763e:	90 93 ca 0b 	sts	0x0BCA, r25
    reply[2] = nodeid;
    7642:	90 91 33 0c 	lds	r25, 0x0C33
    7646:	90 93 cb 0b 	sts	0x0BCB, r25
    reply[3] = newblockid;
    764a:	80 93 cc 0b 	sts	0x0BCC, r24
	 sleepThread(20);
    764e:	84 e1       	ldi	r24, 0x14	; 20
    7650:	90 e0       	ldi	r25, 0x00	; 0
    7652:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <sleepThread>
    StandardSocketSend(0xefef, 0xffff, 32, reply);
    7656:	8f ee       	ldi	r24, 0xEF	; 239
    7658:	9f ee       	ldi	r25, 0xEF	; 239
    765a:	6f ef       	ldi	r22, 0xFF	; 255
    765c:	7f ef       	ldi	r23, 0xFF	; 255
    765e:	40 e2       	ldi	r20, 0x20	; 32
    7660:	29 ec       	ldi	r18, 0xC9	; 201
    7662:	3b e0       	ldi	r19, 0x0B	; 11
    7664:	0e 94 5d 02 	call	0x4ba	; 0x4ba <StandardSocketSend>
    // printStringN(reply,32);      
}
    7668:	2d 96       	adiw	r28, 0x0d	; 13
    766a:	0f b6       	in	r0, 0x3f	; 63
    766c:	f8 94       	cli
    766e:	de bf       	out	0x3e, r29	; 62
    7670:	0f be       	out	0x3f, r0	; 63
    7672:	cd bf       	out	0x3d, r28	; 61
    7674:	cf 91       	pop	r28
    7676:	df 91       	pop	r29
    7678:	1f 91       	pop	r17
    767a:	0f 91       	pop	r16
    767c:	ff 90       	pop	r15
    767e:	ef 90       	pop	r14
    7680:	df 90       	pop	r13
    7682:	08 95       	ret

00007684 <reply_cp_fromPCtoNode_type1>:

//-------------------------------------------------------------------------
void reply_cp_fromPCtoNode_type1(uint8_t * receivebuffer)
{
    7684:	df 92       	push	r13
    7686:	ef 92       	push	r14
    7688:	ff 92       	push	r15
    768a:	0f 93       	push	r16
    768c:	1f 93       	push	r17
    768e:	df 93       	push	r29
    7690:	cf 93       	push	r28
    7692:	cd b7       	in	r28, 0x3d	; 61
    7694:	de b7       	in	r29, 0x3e	; 62
    7696:	2d 97       	sbiw	r28, 0x0d	; 13
    7698:	0f b6       	in	r0, 0x3f	; 63
    769a:	f8 94       	cli
    769c:	de bf       	out	0x3e, r29	; 62
    769e:	0f be       	out	0x3f, r0	; 63
    76a0:	cd bf       	out	0x3d, r28	; 61
    76a2:	8c 01       	movw	r16, r24
    uint8_t blockid;
    char filename[13];
    int fid;
    uint8_t newblockid;
      
    releaseAllFid();
    76a4:	0e 94 df 1c 	call	0x39be	; 0x39be <releaseAllFid>
    blockid = receivebuffer[3];
    76a8:	f8 01       	movw	r30, r16
    76aa:	d3 80       	ldd	r13, Z+3	; 0x03
    mystrncpy(filename, (char *)&receivebuffer[4], receivebuffer[0] - 4);
    76ac:	98 01       	movw	r18, r16
    76ae:	2c 5f       	subi	r18, 0xFC	; 252
    76b0:	3f 4f       	sbci	r19, 0xFF	; 255
    76b2:	40 81       	ld	r20, Z
    76b4:	44 50       	subi	r20, 0x04	; 4
    76b6:	7e 01       	movw	r14, r28
    76b8:	08 94       	sec
    76ba:	e1 1c       	adc	r14, r1
    76bc:	f1 1c       	adc	r15, r1
    76be:	c7 01       	movw	r24, r14
    76c0:	b9 01       	movw	r22, r18
    76c2:	0e 94 44 36 	call	0x6c88	; 0x6c88 <mystrncpy>
    filename[receivebuffer[0] - 4] = '\0';
    76c6:	f8 01       	movw	r30, r16
    76c8:	80 81       	ld	r24, Z
    76ca:	fe 01       	movw	r30, r28
    76cc:	33 97       	sbiw	r30, 0x03	; 3
    76ce:	e8 0f       	add	r30, r24
    76d0:	f1 1d       	adc	r31, r1
    76d2:	10 82       	st	Z, r1
    newblockid = createFileFromDirectory(filename, (int)blockid);
    76d4:	c7 01       	movw	r24, r14
    76d6:	6d 2d       	mov	r22, r13
    76d8:	70 e0       	ldi	r23, 0x00	; 0
    76da:	0e 94 aa 27 	call	0x4f54	; 0x4f54 <createFileFromDirectory>
    76de:	d8 2e       	mov	r13, r24
    chunksequencenum = 0;
    76e0:	10 92 ec 0b 	sts	0x0BEC, r1
    76e4:	10 92 eb 0b 	sts	0x0BEB, r1
    expectNextNum = 1;
    76e8:	21 e0       	ldi	r18, 0x01	; 1
    76ea:	30 e0       	ldi	r19, 0x00	; 0
    76ec:	30 93 ea 0b 	sts	0x0BEA, r19
    76f0:	20 93 e9 0b 	sts	0x0BE9, r18
    reply[0] = 4;
    76f4:	84 e0       	ldi	r24, 0x04	; 4
    76f6:	80 93 c9 0b 	sts	0x0BC9, r24
    reply[1] = 121;
    76fa:	89 e7       	ldi	r24, 0x79	; 121
    76fc:	80 93 ca 0b 	sts	0x0BCA, r24
    reply[2] = nodeid;
    7700:	80 91 33 0c 	lds	r24, 0x0C33
    7704:	80 93 cb 0b 	sts	0x0BCB, r24
    reply[3] = newblockid;
    7708:	d0 92 cc 0b 	sts	0x0BCC, r13
    fid = getFreeFid();
    770c:	0e 94 a5 1c 	call	0x394a	; 0x394a <getFreeFid>
    7710:	e8 2e       	mov	r14, r24
    7712:	09 2f       	mov	r16, r25
    openFile(newblockid, fid, 2);
    7714:	8d 2d       	mov	r24, r13
    7716:	90 e0       	ldi	r25, 0x00	; 0
    7718:	6e 2d       	mov	r22, r14
    771a:	70 2f       	mov	r23, r16
    771c:	42 e0       	ldi	r20, 0x02	; 2
    771e:	50 e0       	ldi	r21, 0x00	; 0
    7720:	0e 94 97 28 	call	0x512e	; 0x512e <openFile>
    openedfile = &fidtable[fid];
    7724:	2e 2d       	mov	r18, r14
    7726:	30 2f       	mov	r19, r16
    7728:	c9 01       	movw	r24, r18
    772a:	88 0f       	add	r24, r24
    772c:	99 1f       	adc	r25, r25
    772e:	b3 e0       	ldi	r27, 0x03	; 3
    7730:	22 0f       	add	r18, r18
    7732:	33 1f       	adc	r19, r19
    7734:	ba 95       	dec	r27
    7736:	e1 f7       	brne	.-8      	; 0x7730 <reply_cp_fromPCtoNode_type1+0xac>
    7738:	82 0f       	add	r24, r18
    773a:	93 1f       	adc	r25, r19
    773c:	87 55       	subi	r24, 0x57	; 87
    773e:	96 4f       	sbci	r25, 0xF6	; 246
    7740:	90 93 94 0b 	sts	0x0B94, r25
    7744:	80 93 93 0b 	sts	0x0B93, r24
	 sleepThread(20);
    7748:	84 e1       	ldi	r24, 0x14	; 20
    774a:	90 e0       	ldi	r25, 0x00	; 0
    774c:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <sleepThread>
    // printStringN(reply,32);      
    StandardSocketSend(0xefef, 0xffff, 32, reply);
    7750:	8f ee       	ldi	r24, 0xEF	; 239
    7752:	9f ee       	ldi	r25, 0xEF	; 239
    7754:	6f ef       	ldi	r22, 0xFF	; 255
    7756:	7f ef       	ldi	r23, 0xFF	; 255
    7758:	40 e2       	ldi	r20, 0x20	; 32
    775a:	29 ec       	ldi	r18, 0xC9	; 201
    775c:	3b e0       	ldi	r19, 0x0B	; 11
    775e:	0e 94 5d 02 	call	0x4ba	; 0x4ba <StandardSocketSend>
}
    7762:	2d 96       	adiw	r28, 0x0d	; 13
    7764:	0f b6       	in	r0, 0x3f	; 63
    7766:	f8 94       	cli
    7768:	de bf       	out	0x3e, r29	; 62
    776a:	0f be       	out	0x3f, r0	; 63
    776c:	cd bf       	out	0x3d, r28	; 61
    776e:	cf 91       	pop	r28
    7770:	df 91       	pop	r29
    7772:	1f 91       	pop	r17
    7774:	0f 91       	pop	r16
    7776:	ff 90       	pop	r15
    7778:	ef 90       	pop	r14
    777a:	df 90       	pop	r13
    777c:	08 95       	ret

0000777e <reply_cp_fromPCtoNode_type2>:

//-------------------------------------------------------------------------
void reply_cp_fromPCtoNode_type2(uint8_t * receivebuffer)
{
    777e:	cf 93       	push	r28
    7780:	df 93       	push	r29
    7782:	ec 01       	movw	r28, r24
    uint16_t SyncNum;

    if (receivebuffer[3] == 0xff)
    7784:	2b 81       	ldd	r18, Y+3	; 0x03
    7786:	80 91 e9 0b 	lds	r24, 0x0BE9
    778a:	90 91 ea 0b 	lds	r25, 0x0BEA
    778e:	7c 81       	ldd	r23, Y+4	; 0x04
    7790:	6d 81       	ldd	r22, Y+5	; 0x05
    7792:	2f 3f       	cpi	r18, 0xFF	; 255
    7794:	d1 f5       	brne	.+116    	; 0x780a <reply_cp_fromPCtoNode_type2+0x8c>
    {
        //now this is a sync
        SyncNum = ((uint16_t) receivebuffer[4]) * 256 + receivebuffer[5];
        if (SyncNum > expectNextNum - 1)
    7796:	ac 01       	movw	r20, r24
    7798:	41 50       	subi	r20, 0x01	; 1
    779a:	50 40       	sbci	r21, 0x00	; 0
    uint16_t SyncNum;

    if (receivebuffer[3] == 0xff)
    {
        //now this is a sync
        SyncNum = ((uint16_t) receivebuffer[4]) * 256 + receivebuffer[5];
    779c:	37 2f       	mov	r19, r23
    779e:	20 e0       	ldi	r18, 0x00	; 0
    77a0:	26 0f       	add	r18, r22
    77a2:	31 1d       	adc	r19, r1
    77a4:	60 91 33 0c 	lds	r22, 0x0C33
        if (SyncNum > expectNextNum - 1)
    77a8:	42 17       	cp	r20, r18
    77aa:	53 07       	cpc	r21, r19
    77ac:	98 f4       	brcc	.+38     	; 0x77d4 <reply_cp_fromPCtoNode_type2+0x56>
        {
            reply[0] = 7;
    77ae:	27 e0       	ldi	r18, 0x07	; 7
    77b0:	20 93 c9 0b 	sts	0x0BC9, r18
            reply[1] = 122;
    77b4:	2a e7       	ldi	r18, 0x7A	; 122
    77b6:	20 93 ca 0b 	sts	0x0BCA, r18
            reply[2] = nodeid;
    77ba:	60 93 cb 0b 	sts	0x0BCB, r22
            reply[3] = 15;
    77be:	2f e0       	ldi	r18, 0x0F	; 15
    77c0:	20 93 cc 0b 	sts	0x0BCC, r18
            reply[4] = 15;
    77c4:	20 93 cd 0b 	sts	0x0BCD, r18
            reply[5] = (expectNextNum - 1) / 256;
    77c8:	50 93 ce 0b 	sts	0x0BCE, r21
            reply[6] = (expectNextNum - 1) % 256;
    77cc:	81 50       	subi	r24, 0x01	; 1
    77ce:	80 93 cf 0b 	sts	0x0BCF, r24
    77d2:	11 c0       	rjmp	.+34     	; 0x77f6 <reply_cp_fromPCtoNode_type2+0x78>
            StandardSocketSend(0xefef, 0xffff, 32, reply);
        }
        else
        {
            reply[0] = 7;
    77d4:	87 e0       	ldi	r24, 0x07	; 7
    77d6:	80 93 c9 0b 	sts	0x0BC9, r24
            reply[1] = 122;
    77da:	8a e7       	ldi	r24, 0x7A	; 122
    77dc:	80 93 ca 0b 	sts	0x0BCA, r24
            reply[2] = nodeid;
    77e0:	60 93 cb 0b 	sts	0x0BCB, r22
            reply[3] = 15;
    77e4:	8f e0       	ldi	r24, 0x0F	; 15
    77e6:	80 93 cc 0b 	sts	0x0BCC, r24
            reply[4] = 15;
    77ea:	80 93 cd 0b 	sts	0x0BCD, r24
            reply[5] = 0;
    77ee:	10 92 ce 0b 	sts	0x0BCE, r1
            reply[6] = 0;
    77f2:	10 92 cf 0b 	sts	0x0BCF, r1
            StandardSocketSend(0xefef, 0xffff, 32, reply);
    77f6:	8f ee       	ldi	r24, 0xEF	; 239
    77f8:	9f ee       	ldi	r25, 0xEF	; 239
    77fa:	6f ef       	ldi	r22, 0xFF	; 255
    77fc:	7f ef       	ldi	r23, 0xFF	; 255
    77fe:	40 e2       	ldi	r20, 0x20	; 32
    7800:	29 ec       	ldi	r18, 0xC9	; 201
    7802:	3b e0       	ldi	r19, 0x0B	; 11
    7804:	0e 94 5d 02 	call	0x4ba	; 0x4ba <StandardSocketSend>
    7808:	2b c0       	rjmp	.+86     	; 0x7860 <reply_cp_fromPCtoNode_type2+0xe2>
        }
        return;
    }
    chunksequencenum = ((uint16_t) receivebuffer[4]) * 256 + receivebuffer[5];
    780a:	37 2f       	mov	r19, r23
    780c:	20 e0       	ldi	r18, 0x00	; 0
    780e:	26 0f       	add	r18, r22
    7810:	31 1d       	adc	r19, r1
    7812:	30 93 ec 0b 	sts	0x0BEC, r19
    7816:	20 93 eb 0b 	sts	0x0BEB, r18
    if (chunksequencenum != expectNextNum)
    781a:	28 17       	cp	r18, r24
    781c:	39 07       	cpc	r19, r25
    781e:	01 f5       	brne	.+64     	; 0x7860 <reply_cp_fromPCtoNode_type2+0xe2>
    {
        return;
    }
    fwrite2(openedfile, &receivebuffer[7], receivebuffer[6]);
    7820:	be 01       	movw	r22, r28
    7822:	69 5f       	subi	r22, 0xF9	; 249
    7824:	7f 4f       	sbci	r23, 0xFF	; 255
    7826:	4e 81       	ldd	r20, Y+6	; 0x06
    7828:	80 91 93 0b 	lds	r24, 0x0B93
    782c:	90 91 94 0b 	lds	r25, 0x0B94
    7830:	50 e0       	ldi	r21, 0x00	; 0
    7832:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <fwrite2>
    fseek2(openedfile, receivebuffer[6], 1);
    7836:	4e 81       	ldd	r20, Y+6	; 0x06
    7838:	50 e0       	ldi	r21, 0x00	; 0
    783a:	60 e0       	ldi	r22, 0x00	; 0
    783c:	70 e0       	ldi	r23, 0x00	; 0
    783e:	80 91 93 0b 	lds	r24, 0x0B93
    7842:	90 91 94 0b 	lds	r25, 0x0B94
    7846:	21 e0       	ldi	r18, 0x01	; 1
    7848:	30 e0       	ldi	r19, 0x00	; 0
    784a:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <fseek2>
    expectNextNum++;
    784e:	80 91 e9 0b 	lds	r24, 0x0BE9
    7852:	90 91 ea 0b 	lds	r25, 0x0BEA
    7856:	01 96       	adiw	r24, 0x01	; 1
    7858:	90 93 ea 0b 	sts	0x0BEA, r25
    785c:	80 93 e9 0b 	sts	0x0BE9, r24
    // printStringN(reply,32);      
    //StandardSocketSend(0xefef, 0xffff, 32, reply);
}
    7860:	df 91       	pop	r29
    7862:	cf 91       	pop	r28
    7864:	08 95       	ret

00007866 <reply_cp_fromPCtoNode_type3>:

//-------------------------------------------------------------------------
void reply_cp_fromPCtoNode_type3()
{
    fclose2(openedfile);
    7866:	80 91 93 0b 	lds	r24, 0x0B93
    786a:	90 91 94 0b 	lds	r25, 0x0B94
    786e:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <fclose2>
    // printStringN(reply,32);      
    StandardSocketSend(0xefef, 0xffff, 32, reply);
    7872:	8f ee       	ldi	r24, 0xEF	; 239
    7874:	9f ee       	ldi	r25, 0xEF	; 239
    7876:	6f ef       	ldi	r22, 0xFF	; 255
    7878:	7f ef       	ldi	r23, 0xFF	; 255
    787a:	40 e2       	ldi	r20, 0x20	; 32
    787c:	29 ec       	ldi	r18, 0xC9	; 201
    787e:	3b e0       	ldi	r19, 0x0B	; 11
    7880:	0e 94 5d 02 	call	0x4ba	; 0x4ba <StandardSocketSend>
}
    7884:	08 95       	ret

00007886 <reply_touch>:

//-------------------------------------------------------------------------
void reply_touch(uint8_t * receivebuffer)
{
    7886:	df 92       	push	r13
    7888:	ef 92       	push	r14
    788a:	ff 92       	push	r15
    788c:	0f 93       	push	r16
    788e:	1f 93       	push	r17
    7890:	df 93       	push	r29
    7892:	cf 93       	push	r28
    7894:	cd b7       	in	r28, 0x3d	; 61
    7896:	de b7       	in	r29, 0x3e	; 62
    7898:	2d 97       	sbiw	r28, 0x0d	; 13
    789a:	0f b6       	in	r0, 0x3f	; 63
    789c:	f8 94       	cli
    789e:	de bf       	out	0x3e, r29	; 62
    78a0:	0f be       	out	0x3f, r0	; 63
    78a2:	cd bf       	out	0x3d, r28	; 61
    78a4:	8c 01       	movw	r16, r24
    uint8_t blockid;
    char filename[13];
    uint8_t newblockid;

    blockid = receivebuffer[3];
    78a6:	fc 01       	movw	r30, r24
    78a8:	d3 80       	ldd	r13, Z+3	; 0x03
    mystrncpy(filename, (char *)&receivebuffer[4], receivebuffer[0] - 4);
    78aa:	9c 01       	movw	r18, r24
    78ac:	2c 5f       	subi	r18, 0xFC	; 252
    78ae:	3f 4f       	sbci	r19, 0xFF	; 255
    78b0:	40 81       	ld	r20, Z
    78b2:	44 50       	subi	r20, 0x04	; 4
    78b4:	7e 01       	movw	r14, r28
    78b6:	08 94       	sec
    78b8:	e1 1c       	adc	r14, r1
    78ba:	f1 1c       	adc	r15, r1
    78bc:	c7 01       	movw	r24, r14
    78be:	b9 01       	movw	r22, r18
    78c0:	0e 94 44 36 	call	0x6c88	; 0x6c88 <mystrncpy>
    filename[receivebuffer[0] - 4] = '\0';
    78c4:	f8 01       	movw	r30, r16
    78c6:	80 81       	ld	r24, Z
    78c8:	fe 01       	movw	r30, r28
    78ca:	33 97       	sbiw	r30, 0x03	; 3
    78cc:	e8 0f       	add	r30, r24
    78ce:	f1 1d       	adc	r31, r1
    78d0:	10 82       	st	Z, r1
    newblockid = createFileFromDirectory(filename, (int)blockid);
    78d2:	c7 01       	movw	r24, r14
    78d4:	6d 2d       	mov	r22, r13
    78d6:	70 e0       	ldi	r23, 0x00	; 0
    78d8:	0e 94 aa 27 	call	0x4f54	; 0x4f54 <createFileFromDirectory>
    reply[0] = 4;
    78dc:	94 e0       	ldi	r25, 0x04	; 4
    78de:	90 93 c9 0b 	sts	0x0BC9, r25
    reply[1] = 151;
    78e2:	97 e9       	ldi	r25, 0x97	; 151
    78e4:	90 93 ca 0b 	sts	0x0BCA, r25
    reply[2] = nodeid;
    78e8:	90 91 33 0c 	lds	r25, 0x0C33
    78ec:	90 93 cb 0b 	sts	0x0BCB, r25
    reply[3] = newblockid;
    78f0:	80 93 cc 0b 	sts	0x0BCC, r24
    StandardSocketSend(0xefef, 0xffff, 32, reply);
    78f4:	8f ee       	ldi	r24, 0xEF	; 239
    78f6:	9f ee       	ldi	r25, 0xEF	; 239
    78f8:	6f ef       	ldi	r22, 0xFF	; 255
    78fa:	7f ef       	ldi	r23, 0xFF	; 255
    78fc:	40 e2       	ldi	r20, 0x20	; 32
    78fe:	29 ec       	ldi	r18, 0xC9	; 201
    7900:	3b e0       	ldi	r19, 0x0B	; 11
    7902:	0e 94 5d 02 	call	0x4ba	; 0x4ba <StandardSocketSend>
    //printStringN(reply,32);       
}
    7906:	2d 96       	adiw	r28, 0x0d	; 13
    7908:	0f b6       	in	r0, 0x3f	; 63
    790a:	f8 94       	cli
    790c:	de bf       	out	0x3e, r29	; 62
    790e:	0f be       	out	0x3f, r0	; 63
    7910:	cd bf       	out	0x3d, r28	; 61
    7912:	cf 91       	pop	r28
    7914:	df 91       	pop	r29
    7916:	1f 91       	pop	r17
    7918:	0f 91       	pop	r16
    791a:	ff 90       	pop	r15
    791c:	ef 90       	pop	r14
    791e:	df 90       	pop	r13
    7920:	08 95       	ret

00007922 <reply_fromNodeToPC_type1>:

//-------------------------------------------------------------------------
void reply_fromNodeToPC_type1(uint8_t * receivebuffer)
{
    7922:	9f 92       	push	r9
    7924:	af 92       	push	r10
    7926:	bf 92       	push	r11
    7928:	cf 92       	push	r12
    792a:	df 92       	push	r13
    792c:	ef 92       	push	r14
    792e:	ff 92       	push	r15
    7930:	0f 93       	push	r16
    7932:	1f 93       	push	r17
    7934:	df 93       	push	r29
    7936:	cf 93       	push	r28
    7938:	cd b7       	in	r28, 0x3d	; 61
    793a:	de b7       	in	r29, 0x3e	; 62
    793c:	2d 97       	sbiw	r28, 0x0d	; 13
    793e:	0f b6       	in	r0, 0x3f	; 63
    7940:	f8 94       	cli
    7942:	de bf       	out	0x3e, r29	; 62
    7944:	0f be       	out	0x3f, r0	; 63
    7946:	cd bf       	out	0x3d, r28	; 61
    7948:	8c 01       	movw	r16, r24
    uint16_t remain;
    uint16_t i;
    uint8_t newblockid;
    uint8_t temp1, temp2;

    blockid = receivebuffer[3];
    794a:	fc 01       	movw	r30, r24
    794c:	c3 80       	ldd	r12, Z+3	; 0x03
    mystrncpy(filename, (char *)&receivebuffer[4], receivebuffer[0] - 4);
    794e:	9c 01       	movw	r18, r24
    7950:	2c 5f       	subi	r18, 0xFC	; 252
    7952:	3f 4f       	sbci	r19, 0xFF	; 255
    7954:	40 81       	ld	r20, Z
    7956:	44 50       	subi	r20, 0x04	; 4
    7958:	7e 01       	movw	r14, r28
    795a:	08 94       	sec
    795c:	e1 1c       	adc	r14, r1
    795e:	f1 1c       	adc	r15, r1
    7960:	c7 01       	movw	r24, r14
    7962:	b9 01       	movw	r22, r18
    7964:	0e 94 44 36 	call	0x6c88	; 0x6c88 <mystrncpy>
    filename[receivebuffer[0] - 4] = '\0';
    7968:	f8 01       	movw	r30, r16
    796a:	80 81       	ld	r24, Z
    796c:	fe 01       	movw	r30, r28
    796e:	33 97       	sbiw	r30, 0x03	; 3
    7970:	e8 0f       	add	r30, r24
    7972:	f1 1d       	adc	r31, r1
    7974:	10 82       	st	Z, r1
    newblockid = existBlockAddr(filename, (int)blockid);
    7976:	c7 01       	movw	r24, r14
    7978:	6c 2d       	mov	r22, r12
    797a:	70 e0       	ldi	r23, 0x00	; 0
    797c:	0e 94 2e 27 	call	0x4e5c	; 0x4e5c <existBlockAddr>
    7980:	08 2f       	mov	r16, r24
    reply[1] = 124;
    7982:	8c e7       	ldi	r24, 0x7C	; 124
    7984:	80 93 ca 0b 	sts	0x0BCA, r24
    reply[2] = nodeid;
    7988:	80 91 33 0c 	lds	r24, 0x0C33
    798c:	80 93 cb 0b 	sts	0x0BCB, r24
    fid = getFreeFid();
    7990:	0e 94 a5 1c 	call	0x394a	; 0x394a <getFreeFid>
    7994:	c8 2e       	mov	r12, r24
    7996:	e9 2e       	mov	r14, r25
    openFile(newblockid, fid, 1);
    7998:	80 2f       	mov	r24, r16
    799a:	90 e0       	ldi	r25, 0x00	; 0
    799c:	6c 2d       	mov	r22, r12
    799e:	7e 2d       	mov	r23, r14
    79a0:	41 e0       	ldi	r20, 0x01	; 1
    79a2:	50 e0       	ldi	r21, 0x00	; 0
    79a4:	0e 94 97 28 	call	0x512e	; 0x512e <openFile>
    fp = &fidtable[fid];
    79a8:	8c 2d       	mov	r24, r12
    79aa:	9e 2d       	mov	r25, r14
    79ac:	9c 01       	movw	r18, r24
    79ae:	22 0f       	add	r18, r18
    79b0:	33 1f       	adc	r19, r19
    79b2:	53 e0       	ldi	r21, 0x03	; 3
    79b4:	88 0f       	add	r24, r24
    79b6:	99 1f       	adc	r25, r25
    79b8:	5a 95       	dec	r21
    79ba:	e1 f7       	brne	.-8      	; 0x79b4 <reply_fromNodeToPC_type1+0x92>
    79bc:	28 0f       	add	r18, r24
    79be:	39 1f       	adc	r19, r25
    79c0:	27 55       	subi	r18, 0x57	; 87
    79c2:	36 4f       	sbci	r19, 0xF6	; 246
    79c4:	30 93 92 0b 	sts	0x0B92, r19
    79c8:	20 93 91 0b 	sts	0x0B91, r18
    filesize = fp->size;
    79cc:	2c 2d       	mov	r18, r12
    79ce:	3e 2d       	mov	r19, r14
    79d0:	f9 01       	movw	r30, r18
    79d2:	ee 0f       	add	r30, r30
    79d4:	ff 1f       	adc	r31, r31
    79d6:	93 e0       	ldi	r25, 0x03	; 3
    79d8:	22 0f       	add	r18, r18
    79da:	33 1f       	adc	r19, r19
    79dc:	9a 95       	dec	r25
    79de:	e1 f7       	brne	.-8      	; 0x79d8 <reply_fromNodeToPC_type1+0xb6>
    79e0:	e2 0f       	add	r30, r18
    79e2:	f3 1f       	adc	r31, r19
    79e4:	e7 55       	subi	r30, 0x57	; 87
    79e6:	f6 4f       	sbci	r31, 0xF6	; 246
    79e8:	c4 80       	ldd	r12, Z+4	; 0x04
    79ea:	e5 80       	ldd	r14, Z+5	; 0x05
    temp1 = filesize / 256;
    79ec:	e0 92 cc 0b 	sts	0x0BCC, r14
    temp2 = filesize % 256;
    79f0:	c0 92 cd 0b 	sts	0x0BCD, r12
    reply[3] = temp1;
    reply[4] = temp2;
    //disabletracingfunction();
    //send out the size 
    StandardSocketSend(0xefef, 0xffff, 32, reply);
    79f4:	8f ee       	ldi	r24, 0xEF	; 239
    79f6:	9f ee       	ldi	r25, 0xEF	; 239
    79f8:	6f ef       	ldi	r22, 0xFF	; 255
    79fa:	7f ef       	ldi	r23, 0xFF	; 255
    79fc:	40 e2       	ldi	r20, 0x20	; 32
    79fe:	29 ec       	ldi	r18, 0xC9	; 201
    7a00:	3b e0       	ldi	r19, 0x0B	; 11
    7a02:	0e 94 5d 02 	call	0x4ba	; 0x4ba <StandardSocketSend>
    
    //    StandardSocketSend(0xefef, 0xffff, 32, reply);
    //sleepThread( 100 );
    reply[3] = newblockid;
    7a06:	00 93 cc 0b 	sts	0x0BCC, r16
    round = filesize / 20;
    7a0a:	8c 2d       	mov	r24, r12
    7a0c:	9e 2d       	mov	r25, r14
    7a0e:	64 e1       	ldi	r22, 0x14	; 20
    7a10:	70 e0       	ldi	r23, 0x00	; 0
    7a12:	0e 94 d7 48 	call	0x91ae	; 0x91ae <__udivmodhi4>
    7a16:	7b 01       	movw	r14, r22
    7a18:	6c 01       	movw	r12, r24
    7a1a:	5b 01       	movw	r10, r22
    remain = filesize % 20;
    for (i = 0; i < round; i++)
    7a1c:	00 e0       	ldi	r16, 0x00	; 0
    7a1e:	10 e0       	ldi	r17, 0x00	; 0
    {
        fread2(fp, &reply[6], 20);
        fseek2(fp, 20, 1);
        reply[0] = 26;
    7a20:	8a e1       	ldi	r24, 0x1A	; 26
    7a22:	98 2e       	mov	r9, r24
    //    StandardSocketSend(0xefef, 0xffff, 32, reply);
    //sleepThread( 100 );
    reply[3] = newblockid;
    round = filesize / 20;
    remain = filesize % 20;
    for (i = 0; i < round; i++)
    7a24:	27 c0       	rjmp	.+78     	; 0x7a74 <reply_fromNodeToPC_type1+0x152>
    {
        fread2(fp, &reply[6], 20);
    7a26:	80 91 91 0b 	lds	r24, 0x0B91
    7a2a:	90 91 92 0b 	lds	r25, 0x0B92
    7a2e:	6f ec       	ldi	r22, 0xCF	; 207
    7a30:	7b e0       	ldi	r23, 0x0B	; 11
    7a32:	44 e1       	ldi	r20, 0x14	; 20
    7a34:	50 e0       	ldi	r21, 0x00	; 0
    7a36:	0e 94 25 1e 	call	0x3c4a	; 0x3c4a <fread2>
        fseek2(fp, 20, 1);
    7a3a:	80 91 91 0b 	lds	r24, 0x0B91
    7a3e:	90 91 92 0b 	lds	r25, 0x0B92
    7a42:	44 e1       	ldi	r20, 0x14	; 20
    7a44:	50 e0       	ldi	r21, 0x00	; 0
    7a46:	60 e0       	ldi	r22, 0x00	; 0
    7a48:	70 e0       	ldi	r23, 0x00	; 0
    7a4a:	21 e0       	ldi	r18, 0x01	; 1
    7a4c:	30 e0       	ldi	r19, 0x00	; 0
    7a4e:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <fseek2>
        reply[0] = 26;
    7a52:	90 92 c9 0b 	sts	0x0BC9, r9
        temp1 = i / 256;
    7a56:	10 93 cd 0b 	sts	0x0BCD, r17
        temp2 = i % 256;
        reply[4] = temp1;
        reply[5] = temp2;
    7a5a:	00 93 ce 0b 	sts	0x0BCE, r16
        //printStringN(reply,32);                   
        // sleepThread( 100 );
        StandardSocketSend(0xefef, 0xffff, 32, reply);
    7a5e:	8f ee       	ldi	r24, 0xEF	; 239
    7a60:	9f ee       	ldi	r25, 0xEF	; 239
    7a62:	6f ef       	ldi	r22, 0xFF	; 255
    7a64:	7f ef       	ldi	r23, 0xFF	; 255
    7a66:	40 e2       	ldi	r20, 0x20	; 32
    7a68:	29 ec       	ldi	r18, 0xC9	; 201
    7a6a:	3b e0       	ldi	r19, 0x0B	; 11
    7a6c:	0e 94 5d 02 	call	0x4ba	; 0x4ba <StandardSocketSend>
    //    StandardSocketSend(0xefef, 0xffff, 32, reply);
    //sleepThread( 100 );
    reply[3] = newblockid;
    round = filesize / 20;
    remain = filesize % 20;
    for (i = 0; i < round; i++)
    7a70:	0f 5f       	subi	r16, 0xFF	; 255
    7a72:	1f 4f       	sbci	r17, 0xFF	; 255
    7a74:	0e 15       	cp	r16, r14
    7a76:	1f 05       	cpc	r17, r15
    7a78:	b0 f2       	brcs	.-84     	; 0x7a26 <reply_fromNodeToPC_type1+0x104>
        reply[5] = temp2;
        //printStringN(reply,32);                   
        // sleepThread( 100 );
        StandardSocketSend(0xefef, 0xffff, 32, reply);
    }
    if (remain > 0)
    7a7a:	c1 14       	cp	r12, r1
    7a7c:	d1 04       	cpc	r13, r1
    7a7e:	e9 f0       	breq	.+58     	; 0x7aba <reply_fromNodeToPC_type1+0x198>
    {
        fread2(fp, &reply[6], remain);
    7a80:	80 91 91 0b 	lds	r24, 0x0B91
    7a84:	90 91 92 0b 	lds	r25, 0x0B92
    7a88:	6f ec       	ldi	r22, 0xCF	; 207
    7a8a:	7b e0       	ldi	r23, 0x0B	; 11
    7a8c:	a6 01       	movw	r20, r12
    7a8e:	0e 94 25 1e 	call	0x3c4a	; 0x3c4a <fread2>
        reply[0] = (uint8_t) remain + 6;
    7a92:	29 ec       	ldi	r18, 0xC9	; 201
    7a94:	3b e0       	ldi	r19, 0x0B	; 11
    7a96:	8c 2d       	mov	r24, r12
    7a98:	8a 5f       	subi	r24, 0xFA	; 250
    7a9a:	80 93 c9 0b 	sts	0x0BC9, r24
        reply[4] = round / 256;
    7a9e:	f9 01       	movw	r30, r18
    7aa0:	f4 82       	std	Z+4, r15	; 0x04
        reply[5] = round % 256;
    7aa2:	e5 82       	std	Z+5, r14	; 0x05
        round++;
    7aa4:	57 01       	movw	r10, r14
    7aa6:	08 94       	sec
    7aa8:	a1 1c       	adc	r10, r1
    7aaa:	b1 1c       	adc	r11, r1
        //printStringN(reply,32);
        //sleepThread( 25 );
        StandardSocketSend(0xefef, 0xffff, 32, reply);
    7aac:	8f ee       	ldi	r24, 0xEF	; 239
    7aae:	9f ee       	ldi	r25, 0xEF	; 239
    7ab0:	6f ef       	ldi	r22, 0xFF	; 255
    7ab2:	7f ef       	ldi	r23, 0xFF	; 255
    7ab4:	40 e2       	ldi	r20, 0x20	; 32
    7ab6:	0e 94 5d 02 	call	0x4ba	; 0x4ba <StandardSocketSend>
    }
    temp1 = round / 256;
    temp2 = round % 256;
    //terminate signal  is here!
    reply[0] = 7;
    7aba:	87 e0       	ldi	r24, 0x07	; 7
    7abc:	80 93 c9 0b 	sts	0x0BC9, r24
    reply[3] = 0xef;
    7ac0:	8f ee       	ldi	r24, 0xEF	; 239
    7ac2:	80 93 cc 0b 	sts	0x0BCC, r24
    reply[4] = 0xef;
    7ac6:	80 93 cd 0b 	sts	0x0BCD, r24
        round++;
        //printStringN(reply,32);
        //sleepThread( 25 );
        StandardSocketSend(0xefef, 0xffff, 32, reply);
    }
    temp1 = round / 256;
    7aca:	b0 92 ce 0b 	sts	0x0BCE, r11
    temp2 = round % 256;
    7ace:	a0 92 cf 0b 	sts	0x0BCF, r10
    reply[3] = 0xef;
    reply[4] = 0xef;
    reply[5] = temp1;
    reply[6] = temp2;
    //ephread( 100 );
    StandardSocketSend(0xefef, 0xffff, 32, reply);
    7ad2:	8f ee       	ldi	r24, 0xEF	; 239
    7ad4:	9f ee       	ldi	r25, 0xEF	; 239
    7ad6:	6f ef       	ldi	r22, 0xFF	; 255
    7ad8:	7f ef       	ldi	r23, 0xFF	; 255
    7ada:	40 e2       	ldi	r20, 0x20	; 32
    7adc:	29 ec       	ldi	r18, 0xC9	; 201
    7ade:	3b e0       	ldi	r19, 0x0B	; 11
    7ae0:	0e 94 5d 02 	call	0x4ba	; 0x4ba <StandardSocketSend>
    //sleepThread( 100 );
    StandardSocketSend(0xefef, 0xffff, 32, reply);
    7ae4:	8f ee       	ldi	r24, 0xEF	; 239
    7ae6:	9f ee       	ldi	r25, 0xEF	; 239
    7ae8:	6f ef       	ldi	r22, 0xFF	; 255
    7aea:	7f ef       	ldi	r23, 0xFF	; 255
    7aec:	40 e2       	ldi	r20, 0x20	; 32
    7aee:	29 ec       	ldi	r18, 0xC9	; 201
    7af0:	3b e0       	ldi	r19, 0x0B	; 11
    7af2:	0e 94 5d 02 	call	0x4ba	; 0x4ba <StandardSocketSend>
    //sleepThread( 100 );
    StandardSocketSend(0xefef, 0xffff, 32, reply);
    7af6:	8f ee       	ldi	r24, 0xEF	; 239
    7af8:	9f ee       	ldi	r25, 0xEF	; 239
    7afa:	6f ef       	ldi	r22, 0xFF	; 255
    7afc:	7f ef       	ldi	r23, 0xFF	; 255
    7afe:	40 e2       	ldi	r20, 0x20	; 32
    7b00:	29 ec       	ldi	r18, 0xC9	; 201
    7b02:	3b e0       	ldi	r19, 0x0B	; 11
    7b04:	0e 94 5d 02 	call	0x4ba	; 0x4ba <StandardSocketSend>
    //sleepThread( 100 );
    StandardSocketSend(0xefef, 0xffff, 32, reply);
    7b08:	8f ee       	ldi	r24, 0xEF	; 239
    7b0a:	9f ee       	ldi	r25, 0xEF	; 239
    7b0c:	6f ef       	ldi	r22, 0xFF	; 255
    7b0e:	7f ef       	ldi	r23, 0xFF	; 255
    7b10:	40 e2       	ldi	r20, 0x20	; 32
    7b12:	29 ec       	ldi	r18, 0xC9	; 201
    7b14:	3b e0       	ldi	r19, 0x0B	; 11
    7b16:	0e 94 5d 02 	call	0x4ba	; 0x4ba <StandardSocketSend>
    //do not close now!
    //       fclose2(fp); 
    
    //enabletracingfunction();
}
    7b1a:	2d 96       	adiw	r28, 0x0d	; 13
    7b1c:	0f b6       	in	r0, 0x3f	; 63
    7b1e:	f8 94       	cli
    7b20:	de bf       	out	0x3e, r29	; 62
    7b22:	0f be       	out	0x3f, r0	; 63
    7b24:	cd bf       	out	0x3d, r28	; 61
    7b26:	cf 91       	pop	r28
    7b28:	df 91       	pop	r29
    7b2a:	1f 91       	pop	r17
    7b2c:	0f 91       	pop	r16
    7b2e:	ff 90       	pop	r15
    7b30:	ef 90       	pop	r14
    7b32:	df 90       	pop	r13
    7b34:	cf 90       	pop	r12
    7b36:	bf 90       	pop	r11
    7b38:	af 90       	pop	r10
    7b3a:	9f 90       	pop	r9
    7b3c:	08 95       	ret

00007b3e <reply_rm>:

//-------------------------------------------------------------------------
void reply_rm(uint8_t * receivebuffer)
{
    7b3e:	df 92       	push	r13
    7b40:	ef 92       	push	r14
    7b42:	ff 92       	push	r15
    7b44:	0f 93       	push	r16
    7b46:	1f 93       	push	r17
    7b48:	df 93       	push	r29
    7b4a:	cf 93       	push	r28
    7b4c:	cd b7       	in	r28, 0x3d	; 61
    7b4e:	de b7       	in	r29, 0x3e	; 62
    7b50:	2d 97       	sbiw	r28, 0x0d	; 13
    7b52:	0f b6       	in	r0, 0x3f	; 63
    7b54:	f8 94       	cli
    7b56:	de bf       	out	0x3e, r29	; 62
    7b58:	0f be       	out	0x3f, r0	; 63
    7b5a:	cd bf       	out	0x3d, r28	; 61
    7b5c:	8c 01       	movw	r16, r24
    uint8_t blockid;
    char filename[13];
    uint8_t newblockid;

    blockid = receivebuffer[3];
    7b5e:	fc 01       	movw	r30, r24
    7b60:	d3 80       	ldd	r13, Z+3	; 0x03
    mystrncpy(filename, (char *)&receivebuffer[4], receivebuffer[0] - 4);
    7b62:	9c 01       	movw	r18, r24
    7b64:	2c 5f       	subi	r18, 0xFC	; 252
    7b66:	3f 4f       	sbci	r19, 0xFF	; 255
    7b68:	40 81       	ld	r20, Z
    7b6a:	44 50       	subi	r20, 0x04	; 4
    7b6c:	7e 01       	movw	r14, r28
    7b6e:	08 94       	sec
    7b70:	e1 1c       	adc	r14, r1
    7b72:	f1 1c       	adc	r15, r1
    7b74:	c7 01       	movw	r24, r14
    7b76:	b9 01       	movw	r22, r18
    7b78:	0e 94 44 36 	call	0x6c88	; 0x6c88 <mystrncpy>
    filename[receivebuffer[0] - 4] = '\0';
    7b7c:	f8 01       	movw	r30, r16
    7b7e:	80 81       	ld	r24, Z
    7b80:	fe 01       	movw	r30, r28
    7b82:	33 97       	sbiw	r30, 0x03	; 3
    7b84:	e8 0f       	add	r30, r24
    7b86:	f1 1d       	adc	r31, r1
    7b88:	10 82       	st	Z, r1
    newblockid = existBlockAddr(filename, (int)blockid);
    7b8a:	c7 01       	movw	r24, r14
    7b8c:	6d 2d       	mov	r22, r13
    7b8e:	70 e0       	ldi	r23, 0x00	; 0
    7b90:	0e 94 2e 27 	call	0x4e5c	; 0x4e5c <existBlockAddr>
    7b94:	08 2f       	mov	r16, r24
    if (newblockid > 0)
    7b96:	88 23       	and	r24, r24
    7b98:	19 f0       	breq	.+6      	; 0x7ba0 <reply_rm+0x62>
    {
        deleteNode(newblockid);
    7b9a:	90 e0       	ldi	r25, 0x00	; 0
    7b9c:	0e 94 b7 24 	call	0x496e	; 0x496e <deleteNode>
    }
    reply[0] = 4;
    7ba0:	84 e0       	ldi	r24, 0x04	; 4
    7ba2:	80 93 c9 0b 	sts	0x0BC9, r24
    reply[1] = 161;
    7ba6:	81 ea       	ldi	r24, 0xA1	; 161
    7ba8:	80 93 ca 0b 	sts	0x0BCA, r24
    reply[2] = nodeid;
    7bac:	80 91 33 0c 	lds	r24, 0x0C33
    7bb0:	80 93 cb 0b 	sts	0x0BCB, r24
    reply[3] = newblockid;
    7bb4:	00 93 cc 0b 	sts	0x0BCC, r16
    StandardSocketSend(0xefef, 0xffff, 32, reply);
    7bb8:	8f ee       	ldi	r24, 0xEF	; 239
    7bba:	9f ee       	ldi	r25, 0xEF	; 239
    7bbc:	6f ef       	ldi	r22, 0xFF	; 255
    7bbe:	7f ef       	ldi	r23, 0xFF	; 255
    7bc0:	40 e2       	ldi	r20, 0x20	; 32
    7bc2:	29 ec       	ldi	r18, 0xC9	; 201
    7bc4:	3b e0       	ldi	r19, 0x0B	; 11
    7bc6:	0e 94 5d 02 	call	0x4ba	; 0x4ba <StandardSocketSend>
    //printStringN(reply,32);       
}
    7bca:	2d 96       	adiw	r28, 0x0d	; 13
    7bcc:	0f b6       	in	r0, 0x3f	; 63
    7bce:	f8 94       	cli
    7bd0:	de bf       	out	0x3e, r29	; 62
    7bd2:	0f be       	out	0x3f, r0	; 63
    7bd4:	cd bf       	out	0x3d, r28	; 61
    7bd6:	cf 91       	pop	r28
    7bd8:	df 91       	pop	r29
    7bda:	1f 91       	pop	r17
    7bdc:	0f 91       	pop	r16
    7bde:	ff 90       	pop	r15
    7be0:	ef 90       	pop	r14
    7be2:	df 90       	pop	r13
    7be4:	08 95       	ret

00007be6 <reply_fromNodeToPC_type2>:

//get patch request
void reply_fromNodeToPC_type2(uint8_t * receivebuffer)
{
    7be6:	cf 93       	push	r28
    7be8:	df 93       	push	r29
    7bea:	fc 01       	movw	r30, r24
    uint16_t pos;
    //disabletracingfunction();

    pos = ((uint16_t) receivebuffer[4]) * 256 + receivebuffer[5];
    7bec:	54 81       	ldd	r21, Z+4	; 0x04
    7bee:	40 e0       	ldi	r20, 0x00	; 0
    7bf0:	85 81       	ldd	r24, Z+5	; 0x05
    7bf2:	48 0f       	add	r20, r24
    7bf4:	51 1d       	adc	r21, r1
    reply[0] = 26;
    7bf6:	c9 ec       	ldi	r28, 0xC9	; 201
    7bf8:	db e0       	ldi	r29, 0x0B	; 11
    7bfa:	8a e1       	ldi	r24, 0x1A	; 26
    7bfc:	80 93 c9 0b 	sts	0x0BC9, r24
    reply[1] = 125;
    7c00:	8d e7       	ldi	r24, 0x7D	; 125
    7c02:	80 93 ca 0b 	sts	0x0BCA, r24
    reply[2] = nodeid;
    7c06:	80 91 33 0c 	lds	r24, 0x0C33
    7c0a:	80 93 cb 0b 	sts	0x0BCB, r24
    reply[3] = pos / 256;
    7c0e:	50 93 cc 0b 	sts	0x0BCC, r21
    reply[4] = pos % 256;
    7c12:	40 93 cd 0b 	sts	0x0BCD, r20
    fseek2(fp, (int32_t) pos, 0);
    7c16:	60 e0       	ldi	r22, 0x00	; 0
    7c18:	70 e0       	ldi	r23, 0x00	; 0
    7c1a:	80 91 91 0b 	lds	r24, 0x0B91
    7c1e:	90 91 92 0b 	lds	r25, 0x0B92
    7c22:	20 e0       	ldi	r18, 0x00	; 0
    7c24:	30 e0       	ldi	r19, 0x00	; 0
    7c26:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <fseek2>
    fread2(fp, &reply[6], 20);
    7c2a:	be 01       	movw	r22, r28
    7c2c:	6a 5f       	subi	r22, 0xFA	; 250
    7c2e:	7f 4f       	sbci	r23, 0xFF	; 255
    7c30:	80 91 91 0b 	lds	r24, 0x0B91
    7c34:	90 91 92 0b 	lds	r25, 0x0B92
    7c38:	44 e1       	ldi	r20, 0x14	; 20
    7c3a:	50 e0       	ldi	r21, 0x00	; 0
    7c3c:	0e 94 25 1e 	call	0x3c4a	; 0x3c4a <fread2>
    StandardSocketSend(0xefef, 0xffff, 32, reply);
    7c40:	8f ee       	ldi	r24, 0xEF	; 239
    7c42:	9f ee       	ldi	r25, 0xEF	; 239
    7c44:	6f ef       	ldi	r22, 0xFF	; 255
    7c46:	7f ef       	ldi	r23, 0xFF	; 255
    7c48:	40 e2       	ldi	r20, 0x20	; 32
    7c4a:	9e 01       	movw	r18, r28
    7c4c:	0e 94 5d 02 	call	0x4ba	; 0x4ba <StandardSocketSend>
    
   // enabletracingfunction();
}
    7c50:	df 91       	pop	r29
    7c52:	cf 91       	pop	r28
    7c54:	08 95       	ret

00007c56 <reply126>:

//-------------------------------------------------------------------------
//possible bug here 
void reply126(uint8_t * receivebuffer)
{
    fclose2(fp);
    7c56:	80 91 91 0b 	lds	r24, 0x0B91
    7c5a:	90 91 92 0b 	lds	r25, 0x0B92
    7c5e:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <fclose2>
}
    7c62:	08 95       	ret

00007c64 <reply_ps>:

//-------------------------------------------------------------------------
void reply_ps(uint8_t * receivebuffer)
{
    7c64:	8f 92       	push	r8
    7c66:	9f 92       	push	r9
    7c68:	af 92       	push	r10
    7c6a:	bf 92       	push	r11
    7c6c:	cf 92       	push	r12
    7c6e:	df 92       	push	r13
    7c70:	ef 92       	push	r14
    7c72:	ff 92       	push	r15
    7c74:	0f 93       	push	r16
    7c76:	1f 93       	push	r17
    7c78:	df 93       	push	r29
    7c7a:	cf 93       	push	r28
    7c7c:	00 d0       	rcall	.+0      	; 0x7c7e <reply_ps+0x1a>
    7c7e:	cd b7       	in	r28, 0x3d	; 61
    7c80:	de b7       	in	r29, 0x3e	; 62
    uint8_t i, len;

    //reply[0] = 15;
    reply[1] = 171;
    7c82:	8b ea       	ldi	r24, 0xAB	; 171
    7c84:	80 93 ca 0b 	sts	0x0BCA, r24
    reply[2] = nodeid;
    7c88:	80 91 33 0c 	lds	r24, 0x0C33
    7c8c:	80 93 cb 0b 	sts	0x0BCB, r24
    7c90:	e7 e2       	ldi	r30, 0x27	; 39
    7c92:	ee 2e       	mov	r14, r30
    7c94:	e9 e0       	ldi	r30, 0x09	; 9
    7c96:	fe 2e       	mov	r15, r30
    7c98:	88 24       	eor	r8, r8
    7c9a:	99 24       	eor	r9, r9
    for (i = 0; i < LITE_MAX_THREADS; i++)
    {
        if (thread_table[i].state != STATE_NULL)
    7c9c:	77 e2       	ldi	r23, 0x27	; 39
    7c9e:	a7 2e       	mov	r10, r23
    7ca0:	b1 2c       	mov	r11, r1
    7ca2:	8a 9c       	mul	r8, r10
    7ca4:	b0 01       	movw	r22, r0
    7ca6:	8b 9c       	mul	r8, r11
    7ca8:	70 0d       	add	r23, r0
    7caa:	9a 9c       	mul	r9, r10
    7cac:	70 0d       	add	r23, r0
    7cae:	11 24       	eor	r1, r1
    7cb0:	8b 01       	movw	r16, r22
    7cb2:	09 5d       	subi	r16, 0xD9	; 217
    7cb4:	16 4f       	sbci	r17, 0xF6	; 246
    7cb6:	d8 01       	movw	r26, r16
    7cb8:	12 96       	adiw	r26, 0x02	; 2
    7cba:	8c 91       	ld	r24, X
    7cbc:	12 97       	sbiw	r26, 0x02	; 2
    7cbe:	88 23       	and	r24, r24
    7cc0:	b9 f1       	breq	.+110    	; 0x7d30 <reply_ps+0xcc>
        {
            len = mystrlen((char *)thread_table[i].threadName);
    7cc2:	64 5d       	subi	r22, 0xD4	; 212
    7cc4:	76 4f       	sbci	r23, 0xF6	; 246
    7cc6:	cb 01       	movw	r24, r22
    7cc8:	69 83       	std	Y+1, r22	; 0x01
    7cca:	7a 83       	std	Y+2, r23	; 0x02
    7ccc:	0e 94 d4 36 	call	0x6da8	; 0x6da8 <mystrlen>
    7cd0:	48 2f       	mov	r20, r24
            reply[0] = len + 4;
    7cd2:	8c 5f       	subi	r24, 0xFC	; 252
    7cd4:	80 93 c9 0b 	sts	0x0BC9, r24
            reply[3] = thread_table[i].state;
    7cd8:	f8 01       	movw	r30, r16
    7cda:	82 81       	ldd	r24, Z+2	; 0x02
    7cdc:	80 93 cc 0b 	sts	0x0BCC, r24
            //if this is a break thread, then fetch the real number
            if (reply[3] == STATE_BREAK)
    7ce0:	69 81       	ldd	r22, Y+1	; 0x01
    7ce2:	7a 81       	ldd	r23, Y+2	; 0x02
    7ce4:	88 30       	cpi	r24, 0x08	; 8
    7ce6:	b9 f4       	brne	.+46     	; 0x7d16 <reply_ps+0xb2>
            {
                uint8_t *tempptr = (uint8_t *) thread_table[i].sp + 47;
    7ce8:	d7 01       	movw	r26, r14
    7cea:	ed 91       	ld	r30, X+
    7cec:	fc 91       	ld	r31, X
    7cee:	11 97       	sbiw	r26, 0x01	; 1
                uint16_t addr =
                    (((uint16_t) (*tempptr)) * 256 + *(tempptr + 1) - 3);
    7cf0:	d7 a4       	ldd	r13, Z+47	; 0x2f
    7cf2:	cc 24       	eor	r12, r12
    7cf4:	80 a9       	ldd	r24, Z+48	; 0x30
    7cf6:	96 01       	movw	r18, r12
    7cf8:	28 0f       	add	r18, r24
    7cfa:	31 1d       	adc	r19, r1
            reply[3] = thread_table[i].state;
            //if this is a break thread, then fetch the real number
            if (reply[3] == STATE_BREAK)
            {
                uint8_t *tempptr = (uint8_t *) thread_table[i].sp + 47;
                uint16_t addr =
    7cfc:	23 50       	subi	r18, 0x03	; 3
    7cfe:	30 40       	sbci	r19, 0x00	; 0
                    (((uint16_t) (*tempptr)) * 256 + *(tempptr + 1) - 3);
                reply[4] = addr / 256;
    7d00:	30 93 cd 0b 	sts	0x0BCD, r19
                reply[5] = addr % 256;
    7d04:	20 93 ce 0b 	sts	0x0BCE, r18
                reply[0] += 2;
    7d08:	84 2f       	mov	r24, r20
    7d0a:	8a 5f       	subi	r24, 0xFA	; 250
    7d0c:	80 93 c9 0b 	sts	0x0BC9, r24
                mystrncpy((char *)&reply[6],
    7d10:	8f ec       	ldi	r24, 0xCF	; 207
    7d12:	9b e0       	ldi	r25, 0x0B	; 11
    7d14:	02 c0       	rjmp	.+4      	; 0x7d1a <reply_ps+0xb6>
                          (char *)thread_table[i].threadName, len);
            }
            else
            {
                mystrncpy((char *)&reply[4],
    7d16:	8d ec       	ldi	r24, 0xCD	; 205
    7d18:	9b e0       	ldi	r25, 0x0B	; 11
    7d1a:	0e 94 44 36 	call	0x6c88	; 0x6c88 <mystrncpy>
                          (char *)thread_table[i].threadName, len);
            }
            StandardSocketSend(0xefef, 0xffff, 32, reply);
    7d1e:	8f ee       	ldi	r24, 0xEF	; 239
    7d20:	9f ee       	ldi	r25, 0xEF	; 239
    7d22:	6f ef       	ldi	r22, 0xFF	; 255
    7d24:	7f ef       	ldi	r23, 0xFF	; 255
    7d26:	40 e2       	ldi	r20, 0x20	; 32
    7d28:	29 ec       	ldi	r18, 0xC9	; 201
    7d2a:	3b e0       	ldi	r19, 0x0B	; 11
    7d2c:	0e 94 5d 02 	call	0x4ba	; 0x4ba <StandardSocketSend>
    7d30:	08 94       	sec
    7d32:	81 1c       	adc	r8, r1
    7d34:	91 1c       	adc	r9, r1
    7d36:	e7 e2       	ldi	r30, 0x27	; 39
    7d38:	f0 e0       	ldi	r31, 0x00	; 0
    7d3a:	ee 0e       	add	r14, r30
    7d3c:	ff 1e       	adc	r15, r31
    uint8_t i, len;

    //reply[0] = 15;
    reply[1] = 171;
    reply[2] = nodeid;
    for (i = 0; i < LITE_MAX_THREADS; i++)
    7d3e:	f3 e0       	ldi	r31, 0x03	; 3
    7d40:	8f 16       	cp	r8, r31
    7d42:	91 04       	cpc	r9, r1
    7d44:	09 f0       	breq	.+2      	; 0x7d48 <reply_ps+0xe4>
    7d46:	ad cf       	rjmp	.-166    	; 0x7ca2 <reply_ps+0x3e>
                          (char *)thread_table[i].threadName, len);
            }
            StandardSocketSend(0xefef, 0xffff, 32, reply);
        }
    }
}
    7d48:	0f 90       	pop	r0
    7d4a:	0f 90       	pop	r0
    7d4c:	cf 91       	pop	r28
    7d4e:	df 91       	pop	r29
    7d50:	1f 91       	pop	r17
    7d52:	0f 91       	pop	r16
    7d54:	ff 90       	pop	r15
    7d56:	ef 90       	pop	r14
    7d58:	df 90       	pop	r13
    7d5a:	cf 90       	pop	r12
    7d5c:	bf 90       	pop	r11
    7d5e:	af 90       	pop	r10
    7d60:	9f 90       	pop	r9
    7d62:	8f 90       	pop	r8
    7d64:	08 95       	ret

00007d66 <reply_killthread>:

//-------------------------------------------------------------------------
void reply_killthread(uint8_t * receivebuffer)
{
    7d66:	4f 92       	push	r4
    7d68:	5f 92       	push	r5
    7d6a:	6f 92       	push	r6
    7d6c:	7f 92       	push	r7
    7d6e:	8f 92       	push	r8
    7d70:	9f 92       	push	r9
    7d72:	af 92       	push	r10
    7d74:	bf 92       	push	r11
    7d76:	cf 92       	push	r12
    7d78:	df 92       	push	r13
    7d7a:	ef 92       	push	r14
    7d7c:	ff 92       	push	r15
    7d7e:	0f 93       	push	r16
    7d80:	1f 93       	push	r17
    7d82:	cf 93       	push	r28
    7d84:	df 93       	push	r29
    uint8_t index;

    index = 0; 
    start = NULL;
    end = NULL;
    receivebuffer[receivebuffer[0]] = '\0';
    7d86:	fc 01       	movw	r30, r24
    7d88:	20 81       	ld	r18, Z
    7d8a:	e2 0f       	add	r30, r18
    7d8c:	f1 1d       	adc	r31, r1
    7d8e:	10 82       	st	Z, r1
    7d90:	08 e3       	ldi	r16, 0x38	; 56
    7d92:	19 e0       	ldi	r17, 0x09	; 9
    7d94:	c0 e0       	ldi	r28, 0x00	; 0
    7d96:	d0 e0       	ldi	r29, 0x00	; 0
    uint8_t i;
    uint8_t testtrue = 0;
    uint8_t *start, *end;
    uint8_t index;

    index = 0; 
    7d98:	88 24       	eor	r8, r8
    start = NULL;
    end = NULL;
    7d9a:	aa 24       	eor	r10, r10
    7d9c:	bb 24       	eor	r11, r11
    uint8_t testtrue = 0;
    uint8_t *start, *end;
    uint8_t index;

    index = 0; 
    start = NULL;
    7d9e:	cc 24       	eor	r12, r12
    7da0:	dd 24       	eor	r13, r13

//-------------------------------------------------------------------------
void reply_killthread(uint8_t * receivebuffer)
{
    uint8_t i;
    uint8_t testtrue = 0;
    7da2:	99 24       	eor	r9, r9
    start = NULL;
    end = NULL;
    receivebuffer[receivebuffer[0]] = '\0';
    for (i = 0; i < LITE_MAX_THREADS; i++)
    {
        if (thread_table[i].state != STATE_NULL)
    7da4:	37 e2       	ldi	r19, 0x27	; 39
    7da6:	63 2e       	mov	r6, r19
    7da8:	71 2c       	mov	r7, r1
        {
            if (superstring
                ((char *)thread_table[i].threadName,
    7daa:	23 e0       	ldi	r18, 0x03	; 3
    7dac:	42 2e       	mov	r4, r18
    7dae:	51 2c       	mov	r5, r1
    7db0:	48 0e       	add	r4, r24
    7db2:	59 1e       	adc	r5, r25
    start = NULL;
    end = NULL;
    receivebuffer[receivebuffer[0]] = '\0';
    for (i = 0; i < LITE_MAX_THREADS; i++)
    {
        if (thread_table[i].state != STATE_NULL)
    7db4:	c6 9d       	mul	r28, r6
    7db6:	c0 01       	movw	r24, r0
    7db8:	c7 9d       	mul	r28, r7
    7dba:	90 0d       	add	r25, r0
    7dbc:	d6 9d       	mul	r29, r6
    7dbe:	90 0d       	add	r25, r0
    7dc0:	11 24       	eor	r1, r1
    7dc2:	b7 e2       	ldi	r27, 0x27	; 39
    7dc4:	eb 2e       	mov	r14, r27
    7dc6:	b9 e0       	ldi	r27, 0x09	; 9
    7dc8:	fb 2e       	mov	r15, r27
    7dca:	e8 0e       	add	r14, r24
    7dcc:	f9 1e       	adc	r15, r25
    7dce:	f7 01       	movw	r30, r14
    7dd0:	22 81       	ldd	r18, Z+2	; 0x02
    7dd2:	22 23       	and	r18, r18
    7dd4:	89 f0       	breq	.+34     	; 0x7df8 <reply_killthread+0x92>
        {
            if (superstring
                ((char *)thread_table[i].threadName,
    7dd6:	84 5d       	subi	r24, 0xD4	; 212
    7dd8:	96 4f       	sbci	r25, 0xF6	; 246
    7dda:	b2 01       	movw	r22, r4
    7ddc:	0e 94 a7 36 	call	0x6d4e	; 0x6d4e <superstring>
    receivebuffer[receivebuffer[0]] = '\0';
    for (i = 0; i < LITE_MAX_THREADS; i++)
    {
        if (thread_table[i].state != STATE_NULL)
        {
            if (superstring
    7de0:	00 97       	sbiw	r24, 0x00	; 0
    7de2:	51 f4       	brne	.+20     	; 0x7df8 <reply_killthread+0x92>
                ((char *)thread_table[i].threadName,
                 (char *)&receivebuffer[3]) == 0)
            {
                start = (uint8_t *) thread_table[i].ramstart;
    7de4:	f8 01       	movw	r30, r16
    7de6:	c0 80       	ld	r12, Z
    7de8:	d1 80       	ldd	r13, Z+1	; 0x01
                end = (uint8_t *) thread_table[i].ramend;
    7dea:	a2 80       	ldd	r10, Z+2	; 0x02
    7dec:	b3 80       	ldd	r11, Z+3	; 0x03
                index = i;
                thread_table[i].state = STATE_NULL;
    7dee:	f7 01       	movw	r30, r14
    7df0:	12 82       	std	Z+2, r1	; 0x02
    7df2:	8c 2e       	mov	r8, r28
                testtrue = 1;
    7df4:	99 24       	eor	r9, r9
    7df6:	93 94       	inc	r9
                 (char *)&receivebuffer[3]) == 0)
            {
                start = (uint8_t *) thread_table[i].ramstart;
                end = (uint8_t *) thread_table[i].ramend;
                index = i;
                thread_table[i].state = STATE_NULL;
    7df8:	21 96       	adiw	r28, 0x01	; 1
    7dfa:	09 5d       	subi	r16, 0xD9	; 217
    7dfc:	1f 4f       	sbci	r17, 0xFF	; 255

    index = 0; 
    start = NULL;
    end = NULL;
    receivebuffer[receivebuffer[0]] = '\0';
    for (i = 0; i < LITE_MAX_THREADS; i++)
    7dfe:	c3 30       	cpi	r28, 0x03	; 3
    7e00:	d1 05       	cpc	r29, r1
    7e02:	c1 f6       	brne	.-80     	; 0x7db4 <reply_killthread+0x4e>
                thread_table[i].state = STATE_NULL;
                testtrue = 1;
            }
        }
    }
    if (testtrue == 1)
    7e04:	99 2d       	mov	r25, r9
    7e06:	91 30       	cpi	r25, 0x01	; 1
    7e08:	51 f5       	brne	.+84     	; 0x7e5e <reply_killthread+0xf8>
    {
        deleteThreadRegistrationInReceiverHandles(start, end);
    7e0a:	c6 01       	movw	r24, r12
    7e0c:	b5 01       	movw	r22, r10
    7e0e:	0e 94 11 0b 	call	0x1622	; 0x1622 <deleteThreadRegistrationInReceiverHandles>
        if (thread_table[index].thread_clear_function != NULL)
    7e12:	08 2d       	mov	r16, r8
    7e14:	10 e0       	ldi	r17, 0x00	; 0
    7e16:	87 e2       	ldi	r24, 0x27	; 39
    7e18:	90 e0       	ldi	r25, 0x00	; 0
    7e1a:	08 9f       	mul	r16, r24
    7e1c:	e0 01       	movw	r28, r0
    7e1e:	09 9f       	mul	r16, r25
    7e20:	d0 0d       	add	r29, r0
    7e22:	18 9f       	mul	r17, r24
    7e24:	d0 0d       	add	r29, r0
    7e26:	11 24       	eor	r1, r1
    7e28:	c9 5d       	subi	r28, 0xD9	; 217
    7e2a:	d6 4f       	sbci	r29, 0xF6	; 246
    7e2c:	eb 8d       	ldd	r30, Y+27	; 0x1b
    7e2e:	fc 8d       	ldd	r31, Y+28	; 0x1c
    7e30:	30 97       	sbiw	r30, 0x00	; 0
    7e32:	19 f0       	breq	.+6      	; 0x7e3a <reply_killthread+0xd4>
        {
            (*thread_table[index].thread_clear_function) ();
    7e34:	09 95       	icall
            thread_table[index].thread_clear_function = NULL;
    7e36:	1c 8e       	std	Y+28, r1	; 0x1c
    7e38:	1b 8e       	std	Y+27, r1	; 0x1b
        }
        cbi(MCUCR, SE);
    7e3a:	85 b7       	in	r24, 0x35	; 53
    7e3c:	8f 7d       	andi	r24, 0xDF	; 223
    7e3e:	85 bf       	out	0x35, r24	; 53
        if (timercallback[index] != NULL)
    7e40:	f8 01       	movw	r30, r16
    7e42:	ee 0f       	add	r30, r30
    7e44:	ff 1f       	adc	r31, r31
    7e46:	eb 52       	subi	r30, 0x2B	; 43
    7e48:	f6 4f       	sbci	r31, 0xF6	; 246
    7e4a:	80 81       	ld	r24, Z
    7e4c:	91 81       	ldd	r25, Z+1	; 0x01
    7e4e:	00 97       	sbiw	r24, 0x00	; 0
    7e50:	31 f0       	breq	.+12     	; 0x7e5e <reply_killthread+0xf8>
        {
            timercallback[index] = NULL;
    7e52:	11 82       	std	Z+1, r1	; 0x01
    7e54:	10 82       	st	Z, r1
            GenericTimerStop(index + 12);
    7e56:	88 2d       	mov	r24, r8
    7e58:	84 5f       	subi	r24, 0xF4	; 244
    7e5a:	0e 94 a4 32 	call	0x6548	; 0x6548 <GenericTimerStop>
           receivehandles[ i ].port = 0;     
           }
           }
         */
    }
    reply[0] = 4;
    7e5e:	84 e0       	ldi	r24, 0x04	; 4
    7e60:	80 93 c9 0b 	sts	0x0BC9, r24
    reply[1] = 232;
    7e64:	88 ee       	ldi	r24, 0xE8	; 232
    7e66:	80 93 ca 0b 	sts	0x0BCA, r24
    reply[2] = nodeid;
    7e6a:	80 91 33 0c 	lds	r24, 0x0C33
    7e6e:	80 93 cb 0b 	sts	0x0BCB, r24
    reply[3] = testtrue;
    7e72:	90 92 cc 0b 	sts	0x0BCC, r9
    StandardSocketSend(0xefef, 0xffff, 32, reply);
    7e76:	8f ee       	ldi	r24, 0xEF	; 239
    7e78:	9f ee       	ldi	r25, 0xEF	; 239
    7e7a:	6f ef       	ldi	r22, 0xFF	; 255
    7e7c:	7f ef       	ldi	r23, 0xFF	; 255
    7e7e:	40 e2       	ldi	r20, 0x20	; 32
    7e80:	29 ec       	ldi	r18, 0xC9	; 201
    7e82:	3b e0       	ldi	r19, 0x0B	; 11
    7e84:	0e 94 5d 02 	call	0x4ba	; 0x4ba <StandardSocketSend>
}
    7e88:	df 91       	pop	r29
    7e8a:	cf 91       	pop	r28
    7e8c:	1f 91       	pop	r17
    7e8e:	0f 91       	pop	r16
    7e90:	ff 90       	pop	r15
    7e92:	ef 90       	pop	r14
    7e94:	df 90       	pop	r13
    7e96:	cf 90       	pop	r12
    7e98:	bf 90       	pop	r11
    7e9a:	af 90       	pop	r10
    7e9c:	9f 90       	pop	r9
    7e9e:	8f 90       	pop	r8
    7ea0:	7f 90       	pop	r7
    7ea2:	6f 90       	pop	r6
    7ea4:	5f 90       	pop	r5
    7ea6:	4f 90       	pop	r4
    7ea8:	08 95       	ret

00007eaa <reply_du>:

//-------------------------------------------------------------------------
void reply_du(uint8_t * receivebuffer)
{
    7eaa:	1f 93       	push	r17
    int e1, e2, e3;

    e1 = fcheckFSAllocation();
    7eac:	0e 94 0b 1e 	call	0x3c16	; 0x3c16 <fcheckFSAllocation>
    7eb0:	18 2f       	mov	r17, r24
    e2 = fcheckStorageAllocation();
    7eb2:	0e 94 0e 1e 	call	0x3c1c	; 0x3c1c <fcheckStorageAllocation>
    7eb6:	9c 01       	movw	r18, r24
    e3 = 0;
    if (e2 == 256)
    7eb8:	81 e0       	ldi	r24, 0x01	; 1
    7eba:	20 30       	cpi	r18, 0x00	; 0
    7ebc:	38 07       	cpc	r19, r24
    7ebe:	19 f0       	breq	.+6      	; 0x7ec6 <reply_du+0x1c>
{
    int e1, e2, e3;

    e1 = fcheckFSAllocation();
    e2 = fcheckStorageAllocation();
    e3 = 0;
    7ec0:	40 e0       	ldi	r20, 0x00	; 0
    7ec2:	50 e0       	ldi	r21, 0x00	; 0
    7ec4:	04 c0       	rjmp	.+8      	; 0x7ece <reply_du+0x24>
    if (e2 == 256)
    {
        e2 = 128;
        e3 = 128;
    7ec6:	40 e8       	ldi	r20, 0x80	; 128
    7ec8:	50 e0       	ldi	r21, 0x00	; 0
    e1 = fcheckFSAllocation();
    e2 = fcheckStorageAllocation();
    e3 = 0;
    if (e2 == 256)
    {
        e2 = 128;
    7eca:	20 e8       	ldi	r18, 0x80	; 128
    7ecc:	30 e0       	ldi	r19, 0x00	; 0
        e3 = 128;
    }
    reply[0] = 6;
    7ece:	86 e0       	ldi	r24, 0x06	; 6
    7ed0:	80 93 c9 0b 	sts	0x0BC9, r24
    reply[1] = 211;
    7ed4:	83 ed       	ldi	r24, 0xD3	; 211
    7ed6:	80 93 ca 0b 	sts	0x0BCA, r24
    reply[2] = nodeid;
    7eda:	80 91 33 0c 	lds	r24, 0x0C33
    7ede:	80 93 cb 0b 	sts	0x0BCB, r24
    reply[3] = e1;
    7ee2:	10 93 cc 0b 	sts	0x0BCC, r17
    reply[4] = e2;
    7ee6:	20 93 cd 0b 	sts	0x0BCD, r18
    reply[5] = e3;
    7eea:	40 93 ce 0b 	sts	0x0BCE, r20
    //printStringN(reply,32);       
    StandardSocketSend(0xefef, 0xffff, 32, reply);
    7eee:	8f ee       	ldi	r24, 0xEF	; 239
    7ef0:	9f ee       	ldi	r25, 0xEF	; 239
    7ef2:	6f ef       	ldi	r22, 0xFF	; 255
    7ef4:	7f ef       	ldi	r23, 0xFF	; 255
    7ef6:	40 e2       	ldi	r20, 0x20	; 32
    7ef8:	29 ec       	ldi	r18, 0xC9	; 201
    7efa:	3b e0       	ldi	r19, 0x0B	; 11
    7efc:	0e 94 5d 02 	call	0x4ba	; 0x4ba <StandardSocketSend>
}
    7f00:	1f 91       	pop	r17
    7f02:	08 95       	ret

00007f04 <reply_search>:

//-------------------------------------------------------------------------
void reply_search(uint8_t * receivebuffer)
{
    7f04:	ef 92       	push	r14
    7f06:	ff 92       	push	r15
    7f08:	0f 93       	push	r16
    7f0a:	1f 93       	push	r17
    7f0c:	df 93       	push	r29
    7f0e:	cf 93       	push	r28
    7f10:	cd b7       	in	r28, 0x3d	; 61
    7f12:	de b7       	in	r29, 0x3e	; 62
    7f14:	a2 97       	sbiw	r28, 0x22	; 34
    7f16:	0f b6       	in	r0, 0x3f	; 63
    7f18:	f8 94       	cli
    7f1a:	de bf       	out	0x3e, r29	; 62
    7f1c:	0f be       	out	0x3f, r0	; 63
    7f1e:	cd bf       	out	0x3d, r28	; 61
    7f20:	8c 01       	movw	r16, r24
    char filename[13];
    uint8_t searchresults[20];
    uint8_t numofsearch;
    uint8_t i;

    mystrncpy(filename, (char *)&receivebuffer[3], receivebuffer[0] - 3);
    7f22:	52 e0       	ldi	r21, 0x02	; 2
    7f24:	e5 2e       	mov	r14, r21
    7f26:	f1 2c       	mov	r15, r1
    7f28:	ec 0e       	add	r14, r28
    7f2a:	fd 1e       	adc	r15, r29
    7f2c:	bc 01       	movw	r22, r24
    7f2e:	6d 5f       	subi	r22, 0xFD	; 253
    7f30:	7f 4f       	sbci	r23, 0xFF	; 255
    7f32:	fc 01       	movw	r30, r24
    7f34:	40 81       	ld	r20, Z
    7f36:	43 50       	subi	r20, 0x03	; 3
    7f38:	c7 01       	movw	r24, r14
    7f3a:	0e 94 44 36 	call	0x6c88	; 0x6c88 <mystrncpy>
    filename[receivebuffer[0] - 3] = '\0';
    7f3e:	f8 01       	movw	r30, r16
    7f40:	80 81       	ld	r24, Z
    7f42:	fe 01       	movw	r30, r28
    7f44:	31 97       	sbiw	r30, 0x01	; 1
    7f46:	e8 0f       	add	r30, r24
    7f48:	f1 1d       	adc	r31, r1
    7f4a:	10 82       	st	Z, r1
    fsearch(searchresults, &numofsearch, filename);
    7f4c:	8e 01       	movw	r16, r28
    7f4e:	01 5f       	subi	r16, 0xF1	; 241
    7f50:	1f 4f       	sbci	r17, 0xFF	; 255
    7f52:	c8 01       	movw	r24, r16
    7f54:	be 01       	movw	r22, r28
    7f56:	6f 5f       	subi	r22, 0xFF	; 255
    7f58:	7f 4f       	sbci	r23, 0xFF	; 255
    7f5a:	a7 01       	movw	r20, r14
    7f5c:	0e 94 e2 21 	call	0x43c4	; 0x43c4 <fsearch>
    for (i = 0; i < numofsearch; i++)
    7f60:	ee 24       	eor	r14, r14
    {
        fdirnode((char *)&reply[3], 29, searchresults[i]);
        reply[0] = mystrlen((char *)&reply[3]) + 3;
        reply[1] = 221;
    7f62:	4d ed       	ldi	r20, 0xDD	; 221
    7f64:	f4 2e       	mov	r15, r20
    uint8_t i;

    mystrncpy(filename, (char *)&receivebuffer[3], receivebuffer[0] - 3);
    filename[receivebuffer[0] - 3] = '\0';
    fsearch(searchresults, &numofsearch, filename);
    for (i = 0; i < numofsearch; i++)
    7f66:	22 c0       	rjmp	.+68     	; 0x7fac <reply_search+0xa8>
    {
        fdirnode((char *)&reply[3], 29, searchresults[i]);
    7f68:	f8 01       	movw	r30, r16
    7f6a:	ee 0d       	add	r30, r14
    7f6c:	f1 1d       	adc	r31, r1
    7f6e:	40 81       	ld	r20, Z
    7f70:	8c ec       	ldi	r24, 0xCC	; 204
    7f72:	9b e0       	ldi	r25, 0x0B	; 11
    7f74:	6d e1       	ldi	r22, 0x1D	; 29
    7f76:	70 e0       	ldi	r23, 0x00	; 0
    7f78:	50 e0       	ldi	r21, 0x00	; 0
    7f7a:	0e 94 16 22 	call	0x442c	; 0x442c <fdirnode>
        reply[0] = mystrlen((char *)&reply[3]) + 3;
    7f7e:	8c ec       	ldi	r24, 0xCC	; 204
    7f80:	9b e0       	ldi	r25, 0x0B	; 11
    7f82:	0e 94 d4 36 	call	0x6da8	; 0x6da8 <mystrlen>
    7f86:	8d 5f       	subi	r24, 0xFD	; 253
    7f88:	80 93 c9 0b 	sts	0x0BC9, r24
        reply[1] = 221;
    7f8c:	f0 92 ca 0b 	sts	0x0BCA, r15
        reply[2] = nodeid;
    7f90:	80 91 33 0c 	lds	r24, 0x0C33
    7f94:	80 93 cb 0b 	sts	0x0BCB, r24
        //printStringN(reply,32);       
        StandardSocketSend(0xefef, 0xffff, 32, reply);
    7f98:	8f ee       	ldi	r24, 0xEF	; 239
    7f9a:	9f ee       	ldi	r25, 0xEF	; 239
    7f9c:	6f ef       	ldi	r22, 0xFF	; 255
    7f9e:	7f ef       	ldi	r23, 0xFF	; 255
    7fa0:	40 e2       	ldi	r20, 0x20	; 32
    7fa2:	29 ec       	ldi	r18, 0xC9	; 201
    7fa4:	3b e0       	ldi	r19, 0x0B	; 11
    7fa6:	0e 94 5d 02 	call	0x4ba	; 0x4ba <StandardSocketSend>
    uint8_t i;

    mystrncpy(filename, (char *)&receivebuffer[3], receivebuffer[0] - 3);
    filename[receivebuffer[0] - 3] = '\0';
    fsearch(searchresults, &numofsearch, filename);
    for (i = 0; i < numofsearch; i++)
    7faa:	e3 94       	inc	r14
    7fac:	89 81       	ldd	r24, Y+1	; 0x01
    7fae:	e8 16       	cp	r14, r24
    7fb0:	d8 f2       	brcs	.-74     	; 0x7f68 <reply_search+0x64>
        reply[1] = 221;
        reply[2] = nodeid;
        //printStringN(reply,32);       
        StandardSocketSend(0xefef, 0xffff, 32, reply);
    }
}
    7fb2:	a2 96       	adiw	r28, 0x22	; 34
    7fb4:	0f b6       	in	r0, 0x3f	; 63
    7fb6:	f8 94       	cli
    7fb8:	de bf       	out	0x3e, r29	; 62
    7fba:	0f be       	out	0x3f, r0	; 63
    7fbc:	cd bf       	out	0x3d, r28	; 61
    7fbe:	cf 91       	pop	r28
    7fc0:	df 91       	pop	r29
    7fc2:	1f 91       	pop	r17
    7fc4:	0f 91       	pop	r16
    7fc6:	ff 90       	pop	r15
    7fc8:	ef 90       	pop	r14
    7fca:	08 95       	ret

00007fcc <reply_formatSystem>:

//-------------------------------------------------------------------------
void reply_formatSystem(uint8_t * receivebuffer)
{
    formatSystem();
    7fcc:	0e 94 13 22 	call	0x4426	; 0x4426 <formatSystem>
    buildRootNode();
    7fd0:	0e 94 a7 25 	call	0x4b4e	; 0x4b4e <buildRootNode>
    
}
    7fd4:	08 95       	ret

00007fd6 <reply_nodeRestart>:

//-------------------------------------------------------------------------
void reply_nodeRestart(uint8_t * receivebuffer)
{
    avr_resetNode();
    7fd6:	0e 94 c3 03 	call	0x786	; 0x786 <avr_resetNode>
}
    7fda:	08 95       	ret

00007fdc <InitShell>:
    postNewThreadTask();
}

//-------------------------------------------------------------------------
void InitShell()
{
    7fdc:	ef 92       	push	r14
    7fde:	ff 92       	push	r15
    7fe0:	0f 93       	push	r16
    7fe2:	1f 93       	push	r17
    IncomingLength = 0;
    7fe4:	10 92 ee 0b 	sts	0x0BEE, r1
    nodeid = CURRENT_NODE_ID;
    7fe8:	80 91 c1 07 	lds	r24, 0x07C1
    7fec:	90 91 c2 07 	lds	r25, 0x07C2
    7ff0:	90 93 34 0c 	sts	0x0C34, r25
    7ff4:	80 93 33 0c 	sts	0x0C33, r24
    registerEvent(0xfefe, 64, &IncomingLength, IncomingMsg, PacketInfo,
    7ff8:	8e ef       	ldi	r24, 0xFE	; 254
    7ffa:	9e ef       	ldi	r25, 0xFE	; 254
    7ffc:	60 e4       	ldi	r22, 0x40	; 64
    7ffe:	4e ee       	ldi	r20, 0xEE	; 238
    8000:	5b e0       	ldi	r21, 0x0B	; 11
    8002:	2f ee       	ldi	r18, 0xEF	; 239
    8004:	3b e0       	ldi	r19, 0x0B	; 11
    8006:	0f e2       	ldi	r16, 0x2F	; 47
    8008:	1c e0       	ldi	r17, 0x0C	; 12
    800a:	79 e3       	ldi	r23, 0x39	; 57
    800c:	e7 2e       	mov	r14, r23
    800e:	77 e3       	ldi	r23, 0x37	; 55
    8010:	f7 2e       	mov	r15, r23
    8012:	0e 94 42 0a 	call	0x1484	; 0x1484 <registerEvent>
                  WakeupMe);
    init_breakpoint_table();
    8016:	0e 94 42 37 	call	0x6e84	; 0x6e84 <init_breakpoint_table>
}
    801a:	1f 91       	pop	r17
    801c:	0f 91       	pop	r16
    801e:	ff 90       	pop	r15
    8020:	ef 90       	pop	r14
    8022:	08 95       	ret

00008024 <commandHandle>:
//-------------------------------------------------------------------------
void commandHandle(uint8_t * receivebuffer, uint8_t total)
{
    uint8_t commandtype;

    if (!((receivebuffer[2] == 0) || (receivebuffer[2] == nodeid)))
    8024:	fc 01       	movw	r30, r24
    8026:	42 81       	ldd	r20, Z+2	; 0x02
    8028:	44 23       	and	r20, r20
    802a:	49 f0       	breq	.+18     	; 0x803e <commandHandle+0x1a>
    802c:	50 e0       	ldi	r21, 0x00	; 0
    802e:	20 91 33 0c 	lds	r18, 0x0C33
    8032:	30 91 34 0c 	lds	r19, 0x0C34
    8036:	42 17       	cp	r20, r18
    8038:	53 07       	cpc	r21, r19
    803a:	09 f0       	breq	.+2      	; 0x803e <commandHandle+0x1a>
    803c:	a2 c0       	rjmp	.+324    	; 0x8182 <commandHandle+0x15e>
    {
        return;
    }
    commandtype = receivebuffer[1];
    switch (commandtype)
    803e:	fc 01       	movw	r30, r24
    8040:	21 81       	ldd	r18, Z+1	; 0x01
    8042:	2a 37       	cpi	r18, 0x7A	; 122
    8044:	09 f4       	brne	.+2      	; 0x8048 <commandHandle+0x24>
    8046:	78 c0       	rjmp	.+240    	; 0x8138 <commandHandle+0x114>
    8048:	2b 37       	cpi	r18, 0x7B	; 123
    804a:	58 f5       	brcc	.+86     	; 0x80a2 <commandHandle+0x7e>
    804c:	20 36       	cpi	r18, 0x60	; 96
    804e:	09 f4       	brne	.+2      	; 0x8052 <commandHandle+0x2e>
    8050:	62 c0       	rjmp	.+196    	; 0x8116 <commandHandle+0xf2>
    8052:	21 36       	cpi	r18, 0x61	; 97
    8054:	98 f4       	brcc	.+38     	; 0x807c <commandHandle+0x58>
    8056:	2d 35       	cpi	r18, 0x5D	; 93
    8058:	09 f4       	brne	.+2      	; 0x805c <commandHandle+0x38>
    805a:	54 c0       	rjmp	.+168    	; 0x8104 <commandHandle+0xe0>
    805c:	2e 35       	cpi	r18, 0x5E	; 94
    805e:	38 f4       	brcc	.+14     	; 0x806e <commandHandle+0x4a>
    8060:	2b 35       	cpi	r18, 0x5B	; 91
    8062:	09 f4       	brne	.+2      	; 0x8066 <commandHandle+0x42>
    8064:	49 c0       	rjmp	.+146    	; 0x80f8 <commandHandle+0xd4>
    8066:	2c 35       	cpi	r18, 0x5C	; 92
    8068:	09 f0       	breq	.+2      	; 0x806c <commandHandle+0x48>
    806a:	8b c0       	rjmp	.+278    	; 0x8182 <commandHandle+0x15e>
    806c:	48 c0       	rjmp	.+144    	; 0x80fe <commandHandle+0xda>
    806e:	2e 35       	cpi	r18, 0x5E	; 94
    8070:	09 f4       	brne	.+2      	; 0x8074 <commandHandle+0x50>
    8072:	4b c0       	rjmp	.+150    	; 0x810a <commandHandle+0xe6>
    8074:	2f 35       	cpi	r18, 0x5F	; 95
    8076:	09 f0       	breq	.+2      	; 0x807a <commandHandle+0x56>
    8078:	84 c0       	rjmp	.+264    	; 0x8182 <commandHandle+0x15e>
    807a:	4a c0       	rjmp	.+148    	; 0x8110 <commandHandle+0xec>
    807c:	27 36       	cpi	r18, 0x67	; 103
    807e:	09 f4       	brne	.+2      	; 0x8082 <commandHandle+0x5e>
    8080:	53 c0       	rjmp	.+166    	; 0x8128 <commandHandle+0x104>
    8082:	28 36       	cpi	r18, 0x68	; 104
    8084:	38 f4       	brcc	.+14     	; 0x8094 <commandHandle+0x70>
    8086:	25 36       	cpi	r18, 0x65	; 101
    8088:	09 f4       	brne	.+2      	; 0x808c <commandHandle+0x68>
    808a:	48 c0       	rjmp	.+144    	; 0x811c <commandHandle+0xf8>
    808c:	26 36       	cpi	r18, 0x66	; 102
    808e:	09 f0       	breq	.+2      	; 0x8092 <commandHandle+0x6e>
    8090:	78 c0       	rjmp	.+240    	; 0x8182 <commandHandle+0x15e>
    8092:	47 c0       	rjmp	.+142    	; 0x8122 <commandHandle+0xfe>
    8094:	28 36       	cpi	r18, 0x68	; 104
    8096:	09 f4       	brne	.+2      	; 0x809a <commandHandle+0x76>
    8098:	47 c0       	rjmp	.+142    	; 0x8128 <commandHandle+0x104>
    809a:	29 37       	cpi	r18, 0x79	; 121
    809c:	09 f0       	breq	.+2      	; 0x80a0 <commandHandle+0x7c>
    809e:	71 c0       	rjmp	.+226    	; 0x8182 <commandHandle+0x15e>
    80a0:	48 c0       	rjmp	.+144    	; 0x8132 <commandHandle+0x10e>
    80a2:	21 3a       	cpi	r18, 0xA1	; 161
    80a4:	09 f4       	brne	.+2      	; 0x80a8 <commandHandle+0x84>
    80a6:	5a c0       	rjmp	.+180    	; 0x815c <commandHandle+0x138>
    80a8:	22 3a       	cpi	r18, 0xA2	; 162
    80aa:	98 f4       	brcc	.+38     	; 0x80d2 <commandHandle+0xae>
    80ac:	2d 37       	cpi	r18, 0x7D	; 125
    80ae:	09 f4       	brne	.+2      	; 0x80b2 <commandHandle+0x8e>
    80b0:	4c c0       	rjmp	.+152    	; 0x814a <commandHandle+0x126>
    80b2:	2e 37       	cpi	r18, 0x7E	; 126
    80b4:	38 f4       	brcc	.+14     	; 0x80c4 <commandHandle+0xa0>
    80b6:	2b 37       	cpi	r18, 0x7B	; 123
    80b8:	09 f4       	brne	.+2      	; 0x80bc <commandHandle+0x98>
    80ba:	41 c0       	rjmp	.+130    	; 0x813e <commandHandle+0x11a>
    80bc:	2c 37       	cpi	r18, 0x7C	; 124
    80be:	09 f0       	breq	.+2      	; 0x80c2 <commandHandle+0x9e>
    80c0:	60 c0       	rjmp	.+192    	; 0x8182 <commandHandle+0x15e>
    80c2:	40 c0       	rjmp	.+128    	; 0x8144 <commandHandle+0x120>
    80c4:	2d 38       	cpi	r18, 0x8D	; 141
    80c6:	09 f4       	brne	.+2      	; 0x80ca <commandHandle+0xa6>
    80c8:	43 c0       	rjmp	.+134    	; 0x8150 <commandHandle+0x12c>
    80ca:	27 39       	cpi	r18, 0x97	; 151
    80cc:	09 f0       	breq	.+2      	; 0x80d0 <commandHandle+0xac>
    80ce:	59 c0       	rjmp	.+178    	; 0x8182 <commandHandle+0x15e>
    80d0:	42 c0       	rjmp	.+132    	; 0x8156 <commandHandle+0x132>
    80d2:	2d 3d       	cpi	r18, 0xDD	; 221
    80d4:	09 f4       	brne	.+2      	; 0x80d8 <commandHandle+0xb4>
    80d6:	4b c0       	rjmp	.+150    	; 0x816e <commandHandle+0x14a>
    80d8:	2e 3d       	cpi	r18, 0xDE	; 222
    80da:	38 f4       	brcc	.+14     	; 0x80ea <commandHandle+0xc6>
    80dc:	2b 3a       	cpi	r18, 0xAB	; 171
    80de:	09 f4       	brne	.+2      	; 0x80e2 <commandHandle+0xbe>
    80e0:	40 c0       	rjmp	.+128    	; 0x8162 <commandHandle+0x13e>
    80e2:	23 3d       	cpi	r18, 0xD3	; 211
    80e4:	09 f0       	breq	.+2      	; 0x80e8 <commandHandle+0xc4>
    80e6:	4d c0       	rjmp	.+154    	; 0x8182 <commandHandle+0x15e>
    80e8:	3f c0       	rjmp	.+126    	; 0x8168 <commandHandle+0x144>
    80ea:	29 3e       	cpi	r18, 0xE9	; 233
    80ec:	09 f4       	brne	.+2      	; 0x80f0 <commandHandle+0xcc>
    80ee:	42 c0       	rjmp	.+132    	; 0x8174 <commandHandle+0x150>
    80f0:	22 3f       	cpi	r18, 0xF2	; 242
    80f2:	09 f0       	breq	.+2      	; 0x80f6 <commandHandle+0xd2>
    80f4:	46 c0       	rjmp	.+140    	; 0x8182 <commandHandle+0x15e>
    80f6:	43 c0       	rjmp	.+134    	; 0x817e <commandHandle+0x15a>
    {
        //reply_devicehandling handles the device driver issues 
    
    case 91:
        reply_debugging_print(receivebuffer);
    80f8:	0e 94 6c 37 	call	0x6ed8	; 0x6ed8 <reply_debugging_print>
        break;
    80fc:	08 95       	ret
#ifdef PLATFORM_AVR
    case 92:
        reply_debugging_insert_avr_breakpoint(receivebuffer);
    80fe:	0e 94 dc 37 	call	0x6fb8	; 0x6fb8 <reply_debugging_insert_avr_breakpoint>
        break;
    8102:	08 95       	ret
    case 93:
        reply_debugging_remove_avr_breakpoint(receivebuffer);
    8104:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <reply_debugging_remove_avr_breakpoint>
        break;
    8108:	08 95       	ret
#endif
    case 94:
        reply_thread_state_snapshot_tofile(receivebuffer);
    810a:	0e 94 1c 39 	call	0x7238	; 0x7238 <reply_thread_state_snapshot_tofile>
        break;
    810e:	08 95       	ret
    case 95:
        reply_thread_state_restore_fromfile(receivebuffer);
    8110:	0e 94 af 39 	call	0x735e	; 0x735e <reply_thread_state_restore_fromfile>
        break;
    8114:	08 95       	ret
    case 96:
        reply_debugging_set(receivebuffer);
    8116:	0e 94 b9 37 	call	0x6f72	; 0x6f72 <reply_debugging_set>
        break;
    811a:	08 95       	ret
    case 101:
        reply_ls_networkname();
    811c:	0e 94 40 3a 	call	0x7480	; 0x7480 <reply_ls_networkname>
        break;
    8120:	08 95       	ret
    case 102:
        reply_ls_nodename(receivebuffer);
    8122:	0e 94 70 3a 	call	0x74e0	; 0x74e0 <reply_ls_nodename>
        break;
    8126:	08 95       	ret
    case 103:
        reply_ls_long(receivebuffer[3]);
        break;
    case 104:
        reply_ls_long(receivebuffer[3]);
    8128:	fc 01       	movw	r30, r24
    812a:	83 81       	ldd	r24, Z+3	; 0x03
    812c:	0e 94 a5 3a 	call	0x754a	; 0x754a <reply_ls_long>
        break;
    8130:	08 95       	ret
    case 121:
        reply_cp_fromPCtoNode_type1(receivebuffer);
    8132:	0e 94 42 3b 	call	0x7684	; 0x7684 <reply_cp_fromPCtoNode_type1>
        break;
    8136:	08 95       	ret
    case 122:
        reply_cp_fromPCtoNode_type2(receivebuffer);
    8138:	0e 94 bf 3b 	call	0x777e	; 0x777e <reply_cp_fromPCtoNode_type2>
        break;
    813c:	08 95       	ret
    case 123:
        reply_cp_fromPCtoNode_type3();
    813e:	0e 94 33 3c 	call	0x7866	; 0x7866 <reply_cp_fromPCtoNode_type3>
        break;
    8142:	08 95       	ret
    case 124:
        reply_fromNodeToPC_type1(receivebuffer);
    8144:	0e 94 91 3c 	call	0x7922	; 0x7922 <reply_fromNodeToPC_type1>
        break;
    8148:	08 95       	ret
    case 125:
        reply_fromNodeToPC_type2(receivebuffer);
    814a:	0e 94 f3 3d 	call	0x7be6	; 0x7be6 <reply_fromNodeToPC_type2>
        break;
    814e:	08 95       	ret
    case 141:
        reply_mkdir(receivebuffer);
    8150:	0e 94 f0 3a 	call	0x75e0	; 0x75e0 <reply_mkdir>
        break;
    8154:	08 95       	ret
    case 151:
        reply_touch(receivebuffer);
    8156:	0e 94 43 3c 	call	0x7886	; 0x7886 <reply_touch>
        break;
    815a:	08 95       	ret
    case 161:
        reply_rm(receivebuffer);
    815c:	0e 94 9f 3d 	call	0x7b3e	; 0x7b3e <reply_rm>
        break;
    8160:	08 95       	ret
    case 171:
        reply_ps(receivebuffer);
    8162:	0e 94 32 3e 	call	0x7c64	; 0x7c64 <reply_ps>
        break;
    8166:	08 95       	ret
    
    case 211:
        reply_du(receivebuffer);
    8168:	0e 94 55 3f 	call	0x7eaa	; 0x7eaa <reply_du>
        break;
    816c:	08 95       	ret
    case 221:
        reply_search(receivebuffer);
    816e:	0e 94 82 3f 	call	0x7f04	; 0x7f04 <reply_search>
        break;
    8172:	08 95       	ret
}

//-------------------------------------------------------------------------
void reply_formatSystem(uint8_t * receivebuffer)
{
    formatSystem();
    8174:	0e 94 13 22 	call	0x4426	; 0x4426 <formatSystem>
    buildRootNode();
    8178:	0e 94 a7 25 	call	0x4b4e	; 0x4b4e <buildRootNode>
        reply_search(receivebuffer);
        break;
    
    case 233:
        reply_formatSystem(receivebuffer);
        break;
    817c:	08 95       	ret
}

//-------------------------------------------------------------------------
void reply_nodeRestart(uint8_t * receivebuffer)
{
    avr_resetNode();
    817e:	0e 94 c3 03 	call	0x786	; 0x786 <avr_resetNode>
    8182:	08 95       	ret

00008184 <ShellThread>:
    init_breakpoint_table();
}

//This is the stub function of the shell thread that is used to handle incoming packets 
void ShellThread()
{
    8184:	1f 93       	push	r17
            IncomingLength = 0;
        }
        else
        {
            
            current_thread->state = STATE_SLEEP;
    8186:	15 e0       	ldi	r17, 0x05	; 5
//This is the stub function of the shell thread that is used to handle incoming packets 
void ShellThread()
{
    while (1)
    {
        if (IncomingLength > 0)
    8188:	60 91 ee 0b 	lds	r22, 0x0BEE
    818c:	66 23       	and	r22, r22
    818e:	39 f0       	breq	.+14     	; 0x819e <ShellThread+0x1a>
        {
            commandHandle(IncomingMsg, IncomingLength);
    8190:	8f ee       	ldi	r24, 0xEF	; 239
    8192:	9b e0       	ldi	r25, 0x0B	; 11
    8194:	0e 94 12 40 	call	0x8024	; 0x8024 <commandHandle>
            IncomingLength = 0;
    8198:	10 92 ee 0b 	sts	0x0BEE, r1
    819c:	f5 cf       	rjmp	.-22     	; 0x8188 <ShellThread+0x4>
        }
        else
        {
            
            current_thread->state = STATE_SLEEP;
    819e:	e0 91 25 09 	lds	r30, 0x0925
    81a2:	f0 91 26 09 	lds	r31, 0x0926
    81a6:	12 83       	std	Z+2, r17	; 0x02
            thisthread = current_thread;
    81a8:	f0 93 32 0c 	sts	0x0C32, r31
    81ac:	e0 93 31 0c 	sts	0x0C31, r30
            thread_yield();
    81b0:	0e 94 39 17 	call	0x2e72	; 0x2e72 <thread_yield>
    81b4:	e9 cf       	rjmp	.-46     	; 0x8188 <ShellThread+0x4>

000081b6 <getNodeIdTask>:
//Node operations including reading and setting node ID and name, random number generator 
//-----------------------------------------------------------------------------

//-------------------------------------------------------------------------
void getNodeIdTask()
{
    81b6:	df 93       	push	r29
    81b8:	cf 93       	push	r28
    81ba:	00 d0       	rcall	.+0      	; 0x81bc <getNodeIdTask+0x6>
    81bc:	cd b7       	in	r28, 0x3d	; 61
    81be:	de b7       	in	r29, 0x3e	; 62
    uint16_t nodeid;

    nodeid = node_readnodeid();
    81c0:	0e 94 a0 03 	call	0x740	; 0x740 <node_readnodeid>
    81c4:	9a 83       	std	Y+2, r25	; 0x02
    81c6:	89 83       	std	Y+1, r24	; 0x01
    asm volatile ("mov r20, %A0" "\n\t" "mov r21, %B0" "\n\t"::"r" (nodeid));
    81c8:	89 81       	ldd	r24, Y+1	; 0x01
    81ca:	9a 81       	ldd	r25, Y+2	; 0x02
    81cc:	48 2f       	mov	r20, r24
    81ce:	59 2f       	mov	r21, r25
}
    81d0:	0f 90       	pop	r0
    81d2:	0f 90       	pop	r0
    81d4:	cf 91       	pop	r28
    81d6:	df 91       	pop	r29
    81d8:	08 95       	ret

000081da <setNodeIdTask>:
    asm volatile ("ret"::);
}

//-------------------------------------------------------------------------
void setNodeIdTask()
{
    81da:	0f 93       	push	r16
    81dc:	1f 93       	push	r17
    81de:	df 93       	push	r29
    81e0:	cf 93       	push	r28
    81e2:	00 d0       	rcall	.+0      	; 0x81e4 <setNodeIdTask+0xa>
    81e4:	cd b7       	in	r28, 0x3d	; 61
    81e6:	de b7       	in	r29, 0x3e	; 62
    uint16_t nodeid;
    asm volatile ("mov %A0, r20" "\n\t" "mov %B0, r21" "\n\t":"=r" (nodeid):);
    81e8:	04 2f       	mov	r16, r20
    81ea:	15 2f       	mov	r17, r21
    81ec:	1a 83       	std	Y+2, r17	; 0x02
    81ee:	09 83       	std	Y+1, r16	; 0x01

    node_writenodeid(nodeid);
    81f0:	89 81       	ldd	r24, Y+1	; 0x01
    81f2:	9a 81       	ldd	r25, Y+2	; 0x02
    81f4:	0e 94 9a 03 	call	0x734	; 0x734 <node_writenodeid>
}
    81f8:	0f 90       	pop	r0
    81fa:	0f 90       	pop	r0
    81fc:	cf 91       	pop	r28
    81fe:	df 91       	pop	r29
    8200:	1f 91       	pop	r17
    8202:	0f 91       	pop	r16
    8204:	08 95       	ret

00008206 <getRandomTask>:



//-------------------------------------------------------------------------
void getRandomTask()
{
    8206:	df 93       	push	r29
    8208:	cf 93       	push	r28
    820a:	00 d0       	rcall	.+0      	; 0x820c <getRandomTask+0x6>
    820c:	cd b7       	in	r28, 0x3d	; 61
    820e:	de b7       	in	r29, 0x3e	; 62
    uint16_t num;

    num = getRandomNumber();
    8210:	0e 94 36 37 	call	0x6e6c	; 0x6e6c <getRandomNumber>
    8214:	9a 83       	std	Y+2, r25	; 0x02
    8216:	89 83       	std	Y+1, r24	; 0x01
    asm volatile ("mov r20, %A0" "\n\t" "mov r21, %B0" "\n\t"::"r" (num));
    8218:	89 81       	ldd	r24, Y+1	; 0x01
    821a:	9a 81       	ldd	r25, Y+2	; 0x02
    821c:	48 2f       	mov	r20, r24
    821e:	59 2f       	mov	r21, r25
}
    8220:	0f 90       	pop	r0
    8222:	0f 90       	pop	r0
    8224:	cf 91       	pop	r28
    8226:	df 91       	pop	r29
    8228:	08 95       	ret

0000822a <getCurrentThreadAddress_avr>:
///////////////////////////////////////////////////////////////////////////////
//Get the address of the currentthread pointer. Its address, not content. 

//-------------------------------------------------------------------------
void getCurrentThreadAddress_avr()
{
    822a:	df 93       	push	r29
    822c:	cf 93       	push	r28
    822e:	00 d0       	rcall	.+0      	; 0x8230 <getCurrentThreadAddress_avr+0x6>
    8230:	cd b7       	in	r28, 0x3d	; 61
    8232:	de b7       	in	r29, 0x3e	; 62
    thread **returnthreadaddr;

    returnthreadaddr = getCurrentThreadAddress();
    8234:	0e 94 77 02 	call	0x4ee	; 0x4ee <getCurrentThreadAddress>
    8238:	9a 83       	std	Y+2, r25	; 0x02
    823a:	89 83       	std	Y+1, r24	; 0x01
    asm volatile ("mov r20, %A0" "\n\t" "mov r21, %B0"
    823c:	89 81       	ldd	r24, Y+1	; 0x01
    823e:	9a 81       	ldd	r25, Y+2	; 0x02
    8240:	48 2f       	mov	r20, r24
    8242:	59 2f       	mov	r21, r25
                  "\n\t"::"r" (returnthreadaddr));
}
    8244:	0f 90       	pop	r0
    8246:	0f 90       	pop	r0
    8248:	cf 91       	pop	r28
    824a:	df 91       	pop	r29
    824c:	08 95       	ret

0000824e <getThreadIndexAddress_avr>:


//-------------------------------------------------------------------------

void getThreadIndexAddress_avr()
{
    824e:	df 93       	push	r29
    8250:	cf 93       	push	r28
    8252:	00 d0       	rcall	.+0      	; 0x8254 <getThreadIndexAddress_avr+0x6>
    8254:	cd b7       	in	r28, 0x3d	; 61
    8256:	de b7       	in	r29, 0x3e	; 62
    int index;

    index = getThreadIndexAddress();
    8258:	0e 94 ad 18 	call	0x315a	; 0x315a <getThreadIndexAddress>
    825c:	9a 83       	std	Y+2, r25	; 0x02
    825e:	89 83       	std	Y+1, r24	; 0x01
    asm volatile ("mov r20, %A0" "\n\t" "mov r21, %B0" "\n\t"::"r" (index));
    8260:	89 81       	ldd	r24, Y+1	; 0x01
    8262:	9a 81       	ldd	r25, Y+2	; 0x02
    8264:	48 2f       	mov	r20, r24
    8266:	59 2f       	mov	r21, r25
}
    8268:	0f 90       	pop	r0
    826a:	0f 90       	pop	r0
    826c:	cf 91       	pop	r28
    826e:	df 91       	pop	r29
    8270:	08 95       	ret

00008272 <getThreadTableStart_avr>:



//-------------------------------------------------------------------------
void getThreadTableStart_avr()
{
    8272:	df 93       	push	r29
    8274:	cf 93       	push	r28
    8276:	00 d0       	rcall	.+0      	; 0x8278 <getThreadTableStart_avr+0x6>
    8278:	cd b7       	in	r28, 0x3d	; 61
    827a:	de b7       	in	r29, 0x3e	; 62
    void *addr;

    addr = getThreadTableStart();
    827c:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <getThreadTableStart>
    8280:	9a 83       	std	Y+2, r25	; 0x02
    8282:	89 83       	std	Y+1, r24	; 0x01
    asm volatile ("mov r20, %A0" "\n\t" "mov r21, %B0" "\n\t"::"r" (addr));
    8284:	89 81       	ldd	r24, Y+1	; 0x01
    8286:	9a 81       	ldd	r25, Y+2	; 0x02
    8288:	48 2f       	mov	r20, r24
    828a:	59 2f       	mov	r21, r25
}
    828c:	0f 90       	pop	r0
    828e:	0f 90       	pop	r0
    8290:	cf 91       	pop	r28
    8292:	df 91       	pop	r29
    8294:	08 95       	ret

00008296 <postNewTask_avr>:
//-----------------------------------------------------------------------------


//-------------------------------------------------------------------------
void postNewTask_avr()
{
    8296:	0f 93       	push	r16
    8298:	1f 93       	push	r17
    829a:	df 93       	push	r29
    829c:	cf 93       	push	r28
    829e:	00 d0       	rcall	.+0      	; 0x82a0 <postNewTask_avr+0xa>
    82a0:	00 d0       	rcall	.+0      	; 0x82a2 <postNewTask_avr+0xc>
    82a2:	cd b7       	in	r28, 0x3d	; 61
    82a4:	de b7       	in	r29, 0x3e	; 62
    void (*fp) (void);
    uint16_t priority;
    asm volatile ("mov %A0, r20" "\n\t" "mov %B0, r21" "\n\t":"=r" (fp):);
    82a6:	04 2f       	mov	r16, r20
    82a8:	15 2f       	mov	r17, r21
    82aa:	1a 83       	std	Y+2, r17	; 0x02
    82ac:	09 83       	std	Y+1, r16	; 0x01
    asm volatile ("mov %A0, r22" "\n\t" "mov %B0, r23"
    82ae:	06 2f       	mov	r16, r22
    82b0:	17 2f       	mov	r17, r23
    82b2:	1c 83       	std	Y+4, r17	; 0x04
    82b4:	0b 83       	std	Y+3, r16	; 0x03
                  "\n\t":"=r" (priority):);
    postTask(fp, priority);
    82b6:	2b 81       	ldd	r18, Y+3	; 0x03
    82b8:	89 81       	ldd	r24, Y+1	; 0x01
    82ba:	9a 81       	ldd	r25, Y+2	; 0x02
    82bc:	62 2f       	mov	r22, r18
    82be:	0e 94 88 14 	call	0x2910	; 0x2910 <postTask>
}
    82c2:	0f 90       	pop	r0
    82c4:	0f 90       	pop	r0
    82c6:	0f 90       	pop	r0
    82c8:	0f 90       	pop	r0
    82ca:	cf 91       	pop	r28
    82cc:	df 91       	pop	r29
    82ce:	1f 91       	pop	r17
    82d0:	0f 91       	pop	r16
    82d2:	08 95       	ret

000082d4 <getStackPtrTask>:



//-------------------------------------------------------------------------
void getStackPtrTask()
{
    82d4:	df 93       	push	r29
    82d6:	cf 93       	push	r28
    82d8:	00 d0       	rcall	.+0      	; 0x82da <getStackPtrTask+0x6>
    82da:	cd b7       	in	r28, 0x3d	; 61
    82dc:	de b7       	in	r29, 0x3e	; 62
    void **returnthreadaddr;

    returnthreadaddr = getKernelStackAddress();
    82de:	0e 94 aa 18 	call	0x3154	; 0x3154 <getKernelStackAddress>
    82e2:	9a 83       	std	Y+2, r25	; 0x02
    82e4:	89 83       	std	Y+1, r24	; 0x01
    asm volatile ("mov r20, %A0" "\n\t" "mov r21, %B0"
    82e6:	89 81       	ldd	r24, Y+1	; 0x01
    82e8:	9a 81       	ldd	r25, Y+2	; 0x02
    82ea:	48 2f       	mov	r20, r24
    82ec:	59 2f       	mov	r21, r25
                  "\n\t"::"r" (returnthreadaddr));
}
    82ee:	0f 90       	pop	r0
    82f0:	0f 90       	pop	r0
    82f2:	cf 91       	pop	r28
    82f4:	df 91       	pop	r29
    82f6:	08 95       	ret

000082f8 <getRadioSendingBuffer_avr>:



//-------------------------------------------------------------------------
void getRadioSendingBuffer_avr()
{
    82f8:	df 93       	push	r29
    82fa:	cf 93       	push	r28
    82fc:	00 d0       	rcall	.+0      	; 0x82fe <getRadioSendingBuffer_avr+0x6>
    82fe:	cd b7       	in	r28, 0x3d	; 61
    8300:	de b7       	in	r29, 0x3e	; 62
    void *addr;

    addr = getRadioSendingBufferAddr();
    8302:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <getRadioSendingBufferAddr>
    8306:	9a 83       	std	Y+2, r25	; 0x02
    8308:	89 83       	std	Y+1, r24	; 0x01
    asm volatile ("mov r20, %A0" "\n\t" "mov r21, %B0" "\n\t"::"r" (addr));
    830a:	89 81       	ldd	r24, Y+1	; 0x01
    830c:	9a 81       	ldd	r25, Y+2	; 0x02
    830e:	48 2f       	mov	r20, r24
    8310:	59 2f       	mov	r21, r25
}
    8312:	0f 90       	pop	r0
    8314:	0f 90       	pop	r0
    8316:	cf 91       	pop	r28
    8318:	df 91       	pop	r29
    831a:	08 95       	ret

0000831c <getReceiverBuffer_avr>:
//following are receiving

//-------------------------------------------------------------------------

void getReceiverBuffer_avr()
{
    831c:	df 93       	push	r29
    831e:	cf 93       	push	r28
    8320:	00 d0       	rcall	.+0      	; 0x8322 <getReceiverBuffer_avr+0x6>
    8322:	cd b7       	in	r28, 0x3d	; 61
    8324:	de b7       	in	r29, 0x3e	; 62
    void *addr;

    addr = getRadioReceivingBufferAddr();
    8326:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <getRadioReceivingBufferAddr>
    832a:	9a 83       	std	Y+2, r25	; 0x02
    832c:	89 83       	std	Y+1, r24	; 0x01
    asm volatile ("mov r20, %A0" "\n\t" "mov r21, %B0" "\n\t"::"r" (addr));
    832e:	89 81       	ldd	r24, Y+1	; 0x01
    8330:	9a 81       	ldd	r25, Y+2	; 0x02
    8332:	48 2f       	mov	r20, r24
    8334:	59 2f       	mov	r21, r25
}
    8336:	0f 90       	pop	r0
    8338:	0f 90       	pop	r0
    833a:	cf 91       	pop	r28
    833c:	df 91       	pop	r29
    833e:	08 95       	ret

00008340 <getEEPROMHandleInfo>:

  

//-------------------------------------------------------------------------
void getEEPROMHandleInfo()
{
    8340:	df 93       	push	r29
    8342:	cf 93       	push	r28
    8344:	00 d0       	rcall	.+0      	; 0x8346 <getEEPROMHandleInfo+0x6>
    8346:	cd b7       	in	r28, 0x3d	; 61
    8348:	de b7       	in	r29, 0x3e	; 62
    void *addr;

    addr = getGenericStorageNodeAddress();
    834a:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <getGenericStorageNodeAddress>
    834e:	9a 83       	std	Y+2, r25	; 0x02
    8350:	89 83       	std	Y+1, r24	; 0x01
    asm volatile ("mov r20, %A0" "\n\t" "mov r21, %B0" "\n\t"::"r" (addr));
    8352:	89 81       	ldd	r24, Y+1	; 0x01
    8354:	9a 81       	ldd	r25, Y+2	; 0x02
    8356:	48 2f       	mov	r20, r24
    8358:	59 2f       	mov	r21, r25
}
    835a:	0f 90       	pop	r0
    835c:	0f 90       	pop	r0
    835e:	cf 91       	pop	r28
    8360:	df 91       	pop	r29
    8362:	08 95       	ret

00008364 <readEEPROMTask>:
    asm volatile ("ret"::);
}

//-------------------------------------------------------------------------
void readEEPROMTask()
{
    8364:	df 93       	push	r29
    8366:	cf 93       	push	r28
    8368:	cd b7       	in	r28, 0x3d	; 61
    836a:	de b7       	in	r29, 0x3e	; 62
    genericReadTask();
    836c:	0e 94 d7 00 	call	0x1ae	; 0x1ae <genericReadTask>
}
    8370:	cf 91       	pop	r28
    8372:	df 91       	pop	r29
    8374:	08 95       	ret

00008376 <writeEEPROMTask>:
    asm volatile ("ret"::);
}

//-------------------------------------------------------------------------
void writeEEPROMTask()
{
    8376:	df 93       	push	r29
    8378:	cf 93       	push	r28
    837a:	cd b7       	in	r28, 0x3d	; 61
    837c:	de b7       	in	r29, 0x3e	; 62
    genericWriteTask();
    837e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <genericWriteTask>
}
    8382:	cf 91       	pop	r28
    8384:	df 91       	pop	r29
    8386:	08 95       	ret

00008388 <getFilePathAddress_avr>:
//-----------------------------------------------------------------------------


//-------------------------------------------------------------------------
void getFilePathAddress_avr()
{
    8388:	df 93       	push	r29
    838a:	cf 93       	push	r28
    838c:	00 d0       	rcall	.+0      	; 0x838e <getFilePathAddress_avr+0x6>
    838e:	cd b7       	in	r28, 0x3d	; 61
    8390:	de b7       	in	r29, 0x3e	; 62
    void *filepathaddr;

    filepathaddr = getFilePathAddress();
    8392:	0e 94 37 01 	call	0x26e	; 0x26e <getFilePathAddress>
    8396:	9a 83       	std	Y+2, r25	; 0x02
    8398:	89 83       	std	Y+1, r24	; 0x01
    asm volatile ("mov r20, %A0" "\n\t" "mov r21, %B0"
    839a:	89 81       	ldd	r24, Y+1	; 0x01
    839c:	9a 81       	ldd	r25, Y+2	; 0x02
    839e:	48 2f       	mov	r20, r24
    83a0:	59 2f       	mov	r21, r25
                  "\n\t"::"r" (filepathaddr));
}
    83a2:	0f 90       	pop	r0
    83a4:	0f 90       	pop	r0
    83a6:	cf 91       	pop	r28
    83a8:	df 91       	pop	r29
    83aa:	08 95       	ret

000083ac <getFileModeAddress_avr>:
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

//-------------------------------------------------------------------------
void getFileModeAddress_avr()
{
    83ac:	df 93       	push	r29
    83ae:	cf 93       	push	r28
    83b0:	00 d0       	rcall	.+0      	; 0x83b2 <getFileModeAddress_avr+0x6>
    83b2:	cd b7       	in	r28, 0x3d	; 61
    83b4:	de b7       	in	r29, 0x3e	; 62
    void *addr;

    addr = getFileModeAddress();
    83b6:	0e 94 3a 01 	call	0x274	; 0x274 <getFileModeAddress>
    83ba:	9a 83       	std	Y+2, r25	; 0x02
    83bc:	89 83       	std	Y+1, r24	; 0x01
    asm volatile ("mov r20, %A0" "\n\t" "mov r21, %B0" "\n\t"::"r" (addr));
    83be:	89 81       	ldd	r24, Y+1	; 0x01
    83c0:	9a 81       	ldd	r25, Y+2	; 0x02
    83c2:	48 2f       	mov	r20, r24
    83c4:	59 2f       	mov	r21, r25
}
    83c6:	0f 90       	pop	r0
    83c8:	0f 90       	pop	r0
    83ca:	cf 91       	pop	r28
    83cc:	df 91       	pop	r29
    83ce:	08 95       	ret

000083d0 <getCPUCounterSyscall_avr>:

//Defintition group 10

//-------------------------------------------------------------------------
void getCPUCounterSyscall_avr()
{
    83d0:	df 93       	push	r29
    83d2:	cf 93       	push	r28
    83d4:	00 d0       	rcall	.+0      	; 0x83d6 <getCPUCounterSyscall_avr+0x6>
    83d6:	00 d0       	rcall	.+0      	; 0x83d8 <getCPUCounterSyscall_avr+0x8>
    83d8:	cd b7       	in	r28, 0x3d	; 61
    83da:	de b7       	in	r29, 0x3e	; 62
    uint32_t counter;
	 

    counter = getCurrentResolution();
    83dc:	0e 94 5e 33 	call	0x66bc	; 0x66bc <getCurrentResolution>
    83e0:	dc 01       	movw	r26, r24
    83e2:	cb 01       	movw	r24, r22
    83e4:	89 83       	std	Y+1, r24	; 0x01
    83e6:	9a 83       	std	Y+2, r25	; 0x02
    83e8:	ab 83       	std	Y+3, r26	; 0x03
    83ea:	bc 83       	std	Y+4, r27	; 0x04
	
    asm volatile ("mov r22, %A0" "\n\t" "mov r23, %B0" "\n\t" "mov r24, %C0" "\n\t" "mov r25, %D0" "\n\t" ::"r" (counter));
    83ec:	89 81       	ldd	r24, Y+1	; 0x01
    83ee:	9a 81       	ldd	r25, Y+2	; 0x02
    83f0:	ab 81       	ldd	r26, Y+3	; 0x03
    83f2:	bc 81       	ldd	r27, Y+4	; 0x04
    83f4:	68 2f       	mov	r22, r24
    83f6:	79 2f       	mov	r23, r25
    83f8:	8a 2f       	mov	r24, r26
    83fa:	9b 2f       	mov	r25, r27
}
    83fc:	0f 90       	pop	r0
    83fe:	0f 90       	pop	r0
    8400:	0f 90       	pop	r0
    8402:	0f 90       	pop	r0
    8404:	cf 91       	pop	r28
    8406:	df 91       	pop	r29
    8408:	08 95       	ret

0000840a <lib_get_light>:
#include "libthread.h"
#include "libsystem.h"
#include "../types/types.h"

int lib_get_light()
{
    840a:	cf 93       	push	r28
    840c:	df 93       	push	r29
   lib_thread** current_thread; 
   void (*fp)() = (void (*)(void))ADC_READ_LIGHT;
   current_thread = lib_get_current_thread();    
    840e:	0e 94 ab 47 	call	0x8f56	; 0x8f56 <lib_get_current_thread>
    8412:	ec 01       	movw	r28, r24
   fp(); 
    8414:	e0 e0       	ldi	r30, 0x00	; 0
    8416:	fd ee       	ldi	r31, 0xED	; 237
    8418:	09 95       	icall
   return (*current_thread)->data.adcstate.adcreading;  
    841a:	e8 81       	ld	r30, Y
    841c:	f9 81       	ldd	r31, Y+1	; 0x01
    841e:	25 8d       	ldd	r18, Z+29	; 0x1d
    8420:	36 8d       	ldd	r19, Z+30	; 0x1e
  
}
    8422:	c9 01       	movw	r24, r18
    8424:	df 91       	pop	r29
    8426:	cf 91       	pop	r28
    8428:	08 95       	ret

0000842a <lib_get_temp>:


int lib_get_temp()
{
    842a:	cf 93       	push	r28
    842c:	df 93       	push	r29
   lib_thread** current_thread; 
   void (*fp)() = (void (*)(void))ADC_READ_TEMP;
   current_thread = lib_get_current_thread();    
    842e:	0e 94 ab 47 	call	0x8f56	; 0x8f56 <lib_get_current_thread>
    8432:	ec 01       	movw	r28, r24
   fp(); 
    8434:	e4 e0       	ldi	r30, 0x04	; 4
    8436:	fd ee       	ldi	r31, 0xED	; 237
    8438:	09 95       	icall
   return (*current_thread)->data.adcstate.adcreading;  
    843a:	e8 81       	ld	r30, Y
    843c:	f9 81       	ldd	r31, Y+1	; 0x01
    843e:	25 8d       	ldd	r18, Z+29	; 0x1d
    8440:	36 8d       	ldd	r19, Z+30	; 0x1e

}
    8442:	c9 01       	movw	r24, r18
    8444:	df 91       	pop	r29
    8446:	cf 91       	pop	r28
    8448:	08 95       	ret

0000844a <lib_get_magx>:


int lib_get_magx()
{
    844a:	1f 93       	push	r17
    844c:	cf 93       	push	r28
    844e:	df 93       	push	r29
   lib_thread** current_thread; 
   
   {_atomic_t test = _atomic_start();
    8450:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>
    8454:	18 2f       	mov	r17, r24
   
   void (*fp)() = (void (*)(void))ADC_READ_MAGX;
   current_thread = lib_get_current_thread();    
    8456:	0e 94 ab 47 	call	0x8f56	; 0x8f56 <lib_get_current_thread>
    845a:	ec 01       	movw	r28, r24
   fp(); 
    845c:	e8 e0       	ldi	r30, 0x08	; 8
    845e:	fd ee       	ldi	r31, 0xED	; 237
    8460:	09 95       	icall
   
   _atomic_end(test);
    8462:	81 2f       	mov	r24, r17
    8464:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
  }
   return (*current_thread)->data.adcstate.adcreading;  
    8468:	e8 81       	ld	r30, Y
    846a:	f9 81       	ldd	r31, Y+1	; 0x01
    846c:	25 8d       	ldd	r18, Z+29	; 0x1d
    846e:	36 8d       	ldd	r19, Z+30	; 0x1e

}
    8470:	c9 01       	movw	r24, r18
    8472:	df 91       	pop	r29
    8474:	cf 91       	pop	r28
    8476:	1f 91       	pop	r17
    8478:	08 95       	ret

0000847a <lib_get_magy>:


int lib_get_magy()
{
    847a:	1f 93       	push	r17
    847c:	cf 93       	push	r28
    847e:	df 93       	push	r29
   lib_thread** current_thread; 
  {_atomic_t test = _atomic_start();
    8480:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>
    8484:	18 2f       	mov	r17, r24
   void (*fp)() = (void (*)(void))ADC_READ_MAGY;
   current_thread = lib_get_current_thread();    
    8486:	0e 94 ab 47 	call	0x8f56	; 0x8f56 <lib_get_current_thread>
    848a:	ec 01       	movw	r28, r24
   fp(); 
    848c:	ec e0       	ldi	r30, 0x0C	; 12
    848e:	fd ee       	ldi	r31, 0xED	; 237
    8490:	09 95       	icall
   
      
   _atomic_end(test);
    8492:	81 2f       	mov	r24, r17
    8494:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
  }
   return (*current_thread)->data.adcstate.adcreading;  
    8498:	e8 81       	ld	r30, Y
    849a:	f9 81       	ldd	r31, Y+1	; 0x01
    849c:	25 8d       	ldd	r18, Z+29	; 0x1d
    849e:	36 8d       	ldd	r19, Z+30	; 0x1e
}
    84a0:	c9 01       	movw	r24, r18
    84a2:	df 91       	pop	r29
    84a4:	cf 91       	pop	r28
    84a6:	1f 91       	pop	r17
    84a8:	08 95       	ret

000084aa <lib_get_accx>:


int lib_get_accx()
{
    84aa:	cf 93       	push	r28
    84ac:	df 93       	push	r29
   lib_thread** current_thread; 
   void (*fp)() = (void (*)(void))ADC_READ_ACCX;
   current_thread = lib_get_current_thread();    
    84ae:	0e 94 ab 47 	call	0x8f56	; 0x8f56 <lib_get_current_thread>
    84b2:	ec 01       	movw	r28, r24
   fp(); 
    84b4:	e0 e1       	ldi	r30, 0x10	; 16
    84b6:	fd ee       	ldi	r31, 0xED	; 237
    84b8:	09 95       	icall
   return (*current_thread)->data.adcstate.adcreading;  
    84ba:	e8 81       	ld	r30, Y
    84bc:	f9 81       	ldd	r31, Y+1	; 0x01
    84be:	25 8d       	ldd	r18, Z+29	; 0x1d
    84c0:	36 8d       	ldd	r19, Z+30	; 0x1e
}
    84c2:	c9 01       	movw	r24, r18
    84c4:	df 91       	pop	r29
    84c6:	cf 91       	pop	r28
    84c8:	08 95       	ret

000084ca <lib_get_accy>:


int lib_get_accy()
{
    84ca:	cf 93       	push	r28
    84cc:	df 93       	push	r29
   lib_thread** current_thread; 
   void (*fp)() = (void (*)(void))ADC_READ_ACCY;
   current_thread = lib_get_current_thread();    
    84ce:	0e 94 ab 47 	call	0x8f56	; 0x8f56 <lib_get_current_thread>
    84d2:	ec 01       	movw	r28, r24
   fp(); 
    84d4:	e4 e1       	ldi	r30, 0x14	; 20
    84d6:	fd ee       	ldi	r31, 0xED	; 237
    84d8:	09 95       	icall
   return (*current_thread)->data.adcstate.adcreading;  
    84da:	e8 81       	ld	r30, Y
    84dc:	f9 81       	ldd	r31, Y+1	; 0x01
    84de:	25 8d       	ldd	r18, Z+29	; 0x1d
    84e0:	36 8d       	ldd	r19, Z+30	; 0x1e
}
    84e2:	c9 01       	movw	r24, r18
    84e4:	df 91       	pop	r29
    84e6:	cf 91       	pop	r28
    84e8:	08 95       	ret

000084ea <getCurrentEEPROMInfo>:
{
   genericByteStorageHandle *currenteeprominfoaddr;

   void (*getaddrfp)(void) = (void (*)(void))GET_EEPROM_STRUCTURE_HANDLE;

   asm volatile("push r20" "\n\t"
    84ea:	4f 93       	push	r20
    84ec:	5f 93       	push	r21
                "push r21" "\n\t"
                ::);
   getaddrfp();
    84ee:	e0 e8       	ldi	r30, 0x80	; 128
    84f0:	fd ee       	ldi	r31, 0xED	; 237
    84f2:	09 95       	icall
   asm volatile(" mov %A0, r20" "\n\t"
    84f4:	24 2f       	mov	r18, r20
    84f6:	35 2f       	mov	r19, r21
    84f8:	c9 01       	movw	r24, r18
	             "mov %B0, r21" "\n\t"
				 :"=r" (currenteeprominfoaddr)
				 :
                );
    asm volatile("pop r21" "\n\t"
    84fa:	5f 91       	pop	r21
    84fc:	4f 91       	pop	r20
	             "pop r20" "\n\t"
	              ::);
   return currenteeprominfoaddr;
}
    84fe:	08 95       	ret

00008500 <lib_read_from_eeprom>:


//Turn off the interrupt, access the location, and use system call to implement poll based imlementation provided by avr libc

void lib_read_from_eeprom(uint16_t addr, uint16_t nBytes, uint8_t *buffer)
{
    8500:	df 92       	push	r13
    8502:	ef 92       	push	r14
    8504:	ff 92       	push	r15
    8506:	0f 93       	push	r16
    8508:	1f 93       	push	r17
    850a:	cf 93       	push	r28
    850c:	df 93       	push	r29
    850e:	8c 01       	movw	r16, r24
    8510:	eb 01       	movw	r28, r22
    8512:	7a 01       	movw	r14, r20


	_atomic_t currentatomic;

	currentatomic = _atomic_start();
    8514:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>
    8518:	d8 2e       	mov	r13, r24


    genericByteStorageHandle *eeprominfoaddr;
    eeprominfoaddr = getCurrentEEPROMInfo();
    851a:	0e 94 75 42 	call	0x84ea	; 0x84ea <getCurrentEEPROMInfo>
    851e:	fc 01       	movw	r30, r24

	void (*getaddrfp)(void) = (void (*)(void))READ_EEPROM_TASK;

    eeprominfoaddr-> addr = addr;
    8520:	11 83       	std	Z+1, r17	; 0x01
    8522:	00 83       	st	Z, r16
   	eeprominfoaddr-> nBytes = nBytes;
    8524:	d3 83       	std	Z+3, r29	; 0x03
    8526:	c2 83       	std	Z+2, r28	; 0x02
   	eeprominfoaddr-> buffer = buffer;
    8528:	f5 82       	std	Z+5, r15	; 0x05
    852a:	e4 82       	std	Z+4, r14	; 0x04


    getaddrfp();
    852c:	e4 e8       	ldi	r30, 0x84	; 132
    852e:	fd ee       	ldi	r31, 0xED	; 237
    8530:	09 95       	icall

	_atomic_end(currentatomic);
    8532:	8d 2d       	mov	r24, r13
    8534:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
}
    8538:	df 91       	pop	r29
    853a:	cf 91       	pop	r28
    853c:	1f 91       	pop	r17
    853e:	0f 91       	pop	r16
    8540:	ff 90       	pop	r15
    8542:	ef 90       	pop	r14
    8544:	df 90       	pop	r13
    8546:	08 95       	ret

00008548 <lib_writeToEEPROM>:


//Turn off the interrupt, access the location, and use system call to implement poll based implementation provided by avr libc

void lib_writeToEEPROM(uint16_t addr, uint16_t nBytes, uint8_t *buffer)
{
    8548:	df 92       	push	r13
    854a:	ef 92       	push	r14
    854c:	ff 92       	push	r15
    854e:	0f 93       	push	r16
    8550:	1f 93       	push	r17
    8552:	cf 93       	push	r28
    8554:	df 93       	push	r29
    8556:	8c 01       	movw	r16, r24
    8558:	eb 01       	movw	r28, r22
    855a:	7a 01       	movw	r14, r20

	_atomic_t currentatomic;

	currentatomic = _atomic_start();
    855c:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>
    8560:	d8 2e       	mov	r13, r24

    genericByteStorageHandle *eeprominfoaddr;
    eeprominfoaddr = getCurrentEEPROMInfo();
    8562:	0e 94 75 42 	call	0x84ea	; 0x84ea <getCurrentEEPROMInfo>
    8566:	fc 01       	movw	r30, r24

	void (*getaddrfp)(void) = (void (*)(void))WRITE_EEPROM_TASK;

    eeprominfoaddr-> addr = addr;
    8568:	11 83       	std	Z+1, r17	; 0x01
    856a:	00 83       	st	Z, r16
	  eeprominfoaddr-> nBytes = nBytes;
    856c:	d3 83       	std	Z+3, r29	; 0x03
    856e:	c2 83       	std	Z+2, r28	; 0x02
	  eeprominfoaddr-> buffer = buffer;
    8570:	f5 82       	std	Z+5, r15	; 0x05
    8572:	e4 82       	std	Z+4, r14	; 0x04


    getaddrfp();
    8574:	e8 e8       	ldi	r30, 0x88	; 136
    8576:	fd ee       	ldi	r31, 0xED	; 237
    8578:	09 95       	icall

	_atomic_end(currentatomic);
    857a:	8d 2d       	mov	r24, r13
    857c:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>


}
    8580:	df 91       	pop	r29
    8582:	cf 91       	pop	r28
    8584:	1f 91       	pop	r17
    8586:	0f 91       	pop	r16
    8588:	ff 90       	pop	r15
    858a:	ef 90       	pop	r14
    858c:	df 90       	pop	r13
    858e:	08 95       	ret

00008590 <lib_get_file_path_address>:

char *lib_get_file_path_address()
{
   char *pathaddr;
   void (*getaddrfp)(void) = (void (*)(void))GET_FILE_PATH_ADDRESS;
   asm volatile("push r20" "\n\t"
    8590:	4f 93       	push	r20
    8592:	5f 93       	push	r21
                "push r21" "\n\t"
                ::);
   getaddrfp();
    8594:	e0 e0       	ldi	r30, 0x00	; 0
    8596:	fe ee       	ldi	r31, 0xEE	; 238
    8598:	09 95       	icall
   asm volatile(" mov %A0, r20" "\n\t"
    859a:	24 2f       	mov	r18, r20
    859c:	35 2f       	mov	r19, r21
    859e:	c9 01       	movw	r24, r18
	             "mov %B0, r21" "\n\t"
				 :"=r" (pathaddr)
				 :);
    asm volatile("pop r21" "\n\t"
    85a0:	5f 91       	pop	r21
    85a2:	4f 91       	pop	r20
	             "pop r20" "\n\t"
	              ::);
    return pathaddr;
}
    85a4:	08 95       	ret

000085a6 <lib_get_file_mode_address>:
char *lib_get_file_mode_address()

{
   char *modeaddr;
   void (*getaddrfp)(void) = (void (*)(void))GET_FILE_MODE_ADDRESS;
   asm volatile("push r20" "\n\t"
    85a6:	4f 93       	push	r20
    85a8:	5f 93       	push	r21
                "push r21" "\n\t"
                ::);
   getaddrfp();
    85aa:	e4 e0       	ldi	r30, 0x04	; 4
    85ac:	fe ee       	ldi	r31, 0xEE	; 238
    85ae:	09 95       	icall
   asm volatile(" mov %A0, r20" "\n\t"
    85b0:	24 2f       	mov	r18, r20
    85b2:	35 2f       	mov	r19, r21
    85b4:	c9 01       	movw	r24, r18
	             "mov %B0, r21" "\n\t"
				 :"=r" (modeaddr)
				 :);
    asm volatile("pop r21" "\n\t"
    85b6:	5f 91       	pop	r21
    85b8:	4f 91       	pop	r20
	             "pop r20" "\n\t"
	              ::);
    return modeaddr;
}
    85ba:	08 95       	ret

000085bc <lib_open_file_syscall>:


void lib_open_file_syscall()
{
 void (*filefp)() = (void (*)(void))OPEN_FILE_SYSCALL;
 filefp();
    85bc:	e8 e0       	ldi	r30, 0x08	; 8
    85be:	fe ee       	ldi	r31, 0xEE	; 238
    85c0:	09 95       	icall
}
    85c2:	08 95       	ret

000085c4 <lib_close_file_syscall>:


void lib_close_file_syscall()
{
 void (*filefp)() = (void (*)(void))CLOSE_FILE_SYSCALL;
 filefp();
    85c4:	ec e0       	ldi	r30, 0x0C	; 12
    85c6:	fe ee       	ldi	r31, 0xEE	; 238
    85c8:	09 95       	icall
}
    85ca:	08 95       	ret

000085cc <lib_read_file_syscall>:


void lib_read_file_syscall()
{
 void (*filefp)() = (void (*)(void))READ_FILE_SYSCALL;
 filefp();
    85cc:	e0 e1       	ldi	r30, 0x10	; 16
    85ce:	fe ee       	ldi	r31, 0xEE	; 238
    85d0:	09 95       	icall
}
    85d2:	08 95       	ret

000085d4 <lib_write_file_syscall>:


void lib_write_file_syscall()
{
 void (*filefp)() = (void (*)(void))WRITE_FILE_SYSCALL;
 filefp();
    85d4:	e4 e1       	ldi	r30, 0x14	; 20
    85d6:	fe ee       	ldi	r31, 0xEE	; 238
    85d8:	09 95       	icall
}
    85da:	08 95       	ret

000085dc <lib_seek_file_syscall>:


void lib_seek_file_syscall()
{
 void (*filefp)() = (void (*)(void))SEEK_FILE_SYSCALL;
 filefp();
    85dc:	e8 e1       	ldi	r30, 0x18	; 24
    85de:	fe ee       	ldi	r31, 0xEE	; 238
    85e0:	09 95       	icall
}
    85e2:	08 95       	ret

000085e4 <lib_mfopen>:




LIB_MYFILE *lib_mfopen(const char *pathname, const char *mode)
{
    85e4:	af 92       	push	r10
    85e6:	bf 92       	push	r11
    85e8:	cf 92       	push	r12
    85ea:	df 92       	push	r13
    85ec:	ef 92       	push	r14
    85ee:	ff 92       	push	r15
    85f0:	0f 93       	push	r16
    85f2:	1f 93       	push	r17
    85f4:	cf 93       	push	r28
    85f6:	df 93       	push	r29
    85f8:	ec 01       	movw	r28, r24
    85fa:	6b 01       	movw	r12, r22
   uint8_t currentthreadindex;

   lib_thread** current_thread;


   current_thread = lib_get_current_thread();
    85fc:	0e 94 ab 47 	call	0x8f56	; 0x8f56 <lib_get_current_thread>
    8600:	5c 01       	movw	r10, r24

   currentthreadindex = lib_get_current_thread_index();
    8602:	0e 94 c1 47 	call	0x8f82	; 0x8f82 <lib_get_current_thread_index>

   commonpathnameaddr =  lib_get_file_path_address();
    8606:	0e 94 c8 42 	call	0x8590	; 0x8590 <lib_get_file_path_address>
    860a:	7c 01       	movw	r14, r24

   commonmodeaddr = lib_get_file_mode_address();
    860c:	0e 94 d3 42 	call	0x85a6	; 0x85a6 <lib_get_file_mode_address>
    8610:	8c 01       	movw	r16, r24


   lib_mystrcpy(commonpathnameaddr, pathname);
    8612:	c7 01       	movw	r24, r14
    8614:	be 01       	movw	r22, r28
    8616:	0e 94 d2 46 	call	0x8da4	; 0x8da4 <lib_mystrcpy>
   lib_mystrcpy(commonmodeaddr, mode);
    861a:	c8 01       	movw	r24, r16
    861c:	b6 01       	movw	r22, r12
    861e:	0e 94 d2 46 	call	0x8da4	; 0x8da4 <lib_mystrcpy>


void lib_open_file_syscall()
{
 void (*filefp)() = (void (*)(void))OPEN_FILE_SYSCALL;
 filefp();
    8622:	e8 e0       	ldi	r30, 0x08	; 8
    8624:	fe ee       	ldi	r31, 0xEE	; 238
    8626:	09 95       	icall
   lib_mystrcpy(commonpathnameaddr, pathname);
   lib_mystrcpy(commonmodeaddr, mode);

   lib_open_file_syscall();

   lib_file_barrier_block(7, 1);
    8628:	87 e0       	ldi	r24, 0x07	; 7
    862a:	61 e0       	ldi	r22, 0x01	; 1
    862c:	0e 94 1d 48 	call	0x903a	; 0x903a <lib_file_barrier_block>

   return (LIB_MYFILE *)((*current_thread)->filedata.filestate.fileptr);
    8630:	d5 01       	movw	r26, r10
    8632:	ed 91       	ld	r30, X+
    8634:	fc 91       	ld	r31, X
    8636:	11 97       	sbiw	r26, 0x01	; 1
    8638:	21 a1       	ldd	r18, Z+33	; 0x21
    863a:	32 a1       	ldd	r19, Z+34	; 0x22
}
    863c:	c9 01       	movw	r24, r18
    863e:	df 91       	pop	r29
    8640:	cf 91       	pop	r28
    8642:	1f 91       	pop	r17
    8644:	0f 91       	pop	r16
    8646:	ff 90       	pop	r15
    8648:	ef 90       	pop	r14
    864a:	df 90       	pop	r13
    864c:	cf 90       	pop	r12
    864e:	bf 90       	pop	r11
    8650:	af 90       	pop	r10
    8652:	08 95       	ret

00008654 <lib_mfclose>:



void lib_mfclose(LIB_MYFILE *fp)
{
    8654:	0f 93       	push	r16
    8656:	1f 93       	push	r17
    8658:	cf 93       	push	r28
    865a:	df 93       	push	r29
    865c:	8c 01       	movw	r16, r24
   uint8_t currentthreadindex;
   lib_thread** current_thread;

   current_thread = lib_get_current_thread();
    865e:	0e 94 ab 47 	call	0x8f56	; 0x8f56 <lib_get_current_thread>
    8662:	ec 01       	movw	r28, r24
   currentthreadindex = lib_get_current_thread_index();
    8664:	0e 94 c1 47 	call	0x8f82	; 0x8f82 <lib_get_current_thread_index>


   (*current_thread)->filedata.filestate.fileptr = (uint8_t*)fp;
    8668:	e8 81       	ld	r30, Y
    866a:	f9 81       	ldd	r31, Y+1	; 0x01
    866c:	12 a3       	std	Z+34, r17	; 0x22
    866e:	01 a3       	std	Z+33, r16	; 0x21


void lib_close_file_syscall()
{
 void (*filefp)() = (void (*)(void))CLOSE_FILE_SYSCALL;
 filefp();
    8670:	ec e0       	ldi	r30, 0x0C	; 12
    8672:	fe ee       	ldi	r31, 0xEE	; 238
    8674:	09 95       	icall


   (*current_thread)->filedata.filestate.fileptr = (uint8_t*)fp;
   lib_close_file_syscall();

   lib_file_barrier_block(7, 2);
    8676:	87 e0       	ldi	r24, 0x07	; 7
    8678:	62 e0       	ldi	r22, 0x02	; 2
    867a:	0e 94 1d 48 	call	0x903a	; 0x903a <lib_file_barrier_block>

   return;

}
    867e:	df 91       	pop	r29
    8680:	cf 91       	pop	r28
    8682:	1f 91       	pop	r17
    8684:	0f 91       	pop	r16
    8686:	08 95       	ret

00008688 <lib_mfread>:

void lib_mfread(LIB_MYFILE *fp, void *buffer, int nBytes)
{
    8688:	ef 92       	push	r14
    868a:	ff 92       	push	r15
    868c:	0f 93       	push	r16
    868e:	1f 93       	push	r17
    8690:	df 93       	push	r29
    8692:	cf 93       	push	r28
    8694:	00 d0       	rcall	.+0      	; 0x8696 <lib_mfread+0xe>
    8696:	00 d0       	rcall	.+0      	; 0x8698 <lib_mfread+0x10>
    8698:	cd b7       	in	r28, 0x3d	; 61
    869a:	de b7       	in	r29, 0x3e	; 62
    869c:	8c 01       	movw	r16, r24
   uint8_t currentthreadindex;
   lib_thread** current_thread;

   current_thread = lib_get_current_thread();
    869e:	4b 83       	std	Y+3, r20	; 0x03
    86a0:	5c 83       	std	Y+4, r21	; 0x04
    86a2:	69 83       	std	Y+1, r22	; 0x01
    86a4:	7a 83       	std	Y+2, r23	; 0x02
    86a6:	0e 94 ab 47 	call	0x8f56	; 0x8f56 <lib_get_current_thread>
    86aa:	7c 01       	movw	r14, r24
   currentthreadindex = lib_get_current_thread_index();
    86ac:	0e 94 c1 47 	call	0x8f82	; 0x8f82 <lib_get_current_thread_index>


   (*current_thread)->filedata.filestate.fileptr = (uint8_t*)fp;
    86b0:	d7 01       	movw	r26, r14
    86b2:	ed 91       	ld	r30, X+
    86b4:	fc 91       	ld	r31, X
    86b6:	11 97       	sbiw	r26, 0x01	; 1
    86b8:	12 a3       	std	Z+34, r17	; 0x22
    86ba:	01 a3       	std	Z+33, r16	; 0x21
   (*current_thread)->filedata.filestate.bufferptr = (uint8_t*)buffer;
    86bc:	ed 91       	ld	r30, X+
    86be:	fc 91       	ld	r31, X
    86c0:	11 97       	sbiw	r26, 0x01	; 1
    86c2:	69 81       	ldd	r22, Y+1	; 0x01
    86c4:	86 2f       	mov	r24, r22
    86c6:	7a 81       	ldd	r23, Y+2	; 0x02
    86c8:	97 2f       	mov	r25, r23
    86ca:	94 a3       	std	Z+36, r25	; 0x24
    86cc:	83 a3       	std	Z+35, r24	; 0x23
   (*current_thread)->filedata.filestate.bytes = nBytes;
    86ce:	ed 91       	ld	r30, X+
    86d0:	fc 91       	ld	r31, X
    86d2:	4b 81       	ldd	r20, Y+3	; 0x03
    86d4:	84 2f       	mov	r24, r20
    86d6:	5c 81       	ldd	r21, Y+4	; 0x04
    86d8:	95 2f       	mov	r25, r21
    86da:	96 a3       	std	Z+38, r25	; 0x26
    86dc:	85 a3       	std	Z+37, r24	; 0x25


void lib_read_file_syscall()
{
 void (*filefp)() = (void (*)(void))READ_FILE_SYSCALL;
 filefp();
    86de:	e0 e1       	ldi	r30, 0x10	; 16
    86e0:	fe ee       	ldi	r31, 0xEE	; 238
    86e2:	09 95       	icall
   (*current_thread)->filedata.filestate.bufferptr = (uint8_t*)buffer;
   (*current_thread)->filedata.filestate.bytes = nBytes;

   lib_read_file_syscall();

   lib_file_barrier_block(7, 3);
    86e4:	87 e0       	ldi	r24, 0x07	; 7
    86e6:	63 e0       	ldi	r22, 0x03	; 3
    86e8:	0e 94 1d 48 	call	0x903a	; 0x903a <lib_file_barrier_block>

   return;

}
    86ec:	0f 90       	pop	r0
    86ee:	0f 90       	pop	r0
    86f0:	0f 90       	pop	r0
    86f2:	0f 90       	pop	r0
    86f4:	cf 91       	pop	r28
    86f6:	df 91       	pop	r29
    86f8:	1f 91       	pop	r17
    86fa:	0f 91       	pop	r16
    86fc:	ff 90       	pop	r15
    86fe:	ef 90       	pop	r14
    8700:	08 95       	ret

00008702 <lib_mfwrite>:



void lib_mfwrite(LIB_MYFILE *fp, void *buffer, int nBytes)
{
    8702:	ef 92       	push	r14
    8704:	ff 92       	push	r15
    8706:	0f 93       	push	r16
    8708:	1f 93       	push	r17
    870a:	df 93       	push	r29
    870c:	cf 93       	push	r28
    870e:	00 d0       	rcall	.+0      	; 0x8710 <lib_mfwrite+0xe>
    8710:	00 d0       	rcall	.+0      	; 0x8712 <lib_mfwrite+0x10>
    8712:	cd b7       	in	r28, 0x3d	; 61
    8714:	de b7       	in	r29, 0x3e	; 62
    8716:	8c 01       	movw	r16, r24
   uint8_t currentthreadindex;
   lib_thread** current_thread;

   current_thread = lib_get_current_thread();
    8718:	4b 83       	std	Y+3, r20	; 0x03
    871a:	5c 83       	std	Y+4, r21	; 0x04
    871c:	69 83       	std	Y+1, r22	; 0x01
    871e:	7a 83       	std	Y+2, r23	; 0x02
    8720:	0e 94 ab 47 	call	0x8f56	; 0x8f56 <lib_get_current_thread>
    8724:	7c 01       	movw	r14, r24
   currentthreadindex = lib_get_current_thread_index();
    8726:	0e 94 c1 47 	call	0x8f82	; 0x8f82 <lib_get_current_thread_index>
        
   //(*current_thread)->energycontrolblock.energycost += (uint16_t)FILE_WRITE * (uint16_t)nBytes;         
  


   (*current_thread)->filedata.filestate.fileptr = (uint8_t*)fp;
    872a:	d7 01       	movw	r26, r14
    872c:	ed 91       	ld	r30, X+
    872e:	fc 91       	ld	r31, X
    8730:	11 97       	sbiw	r26, 0x01	; 1
    8732:	12 a3       	std	Z+34, r17	; 0x22
    8734:	01 a3       	std	Z+33, r16	; 0x21
   (*current_thread)->filedata.filestate.bufferptr = (uint8_t*)buffer;
    8736:	ed 91       	ld	r30, X+
    8738:	fc 91       	ld	r31, X
    873a:	11 97       	sbiw	r26, 0x01	; 1
    873c:	69 81       	ldd	r22, Y+1	; 0x01
    873e:	86 2f       	mov	r24, r22
    8740:	7a 81       	ldd	r23, Y+2	; 0x02
    8742:	97 2f       	mov	r25, r23
    8744:	94 a3       	std	Z+36, r25	; 0x24
    8746:	83 a3       	std	Z+35, r24	; 0x23
   (*current_thread)->filedata.filestate.bytes = nBytes;
    8748:	ed 91       	ld	r30, X+
    874a:	fc 91       	ld	r31, X
    874c:	4b 81       	ldd	r20, Y+3	; 0x03
    874e:	84 2f       	mov	r24, r20
    8750:	5c 81       	ldd	r21, Y+4	; 0x04
    8752:	95 2f       	mov	r25, r21
    8754:	96 a3       	std	Z+38, r25	; 0x26
    8756:	85 a3       	std	Z+37, r24	; 0x25


void lib_write_file_syscall()
{
 void (*filefp)() = (void (*)(void))WRITE_FILE_SYSCALL;
 filefp();
    8758:	e4 e1       	ldi	r30, 0x14	; 20
    875a:	fe ee       	ldi	r31, 0xEE	; 238
    875c:	09 95       	icall
   (*current_thread)->filedata.filestate.bufferptr = (uint8_t*)buffer;
   (*current_thread)->filedata.filestate.bytes = nBytes;

   lib_write_file_syscall();

   lib_file_barrier_block(7, 4);
    875e:	87 e0       	ldi	r24, 0x07	; 7
    8760:	64 e0       	ldi	r22, 0x04	; 4
    8762:	0e 94 1d 48 	call	0x903a	; 0x903a <lib_file_barrier_block>
   
   
 

   return;
}
    8766:	0f 90       	pop	r0
    8768:	0f 90       	pop	r0
    876a:	0f 90       	pop	r0
    876c:	0f 90       	pop	r0
    876e:	cf 91       	pop	r28
    8770:	df 91       	pop	r29
    8772:	1f 91       	pop	r17
    8774:	0f 91       	pop	r16
    8776:	ff 90       	pop	r15
    8778:	ef 90       	pop	r14
    877a:	08 95       	ret

0000877c <lib_mfwrite_withoutlength>:


void lib_mfwrite_withoutlength(LIB_MYFILE *fp, void *buffer)
{
    877c:	0f 93       	push	r16
    877e:	1f 93       	push	r17
    8780:	cf 93       	push	r28
    8782:	df 93       	push	r29
    8784:	ec 01       	movw	r28, r24
    8786:	8b 01       	movw	r16, r22


   uint8_t length;

   length = (uint8_t)lib_string_length((char*)buffer);
    8788:	cb 01       	movw	r24, r22
    878a:	0e 94 b5 46 	call	0x8d6a	; 0x8d6a <lib_string_length>
    878e:	48 2f       	mov	r20, r24

   lib_mfwrite(fp, buffer, length);
    8790:	ce 01       	movw	r24, r28
    8792:	b8 01       	movw	r22, r16
    8794:	50 e0       	ldi	r21, 0x00	; 0
    8796:	0e 94 81 43 	call	0x8702	; 0x8702 <lib_mfwrite>

   return;
}
    879a:	df 91       	pop	r29
    879c:	cf 91       	pop	r28
    879e:	1f 91       	pop	r17
    87a0:	0f 91       	pop	r16
    87a2:	08 95       	ret

000087a4 <lib_mfseek>:




void lib_mfseek(LIB_MYFILE *fp, int offset, int position)
{
    87a4:	cf 92       	push	r12
    87a6:	df 92       	push	r13
    87a8:	ef 92       	push	r14
    87aa:	ff 92       	push	r15
    87ac:	0f 93       	push	r16
    87ae:	1f 93       	push	r17
    87b0:	cf 93       	push	r28
    87b2:	df 93       	push	r29
    87b4:	6c 01       	movw	r12, r24
    87b6:	eb 01       	movw	r28, r22
    87b8:	7a 01       	movw	r14, r20
   uint8_t currentthreadindex;
   lib_thread** current_thread;

   current_thread = lib_get_current_thread();
    87ba:	0e 94 ab 47 	call	0x8f56	; 0x8f56 <lib_get_current_thread>
    87be:	8c 01       	movw	r16, r24
   currentthreadindex = lib_get_current_thread_index();
    87c0:	0e 94 c1 47 	call	0x8f82	; 0x8f82 <lib_get_current_thread_index>

   (*current_thread)->filedata.fileseekstate.fileptr = (uint8_t*)fp;
    87c4:	d8 01       	movw	r26, r16
    87c6:	ed 91       	ld	r30, X+
    87c8:	fc 91       	ld	r31, X
    87ca:	11 97       	sbiw	r26, 0x01	; 1
    87cc:	d2 a2       	std	Z+34, r13	; 0x22
    87ce:	c1 a2       	std	Z+33, r12	; 0x21
   (*current_thread)->filedata.fileseekstate.offset = offset;
    87d0:	ed 91       	ld	r30, X+
    87d2:	fc 91       	ld	r31, X
    87d4:	11 97       	sbiw	r26, 0x01	; 1
    87d6:	d4 a3       	std	Z+36, r29	; 0x24
    87d8:	c3 a3       	std	Z+35, r28	; 0x23
   (*current_thread)->filedata.fileseekstate.position = position;
    87da:	ed 91       	ld	r30, X+
    87dc:	fc 91       	ld	r31, X
    87de:	f6 a2       	std	Z+38, r15	; 0x26
    87e0:	e5 a2       	std	Z+37, r14	; 0x25


void lib_seek_file_syscall()
{
 void (*filefp)() = (void (*)(void))SEEK_FILE_SYSCALL;
 filefp();
    87e2:	e8 e1       	ldi	r30, 0x18	; 24
    87e4:	fe ee       	ldi	r31, 0xEE	; 238
    87e6:	09 95       	icall

   return;



}
    87e8:	df 91       	pop	r29
    87ea:	cf 91       	pop	r28
    87ec:	1f 91       	pop	r17
    87ee:	0f 91       	pop	r16
    87f0:	ff 90       	pop	r15
    87f2:	ef 90       	pop	r14
    87f4:	df 90       	pop	r13
    87f6:	cf 90       	pop	r12
    87f8:	08 95       	ret

000087fa <lib_wakeup_mythread>:

//wakeup the current thread once an incoming packet arrives

void lib_wakeup_mythread()
{
  mythread->state = STATE_ACTIVE;
    87fa:	e0 91 35 0c 	lds	r30, 0x0C35
    87fe:	f0 91 36 0c 	lds	r31, 0x0C36
    8802:	82 e0       	ldi	r24, 0x02	; 2
    8804:	82 83       	std	Z+2, r24	; 0x02
  syscall_post_thread_task();
    8806:	0e 94 fb 47 	call	0x8ff6	; 0x8ff6 <syscall_post_thread_task>
}
    880a:	08 95       	ret

0000880c <lib_radio_send_msg_syscall>:
lib_thread* mythread;

void lib_radio_send_msg_syscall()
{
 void (*radiosendfp)() = (void (*)(void))SOCKET_RADIO_SEND_FUNCTION;
 radiosendfp();
    880c:	e0 e1       	ldi	r30, 0x10	; 16
    880e:	fc ee       	ldi	r31, 0xEC	; 236
    8810:	09 95       	icall
}
    8812:	08 95       	ret

00008814 <lib_get_current_radio_receive_handle_addr>:
{
   radiohandletype *currentradioinfo;

   void (*getaddrfp)(void) = (void (*)(void))GET_CURRENT_RADIO_RECEIVER_BUFFER;

   asm volatile("push r20" "\n\t"
    8814:	4f 93       	push	r20
    8816:	5f 93       	push	r21
                "push r21" "\n\t"
                ::);
   getaddrfp();
    8818:	e4 e1       	ldi	r30, 0x14	; 20
    881a:	fc ee       	ldi	r31, 0xEC	; 236
    881c:	09 95       	icall
   asm volatile(" mov %A0, r20" "\n\t"
    881e:	24 2f       	mov	r18, r20
    8820:	35 2f       	mov	r19, r21
    8822:	c9 01       	movw	r24, r18
	             "mov %B0, r21" "\n\t"
				 :"=r" (currentradioinfo)
				 :
                );
    asm volatile("pop r21" "\n\t"
    8824:	5f 91       	pop	r21
    8826:	4f 91       	pop	r20
	             "pop r20" "\n\t"
	              ::);
   return currentradioinfo;
}
    8828:	08 95       	ret

0000882a <lib_radio_set_freq>:
void lib_radio_set_freq(uint16_t freq)
{

   void (*getaddrfp)(void) = (void (*)(void))SET_RADIO_FREQ_FUNCTION;

   asm volatile("push r20" "\n\t"
    882a:	4f 93       	push	r20
    882c:	5f 93       	push	r21
                "push r21" "\n\t"
                ::);

   asm volatile(" mov r20, %A0" "\n\t"
    882e:	48 2f       	mov	r20, r24
    8830:	59 2f       	mov	r21, r25
	              "mov r21, %B0" "\n\t"
				 :
				 :"r" (freq)
                );
   getaddrfp();
    8832:	e0 e0       	ldi	r30, 0x00	; 0
    8834:	fc ee       	ldi	r31, 0xEC	; 236
    8836:	09 95       	icall
   asm volatile("pop r21" "\n\t"
    8838:	5f 91       	pop	r21
    883a:	4f 91       	pop	r20
	             "pop r20" "\n\t"
	              ::);
   return;
}
    883c:	08 95       	ret

0000883e <lib_radio_set_channel>:

  uint16_t maskchannel = channel;

  void (*getaddrfp)(void) = (void (*)(void))SET_RADIO_CHANNEL_FUNCTION;

  asm volatile("push r20" "\n\t"
    883e:	4f 93       	push	r20
    8840:	5f 93       	push	r21
}

void lib_radio_set_channel(uint8_t channel)
{

  uint16_t maskchannel = channel;
    8842:	90 e0       	ldi	r25, 0x00	; 0

  asm volatile("push r20" "\n\t"
               "push r21" "\n\t"
               ::);

  asm volatile(" mov r20, %A0" "\n\t"
    8844:	48 2f       	mov	r20, r24
    8846:	59 2f       	mov	r21, r25
	              "mov r21, %B0" "\n\t"
				 :
				 :"r" (maskchannel)
                );
   getaddrfp();
    8848:	e4 e0       	ldi	r30, 0x04	; 4
    884a:	fc ee       	ldi	r31, 0xEC	; 236
    884c:	09 95       	icall
   asm volatile("pop r21" "\n\t"
    884e:	5f 91       	pop	r21
    8850:	4f 91       	pop	r20
	             "pop r20" "\n\t"
	              ::);
   return;
}
    8852:	08 95       	ret

00008854 <lib_radio_set_power>:

  uint16_t maskchannel = power;

  void (*getaddrfp)(void) = (void (*)(void))SET_RADIO_POWER_FUNCTION;

  asm volatile("push r20" "\n\t"
    8854:	4f 93       	push	r20
    8856:	5f 93       	push	r21
}

void lib_radio_set_power(uint8_t power)
{

  uint16_t maskchannel = power;
    8858:	90 e0       	ldi	r25, 0x00	; 0

  asm volatile("push r20" "\n\t"
               "push r21" "\n\t"
               ::);

  asm volatile(" mov r20, %A0" "\n\t"
    885a:	48 2f       	mov	r20, r24
    885c:	59 2f       	mov	r21, r25
	              "mov r21, %B0" "\n\t"
				 :
				 :"r" (maskchannel)
                );
   getaddrfp();
    885e:	e8 e0       	ldi	r30, 0x08	; 8
    8860:	fc ee       	ldi	r31, 0xEC	; 236
    8862:	09 95       	icall
   asm volatile("pop r21" "\n\t"
    8864:	5f 91       	pop	r21
    8866:	4f 91       	pop	r20
	             "pop r20" "\n\t"
	              ::);
   return;
}
    8868:	08 95       	ret

0000886a <lib_get_current_radio_send_addr>:

radioinfotype *lib_get_current_radio_send_addr()
{
   radioinfotype *currentradioinfo;
   void (*getaddrfp)(void) = (void (*)(void))GET_CURRENT_RADIO_SENDER_BUFFER;
   asm volatile("push r20" "\n\t"
    886a:	4f 93       	push	r20
    886c:	5f 93       	push	r21
                "push r21" "\n\t"
                ::);
   getaddrfp();
    886e:	ec e0       	ldi	r30, 0x0C	; 12
    8870:	fc ee       	ldi	r31, 0xEC	; 236
    8872:	09 95       	icall
   asm volatile(" mov %A0, r20" "\n\t"
    8874:	24 2f       	mov	r18, r20
    8876:	35 2f       	mov	r19, r21
    8878:	c9 01       	movw	r24, r18
	             "mov %B0, r21" "\n\t"
				 :"=r" (currentradioinfo)
				 :
                );
    asm volatile("pop r21" "\n\t"
    887a:	5f 91       	pop	r21
    887c:	4f 91       	pop	r20
	             "pop r20" "\n\t"
	              ::);
   return currentradioinfo;
}
    887e:	08 95       	ret

00008880 <lib_radio_send_msg>:




void lib_radio_send_msg(uint16_t port, uint16_t address, uint8_t length, uint8_t *msg)
{
    8880:	cf 92       	push	r12
    8882:	df 92       	push	r13
    8884:	ef 92       	push	r14
    8886:	ff 92       	push	r15
    8888:	0f 93       	push	r16
    888a:	1f 93       	push	r17
    888c:	df 93       	push	r29
    888e:	cf 93       	push	r28
    8890:	0f 92       	push	r0
    8892:	cd b7       	in	r28, 0x3d	; 61
    8894:	de b7       	in	r29, 0x3e	; 62
    8896:	8c 01       	movw	r16, r24
    8898:	6b 01       	movw	r12, r22
    889a:	79 01       	movw	r14, r18
   lib_thread** current_thread;
   radioinfotype *radioinfoaddr;



   current_thread = lib_get_current_thread();
    889c:	49 83       	std	Y+1, r20	; 0x01
    889e:	0e 94 ab 47 	call	0x8f56	; 0x8f56 <lib_get_current_thread>
   radioinfoaddr = lib_get_current_radio_send_addr();
    88a2:	0e 94 35 44 	call	0x886a	; 0x886a <lib_get_current_radio_send_addr>
    88a6:	fc 01       	movw	r30, r24
  // (*current_thread)->energycontrolblock.energycost += (uint16_t)RADIO_SEND * (uint16_t)length;           
      		 
            
      

   radioinfoaddr-> socket_port = port;
    88a8:	11 83       	std	Z+1, r17	; 0x01
    88aa:	00 83       	st	Z, r16
   radioinfoaddr->socket_addr = address;
    88ac:	d3 82       	std	Z+3, r13	; 0x03
    88ae:	c2 82       	std	Z+2, r12	; 0x02
   radioinfoaddr->socket_msg_len  = length;
    88b0:	49 81       	ldd	r20, Y+1	; 0x01
    88b2:	44 83       	std	Z+4, r20	; 0x04
   radioinfoaddr->socket_msg  = msg;
    88b4:	f6 82       	std	Z+6, r15	; 0x06
    88b6:	e5 82       	std	Z+5, r14	; 0x05
lib_thread* mythread;

void lib_radio_send_msg_syscall()
{
 void (*radiosendfp)() = (void (*)(void))SOCKET_RADIO_SEND_FUNCTION;
 radiosendfp();
    88b8:	e0 e1       	ldi	r30, 0x10	; 16
    88ba:	fc ee       	ldi	r31, 0xEC	; 236
    88bc:	09 95       	icall
   radioinfoaddr->socket_msg_len  = length;
   radioinfoaddr->socket_msg  = msg;
   lib_radio_send_msg_syscall();

   
   lib_sleep_thread(20);
    88be:	84 e1       	ldi	r24, 0x14	; 20
    88c0:	90 e0       	ldi	r25, 0x00	; 0
    88c2:	0e 94 d6 47 	call	0x8fac	; 0x8fac <lib_sleep_thread>

 

   return;
}
    88c6:	0f 90       	pop	r0
    88c8:	cf 91       	pop	r28
    88ca:	df 91       	pop	r29
    88cc:	1f 91       	pop	r17
    88ce:	0f 91       	pop	r16
    88d0:	ff 90       	pop	r15
    88d2:	ef 90       	pop	r14
    88d4:	df 90       	pop	r13
    88d6:	cf 90       	pop	r12
    88d8:	08 95       	ret

000088da <lib_radio_send_integer_u16>:
}

void lib_radio_send_integer_u16(uint16_t value)
{
  uint8_t temp1,temp2;
  temp1 = (uint8_t) (value >> 8);
    88da:	90 93 cb 03 	sts	0x03CB, r25
  temp2 = (uint8_t) (value & 0x00ff);
    88de:	80 93 cc 03 	sts	0x03CC, r24

  buffer[0] = temp1;
  buffer[1] = temp2;
  buffer[2] = buffer[3] = 0xee;
    88e2:	8e ee       	ldi	r24, 0xEE	; 238
    88e4:	80 93 ce 03 	sts	0x03CE, r24
    88e8:	80 93 cd 03 	sts	0x03CD, r24

  return lib_radio_send_msg(12, 0xffff, 16, buffer);
    88ec:	8c e0       	ldi	r24, 0x0C	; 12
    88ee:	90 e0       	ldi	r25, 0x00	; 0
    88f0:	6f ef       	ldi	r22, 0xFF	; 255
    88f2:	7f ef       	ldi	r23, 0xFF	; 255
    88f4:	40 e1       	ldi	r20, 0x10	; 16
    88f6:	2b ec       	ldi	r18, 0xCB	; 203
    88f8:	33 e0       	ldi	r19, 0x03	; 3
    88fa:	0e 94 40 44 	call	0x8880	; 0x8880 <lib_radio_send_msg>
}
    88fe:	08 95       	ret

00008900 <lib_radio_send_string>:
}

//This function sends out a string

void lib_radio_send_string(uint8_t *msg)
{
    8900:	cf 93       	push	r28
    8902:	df 93       	push	r29
    8904:	ec 01       	movw	r28, r24
    uint8_t temp = (uint8_t)lib_string_length((char *)msg);
    8906:	0e 94 b5 46 	call	0x8d6a	; 0x8d6a <lib_string_length>
    890a:	48 2f       	mov	r20, r24
 
	return lib_radio_send_msg(10, 0xffff, temp, msg);
    890c:	8a e0       	ldi	r24, 0x0A	; 10
    890e:	90 e0       	ldi	r25, 0x00	; 0
    8910:	6f ef       	ldi	r22, 0xFF	; 255
    8912:	7f ef       	ldi	r23, 0xFF	; 255
    8914:	9e 01       	movw	r18, r28
    8916:	0e 94 40 44 	call	0x8880	; 0x8880 <lib_radio_send_msg>
 
}
    891a:	df 91       	pop	r29
    891c:	cf 91       	pop	r28
    891e:	08 95       	ret

00008920 <lib_radio_receive_timed>:
{
   return lib_radio_receive_timed(port, maxlength, msg, 0);
}

int lib_radio_receive_timed(uint16_t port, uint8_t maxlength, uint8_t *msg, uint16_t time)
{
    8920:	8f 92       	push	r8
    8922:	9f 92       	push	r9
    8924:	bf 92       	push	r11
    8926:	cf 92       	push	r12
    8928:	df 92       	push	r13
    892a:	ef 92       	push	r14
    892c:	ff 92       	push	r15
    892e:	0f 93       	push	r16
    8930:	1f 93       	push	r17
    8932:	df 93       	push	r29
    8934:	cf 93       	push	r28
    8936:	0f 92       	push	r0
    8938:	cd b7       	in	r28, 0x3d	; 61
    893a:	de b7       	in	r29, 0x3e	; 62
    893c:	4c 01       	movw	r8, r24
    893e:	d6 2e       	mov	r13, r22
    8940:	c4 2e       	mov	r12, r20
    8942:	b5 2e       	mov	r11, r21
    8944:	89 01       	movw	r16, r18
   _atomic_t currentatomic;
   
   void (*radio_register_function_pointer)(void) = (void (*)(void))REGISTER_RADIO_RECEIVE_EVENT;
   lib_thread** current_thread = lib_get_current_thread();
    8946:	0e 94 ab 47 	call	0x8f56	; 0x8f56 <lib_get_current_thread>
    894a:	7c 01       	movw	r14, r24
   radiohandletype *radiohandleaddr = lib_get_current_radio_receive_handle_addr();
    894c:	0e 94 0a 44 	call	0x8814	; 0x8814 <lib_get_current_radio_receive_handle_addr>
    8950:	fc 01       	movw	r30, r24

   //set up the radiohandleaddr data structures

   radiohandleaddr->port = port;
    8952:	91 82       	std	Z+1, r9	; 0x01
    8954:	80 82       	st	Z, r8
   radiohandleaddr->maxLength = MAX_MSG_LENGTH;
    8956:	80 e2       	ldi	r24, 0x20	; 32
    8958:	82 83       	std	Z+2, r24	; 0x02
   radiohandleaddr->dataReady = &radioReceiveDataReady;
    895a:	87 e3       	ldi	r24, 0x37	; 55
    895c:	9c e0       	ldi	r25, 0x0C	; 12
    895e:	94 83       	std	Z+4, r25	; 0x04
    8960:	83 83       	std	Z+3, r24	; 0x03
   radiohandleaddr->data = buffer;
    8962:	8b ec       	ldi	r24, 0xCB	; 203
    8964:	93 e0       	ldi	r25, 0x03	; 3
    8966:	96 83       	std	Z+6, r25	; 0x06
    8968:	85 83       	std	Z+5, r24	; 0x05
   radiohandleaddr->packetinfo = radioReceivePacketInfo;
    896a:	88 e3       	ldi	r24, 0x38	; 56
    896c:	9c e0       	ldi	r25, 0x0C	; 12
    896e:	90 87       	std	Z+8, r25	; 0x08
    8970:	87 83       	std	Z+7, r24	; 0x07
   radiohandleaddr->handlefunc = lib_wakeup_mythread;
    8972:	8d ef       	ldi	r24, 0xFD	; 253
    8974:	93 e4       	ldi	r25, 0x43	; 67
    8976:	93 87       	std	Z+11, r25	; 0x0b
    8978:	82 87       	std	Z+10, r24	; 0x0a

	//close the interrupt
	currentatomic = _atomic_start();
    897a:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>
	
	//call the radio handle set to store the data structure into the handle vectors
	radio_register_function_pointer();
    897e:	89 83       	std	Y+1, r24	; 0x01
    8980:	e8 e1       	ldi	r30, 0x18	; 24
    8982:	fc ee       	ldi	r31, 0xEC	; 236
    8984:	09 95       	icall

	//set up the current thread into sleep mode
   (*current_thread)->state = STATE_SLEEP;
    8986:	d7 01       	movw	r26, r14
    8988:	ed 91       	ld	r30, X+
    898a:	fc 91       	ld	r31, X
    898c:	11 97       	sbiw	r26, 0x01	; 1
    898e:	95 e0       	ldi	r25, 0x05	; 5
    8990:	92 83       	std	Z+2, r25	; 0x02

	//set up mythread so that later can wake up this thread
	mythread = *current_thread;
    8992:	2d 91       	ld	r18, X+
    8994:	3c 91       	ld	r19, X
    8996:	30 93 36 0c 	sts	0x0C36, r19
    899a:	20 93 35 0c 	sts	0x0C35, r18

	//open the interrupt
	_atomic_end(currentatomic);
    899e:	89 81       	ldd	r24, Y+1	; 0x01
    89a0:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>

	if (time == 0)
    89a4:	01 15       	cp	r16, r1
    89a6:	11 05       	cpc	r17, r1
    89a8:	19 f4       	brne	.+6      	; 0x89b0 <lib_radio_receive_timed+0x90>
		lib_yield();
    89aa:	0e 94 f7 47 	call	0x8fee	; 0x8fee <lib_yield>
    89ae:	03 c0       	rjmp	.+6      	; 0x89b6 <lib_radio_receive_timed+0x96>
	else
		lib_sleep_thread(time);
    89b0:	c8 01       	movw	r24, r16
    89b2:	0e 94 d6 47 	call	0x8fac	; 0x8fac <lib_sleep_thread>
    89b6:	ab ec       	ldi	r26, 0xCB	; 203
    89b8:	b3 e0       	ldi	r27, 0x03	; 3
    89ba:	8c 2d       	mov	r24, r12
    89bc:	9b 2d       	mov	r25, r11
    89be:	fc 01       	movw	r30, r24
{
   return lib_radio_receive_timed(port, maxlength, msg, 0);
}

int lib_radio_receive_timed(uint16_t port, uint8_t maxlength, uint8_t *msg, uint16_t time)
{
    89c0:	80 e0       	ldi	r24, 0x00	; 0
    89c2:	03 c0       	rjmp	.+6      	; 0x89ca <lib_radio_receive_timed+0xaa>
	else
		lib_sleep_thread(time);
	
	uint8_t i;
	for (i = 0; i < maxlength && i < MAX_MSG_LENGTH; i++)
		msg[i] = buffer[i];
    89c4:	9d 91       	ld	r25, X+
    89c6:	91 93       	st	Z+, r25
		lib_yield();
	else
		lib_sleep_thread(time);
	
	uint8_t i;
	for (i = 0; i < maxlength && i < MAX_MSG_LENGTH; i++)
    89c8:	8f 5f       	subi	r24, 0xFF	; 255
    89ca:	8d 15       	cp	r24, r13
    89cc:	10 f4       	brcc	.+4      	; 0x89d2 <lib_radio_receive_timed+0xb2>
    89ce:	80 32       	cpi	r24, 0x20	; 32
    89d0:	c9 f7       	brne	.-14     	; 0x89c4 <lib_radio_receive_timed+0xa4>
		
   //(*current_thread)->energycontrolblock.energycost += (uint16_t)RADIO_RECEIVE * (uint16_t)radioReceiveDataReady;           
	
  
	return radioReceiveDataReady;
}
    89d2:	80 91 37 0c 	lds	r24, 0x0C37
    89d6:	90 e0       	ldi	r25, 0x00	; 0
    89d8:	0f 90       	pop	r0
    89da:	cf 91       	pop	r28
    89dc:	df 91       	pop	r29
    89de:	1f 91       	pop	r17
    89e0:	0f 91       	pop	r16
    89e2:	ff 90       	pop	r15
    89e4:	ef 90       	pop	r14
    89e6:	df 90       	pop	r13
    89e8:	cf 90       	pop	r12
    89ea:	bf 90       	pop	r11
    89ec:	9f 90       	pop	r9
    89ee:	8f 90       	pop	r8
    89f0:	08 95       	ret

000089f2 <lib_radio_receive>:
  syscall_post_thread_task();
}

int lib_radio_receive(uint16_t port, uint8_t maxlength, uint8_t *msg)
{
   return lib_radio_receive_timed(port, maxlength, msg, 0);
    89f2:	20 e0       	ldi	r18, 0x00	; 0
    89f4:	30 e0       	ldi	r19, 0x00	; 0
    89f6:	0e 94 90 44 	call	0x8920	; 0x8920 <lib_radio_receive_timed>
}
    89fa:	08 95       	ret

000089fc <itoa>:

static uint8_t localbuffer[16];


uint8_t itoa(uint16_t value, char*  str, int radix)
{
    89fc:	cf 92       	push	r12
    89fe:	df 92       	push	r13
    8a00:	ff 92       	push	r15
    8a02:	0f 93       	push	r16
    8a04:	1f 93       	push	r17
    8a06:	cf 93       	push	r28
    8a08:	df 93       	push	r29
    8a0a:	eb 01       	movw	r28, r22
    8a0c:	8a 01       	movw	r16, r20
            if( rem >= 10 && rem <= 15 )
            {
                switch( rem )
                {
                    case 10:
                        ch = 'a' ;
    8a0e:	6b 01       	movw	r12, r22

static uint8_t localbuffer[16];


uint8_t itoa(uint16_t value, char*  str, int radix)
{
    8a10:	fb 01       	movw	r30, r22
    8a12:	21 e0       	ldi	r18, 0x01	; 1
    8a14:	30 e0       	ldi	r19, 0x00	; 0
	  
    int  rem = 0;
    int  pos = 0;
    char ch  = '!' ;
    8a16:	61 e2       	ldi	r22, 0x21	; 33
    8a18:	f6 2e       	mov	r15, r22
    int i; 
    do
    {
        rem    = value % radix ;
    8a1a:	b8 01       	movw	r22, r16
    8a1c:	0e 94 d7 48 	call	0x91ae	; 0x91ae <__udivmodhi4>
    8a20:	ac 01       	movw	r20, r24
        value /= radix;
    8a22:	cb 01       	movw	r24, r22
        if ( 16 == radix )
    8a24:	00 31       	cpi	r16, 0x10	; 16
    8a26:	11 05       	cpc	r17, r1
    8a28:	49 f5       	brne	.+82     	; 0x8a7c <itoa+0x80>
        {
            if( rem >= 10 && rem <= 15 )
    8a2a:	da 01       	movw	r26, r20
    8a2c:	1a 97       	sbiw	r26, 0x0a	; 10
    8a2e:	a6 30       	cpi	r26, 0x06	; 6
    8a30:	b1 05       	cpc	r27, r1
    8a32:	20 f5       	brcc	.+72     	; 0x8a7c <itoa+0x80>
            {
                switch( rem )
    8a34:	4c 30       	cpi	r20, 0x0C	; 12
    8a36:	51 05       	cpc	r21, r1
    8a38:	a9 f0       	breq	.+42     	; 0x8a64 <itoa+0x68>
    8a3a:	4d 30       	cpi	r20, 0x0D	; 13
    8a3c:	51 05       	cpc	r21, r1
    8a3e:	44 f4       	brge	.+16     	; 0x8a50 <itoa+0x54>
    8a40:	4a 30       	cpi	r20, 0x0A	; 10
    8a42:	51 05       	cpc	r21, r1
    8a44:	09 f4       	brne	.+2      	; 0x8a48 <itoa+0x4c>
    8a46:	47 c0       	rjmp	.+142    	; 0x8ad6 <itoa+0xda>
    8a48:	4b 30       	cpi	r20, 0x0B	; 11
    8a4a:	51 05       	cpc	r21, r1
    8a4c:	b9 f4       	brne	.+46     	; 0x8a7c <itoa+0x80>
    8a4e:	46 c0       	rjmp	.+140    	; 0x8adc <itoa+0xe0>
    8a50:	4e 30       	cpi	r20, 0x0E	; 14
    8a52:	51 05       	cpc	r21, r1
    8a54:	69 f0       	breq	.+26     	; 0x8a70 <itoa+0x74>
    8a56:	4e 30       	cpi	r20, 0x0E	; 14
    8a58:	51 05       	cpc	r21, r1
    8a5a:	3c f0       	brlt	.+14     	; 0x8a6a <itoa+0x6e>
    8a5c:	4f 30       	cpi	r20, 0x0F	; 15
    8a5e:	51 05       	cpc	r21, r1
    8a60:	69 f4       	brne	.+26     	; 0x8a7c <itoa+0x80>
    8a62:	09 c0       	rjmp	.+18     	; 0x8a76 <itoa+0x7a>
                        break;
                    case 11:
                        ch ='b' ;
                        break;
                    case 12:
                        ch = 'c' ;
    8a64:	53 e6       	ldi	r21, 0x63	; 99
    8a66:	f5 2e       	mov	r15, r21
                        break;
    8a68:	0f c0       	rjmp	.+30     	; 0x8a88 <itoa+0x8c>
                    case 13:
                        ch ='d' ;
    8a6a:	44 e6       	ldi	r20, 0x64	; 100
    8a6c:	f4 2e       	mov	r15, r20
                        break;
    8a6e:	0c c0       	rjmp	.+24     	; 0x8a88 <itoa+0x8c>
                    case 14:
                        ch = 'e' ;
    8a70:	b5 e6       	ldi	r27, 0x65	; 101
    8a72:	fb 2e       	mov	r15, r27
                        break;
    8a74:	09 c0       	rjmp	.+18     	; 0x8a88 <itoa+0x8c>
                    case 15:
                        ch ='f' ;
    8a76:	a6 e6       	ldi	r26, 0x66	; 102
    8a78:	fa 2e       	mov	r15, r26
                        break;
    8a7a:	06 c0       	rjmp	.+12     	; 0x8a88 <itoa+0x8c>
                }
            }
        }
        if( '!' == ch )
    8a7c:	af 2d       	mov	r26, r15
    8a7e:	a1 32       	cpi	r26, 0x21	; 33
    8a80:	19 f4       	brne	.+6      	; 0x8a88 <itoa+0x8c>
        {
            str[pos++] = (char) ( rem + 0x30 );
    8a82:	40 5d       	subi	r20, 0xD0	; 208
    8a84:	40 83       	st	Z, r20
    8a86:	01 c0       	rjmp	.+2      	; 0x8a8a <itoa+0x8e>
        }
        else
        {
            str[pos++] = ch ;
    8a88:	f0 82       	st	Z, r15
    8a8a:	a9 01       	movw	r20, r18
    8a8c:	2f 5f       	subi	r18, 0xFF	; 255
    8a8e:	3f 4f       	sbci	r19, 0xFF	; 255
    8a90:	31 96       	adiw	r30, 0x01	; 1
        }
    }while( value != 0 );
    8a92:	61 15       	cp	r22, r1
    8a94:	71 05       	cpc	r23, r1
    8a96:	09 f6       	brne	.-126    	; 0x8a1a <itoa+0x1e>
   // str[pos] = '\0' ;
    
    i=0; 
    
    while (i<pos/2)
    8a98:	9a 01       	movw	r18, r20
    8a9a:	35 95       	asr	r19
    8a9c:	27 95       	ror	r18
 

static uint8_t localbuffer[16];


uint8_t itoa(uint16_t value, char*  str, int radix)
    8a9e:	c4 0f       	add	r28, r20
    8aa0:	d5 1f       	adc	r29, r21
    8aa2:	fe 01       	movw	r30, r28
    8aa4:	80 e0       	ldi	r24, 0x00	; 0
    8aa6:	90 e0       	ldi	r25, 0x00	; 0
    8aa8:	09 c0       	rjmp	.+18     	; 0x8abc <itoa+0xc0>
    
    i=0; 
    
    while (i<pos/2)
    {
        *(str+pos) = *(str+i);       //uses the null character as the temporary storage.
    8aaa:	d6 01       	movw	r26, r12
    8aac:	6c 91       	ld	r22, X
    8aae:	68 83       	st	Y, r22
        *(str+i) = *(str + pos - i -1);
    8ab0:	62 91       	ld	r22, -Z
    8ab2:	6d 93       	st	X+, r22
    8ab4:	6d 01       	movw	r12, r26
        *(str+pos-i-1) = *(str+pos);
    8ab6:	68 81       	ld	r22, Y
    8ab8:	60 83       	st	Z, r22
        i++;
    8aba:	01 96       	adiw	r24, 0x01	; 1
    }while( value != 0 );
   // str[pos] = '\0' ;
    
    i=0; 
    
    while (i<pos/2)
    8abc:	82 17       	cp	r24, r18
    8abe:	93 07       	cpc	r25, r19
    8ac0:	a4 f3       	brlt	.-24     	; 0x8aaa <itoa+0xae>
        *(str+i) = *(str + pos - i -1);
        *(str+pos-i-1) = *(str+pos);
        i++;
    }
   
    *(str+pos) = '\0';
    8ac2:	18 82       	st	Y, r1
    return pos;
}
    8ac4:	84 2f       	mov	r24, r20
    8ac6:	df 91       	pop	r29
    8ac8:	cf 91       	pop	r28
    8aca:	1f 91       	pop	r17
    8acc:	0f 91       	pop	r16
    8ace:	ff 90       	pop	r15
    8ad0:	df 90       	pop	r13
    8ad2:	cf 90       	pop	r12
    8ad4:	08 95       	ret
            if( rem >= 10 && rem <= 15 )
            {
                switch( rem )
                {
                    case 10:
                        ch = 'a' ;
    8ad6:	51 e6       	ldi	r21, 0x61	; 97
    8ad8:	f5 2e       	mov	r15, r21
    8ada:	d6 cf       	rjmp	.-84     	; 0x8a88 <itoa+0x8c>
                        break;
                    case 11:
                        ch ='b' ;
    8adc:	42 e6       	ldi	r20, 0x62	; 98
    8ade:	f4 2e       	mov	r15, r20
    8ae0:	d3 cf       	rjmp	.-90     	; 0x8a88 <itoa+0x8c>

00008ae2 <lib_init_usart>:

//No need to be called from main 
//This function is called when the system is being initilized and prints system start 
void lib_init_usart()
{
    UBRR0H = 0;
    8ae2:	10 92 90 00 	sts	0x0090, r1
    UBRR0L = 15;
    8ae6:	8f e0       	ldi	r24, 0x0F	; 15
    8ae8:	89 b9       	out	0x09, r24	; 9
    UCSR0A |= _BV(U2X0);        // double speed
    8aea:	59 9a       	sbi	0x0b, 1	; 11
    UCSR0C |= _BV(UCSZ01) | _BV(UCSZ00);        // 8 data-bits, 1 stop-bit
    8aec:	e5 e9       	ldi	r30, 0x95	; 149
    8aee:	f0 e0       	ldi	r31, 0x00	; 0
    8af0:	80 81       	ld	r24, Z
    8af2:	86 60       	ori	r24, 0x06	; 6
    8af4:	80 83       	st	Z, r24
    UCSR0B |= _BV(RXCIE0) | _BV(RXEN0) | _BV(TXEN0);
    8af6:	8a b1       	in	r24, 0x0a	; 10
    8af8:	88 69       	ori	r24, 0x98	; 152
    8afa:	8a b9       	out	0x0a, r24	; 10
    // Enable recieve/transmit/interrupts
    cFlag = 1;
    8afc:	81 e0       	ldi	r24, 0x01	; 1
    8afe:	80 93 fb 03 	sts	0x03FB, r24
    previous = 0;
    8b02:	10 92 fc 03 	sts	0x03FC, r1
    status = 0;
    8b06:	10 92 fd 03 	sts	0x03FD, r1
}
    8b0a:	08 95       	ret

00008b0c <lib_print_usart_char>:

//-------------------------------------------------------------------------
void lib_print_usart_char(uint8_t c)
{
    8b0c:	1f 93       	push	r17
    8b0e:	18 2f       	mov	r17, r24

   flag = _atomic_start();
    8b10:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>
    8b14:	80 93 3c 0c 	sts	0x0C3C, r24
     

    if (cFlag == 0)
    8b18:	80 91 fb 03 	lds	r24, 0x03FB
    8b1c:	88 23       	and	r24, r24
    8b1e:	11 f4       	brne	.+4      	; 0x8b24 <lib_print_usart_char+0x18>
    {
        lib_init_usart();
    8b20:	0e 94 71 45 	call	0x8ae2	; 0x8ae2 <lib_init_usart>
    }
    while ((UCSR0A & (1 << UDRE0)) == 0)
    8b24:	5d 9b       	sbis	0x0b, 5	; 11
    8b26:	fe cf       	rjmp	.-4      	; 0x8b24 <lib_print_usart_char+0x18>
        ;
    UDR0 = c;
    8b28:	1c b9       	out	0x0c, r17	; 12
	
    _atomic_end(flag);
    8b2a:	80 91 3c 0c 	lds	r24, 0x0C3C
    8b2e:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
}
    8b32:	1f 91       	pop	r17
    8b34:	08 95       	ret

00008b36 <lib_print_usart_long>:

 
 
//-------------------------------------------------------------------------
void lib_print_usart_long(uint32_t l)
{
    8b36:	df 93       	push	r29
    8b38:	cf 93       	push	r28
    8b3a:	00 d0       	rcall	.+0      	; 0x8b3c <lib_print_usart_long+0x6>
    8b3c:	00 d0       	rcall	.+0      	; 0x8b3e <lib_print_usart_long+0x8>
    8b3e:	cd b7       	in	r28, 0x3d	; 61
    8b40:	de b7       	in	r29, 0x3e	; 62
    8b42:	69 83       	std	Y+1, r22	; 0x01
    8b44:	7a 83       	std	Y+2, r23	; 0x02
    8b46:	8b 83       	std	Y+3, r24	; 0x03
    8b48:	9c 83       	std	Y+4, r25	; 0x04
    uint8_t *pcByte = ((uint8_t *) (&l)) + 3;

   flag = _atomic_start();
    8b4a:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>
    8b4e:	80 93 3c 0c 	sts	0x0C3C, r24
    
    lib_print_usart_char(*pcByte);
    8b52:	8c 81       	ldd	r24, Y+4	; 0x04
    8b54:	0e 94 86 45 	call	0x8b0c	; 0x8b0c <lib_print_usart_char>
    pcByte--;
    lib_print_usart_char(*pcByte);
    8b58:	8b 81       	ldd	r24, Y+3	; 0x03
    8b5a:	0e 94 86 45 	call	0x8b0c	; 0x8b0c <lib_print_usart_char>
    pcByte--;
    lib_print_usart_char(*pcByte);
    8b5e:	8a 81       	ldd	r24, Y+2	; 0x02
    8b60:	0e 94 86 45 	call	0x8b0c	; 0x8b0c <lib_print_usart_char>
    pcByte--;
    lib_print_usart_char(*pcByte);
    8b64:	89 81       	ldd	r24, Y+1	; 0x01
    8b66:	0e 94 86 45 	call	0x8b0c	; 0x8b0c <lib_print_usart_char>
   _atomic_end(flag);
    8b6a:	80 91 3c 0c 	lds	r24, 0x0C3C
    8b6e:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
	
} 
    8b72:	0f 90       	pop	r0
    8b74:	0f 90       	pop	r0
    8b76:	0f 90       	pop	r0
    8b78:	0f 90       	pop	r0
    8b7a:	cf 91       	pop	r28
    8b7c:	df 91       	pop	r29
    8b7e:	08 95       	ret

00008b80 <lib_printf_string_source_disabled>:

//-------------------------------------------------------------------------
void lib_printf_string_source_disabled(char *p)
{
    8b80:	ef 92       	push	r14
    8b82:	ff 92       	push	r15
    8b84:	0f 93       	push	r16
    8b86:	1f 93       	push	r17
    8b88:	df 93       	push	r29
    8b8a:	cf 93       	push	r28
    8b8c:	0f 92       	push	r0
    8b8e:	cd b7       	in	r28, 0x3d	; 61
    8b90:	de b7       	in	r29, 0x3e	; 62
    8b92:	18 2f       	mov	r17, r24
   
   
   flag = _atomic_start();
    8b94:	99 83       	std	Y+1, r25	; 0x01
    8b96:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>
    8b9a:	80 93 3c 0c 	sts	0x0C3C, r24
      
	lib_print_usart_char(0xFC);
    8b9e:	8c ef       	ldi	r24, 0xFC	; 252
    8ba0:	0e 94 86 45 	call	0x8b0c	; 0x8b0c <lib_print_usart_char>
    8ba4:	99 81       	ldd	r25, Y+1	; 0x01
    8ba6:	61 2f       	mov	r22, r17
    8ba8:	79 2f       	mov	r23, r25
    8baa:	8b 01       	movw	r16, r22
    while ((*p) != '\0')
    8bac:	02 c0       	rjmp	.+4      	; 0x8bb2 <lib_printf_string_source_disabled+0x32>
    {
        lib_print_usart_char(*p);
    8bae:	0e 94 86 45 	call	0x8b0c	; 0x8b0c <lib_print_usart_char>
   
   
   flag = _atomic_start();
      
	lib_print_usart_char(0xFC);
    while ((*p) != '\0')
    8bb2:	f8 01       	movw	r30, r16
    8bb4:	81 91       	ld	r24, Z+
    8bb6:	8f 01       	movw	r16, r30
    8bb8:	88 23       	and	r24, r24
    8bba:	c9 f7       	brne	.-14     	; 0x8bae <lib_printf_string_source_disabled+0x2e>
    {
        lib_print_usart_char(*p);
        p++;
    }
    lib_print_usart_char(0xFC);
    8bbc:	8c ef       	ldi	r24, 0xFC	; 252
    8bbe:	0e 94 86 45 	call	0x8b0c	; 0x8b0c <lib_print_usart_char>
  
    _atomic_end(flag);
    8bc2:	80 91 3c 0c 	lds	r24, 0x0C3C
    8bc6:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
	
}
    8bca:	0f 90       	pop	r0
    8bcc:	cf 91       	pop	r28
    8bce:	df 91       	pop	r29
    8bd0:	1f 91       	pop	r17
    8bd2:	0f 91       	pop	r16
    8bd4:	ff 90       	pop	r15
    8bd6:	ef 90       	pop	r14
    8bd8:	08 95       	ret

00008bda <lib_printf_string>:


//-------------------------------------------------------------------------
void lib_printf_string(char *p)
{
    8bda:	ef 92       	push	r14
    8bdc:	ff 92       	push	r15
    8bde:	0f 93       	push	r16
    8be0:	1f 93       	push	r17
    8be2:	cf 93       	push	r28
    8be4:	df 93       	push	r29
    8be6:	8c 01       	movw	r16, r24
   
   
   flag = _atomic_start();
    8be8:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>
    8bec:	80 93 3c 0c 	sts	0x0C3C, r24
   
   #ifdef PRINT_SOURCE_ENABLED

      itoa(lib_get_node_id(), (char *)localbuffer, 10);
    8bf0:	0e 94 81 47 	call	0x8f02	; 0x8f02 <lib_get_node_id>
    8bf4:	6b ee       	ldi	r22, 0xEB	; 235
    8bf6:	73 e0       	ldi	r23, 0x03	; 3
    8bf8:	4a e0       	ldi	r20, 0x0A	; 10
    8bfa:	50 e0       	ldi	r21, 0x00	; 0
    8bfc:	0e 94 fe 44 	call	0x89fc	; 0x89fc <itoa>
      lib_printf_string_source_disabled((char *)localbuffer);
    8c00:	8b ee       	ldi	r24, 0xEB	; 235
    8c02:	93 e0       	ldi	r25, 0x03	; 3
    8c04:	0e 94 c0 45 	call	0x8b80	; 0x8b80 <lib_printf_string_source_disabled>
	  lib_printf_string_source_disabled(": ");	
    8c08:	82 e5       	ldi	r24, 0x52	; 82
    8c0a:	91 e0       	ldi	r25, 0x01	; 1
    8c0c:	0e 94 c0 45 	call	0x8b80	; 0x8b80 <lib_printf_string_source_disabled>
	  
   #endif
    
	lib_print_usart_char(0xFC);
    8c10:	8c ef       	ldi	r24, 0xFC	; 252
    8c12:	0e 94 86 45 	call	0x8b0c	; 0x8b0c <lib_print_usart_char>
    8c16:	e0 2e       	mov	r14, r16
    8c18:	e7 01       	movw	r28, r14
    8c1a:	7e 01       	movw	r14, r28
    8c1c:	f1 2e       	mov	r15, r17
    8c1e:	e7 01       	movw	r28, r14
    while ((*p) != '\0')
    8c20:	02 c0       	rjmp	.+4      	; 0x8c26 <lib_printf_string+0x4c>
    {
        lib_print_usart_char(*p);
    8c22:	0e 94 86 45 	call	0x8b0c	; 0x8b0c <lib_print_usart_char>
	  lib_printf_string_source_disabled(": ");	
	  
   #endif
    
	lib_print_usart_char(0xFC);
    while ((*p) != '\0')
    8c26:	89 91       	ld	r24, Y+
    8c28:	88 23       	and	r24, r24
    8c2a:	d9 f7       	brne	.-10     	; 0x8c22 <lib_printf_string+0x48>
    {
        lib_print_usart_char(*p);
        p++;
    }
    lib_print_usart_char(0xFC);
    8c2c:	8c ef       	ldi	r24, 0xFC	; 252
    8c2e:	0e 94 86 45 	call	0x8b0c	; 0x8b0c <lib_print_usart_char>
  
    _atomic_end(flag);
    8c32:	80 91 3c 0c 	lds	r24, 0x0C3C
    8c36:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
	
}
    8c3a:	df 91       	pop	r29
    8c3c:	cf 91       	pop	r28
    8c3e:	1f 91       	pop	r17
    8c40:	0f 91       	pop	r16
    8c42:	ff 90       	pop	r15
    8c44:	ef 90       	pop	r14
    8c46:	08 95       	ret

00008c48 <lib_printf_integer32>:


//-------------------------------------------------------------------------
void lib_printf_integer32(int32_t a)
{
    8c48:	ef 92       	push	r14
    8c4a:	ff 92       	push	r15
    8c4c:	0f 93       	push	r16
    8c4e:	1f 93       	push	r17
    8c50:	cf 93       	push	r28
    8c52:	df 93       	push	r29
    8c54:	7b 01       	movw	r14, r22
    8c56:	8c 01       	movw	r16, r24
   
   flag = _atomic_start();
    8c58:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>
    8c5c:	80 93 3c 0c 	sts	0x0C3C, r24
  
	#ifdef PRINT_SOURCE_ENABLED   
    itoa(lib_get_node_id(), (char *)localbuffer, 10);
    8c60:	0e 94 81 47 	call	0x8f02	; 0x8f02 <lib_get_node_id>
    8c64:	cb ee       	ldi	r28, 0xEB	; 235
    8c66:	d3 e0       	ldi	r29, 0x03	; 3
    8c68:	be 01       	movw	r22, r28
    8c6a:	4a e0       	ldi	r20, 0x0A	; 10
    8c6c:	50 e0       	ldi	r21, 0x00	; 0
    8c6e:	0e 94 fe 44 	call	0x89fc	; 0x89fc <itoa>
	lib_printf_string_source_disabled((char *)localbuffer);
    8c72:	ce 01       	movw	r24, r28
    8c74:	0e 94 c0 45 	call	0x8b80	; 0x8b80 <lib_printf_string_source_disabled>
    lib_printf_string_source_disabled(": ");	
    8c78:	82 e5       	ldi	r24, 0x52	; 82
    8c7a:	91 e0       	ldi	r25, 0x01	; 1
    8c7c:	0e 94 c0 45 	call	0x8b80	; 0x8b80 <lib_printf_string_source_disabled>
	#endif 
	
    lib_print_usart_char(0xFD);
    8c80:	8d ef       	ldi	r24, 0xFD	; 253
    8c82:	0e 94 86 45 	call	0x8b0c	; 0x8b0c <lib_print_usart_char>
    lib_print_usart_long(*(uint32_t *) (&a));
    8c86:	c8 01       	movw	r24, r16
    8c88:	b7 01       	movw	r22, r14
    8c8a:	0e 94 9b 45 	call	0x8b36	; 0x8b36 <lib_print_usart_long>
    lib_print_usart_char(0xFD);
    8c8e:	8d ef       	ldi	r24, 0xFD	; 253
    8c90:	0e 94 86 45 	call	0x8b0c	; 0x8b0c <lib_print_usart_char>
	
	_atomic_end(flag);
    8c94:	80 91 3c 0c 	lds	r24, 0x0C3C
    8c98:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
}
    8c9c:	df 91       	pop	r29
    8c9e:	cf 91       	pop	r28
    8ca0:	1f 91       	pop	r17
    8ca2:	0f 91       	pop	r16
    8ca4:	ff 90       	pop	r15
    8ca6:	ef 90       	pop	r14
    8ca8:	08 95       	ret

00008caa <lib_printf_uinteger32>:

//-------------------------------------------------------------------------
void lib_printf_uinteger32(uint32_t l)
{
    8caa:	ef 92       	push	r14
    8cac:	ff 92       	push	r15
    8cae:	0f 93       	push	r16
    8cb0:	1f 93       	push	r17
    8cb2:	cf 93       	push	r28
    8cb4:	df 93       	push	r29
    8cb6:	7b 01       	movw	r14, r22
    8cb8:	8c 01       	movw	r16, r24
   flag = _atomic_start();
    8cba:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>
    8cbe:	80 93 3c 0c 	sts	0x0C3C, r24
   
    #ifdef PRINT_SOURCE_ENABLED
    itoa(lib_get_node_id(), (char *)localbuffer, 10);
    8cc2:	0e 94 81 47 	call	0x8f02	; 0x8f02 <lib_get_node_id>
    8cc6:	cb ee       	ldi	r28, 0xEB	; 235
    8cc8:	d3 e0       	ldi	r29, 0x03	; 3
    8cca:	be 01       	movw	r22, r28
    8ccc:	4a e0       	ldi	r20, 0x0A	; 10
    8cce:	50 e0       	ldi	r21, 0x00	; 0
    8cd0:	0e 94 fe 44 	call	0x89fc	; 0x89fc <itoa>
    lib_printf_string_source_disabled((char *)localbuffer);
    8cd4:	ce 01       	movw	r24, r28
    8cd6:	0e 94 c0 45 	call	0x8b80	; 0x8b80 <lib_printf_string_source_disabled>
    lib_printf_string_source_disabled(": ");		
    8cda:	82 e5       	ldi	r24, 0x52	; 82
    8cdc:	91 e0       	ldi	r25, 0x01	; 1
    8cde:	0e 94 c0 45 	call	0x8b80	; 0x8b80 <lib_printf_string_source_disabled>
    #endif 
	
    lib_print_usart_char(0xFE);
    8ce2:	8e ef       	ldi	r24, 0xFE	; 254
    8ce4:	0e 94 86 45 	call	0x8b0c	; 0x8b0c <lib_print_usart_char>
    lib_print_usart_long(l);
    8ce8:	c8 01       	movw	r24, r16
    8cea:	b7 01       	movw	r22, r14
    8cec:	0e 94 9b 45 	call	0x8b36	; 0x8b36 <lib_print_usart_long>
    lib_print_usart_char(0xFE);
    8cf0:	8e ef       	ldi	r24, 0xFE	; 254
    8cf2:	0e 94 86 45 	call	0x8b0c	; 0x8b0c <lib_print_usart_char>
	
	_atomic_end(flag);
    8cf6:	80 91 3c 0c 	lds	r24, 0x0C3C
    8cfa:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
}
    8cfe:	df 91       	pop	r29
    8d00:	cf 91       	pop	r28
    8d02:	1f 91       	pop	r17
    8d04:	0f 91       	pop	r16
    8d06:	ff 90       	pop	r15
    8d08:	ef 90       	pop	r14
    8d0a:	08 95       	ret

00008d0c <lib_printf_ln>:


//-------------------------------------------------------------------------
void lib_printf_ln()
{
    8d0c:	1f 93       	push	r17
#ifdef PLATFORM_AVR
    _atomic_t currentatomic;
    currentatomic = _atomic_start();
    8d0e:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>
    8d12:	18 2f       	mov	r17, r24
    lib_print_usart_char(0xFC);
    8d14:	8c ef       	ldi	r24, 0xFC	; 252
    8d16:	0e 94 86 45 	call	0x8b0c	; 0x8b0c <lib_print_usart_char>
    lib_print_usart_char(0x6D);
    8d1a:	8d e6       	ldi	r24, 0x6D	; 109
    8d1c:	0e 94 86 45 	call	0x8b0c	; 0x8b0c <lib_print_usart_char>
    lib_print_usart_char(0x6D);
    8d20:	8d e6       	ldi	r24, 0x6D	; 109
    8d22:	0e 94 86 45 	call	0x8b0c	; 0x8b0c <lib_print_usart_char>
    lib_print_usart_char(0x6D);
    8d26:	8d e6       	ldi	r24, 0x6D	; 109
    8d28:	0e 94 86 45 	call	0x8b0c	; 0x8b0c <lib_print_usart_char>
    lib_print_usart_char(0xFC);
    8d2c:	8c ef       	ldi	r24, 0xFC	; 252
    8d2e:	0e 94 86 45 	call	0x8b0c	; 0x8b0c <lib_print_usart_char>
	_atomic_end(currentatomic);
    8d32:	81 2f       	mov	r24, r17
    8d34:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
    
#endif
}
    8d38:	1f 91       	pop	r17
    8d3a:	08 95       	ret

00008d3c <lib_sounder_on>:
#include "../types/types.h"
void lib_sounder_on()
{
                          
  void (*sounderfp)() = (void (*)(void))SOUNDER_ON_FUNCTION; 
  sounderfp();    
    8d3c:	e8 e1       	ldi	r30, 0x18	; 24
    8d3e:	fd ee       	ldi	r31, 0xED	; 237
    8d40:	09 95       	icall
}
    8d42:	08 95       	ret

00008d44 <lib_sounder_off>:

void lib_sounder_off()
{
                          
  void (*sounderfp)() = (void (*)(void))SOUNDER_OFF_FUNCTION; 
  sounderfp();    
    8d44:	ec e1       	ldi	r30, 0x1C	; 28
    8d46:	fd ee       	ldi	r31, 0xED	; 237
    8d48:	09 95       	icall
}
    8d4a:	08 95       	ret

00008d4c <lib_hex2value>:
uint16_t lib_hex2value(uint8_t hex)
{
  char a = (char)hex;
  uint16_t high;

  if ((a>='0')&&(a<='9'))
    8d4c:	98 2f       	mov	r25, r24
    8d4e:	90 53       	subi	r25, 0x30	; 48
    8d50:	28 2f       	mov	r18, r24
    8d52:	33 27       	eor	r19, r19
    8d54:	27 fd       	sbrc	r18, 7
    8d56:	30 95       	com	r19
    8d58:	9a 30       	cpi	r25, 0x0A	; 10
    8d5a:	18 f4       	brcc	.+6      	; 0x8d62 <lib_hex2value+0x16>
	     high = a-'0';
    8d5c:	20 53       	subi	r18, 0x30	; 48
    8d5e:	30 40       	sbci	r19, 0x00	; 0
    8d60:	02 c0       	rjmp	.+4      	; 0x8d66 <lib_hex2value+0x1a>
  else
		 high = a-'A'+ 10;
    8d62:	27 53       	subi	r18, 0x37	; 55
    8d64:	30 40       	sbci	r19, 0x00	; 0
  return high;

}
    8d66:	c9 01       	movw	r24, r18
    8d68:	08 95       	ret

00008d6a <lib_string_length>:


int lib_string_length(char* s) {
	int count=0;
    8d6a:	28 2f       	mov	r18, r24
    8d6c:	39 2f       	mov	r19, r25
    8d6e:	f9 01       	movw	r30, r18
    8d70:	20 e0       	ldi	r18, 0x00	; 0
    8d72:	30 e0       	ldi	r19, 0x00	; 0
	while(s[count] != '\0')
    8d74:	02 c0       	rjmp	.+4      	; 0x8d7a <lib_string_length+0x10>
		count++;
    8d76:	2f 5f       	subi	r18, 0xFF	; 255
    8d78:	3f 4f       	sbci	r19, 0xFF	; 255
}


int lib_string_length(char* s) {
	int count=0;
	while(s[count] != '\0')
    8d7a:	81 91       	ld	r24, Z+
    8d7c:	88 23       	and	r24, r24
    8d7e:	d9 f7       	brne	.-10     	; 0x8d76 <lib_string_length+0xc>
		count++;
	return count;
}
    8d80:	c9 01       	movw	r24, r18
    8d82:	08 95       	ret

00008d84 <lib_mystrncpy>:


void lib_mystrncpy(char *dest, const char *src, uint16_t n)
{
	uint16_t i;
	for (i=0;i<n;i++)
    8d84:	26 2f       	mov	r18, r22
    8d86:	37 2f       	mov	r19, r23
    8d88:	f9 01       	movw	r30, r18
    8d8a:	28 2f       	mov	r18, r24
    8d8c:	39 2f       	mov	r19, r25
    8d8e:	d9 01       	movw	r26, r18
    8d90:	80 e0       	ldi	r24, 0x00	; 0
    8d92:	90 e0       	ldi	r25, 0x00	; 0
    8d94:	03 c0       	rjmp	.+6      	; 0x8d9c <lib_mystrncpy+0x18>
		dest[i] = src[i];
    8d96:	21 91       	ld	r18, Z+
    8d98:	2d 93       	st	X+, r18


void lib_mystrncpy(char *dest, const char *src, uint16_t n)
{
	uint16_t i;
	for (i=0;i<n;i++)
    8d9a:	01 96       	adiw	r24, 0x01	; 1
    8d9c:	84 17       	cp	r24, r20
    8d9e:	95 07       	cpc	r25, r21
    8da0:	d0 f3       	brcs	.-12     	; 0x8d96 <lib_mystrncpy+0x12>
		dest[i] = src[i];
}
    8da2:	08 95       	ret

00008da4 <lib_mystrcpy>:


void lib_mystrcpy(char *dest, const char *src)
{
	int i;
	i = 0;
    8da4:	26 2f       	mov	r18, r22
    8da6:	37 2f       	mov	r19, r23
    8da8:	d9 01       	movw	r26, r18
    8daa:	fc 01       	movw	r30, r24
    8dac:	20 e0       	ldi	r18, 0x00	; 0
    8dae:	30 e0       	ldi	r19, 0x00	; 0
	while (src[i]!='\0')
    8db0:	03 c0       	rjmp	.+6      	; 0x8db8 <lib_mystrcpy+0x14>
	{ dest[i] = src[i];
    8db2:	41 93       	st	Z+, r20
	i++;
    8db4:	2f 5f       	subi	r18, 0xFF	; 255
    8db6:	3f 4f       	sbci	r19, 0xFF	; 255

void lib_mystrcpy(char *dest, const char *src)
{
	int i;
	i = 0;
	while (src[i]!='\0')
    8db8:	4d 91       	ld	r20, X+
    8dba:	44 23       	and	r20, r20
    8dbc:	d1 f7       	brne	.-12     	; 0x8db2 <lib_mystrcpy+0xe>
	{ dest[i] = src[i];
	i++;
	}
	dest[i] = '\0';
    8dbe:	82 0f       	add	r24, r18
    8dc0:	93 1f       	adc	r25, r19
    8dc2:	fc 01       	movw	r30, r24
    8dc4:	10 82       	st	Z, r1
}
    8dc6:	08 95       	ret

00008dc8 <lib_dec2char>:


char lib_dec2char(uint8_t value) {

	if (/*value >= 0) &&*/(value <=9))
    8dc8:	8a 30       	cpi	r24, 0x0A	; 10
    8dca:	10 f4       	brcc	.+4      	; 0x8dd0 <lib_dec2char+0x8>
		return (char) (value + 0x30);
    8dcc:	80 5d       	subi	r24, 0xD0	; 208
    8dce:	08 95       	ret
	else
		return 0;
    8dd0:	80 e0       	ldi	r24, 0x00	; 0
}
    8dd2:	08 95       	ret

00008dd4 <lib_string_int_to_string>:


char *lib_string_int_to_string(int num)
{
    8dd4:	cf 93       	push	r28
    8dd6:	df 93       	push	r29
    8dd8:	9c 01       	movw	r18, r24
	do
	{
		remainder = internal%10;
		temp[offset]= lib_dec2char(remainder);
		internal = internal/10;
		offset--;
    8dda:	fc 01       	movw	r30, r24
    8ddc:	97 ff       	sbrs	r25, 7
    8dde:	04 c0       	rjmp	.+8      	; 0x8de8 <lib_string_int_to_string+0x14>
    8de0:	ee 27       	eor	r30, r30
    8de2:	ff 27       	eor	r31, r31
    8de4:	e8 1b       	sub	r30, r24
    8de6:	f9 0b       	sbc	r31, r25
	if (num <0)
		internal = -num;
	else
		internal = num;

	temp[6] = '\0';
    8de8:	10 92 04 04 	sts	0x0404, r1
{
	static char temp[7];
	int internal;
	uint8_t length;
	uint8_t i;
	uint8_t offset = 5;
    8dec:	45 e0       	ldi	r20, 0x05	; 5

	temp[6] = '\0';

	do
	{
		remainder = internal%10;
    8dee:	ca e0       	ldi	r28, 0x0A	; 10
    8df0:	d0 e0       	ldi	r29, 0x00	; 0
    8df2:	cf 01       	movw	r24, r30
    8df4:	be 01       	movw	r22, r28
    8df6:	0e 94 eb 48 	call	0x91d6	; 0x91d6 <__divmodhi4>
		temp[offset]= lib_dec2char(remainder);
    8dfa:	a4 2f       	mov	r26, r20
    8dfc:	b0 e0       	ldi	r27, 0x00	; 0
}


char lib_dec2char(uint8_t value) {

	if (/*value >= 0) &&*/(value <=9))
    8dfe:	8a 30       	cpi	r24, 0x0A	; 10
    8e00:	10 f4       	brcc	.+4      	; 0x8e06 <lib_string_int_to_string+0x32>
		return (char) (value + 0x30);
    8e02:	80 5d       	subi	r24, 0xD0	; 208
    8e04:	01 c0       	rjmp	.+2      	; 0x8e08 <lib_string_int_to_string+0x34>
	else
		return 0;
    8e06:	80 e0       	ldi	r24, 0x00	; 0
	temp[6] = '\0';

	do
	{
		remainder = internal%10;
		temp[offset]= lib_dec2char(remainder);
    8e08:	a2 50       	subi	r26, 0x02	; 2
    8e0a:	bc 4f       	sbci	r27, 0xFC	; 252
    8e0c:	8c 93       	st	X, r24
		internal = internal/10;
    8e0e:	cf 01       	movw	r24, r30
    8e10:	be 01       	movw	r22, r28
    8e12:	0e 94 eb 48 	call	0x91d6	; 0x91d6 <__divmodhi4>
    8e16:	fb 01       	movw	r30, r22
		offset--;
    8e18:	41 50       	subi	r20, 0x01	; 1
	}
	while (internal!=0);
    8e1a:	30 97       	sbiw	r30, 0x00	; 0
    8e1c:	51 f7       	brne	.-44     	; 0x8df2 <lib_string_int_to_string+0x1e>

	if (num<0)
    8e1e:	37 ff       	sbrs	r19, 7
    8e20:	09 c0       	rjmp	.+18     	; 0x8e34 <lib_string_int_to_string+0x60>
	{temp[offset] = '-';
    8e22:	e4 2f       	mov	r30, r20
    8e24:	f0 e0       	ldi	r31, 0x00	; 0
    8e26:	e2 50       	subi	r30, 0x02	; 2
    8e28:	fc 4f       	sbci	r31, 0xFC	; 252
    8e2a:	8d e2       	ldi	r24, 0x2D	; 45
    8e2c:	80 83       	st	Z, r24
	 if (offset ==0)
    8e2e:	44 23       	and	r20, r20
    8e30:	91 f0       	breq	.+36     	; 0x8e56 <lib_string_int_to_string+0x82>
		 return temp;
	 else
		 offset--;
    8e32:	41 50       	subi	r20, 0x01	; 1


	{
		length = 7-offset-1;
		for (i=0;i<length;i++)
			temp[i] = temp[i+offset+1];
    8e34:	e4 2f       	mov	r30, r20
    8e36:	f0 e0       	ldi	r31, 0x00	; 0
	else
		return 0;
}


char *lib_string_int_to_string(int num)
    8e38:	e1 50       	subi	r30, 0x01	; 1
    8e3a:	fc 4f       	sbci	r31, 0xFC	; 252
	if (num<0)
	{temp[offset] = '-';
	 if (offset ==0)
		 return temp;
	 else
		 offset--;
    8e3c:	ae ef       	ldi	r26, 0xFE	; 254
    8e3e:	b3 e0       	ldi	r27, 0x03	; 3




	{
		length = 7-offset-1;
    8e40:	86 e0       	ldi	r24, 0x06	; 6
    8e42:	84 1b       	sub	r24, r20
	else
		return 0;
}


char *lib_string_int_to_string(int num)
    8e44:	90 e0       	ldi	r25, 0x00	; 0
    8e46:	8a 0f       	add	r24, r26
    8e48:	9b 1f       	adc	r25, r27



	{
		length = 7-offset-1;
		for (i=0;i<length;i++)
    8e4a:	02 c0       	rjmp	.+4      	; 0x8e50 <lib_string_int_to_string+0x7c>
			temp[i] = temp[i+offset+1];
    8e4c:	21 91       	ld	r18, Z+
    8e4e:	2d 93       	st	X+, r18



	{
		length = 7-offset-1;
		for (i=0;i<length;i++)
    8e50:	a8 17       	cp	r26, r24
    8e52:	b9 07       	cpc	r27, r25
    8e54:	d9 f7       	brne	.-10     	; 0x8e4c <lib_string_int_to_string+0x78>
			temp[i] = temp[i+offset+1];
	}
	return temp;
}
    8e56:	8e ef       	ldi	r24, 0xFE	; 254
    8e58:	93 e0       	ldi	r25, 0x03	; 3
    8e5a:	df 91       	pop	r29
    8e5c:	cf 91       	pop	r28
    8e5e:	08 95       	ret

00008e60 <lib_string_append>:

void lib_string_append(char *base, char *string)
{
    8e60:	ef 92       	push	r14
    8e62:	ff 92       	push	r15
    8e64:	0f 93       	push	r16
    8e66:	1f 93       	push	r17
    8e68:	cf 93       	push	r28
    8e6a:	df 93       	push	r29
    8e6c:	ec 01       	movw	r28, r24
    8e6e:	8b 01       	movw	r16, r22
	int length1, length2;
	uint8_t i;
	length1 = lib_string_length(base);
    8e70:	0e 94 b5 46 	call	0x8d6a	; 0x8d6a <lib_string_length>
    8e74:	7c 01       	movw	r14, r24
	length2 = lib_string_length(string);
    8e76:	c8 01       	movw	r24, r16
    8e78:	0e 94 b5 46 	call	0x8d6a	; 0x8d6a <lib_string_length>
	for (i=0;i<length2;i++)
    8e7c:	40 e0       	ldi	r20, 0x00	; 0
    8e7e:	ce 0d       	add	r28, r14
    8e80:	df 1d       	adc	r29, r15
    8e82:	09 c0       	rjmp	.+18     	; 0x8e96 <lib_string_append+0x36>
	{
		base[i+length1] = string[i];
    8e84:	fe 01       	movw	r30, r28
    8e86:	e2 0f       	add	r30, r18
    8e88:	f3 1f       	adc	r31, r19
    8e8a:	20 0f       	add	r18, r16
    8e8c:	31 1f       	adc	r19, r17
    8e8e:	d9 01       	movw	r26, r18
    8e90:	2c 91       	ld	r18, X
    8e92:	20 83       	st	Z, r18
{
	int length1, length2;
	uint8_t i;
	length1 = lib_string_length(base);
	length2 = lib_string_length(string);
	for (i=0;i<length2;i++)
    8e94:	4f 5f       	subi	r20, 0xFF	; 255
    8e96:	24 2f       	mov	r18, r20
    8e98:	30 e0       	ldi	r19, 0x00	; 0
    8e9a:	28 17       	cp	r18, r24
    8e9c:	39 07       	cpc	r19, r25
    8e9e:	94 f3       	brlt	.-28     	; 0x8e84 <lib_string_append+0x24>
	{
		base[i+length1] = string[i];

	}
	base[length1+length2] = '\0';
    8ea0:	c8 0f       	add	r28, r24
    8ea2:	d9 1f       	adc	r29, r25
    8ea4:	18 82       	st	Y, r1
}
    8ea6:	df 91       	pop	r29
    8ea8:	cf 91       	pop	r28
    8eaa:	1f 91       	pop	r17
    8eac:	0f 91       	pop	r16
    8eae:	ff 90       	pop	r15
    8eb0:	ef 90       	pop	r14
    8eb2:	08 95       	ret

00008eb4 <lib_string_split>:

char* lib_string_split(char ** string, char delimiter)
{
    8eb4:	cf 93       	push	r28
    8eb6:	df 93       	push	r29
    8eb8:	fc 01       	movw	r30, r24
	uint16_t i;
	char* output = (*string);
    8eba:	20 81       	ld	r18, Z
    8ebc:	31 81       	ldd	r19, Z+1	; 0x01
    8ebe:	d9 01       	movw	r26, r18

	for (i = 0; output[i] != 0; i++) 
    8ec0:	80 e0       	ldi	r24, 0x00	; 0
    8ec2:	90 e0       	ldi	r25, 0x00	; 0
    8ec4:	09 c0       	rjmp	.+18     	; 0x8ed8 <lib_string_split+0x24>
    8ec6:	01 96       	adiw	r24, 0x01	; 1
		if (output[i] == delimiter) {
    8ec8:	46 17       	cp	r20, r22
    8eca:	31 f4       	brne	.+12     	; 0x8ed8 <lib_string_split+0x24>
			output[i] = 0;
    8ecc:	18 82       	st	Y, r1
			*string = output + i + 1;
    8ece:	82 0f       	add	r24, r18
    8ed0:	93 1f       	adc	r25, r19
    8ed2:	91 83       	std	Z+1, r25	; 0x01
    8ed4:	80 83       	st	Z, r24
			return output;
    8ed6:	06 c0       	rjmp	.+12     	; 0x8ee4 <lib_string_split+0x30>
char* lib_string_split(char ** string, char delimiter)
{
	uint16_t i;
	char* output = (*string);

	for (i = 0; output[i] != 0; i++) 
    8ed8:	ed 01       	movw	r28, r26
    8eda:	4d 91       	ld	r20, X+
    8edc:	44 23       	and	r20, r20
    8ede:	99 f7       	brne	.-26     	; 0x8ec6 <lib_string_split+0x12>
			output[i] = 0;
			*string = output + i + 1;
			return output;
		}

	*string = output + i;
    8ee0:	d1 83       	std	Z+1, r29	; 0x01
    8ee2:	c0 83       	st	Z, r28
	return output;
}
    8ee4:	c9 01       	movw	r24, r18
    8ee6:	df 91       	pop	r29
    8ee8:	cf 91       	pop	r28
    8eea:	08 95       	ret

00008eec <lib_random>:
int lib_random()
{

	 int ret;
   void (*getrandomfp)(void) = (void (*)(void))GET_RANDOM_NUMBER_FUNCTION;
   asm volatile("push r20" "\n\t"
    8eec:	4f 93       	push	r20
    8eee:	5f 93       	push	r21
                "push r21" "\n\t"
                ::);
   getrandomfp();
    8ef0:	e8 e0       	ldi	r30, 0x08	; 8
    8ef2:	fa ee       	ldi	r31, 0xEA	; 234
    8ef4:	09 95       	icall
   asm volatile(" mov %A0, r20" "\n\t"
    8ef6:	24 2f       	mov	r18, r20
    8ef8:	35 2f       	mov	r19, r21
    8efa:	c9 01       	movw	r24, r18
	              "mov %B0, r21" "\n\t"
				 :"=r" (ret)
				 :
                );
   asm volatile("pop r21" "\n\t"
    8efc:	5f 91       	pop	r21
    8efe:	4f 91       	pop	r20
	             "pop r20" "\n\t"
	              ::);
   return ret;

}
    8f00:	08 95       	ret

00008f02 <lib_get_node_id>:
uint16_t lib_get_node_id()
	{

	   int ret;
	   void (*fp)(void) = (void (*)(void))GET_NODE_ID_FUNCTION;
	   asm volatile("push r20" "\n\t"
    8f02:	4f 93       	push	r20
    8f04:	5f 93       	push	r21
					"push r21" "\n\t"
					::);
	   fp();
    8f06:	e0 e0       	ldi	r30, 0x00	; 0
    8f08:	fa ee       	ldi	r31, 0xEA	; 234
    8f0a:	09 95       	icall
	   asm volatile(" mov %A0, r20" "\n\t"
    8f0c:	24 2f       	mov	r18, r20
    8f0e:	35 2f       	mov	r19, r21
    8f10:	c9 01       	movw	r24, r18
					  "mov %B0, r21" "\n\t"
					 :"=r" (ret)
					 :
					);
	   asm volatile("pop r21" "\n\t"
    8f12:	5f 91       	pop	r21
    8f14:	4f 91       	pop	r20
					 "pop r20" "\n\t"
					  ::);
	   return ret;

	}
    8f16:	08 95       	ret

00008f18 <lib_set_node_id>:
	{



	   void (*fp)(void) = (void (*)(void))SET_NODE_ID_FUNCTION;
	   asm volatile("push r20" "\n\t"
    8f18:	4f 93       	push	r20
    8f1a:	5f 93       	push	r21
					"push r21" "\n\t"
					::);

	   asm volatile(" mov r20, %A0" "\n\t"
    8f1c:	48 2f       	mov	r20, r24
    8f1e:	59 2f       	mov	r21, r25
					  "mov r21, %B0" "\n\t"
					 :
					 :"r" (nodeid)
					);
	   fp();
    8f20:	e4 e0       	ldi	r30, 0x04	; 4
    8f22:	fa ee       	ldi	r31, 0xEA	; 234
    8f24:	09 95       	icall
	   asm volatile("pop r21" "\n\t"
    8f26:	5f 91       	pop	r21
    8f28:	4f 91       	pop	r20
					 "pop r20" "\n\t"
					  ::);
	   return;

	}
    8f2a:	08 95       	ret

00008f2c <get_current_timestamp>:

uint32_t get_current_timestamp()
{
	   uint32_t counter; 
       void (*fp)(void) = (void (*)(void))GET_CPU_COUNT_FUNCTION;
	   asm volatile("push r22" "\n\t"
    8f2c:	6f 93       	push	r22
    8f2e:	7f 93       	push	r23
    8f30:	8f 93       	push	r24
    8f32:	9f 93       	push	r25
					"push r23" "\n\t"
					"push r24" "\n\t"
					"push r25" "\n\t"
					::);
	   fp();
    8f34:	e0 e8       	ldi	r30, 0x80	; 128
    8f36:	fe ee       	ldi	r31, 0xEE	; 238
    8f38:	09 95       	icall

	   asm volatile("mov  %A0, r22" "\n\t"
    8f3a:	20 e0       	ldi	r18, 0x00	; 0
    8f3c:	30 e0       	ldi	r19, 0x00	; 0
    8f3e:	a9 01       	movw	r20, r18
    8f40:	26 2f       	mov	r18, r22
    8f42:	37 2f       	mov	r19, r23
    8f44:	48 2f       	mov	r20, r24
    8f46:	59 2f       	mov	r21, r25
					  "mov  %D0, r25" "\n\t"
					 :
					 :"r" (counter)
					);
	  
	   asm volatile("pop r22" "\n\t"
    8f48:	6f 91       	pop	r22
    8f4a:	7f 91       	pop	r23
    8f4c:	8f 91       	pop	r24
    8f4e:	9f 91       	pop	r25
					 "pop r25" "\n\t"
					  ::);
	   return counter;

    	
}
    8f50:	b9 01       	movw	r22, r18
    8f52:	ca 01       	movw	r24, r20
    8f54:	08 95       	ret

00008f56 <lib_get_current_thread>:

lib_thread **lib_get_current_thread()
{
   lib_thread **current_thread; 
   void (*getaddrfp)(void) = (void (*)(void))GET_CURRENT_THREAD_ADDRESS_FUNCTION; 
   asm volatile("push r20" "\n\t"
    8f56:	4f 93       	push	r20
    8f58:	5f 93       	push	r21
                "push r21" "\n\t"
                ::);
   getaddrfp();     
    8f5a:	e0 e8       	ldi	r30, 0x80	; 128
    8f5c:	fa ee       	ldi	r31, 0xEA	; 234
    8f5e:	09 95       	icall
   asm volatile(" mov %A0, r20" "\n\t"
    8f60:	24 2f       	mov	r18, r20
    8f62:	35 2f       	mov	r19, r21
    8f64:	c9 01       	movw	r24, r18
	             "mov %B0, r21" "\n\t"
				 :"=r" (current_thread)
				 :
                );
    asm volatile("pop r21" "\n\t"
    8f66:	5f 91       	pop	r21
    8f68:	4f 91       	pop	r20
	             "pop r20" "\n\t"
	              ::);
   return current_thread; 
}
    8f6a:	08 95       	ret

00008f6c <lib_get_kernel_stack_ptr>:

void **lib_get_kernel_stack_ptr()
	{
   void **ptr;
   void (*getaddrfp)(void) = (void (*)(void))GET_KERNEL_STACK_PTR_ADDRESS; 
   asm volatile("push r20" "\n\t"
    8f6c:	4f 93       	push	r20
    8f6e:	5f 93       	push	r21
                "push r21" "\n\t"
                ::);
   getaddrfp();     
    8f70:	e0 e8       	ldi	r30, 0x80	; 128
    8f72:	fb ee       	ldi	r31, 0xEB	; 235
    8f74:	09 95       	icall
   asm volatile(" mov %A0, r20" "\n\t"
    8f76:	24 2f       	mov	r18, r20
    8f78:	35 2f       	mov	r19, r21
    8f7a:	c9 01       	movw	r24, r18
	             "mov %B0, r21" "\n\t"
				 :"=r" (ptr)
				 :
                );
    asm volatile("pop r21" "\n\t"
    8f7c:	5f 91       	pop	r21
    8f7e:	4f 91       	pop	r20
	             "pop r20" "\n\t"
	              ::);
   return ptr; 
}
    8f80:	08 95       	ret

00008f82 <lib_get_current_thread_index>:
uint8_t lib_get_current_thread_index()
{
   
   uint16_t index; 
   void (*getaddrfp)(void) = (void (*)(void))GET_CURRENT_THREAD_INDEX_FUNCTION; 
   asm volatile("push r20" "\n\t"
    8f82:	4f 93       	push	r20
    8f84:	5f 93       	push	r21
                "push r21" "\n\t"
                ::);
   getaddrfp();     
    8f86:	e4 e8       	ldi	r30, 0x84	; 132
    8f88:	fa ee       	ldi	r31, 0xEA	; 234
    8f8a:	09 95       	icall
   asm volatile(" mov %A0, r20" "\n\t"
    8f8c:	84 2f       	mov	r24, r20
    8f8e:	95 2f       	mov	r25, r21
	             "mov %B0, r21" "\n\t"
				 :"=r" (index)
				 :
                );
    asm volatile("pop r21" "\n\t"
    8f90:	5f 91       	pop	r21
    8f92:	4f 91       	pop	r20
	             "pop r20" "\n\t"
	              ::);
   return (uint8_t)index; 
}
    8f94:	08 95       	ret

00008f96 <lib_get_thread_table_start>:
lib_thread *lib_get_thread_table_start()
{
	 lib_thread *fp;
	 
   void (*getaddrfp)(void) = (void (*)(void))GET_CURRENT_THREAD_TABLE_START; 
   asm volatile("push r20" "\n\t"
    8f96:	4f 93       	push	r20
    8f98:	5f 93       	push	r21
                "push r21" "\n\t"
                ::);
   getaddrfp();     
    8f9a:	e8 e8       	ldi	r30, 0x88	; 136
    8f9c:	fa ee       	ldi	r31, 0xEA	; 234
    8f9e:	09 95       	icall
   asm volatile(" mov %A0, r20" "\n\t"
    8fa0:	24 2f       	mov	r18, r20
    8fa2:	35 2f       	mov	r19, r21
    8fa4:	c9 01       	movw	r24, r18
	             "mov %B0, r21" "\n\t"
				 :"=r" (fp)
				 :
                );
    asm volatile("pop r21" "\n\t"
    8fa6:	5f 91       	pop	r21
    8fa8:	4f 91       	pop	r20
	             "pop r20" "\n\t"
	              ::);
   return fp; 
	
}
    8faa:	08 95       	ret

00008fac <lib_sleep_thread>:

void lib_sleep_thread(uint16_t milliseconds)
{
    8fac:	cf 93       	push	r28
    8fae:	df 93       	push	r29
    8fb0:	ec 01       	movw	r28, r24
	             "pop r25" "\n\t"
	              ::);
 */
 
   lib_thread **current_thread; 
   current_thread = lib_get_current_thread(); 
    8fb2:	0e 94 ab 47 	call	0x8f56	; 0x8f56 <lib_get_current_thread>
    8fb6:	fc 01       	movw	r30, r24
     
   (*current_thread)->state = 4;
    8fb8:	a0 81       	ld	r26, Z
    8fba:	b1 81       	ldd	r27, Z+1	; 0x01
    8fbc:	84 e0       	ldi	r24, 0x04	; 4
    8fbe:	12 96       	adiw	r26, 0x02	; 2
    8fc0:	8c 93       	st	X, r24
   (*current_thread)->data.sleepstate.sleeptime = milliseconds;
    8fc2:	01 90       	ld	r0, Z+
    8fc4:	f0 81       	ld	r31, Z
    8fc6:	e0 2d       	mov	r30, r0
    8fc8:	d6 8f       	std	Z+30, r29	; 0x1e
    8fca:	c5 8f       	std	Z+29, r28	; 0x1d


void lib_yield()
{
 void (*yieldfp)(void) = (void (*)(void))YIELD_FUNCTION; 
 yieldfp();                              
    8fcc:	ec e8       	ldi	r30, 0x8C	; 140
    8fce:	fa ee       	ldi	r31, 0xEA	; 234
    8fd0:	09 95       	icall
     
   (*current_thread)->state = 4;
   (*current_thread)->data.sleepstate.sleeptime = milliseconds;
   
   lib_yield(); 
}
    8fd2:	df 91       	pop	r29
    8fd4:	cf 91       	pop	r28
    8fd6:	08 95       	ret

00008fd8 <lib_hibernate_thread>:

void lib_hibernate_thread()
{
 
   lib_thread **current_thread; 
   current_thread = lib_get_current_thread(); 
    8fd8:	0e 94 ab 47 	call	0x8f56	; 0x8f56 <lib_get_current_thread>
     
   (*current_thread)->state = 5; 
    8fdc:	dc 01       	movw	r26, r24
    8fde:	ed 91       	ld	r30, X+
    8fe0:	fc 91       	ld	r31, X
    8fe2:	85 e0       	ldi	r24, 0x05	; 5
    8fe4:	82 83       	std	Z+2, r24	; 0x02


void lib_yield()
{
 void (*yieldfp)(void) = (void (*)(void))YIELD_FUNCTION; 
 yieldfp();                              
    8fe6:	ec e8       	ldi	r30, 0x8C	; 140
    8fe8:	fa ee       	ldi	r31, 0xEA	; 234
    8fea:	09 95       	icall
   lib_thread **current_thread; 
   current_thread = lib_get_current_thread(); 
     
   (*current_thread)->state = 5; 
   lib_yield(); 
}
    8fec:	08 95       	ret

00008fee <lib_yield>:


void lib_yield()
{
 void (*yieldfp)(void) = (void (*)(void))YIELD_FUNCTION; 
 yieldfp();                              
    8fee:	ec e8       	ldi	r30, 0x8C	; 140
    8ff0:	fa ee       	ldi	r31, 0xEA	; 234
    8ff2:	09 95       	icall
}
    8ff4:	08 95       	ret

00008ff6 <syscall_post_thread_task>:


void syscall_post_thread_task()
{
 void (*postthreadfp)(void) = (void (*)(void))POST_NEW_THREAD_TASK; 
 postthreadfp();                              
    8ff6:	e0 e9       	ldi	r30, 0x90	; 144
    8ff8:	fa ee       	ldi	r31, 0xEA	; 234
    8ffa:	09 95       	icall
}
    8ffc:	08 95       	ret

00008ffe <lib_post_new_task>:


void lib_post_new_task(void (*tp) (void), uint16_t priority)
{
   void (*fp)(void) = (void (*)(void))POST_TASK_SYSCALL; 
   asm volatile("push r20" "\n\t"
    8ffe:	4f 93       	push	r20
    9000:	5f 93       	push	r21
    9002:	6f 93       	push	r22
    9004:	7f 93       	push	r23
                "push r21" "\n\t"
				"push r22" "\n\t"
				"push r23" "\n\t"
                ::);
   
   asm volatile(" mov r20, %A0" "\n\t"
    9006:	48 2f       	mov	r20, r24
    9008:	59 2f       	mov	r21, r25
				 :
				 :"r" (tp)
                );


   asm volatile(" mov r22, %A0" "\n\t"
    900a:	66 2f       	mov	r22, r22
    900c:	77 2f       	mov	r23, r23
	             "mov r23, %B0" "\n\t"
				 :
				 :"r" (priority)
                );

  fp(); 
    900e:	e0 e0       	ldi	r30, 0x00	; 0
    9010:	fb ee       	ldi	r31, 0xEB	; 235
    9012:	09 95       	icall

  asm volatile("pop r23" "\n\t"
    9014:	7f 91       	pop	r23
    9016:	6f 91       	pop	r22
	           "pop r22" "\n\t"
	              ::);

  asm volatile("pop r21" "\n\t"
    9018:	5f 91       	pop	r21
    901a:	4f 91       	pop	r20
	           "pop r20" "\n\t"
	              ::);
  return; 


}
    901c:	08 95       	ret

0000901e <lib_set_thread_termination_handler>:


 

void lib_set_thread_termination_handler(void (*tp) (void))
{
    901e:	cf 93       	push	r28
    9020:	df 93       	push	r29
    9022:	ec 01       	movw	r28, r24
   
   lib_thread **current_thread; 
   current_thread = lib_get_current_thread(); 
    9024:	0e 94 ab 47 	call	0x8f56	; 0x8f56 <lib_get_current_thread>
     
   (*current_thread)->thread_clear_function = tp; 
    9028:	dc 01       	movw	r26, r24
    902a:	ed 91       	ld	r30, X+
    902c:	fc 91       	ld	r31, X
    902e:	11 97       	sbiw	r26, 0x01	; 1
    9030:	d4 8f       	std	Z+28, r29	; 0x1c
    9032:	c3 8f       	std	Z+27, r28	; 0x1b
   return; 
}
    9034:	df 91       	pop	r29
    9036:	cf 91       	pop	r28
    9038:	08 95       	ret

0000903a <lib_file_barrier_block>:





void lib_file_barrier_block(uint8_t type, uint8_t id){
    903a:	ef 92       	push	r14
    903c:	ff 92       	push	r15
    903e:	1f 93       	push	r17
    9040:	df 93       	push	r29
    9042:	cf 93       	push	r28
    9044:	0f 92       	push	r0
    9046:	cd b7       	in	r28, 0x3d	; 61
    9048:	de b7       	in	r29, 0x3e	; 62
    904a:	18 2f       	mov	r17, r24
   
    _atomic_t currentatomic;
	lib_thread **current_thread; 

     
	current_thread = lib_get_current_thread(); 
    904c:	69 83       	std	Y+1, r22	; 0x01
    904e:	0e 94 ab 47 	call	0x8f56	; 0x8f56 <lib_get_current_thread>
    9052:	7c 01       	movw	r14, r24

    currentatomic = _atomic_start();
    9054:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>
    
      (*current_thread)->state = STATE_IO;
    9058:	d7 01       	movw	r26, r14
    905a:	ed 91       	ld	r30, X+
    905c:	fc 91       	ld	r31, X
    905e:	11 97       	sbiw	r26, 0x01	; 1
    9060:	96 e0       	ldi	r25, 0x06	; 6
    9062:	92 83       	std	Z+2, r25	; 0x02
      (*current_thread)->data.iostate.type = type;
    9064:	ed 91       	ld	r30, X+
    9066:	fc 91       	ld	r31, X
    9068:	11 97       	sbiw	r26, 0x01	; 1
    906a:	15 8f       	std	Z+29, r17	; 0x1d
      (*current_thread)->data.iostate.id = id;
    906c:	ed 91       	ld	r30, X+
    906e:	fc 91       	ld	r31, X
    9070:	69 81       	ldd	r22, Y+1	; 0x01
    9072:	66 8f       	std	Z+30, r22	; 0x1e
      lib_yield();
    9074:	89 83       	std	Y+1, r24	; 0x01
    9076:	0e 94 f7 47 	call	0x8fee	; 0x8fee <lib_yield>
    
    _atomic_end(currentatomic);
    907a:	89 81       	ldd	r24, Y+1	; 0x01
    907c:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
}
    9080:	0f 90       	pop	r0
    9082:	cf 91       	pop	r28
    9084:	df 91       	pop	r29
    9086:	1f 91       	pop	r17
    9088:	ff 90       	pop	r15
    908a:	ef 90       	pop	r14
    908c:	08 95       	ret

0000908e <thread_get_next>:
extern volatile uint8_t thread_task_active;

#ifdef COMMON_SHARE_SCHEDULING

 int thread_get_next()
{
    908e:	ef 92       	push	r14
    9090:	ff 92       	push	r15
    9092:	0f 93       	push	r16
    9094:	1f 93       	push	r17
    9096:	cf 93       	push	r28
    9098:	df 93       	push	r29
  int currentcandidate;
  _atomic_t currentatomic;

  currentcandidate =  - 1;
  credits =  - 1;
  currentatomic = _atomic_start();
    909a:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>
  int i;
  int credits;
  int currentcandidate;
  _atomic_t currentatomic;

  currentcandidate =  - 1;
    909e:	cf ef       	ldi	r28, 0xFF	; 255
    90a0:	df ef       	ldi	r29, 0xFF	; 255
  credits =  - 1;
    90a2:	0f ef       	ldi	r16, 0xFF	; 255
    90a4:	1f ef       	ldi	r17, 0xFF	; 255
  currentatomic = _atomic_start();
  for (i = 0; i < LITE_MAX_THREADS; i++)
    90a6:	20 e0       	ldi	r18, 0x00	; 0
    90a8:	30 e0       	ldi	r19, 0x00	; 0
  {
    if (thread_table[i].state == STATE_ACTIVE)
    90aa:	47 e2       	ldi	r20, 0x27	; 39
    90ac:	50 e0       	ldi	r21, 0x00	; 0
    90ae:	24 9f       	mul	r18, r20
    90b0:	f0 01       	movw	r30, r0
    90b2:	25 9f       	mul	r18, r21
    90b4:	f0 0d       	add	r31, r0
    90b6:	34 9f       	mul	r19, r20
    90b8:	f0 0d       	add	r31, r0
    90ba:	11 24       	eor	r1, r1
    90bc:	e9 5d       	subi	r30, 0xD9	; 217
    90be:	f6 4f       	sbci	r31, 0xF6	; 246
    90c0:	92 81       	ldd	r25, Z+2	; 0x02
    90c2:	92 30       	cpi	r25, 0x02	; 2
    90c4:	41 f4       	brne	.+16     	; 0x90d6 <thread_get_next+0x48>
    {
      if (credits < thread_table[i].remaincredits)
    90c6:	64 81       	ldd	r22, Z+4	; 0x04
    90c8:	70 e0       	ldi	r23, 0x00	; 0
    90ca:	06 17       	cp	r16, r22
    90cc:	17 07       	cpc	r17, r23
    90ce:	1c f4       	brge	.+6      	; 0x90d6 <thread_get_next+0x48>
      {
        credits = thread_table[i].remaincredits;
    90d0:	04 81       	ldd	r16, Z+4	; 0x04
    90d2:	10 e0       	ldi	r17, 0x00	; 0
    90d4:	e9 01       	movw	r28, r18
  _atomic_t currentatomic;

  currentcandidate =  - 1;
  credits =  - 1;
  currentatomic = _atomic_start();
  for (i = 0; i < LITE_MAX_THREADS; i++)
    90d6:	2f 5f       	subi	r18, 0xFF	; 255
    90d8:	3f 4f       	sbci	r19, 0xFF	; 255
    90da:	23 30       	cpi	r18, 0x03	; 3
    90dc:	31 05       	cpc	r19, r1
    90de:	39 f7       	brne	.-50     	; 0x90ae <thread_get_next+0x20>
        credits = thread_table[i].remaincredits;
        currentcandidate = i;
      }
    }
  }
  if (credits < 0)
    90e0:	2f ef       	ldi	r18, 0xFF	; 255
    90e2:	0f 3f       	cpi	r16, 0xFF	; 255
    90e4:	12 07       	cpc	r17, r18
    90e6:	11 f4       	brne	.+4      	; 0x90ec <thread_get_next+0x5e>
  {
    thread_task_active = 0;
    90e8:	10 92 a0 09 	sts	0x09A0, r1
  }
  _atomic_end(currentatomic);
    90ec:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
  if (credits > 0)
    90f0:	10 16       	cp	r1, r16
    90f2:	11 06       	cpc	r1, r17
    90f4:	1c f4       	brge	.+6      	; 0x90fc <thread_get_next+0x6e>
  {
    currentatomic = _atomic_start();
    90f6:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>
    90fa:	1f c0       	rjmp	.+62     	; 0x913a <thread_get_next+0xac>
    thread_table[currentcandidate].remaincredits--;
    _atomic_end(currentatomic);
    
    return currentcandidate;
  }
  else if (credits == 0)
    90fc:	01 15       	cp	r16, r1
    90fe:	11 05       	cpc	r17, r1
    9100:	69 f5       	brne	.+90     	; 0x915c <thread_get_next+0xce>
  {
    currentatomic = _atomic_start();
    9102:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <_atomic_start>
    9106:	aa e2       	ldi	r26, 0x2A	; 42
    9108:	b9 e0       	ldi	r27, 0x09	; 9
    for (i = 0; i < LITE_MAX_THREADS; i++)
    910a:	20 e0       	ldi	r18, 0x00	; 0
    910c:	30 e0       	ldi	r19, 0x00	; 0
    {
      if (thread_table[i].state == STATE_ACTIVE)
    910e:	47 e2       	ldi	r20, 0x27	; 39
    9110:	50 e0       	ldi	r21, 0x00	; 0
    9112:	24 9f       	mul	r18, r20
    9114:	f0 01       	movw	r30, r0
    9116:	25 9f       	mul	r18, r21
    9118:	f0 0d       	add	r31, r0
    911a:	34 9f       	mul	r19, r20
    911c:	f0 0d       	add	r31, r0
    911e:	11 24       	eor	r1, r1
    9120:	e9 5d       	subi	r30, 0xD9	; 217
    9122:	f6 4f       	sbci	r31, 0xF6	; 246
    9124:	92 81       	ldd	r25, Z+2	; 0x02
    9126:	92 30       	cpi	r25, 0x02	; 2
    9128:	11 f4       	brne	.+4      	; 0x912e <thread_get_next+0xa0>
      {
        thread_table[i].remaincredits = thread_table[i].priority;
    912a:	9c 91       	ld	r25, X
    912c:	94 83       	std	Z+4, r25	; 0x04
    return currentcandidate;
  }
  else if (credits == 0)
  {
    currentatomic = _atomic_start();
    for (i = 0; i < LITE_MAX_THREADS; i++)
    912e:	2f 5f       	subi	r18, 0xFF	; 255
    9130:	3f 4f       	sbci	r19, 0xFF	; 255
    9132:	97 96       	adiw	r26, 0x27	; 39
    9134:	23 30       	cpi	r18, 0x03	; 3
    9136:	31 05       	cpc	r19, r1
    9138:	61 f7       	brne	.-40     	; 0x9112 <thread_get_next+0x84>
      if (thread_table[i].state == STATE_ACTIVE)
      {
        thread_table[i].remaincredits = thread_table[i].priority;
      }
    }
    thread_table[currentcandidate].remaincredits--;
    913a:	27 e2       	ldi	r18, 0x27	; 39
    913c:	30 e0       	ldi	r19, 0x00	; 0
    913e:	c2 9f       	mul	r28, r18
    9140:	f0 01       	movw	r30, r0
    9142:	c3 9f       	mul	r28, r19
    9144:	f0 0d       	add	r31, r0
    9146:	d2 9f       	mul	r29, r18
    9148:	f0 0d       	add	r31, r0
    914a:	11 24       	eor	r1, r1
    914c:	e9 5d       	subi	r30, 0xD9	; 217
    914e:	f6 4f       	sbci	r31, 0xF6	; 246
    9150:	94 81       	ldd	r25, Z+4	; 0x04
    9152:	91 50       	subi	r25, 0x01	; 1
    9154:	94 83       	std	Z+4, r25	; 0x04
    _atomic_end(currentatomic);
    9156:	0e 94 28 37 	call	0x6e50	; 0x6e50 <_atomic_end>
    return currentcandidate;
    915a:	02 c0       	rjmp	.+4      	; 0x9160 <thread_get_next+0xd2>
  }
  else if (credits < 0)
  {
    return  - 1;
    915c:	cf ef       	ldi	r28, 0xFF	; 255
    915e:	df ef       	ldi	r29, 0xFF	; 255
  }
  return 0;
}
    9160:	ce 01       	movw	r24, r28
    9162:	df 91       	pop	r29
    9164:	cf 91       	pop	r28
    9166:	1f 91       	pop	r17
    9168:	0f 91       	pop	r16
    916a:	ff 90       	pop	r15
    916c:	ef 90       	pop	r14
    916e:	08 95       	ret

00009170 <__mulsi3>:
    9170:	62 9f       	mul	r22, r18
    9172:	d0 01       	movw	r26, r0
    9174:	73 9f       	mul	r23, r19
    9176:	f0 01       	movw	r30, r0
    9178:	82 9f       	mul	r24, r18
    917a:	e0 0d       	add	r30, r0
    917c:	f1 1d       	adc	r31, r1
    917e:	64 9f       	mul	r22, r20
    9180:	e0 0d       	add	r30, r0
    9182:	f1 1d       	adc	r31, r1
    9184:	92 9f       	mul	r25, r18
    9186:	f0 0d       	add	r31, r0
    9188:	83 9f       	mul	r24, r19
    918a:	f0 0d       	add	r31, r0
    918c:	74 9f       	mul	r23, r20
    918e:	f0 0d       	add	r31, r0
    9190:	65 9f       	mul	r22, r21
    9192:	f0 0d       	add	r31, r0
    9194:	99 27       	eor	r25, r25
    9196:	72 9f       	mul	r23, r18
    9198:	b0 0d       	add	r27, r0
    919a:	e1 1d       	adc	r30, r1
    919c:	f9 1f       	adc	r31, r25
    919e:	63 9f       	mul	r22, r19
    91a0:	b0 0d       	add	r27, r0
    91a2:	e1 1d       	adc	r30, r1
    91a4:	f9 1f       	adc	r31, r25
    91a6:	bd 01       	movw	r22, r26
    91a8:	cf 01       	movw	r24, r30
    91aa:	11 24       	eor	r1, r1
    91ac:	08 95       	ret

000091ae <__udivmodhi4>:
    91ae:	aa 1b       	sub	r26, r26
    91b0:	bb 1b       	sub	r27, r27
    91b2:	51 e1       	ldi	r21, 0x11	; 17
    91b4:	07 c0       	rjmp	.+14     	; 0x91c4 <__udivmodhi4_ep>

000091b6 <__udivmodhi4_loop>:
    91b6:	aa 1f       	adc	r26, r26
    91b8:	bb 1f       	adc	r27, r27
    91ba:	a6 17       	cp	r26, r22
    91bc:	b7 07       	cpc	r27, r23
    91be:	10 f0       	brcs	.+4      	; 0x91c4 <__udivmodhi4_ep>
    91c0:	a6 1b       	sub	r26, r22
    91c2:	b7 0b       	sbc	r27, r23

000091c4 <__udivmodhi4_ep>:
    91c4:	88 1f       	adc	r24, r24
    91c6:	99 1f       	adc	r25, r25
    91c8:	5a 95       	dec	r21
    91ca:	a9 f7       	brne	.-22     	; 0x91b6 <__udivmodhi4_loop>
    91cc:	80 95       	com	r24
    91ce:	90 95       	com	r25
    91d0:	bc 01       	movw	r22, r24
    91d2:	cd 01       	movw	r24, r26
    91d4:	08 95       	ret

000091d6 <__divmodhi4>:
    91d6:	97 fb       	bst	r25, 7
    91d8:	09 2e       	mov	r0, r25
    91da:	07 26       	eor	r0, r23
    91dc:	0a d0       	rcall	.+20     	; 0x91f2 <__divmodhi4_neg1>
    91de:	77 fd       	sbrc	r23, 7
    91e0:	04 d0       	rcall	.+8      	; 0x91ea <__divmodhi4_neg2>
    91e2:	e5 df       	rcall	.-54     	; 0x91ae <__udivmodhi4>
    91e4:	06 d0       	rcall	.+12     	; 0x91f2 <__divmodhi4_neg1>
    91e6:	00 20       	and	r0, r0
    91e8:	1a f4       	brpl	.+6      	; 0x91f0 <__divmodhi4_exit>

000091ea <__divmodhi4_neg2>:
    91ea:	70 95       	com	r23
    91ec:	61 95       	neg	r22
    91ee:	7f 4f       	sbci	r23, 0xFF	; 255

000091f0 <__divmodhi4_exit>:
    91f0:	08 95       	ret

000091f2 <__divmodhi4_neg1>:
    91f2:	f6 f7       	brtc	.-4      	; 0x91f0 <__divmodhi4_exit>
    91f4:	90 95       	com	r25
    91f6:	81 95       	neg	r24
    91f8:	9f 4f       	sbci	r25, 0xFF	; 255
    91fa:	08 95       	ret

000091fc <__udivmodsi4>:
    91fc:	a1 e2       	ldi	r26, 0x21	; 33
    91fe:	1a 2e       	mov	r1, r26
    9200:	aa 1b       	sub	r26, r26
    9202:	bb 1b       	sub	r27, r27
    9204:	fd 01       	movw	r30, r26
    9206:	0d c0       	rjmp	.+26     	; 0x9222 <__udivmodsi4_ep>

00009208 <__udivmodsi4_loop>:
    9208:	aa 1f       	adc	r26, r26
    920a:	bb 1f       	adc	r27, r27
    920c:	ee 1f       	adc	r30, r30
    920e:	ff 1f       	adc	r31, r31
    9210:	a2 17       	cp	r26, r18
    9212:	b3 07       	cpc	r27, r19
    9214:	e4 07       	cpc	r30, r20
    9216:	f5 07       	cpc	r31, r21
    9218:	20 f0       	brcs	.+8      	; 0x9222 <__udivmodsi4_ep>
    921a:	a2 1b       	sub	r26, r18
    921c:	b3 0b       	sbc	r27, r19
    921e:	e4 0b       	sbc	r30, r20
    9220:	f5 0b       	sbc	r31, r21

00009222 <__udivmodsi4_ep>:
    9222:	66 1f       	adc	r22, r22
    9224:	77 1f       	adc	r23, r23
    9226:	88 1f       	adc	r24, r24
    9228:	99 1f       	adc	r25, r25
    922a:	1a 94       	dec	r1
    922c:	69 f7       	brne	.-38     	; 0x9208 <__udivmodsi4_loop>
    922e:	60 95       	com	r22
    9230:	70 95       	com	r23
    9232:	80 95       	com	r24
    9234:	90 95       	com	r25
    9236:	9b 01       	movw	r18, r22
    9238:	ac 01       	movw	r20, r24
    923a:	bd 01       	movw	r22, r26
    923c:	cf 01       	movw	r24, r30
    923e:	08 95       	ret

00009240 <__divmodsi4>:
    9240:	97 fb       	bst	r25, 7
    9242:	09 2e       	mov	r0, r25
    9244:	05 26       	eor	r0, r21
    9246:	0e d0       	rcall	.+28     	; 0x9264 <__divmodsi4_neg1>
    9248:	57 fd       	sbrc	r21, 7
    924a:	04 d0       	rcall	.+8      	; 0x9254 <__divmodsi4_neg2>
    924c:	d7 df       	rcall	.-82     	; 0x91fc <__udivmodsi4>
    924e:	0a d0       	rcall	.+20     	; 0x9264 <__divmodsi4_neg1>
    9250:	00 1c       	adc	r0, r0
    9252:	38 f4       	brcc	.+14     	; 0x9262 <__divmodsi4_exit>

00009254 <__divmodsi4_neg2>:
    9254:	50 95       	com	r21
    9256:	40 95       	com	r20
    9258:	30 95       	com	r19
    925a:	21 95       	neg	r18
    925c:	3f 4f       	sbci	r19, 0xFF	; 255
    925e:	4f 4f       	sbci	r20, 0xFF	; 255
    9260:	5f 4f       	sbci	r21, 0xFF	; 255

00009262 <__divmodsi4_exit>:
    9262:	08 95       	ret

00009264 <__divmodsi4_neg1>:
    9264:	f6 f7       	brtc	.-4      	; 0x9262 <__divmodsi4_exit>
    9266:	90 95       	com	r25
    9268:	80 95       	com	r24
    926a:	70 95       	com	r23
    926c:	61 95       	neg	r22
    926e:	7f 4f       	sbci	r23, 0xFF	; 255
    9270:	8f 4f       	sbci	r24, 0xFF	; 255
    9272:	9f 4f       	sbci	r25, 0xFF	; 255
    9274:	08 95       	ret

00009276 <do_rand>:
    9276:	af 92       	push	r10
    9278:	bf 92       	push	r11
    927a:	cf 92       	push	r12
    927c:	df 92       	push	r13
    927e:	ef 92       	push	r14
    9280:	ff 92       	push	r15
    9282:	0f 93       	push	r16
    9284:	1f 93       	push	r17
    9286:	cf 93       	push	r28
    9288:	df 93       	push	r29
    928a:	ec 01       	movw	r28, r24
    928c:	68 81       	ld	r22, Y
    928e:	79 81       	ldd	r23, Y+1	; 0x01
    9290:	8a 81       	ldd	r24, Y+2	; 0x02
    9292:	9b 81       	ldd	r25, Y+3	; 0x03
    9294:	61 15       	cp	r22, r1
    9296:	71 05       	cpc	r23, r1
    9298:	81 05       	cpc	r24, r1
    929a:	91 05       	cpc	r25, r1
    929c:	21 f4       	brne	.+8      	; 0x92a6 <do_rand+0x30>
    929e:	64 e2       	ldi	r22, 0x24	; 36
    92a0:	79 ed       	ldi	r23, 0xD9	; 217
    92a2:	8b e5       	ldi	r24, 0x5B	; 91
    92a4:	97 e0       	ldi	r25, 0x07	; 7
    92a6:	2d e1       	ldi	r18, 0x1D	; 29
    92a8:	33 ef       	ldi	r19, 0xF3	; 243
    92aa:	41 e0       	ldi	r20, 0x01	; 1
    92ac:	50 e0       	ldi	r21, 0x00	; 0
    92ae:	0e 94 20 49 	call	0x9240	; 0x9240 <__divmodsi4>
    92b2:	79 01       	movw	r14, r18
    92b4:	8a 01       	movw	r16, r20
    92b6:	27 ea       	ldi	r18, 0xA7	; 167
    92b8:	31 e4       	ldi	r19, 0x41	; 65
    92ba:	40 e0       	ldi	r20, 0x00	; 0
    92bc:	50 e0       	ldi	r21, 0x00	; 0
    92be:	0e 94 b8 48 	call	0x9170	; 0x9170 <__mulsi3>
    92c2:	5b 01       	movw	r10, r22
    92c4:	6c 01       	movw	r12, r24
    92c6:	c8 01       	movw	r24, r16
    92c8:	b7 01       	movw	r22, r14
    92ca:	2c ee       	ldi	r18, 0xEC	; 236
    92cc:	34 ef       	ldi	r19, 0xF4	; 244
    92ce:	4f ef       	ldi	r20, 0xFF	; 255
    92d0:	5f ef       	ldi	r21, 0xFF	; 255
    92d2:	0e 94 b8 48 	call	0x9170	; 0x9170 <__mulsi3>
    92d6:	6a 0d       	add	r22, r10
    92d8:	7b 1d       	adc	r23, r11
    92da:	8c 1d       	adc	r24, r12
    92dc:	9d 1d       	adc	r25, r13
    92de:	97 ff       	sbrs	r25, 7
    92e0:	04 c0       	rjmp	.+8      	; 0x92ea <do_rand+0x74>
    92e2:	61 50       	subi	r22, 0x01	; 1
    92e4:	70 40       	sbci	r23, 0x00	; 0
    92e6:	80 40       	sbci	r24, 0x00	; 0
    92e8:	90 48       	sbci	r25, 0x80	; 128
    92ea:	68 83       	st	Y, r22
    92ec:	79 83       	std	Y+1, r23	; 0x01
    92ee:	8a 83       	std	Y+2, r24	; 0x02
    92f0:	9b 83       	std	Y+3, r25	; 0x03
    92f2:	7f 77       	andi	r23, 0x7F	; 127
    92f4:	cb 01       	movw	r24, r22
    92f6:	df 91       	pop	r29
    92f8:	cf 91       	pop	r28
    92fa:	1f 91       	pop	r17
    92fc:	0f 91       	pop	r16
    92fe:	ff 90       	pop	r15
    9300:	ef 90       	pop	r14
    9302:	df 90       	pop	r13
    9304:	cf 90       	pop	r12
    9306:	bf 90       	pop	r11
    9308:	af 90       	pop	r10
    930a:	08 95       	ret

0000930c <rand_r>:
    930c:	0e 94 3b 49 	call	0x9276	; 0x9276 <do_rand>
    9310:	08 95       	ret

00009312 <rand>:
    9312:	85 e5       	ldi	r24, 0x55	; 85
    9314:	91 e0       	ldi	r25, 0x01	; 1
    9316:	0e 94 3b 49 	call	0x9276	; 0x9276 <do_rand>
    931a:	08 95       	ret

0000931c <srand>:
    931c:	a0 e0       	ldi	r26, 0x00	; 0
    931e:	b0 e0       	ldi	r27, 0x00	; 0
    9320:	80 93 55 01 	sts	0x0155, r24
    9324:	90 93 56 01 	sts	0x0156, r25
    9328:	a0 93 57 01 	sts	0x0157, r26
    932c:	b0 93 58 01 	sts	0x0158, r27
    9330:	08 95       	ret

00009332 <__eerd_block_m128>:
    9332:	dc 01       	movw	r26, r24
    9334:	cb 01       	movw	r24, r22

00009336 <__eerd_blraw_m128>:
    9336:	fc 01       	movw	r30, r24
    9338:	e1 99       	sbic	0x1c, 1	; 28
    933a:	fe cf       	rjmp	.-4      	; 0x9338 <__eerd_blraw_m128+0x2>
    933c:	06 c0       	rjmp	.+12     	; 0x934a <__eerd_blraw_m128+0x14>
    933e:	ff bb       	out	0x1f, r31	; 31
    9340:	ee bb       	out	0x1e, r30	; 30
    9342:	e0 9a       	sbi	0x1c, 0	; 28
    9344:	31 96       	adiw	r30, 0x01	; 1
    9346:	0d b2       	in	r0, 0x1d	; 29
    9348:	0d 92       	st	X+, r0
    934a:	41 50       	subi	r20, 0x01	; 1
    934c:	50 40       	sbci	r21, 0x00	; 0
    934e:	b8 f7       	brcc	.-18     	; 0x933e <__eerd_blraw_m128+0x8>
    9350:	08 95       	ret

00009352 <__eerd_byte_m128>:
    9352:	e1 99       	sbic	0x1c, 1	; 28
    9354:	fe cf       	rjmp	.-4      	; 0x9352 <__eerd_byte_m128>
    9356:	9f bb       	out	0x1f, r25	; 31
    9358:	8e bb       	out	0x1e, r24	; 30
    935a:	e0 9a       	sbi	0x1c, 0	; 28
    935c:	99 27       	eor	r25, r25
    935e:	8d b3       	in	r24, 0x1d	; 29
    9360:	08 95       	ret

00009362 <__eerd_word_m128>:
    9362:	a8 e1       	ldi	r26, 0x18	; 24
    9364:	b0 e0       	ldi	r27, 0x00	; 0
    9366:	42 e0       	ldi	r20, 0x02	; 2
    9368:	50 e0       	ldi	r21, 0x00	; 0
    936a:	0c 94 9b 49 	jmp	0x9336	; 0x9336 <__eerd_blraw_m128>

0000936e <__eewr_block_m128>:
    936e:	dc 01       	movw	r26, r24
    9370:	cb 01       	movw	r24, r22
    9372:	03 c0       	rjmp	.+6      	; 0x937a <__eewr_block_m128+0xc>
    9374:	2d 91       	ld	r18, X+
    9376:	0e 94 c2 49 	call	0x9384	; 0x9384 <__eewr_r18_m128>
    937a:	41 50       	subi	r20, 0x01	; 1
    937c:	50 40       	sbci	r21, 0x00	; 0
    937e:	d0 f7       	brcc	.-12     	; 0x9374 <__eewr_block_m128+0x6>
    9380:	08 95       	ret

00009382 <__eewr_byte_m128>:
    9382:	26 2f       	mov	r18, r22

00009384 <__eewr_r18_m128>:
    9384:	e1 99       	sbic	0x1c, 1	; 28
    9386:	fe cf       	rjmp	.-4      	; 0x9384 <__eewr_r18_m128>
    9388:	9f bb       	out	0x1f, r25	; 31
    938a:	8e bb       	out	0x1e, r24	; 30
    938c:	2d bb       	out	0x1d, r18	; 29
    938e:	0f b6       	in	r0, 0x3f	; 63
    9390:	f8 94       	cli
    9392:	e2 9a       	sbi	0x1c, 2	; 28
    9394:	e1 9a       	sbi	0x1c, 1	; 28
    9396:	0f be       	out	0x3f, r0	; 63
    9398:	01 96       	adiw	r24, 0x01	; 1
    939a:	08 95       	ret

0000939c <__eewr_word_m128>:
    939c:	0e 94 c1 49 	call	0x9382	; 0x9382 <__eewr_byte_m128>
    93a0:	27 2f       	mov	r18, r23
    93a2:	0c 94 c2 49 	jmp	0x9384	; 0x9384 <__eewr_r18_m128>

000093a6 <_exit>:
    93a6:	f8 94       	cli

000093a8 <__stop_program>:
    93a8:	ff cf       	rjmp	.-2      	; 0x93a8 <__stop_program>

Disassembly of section .bootloader:

0001e000 <ProgramSetPage>:
        0xEF,
    0x91, 0xFF, 0xFF
};

void __attribute__ ((section(".bootloader"))) ProgramSetPage(uint16_t pageno)
{
   1e000:	e4 e6       	ldi	r30, 0x64	; 100
   1e002:	f1 e0       	ldi	r31, 0x01	; 1
    int i;

    for (i = 0; i < 512; i++)
    {
        pagebuffer[i] = 0;
   1e004:	11 92       	st	Z+, r1

void __attribute__ ((section(".bootloader"))) ProgramSetPage(uint16_t pageno)
{
    int i;

    for (i = 0; i < 512; i++)
   1e006:	23 e0       	ldi	r18, 0x03	; 3
   1e008:	e4 36       	cpi	r30, 0x64	; 100
   1e00a:	f2 07       	cpc	r31, r18
   1e00c:	d9 f7       	brne	.-10     	; 0x1e004 <ProgramSetPage+0x4>
    {
        pagebuffer[i] = 0;
    }
    pageindex = pageno;
   1e00e:	90 93 65 03 	sts	0x0365, r25
   1e012:	80 93 64 03 	sts	0x0364, r24
    currentpageindex = 0;
   1e016:	10 92 67 03 	sts	0x0367, r1
   1e01a:	10 92 66 03 	sts	0x0366, r1
}
   1e01e:	08 95       	ret

0001e020 <boot_program_page>:
}

//-------------------------------------------------------------------------
void __attribute__ ((section(".bootloader"))) boot_program_page(uint32_t page,
                                                                uint8_t * buf)
{
   1e020:	cf 92       	push	r12
   1e022:	df 92       	push	r13
   1e024:	ef 92       	push	r14
   1e026:	ff 92       	push	r15
   1e028:	0f 93       	push	r16
   1e02a:	1f 93       	push	r17
   1e02c:	cf 93       	push	r28
   1e02e:	df 93       	push	r29
   1e030:	da 01       	movw	r26, r20
    uint16_t i;
    uint8_t sreg;

    // Disable interrupts.
    sreg = SREG;
   1e032:	df b6       	in	r13, 0x3f	; 63
    cli();
   1e034:	f8 94       	cli
    eeprom_busy_wait();
   1e036:	e1 99       	sbic	0x1c, 1	; 28
   1e038:	fe cf       	rjmp	.-4      	; 0x1e036 <boot_program_page+0x16>
    boot_page_erase(page);
   1e03a:	23 e0       	ldi	r18, 0x03	; 3
   1e03c:	fb 01       	movw	r30, r22
   1e03e:	80 93 5b 00 	sts	0x005B, r24
   1e042:	20 93 68 00 	sts	0x0068, r18
   1e046:	e8 95       	spm
    boot_spm_busy_wait();       // Wait until the memory is erased.
   1e048:	20 91 68 00 	lds	r18, 0x0068
   1e04c:	20 fd       	sbrc	r18, 0
   1e04e:	fc cf       	rjmp	.-8      	; 0x1e048 <boot_program_page+0x28>
   1e050:	9b 01       	movw	r18, r22
   1e052:	ac 01       	movw	r20, r24
   1e054:	00 e0       	ldi	r16, 0x00	; 0
   1e056:	10 e0       	ldi	r17, 0x00	; 0
    {
        // Set up little-endian word.
        uint16_t w = *buf++;

        w += (*buf++) << 8;
        boot_page_fill(page + i, w);
   1e058:	cc 24       	eor	r12, r12
   1e05a:	c3 94       	inc	r12
    boot_page_erase(page);
    boot_spm_busy_wait();       // Wait until the memory is erased.
    for (i = 0; i < SPM_PAGESIZE; i += 2)
    {
        // Set up little-endian word.
        uint16_t w = *buf++;
   1e05c:	ec 91       	ld	r30, X

        w += (*buf++) << 8;
   1e05e:	11 96       	adiw	r26, 0x01	; 1
   1e060:	fc 90       	ld	r15, X
   1e062:	11 97       	sbiw	r26, 0x01	; 1
   1e064:	ee 24       	eor	r14, r14
   1e066:	e7 01       	movw	r28, r14
   1e068:	ce 0f       	add	r28, r30
   1e06a:	d1 1d       	adc	r29, r1
    }
    reprogram(pagebuffer, pagenum);
}

//-------------------------------------------------------------------------
void __attribute__ ((section(".bootloader"))) boot_program_page(uint32_t page,
   1e06c:	12 96       	adiw	r26, 0x02	; 2
    {
        // Set up little-endian word.
        uint16_t w = *buf++;

        w += (*buf++) << 8;
        boot_page_fill(page + i, w);
   1e06e:	0e 01       	movw	r0, r28
   1e070:	f9 01       	movw	r30, r18
   1e072:	40 93 5b 00 	sts	0x005B, r20
   1e076:	c0 92 68 00 	sts	0x0068, r12
   1e07a:	e8 95       	spm
   1e07c:	11 24       	eor	r1, r1
    sreg = SREG;
    cli();
    eeprom_busy_wait();
    boot_page_erase(page);
    boot_spm_busy_wait();       // Wait until the memory is erased.
    for (i = 0; i < SPM_PAGESIZE; i += 2)
   1e07e:	0e 5f       	subi	r16, 0xFE	; 254
   1e080:	1f 4f       	sbci	r17, 0xFF	; 255
   1e082:	2e 5f       	subi	r18, 0xFE	; 254
   1e084:	3f 4f       	sbci	r19, 0xFF	; 255
   1e086:	4f 4f       	sbci	r20, 0xFF	; 255
   1e088:	5f 4f       	sbci	r21, 0xFF	; 255
   1e08a:	e1 e0       	ldi	r30, 0x01	; 1
   1e08c:	00 30       	cpi	r16, 0x00	; 0
   1e08e:	1e 07       	cpc	r17, r30
   1e090:	29 f7       	brne	.-54     	; 0x1e05c <boot_program_page+0x3c>
        uint16_t w = *buf++;

        w += (*buf++) << 8;
        boot_page_fill(page + i, w);
    }
    boot_spm_busy_wait();
   1e092:	20 91 68 00 	lds	r18, 0x0068
   1e096:	20 fd       	sbrc	r18, 0
   1e098:	fc cf       	rjmp	.-8      	; 0x1e092 <boot_program_page+0x72>
    boot_page_write(page);      // Store buffer in flash page.
   1e09a:	25 e0       	ldi	r18, 0x05	; 5
   1e09c:	fb 01       	movw	r30, r22
   1e09e:	80 93 5b 00 	sts	0x005B, r24
   1e0a2:	20 93 68 00 	sts	0x0068, r18
   1e0a6:	e8 95       	spm
    boot_spm_busy_wait();       // Wait until the memory is written.
   1e0a8:	80 91 68 00 	lds	r24, 0x0068
   1e0ac:	80 fd       	sbrc	r24, 0
   1e0ae:	fc cf       	rjmp	.-8      	; 0x1e0a8 <boot_program_page+0x88>
    // Reenable RWW-section again. We need this if we want to jump back
    // to the application after bootloading.
    boot_rww_enable();
   1e0b0:	81 e1       	ldi	r24, 0x11	; 17
   1e0b2:	80 93 68 00 	sts	0x0068, r24
   1e0b6:	e8 95       	spm
    // Re-enable interrupts (if they were ever enabled).
    SREG = sreg;
   1e0b8:	df be       	out	0x3f, r13	; 63
}
   1e0ba:	df 91       	pop	r29
   1e0bc:	cf 91       	pop	r28
   1e0be:	1f 91       	pop	r17
   1e0c0:	0f 91       	pop	r16
   1e0c2:	ff 90       	pop	r15
   1e0c4:	ef 90       	pop	r14
   1e0c6:	df 90       	pop	r13
   1e0c8:	cf 90       	pop	r12
   1e0ca:	08 95       	ret

0001e0cc <reprogram>:
}

//-------------------------------------------------------------------------
int __attribute__ ((section(".bootloader"))) reprogram(unsigned char *buffer,
                                                       uint16_t codepage)
{
   1e0cc:	ac 01       	movw	r20, r24
    boot_program_page((uint32_t) SPM_PAGESIZE * ((uint32_t) codepage), buffer);
   1e0ce:	80 e0       	ldi	r24, 0x00	; 0
   1e0d0:	90 e0       	ldi	r25, 0x00	; 0
   1e0d2:	98 2f       	mov	r25, r24
   1e0d4:	87 2f       	mov	r24, r23
   1e0d6:	76 2f       	mov	r23, r22
   1e0d8:	66 27       	eor	r22, r22
   1e0da:	0e 94 10 f0 	call	0x1e020	; 0x1e020 <boot_program_page>
    return 0;
}
   1e0de:	80 e0       	ldi	r24, 0x00	; 0
   1e0e0:	90 e0       	ldi	r25, 0x00	; 0
   1e0e2:	08 95       	ret

0001e0e4 <boot_removeBreakPoint>:
                                                                    pagenum,
                                                                    uint8_t
                                                                    pageoffset,
                                                                    uint8_t *
                                                                    instructions)
{
   1e0e4:	6f 92       	push	r6
   1e0e6:	7f 92       	push	r7
   1e0e8:	8f 92       	push	r8
   1e0ea:	9f 92       	push	r9
   1e0ec:	af 92       	push	r10
   1e0ee:	bf 92       	push	r11
   1e0f0:	cf 92       	push	r12
   1e0f2:	df 92       	push	r13
   1e0f4:	ef 92       	push	r14
   1e0f6:	ff 92       	push	r15
   1e0f8:	0f 93       	push	r16
   1e0fa:	1f 93       	push	r17
   1e0fc:	df 93       	push	r29
   1e0fe:	cf 93       	push	r28
   1e100:	00 d0       	rcall	.+0      	; 0x1e102 <boot_removeBreakPoint+0x1e>
   1e102:	0f 92       	push	r0
   1e104:	cd b7       	in	r28, 0x3d	; 61
   1e106:	de b7       	in	r29, 0x3e	; 62
    //first read the page, then change the string, then write back the page
    int i;
    uint32_t addr;
    uint8_t index;
    uint16_t data;
    addr = (uint32_t) pagenum *(uint32_t) SPM_PAGESIZE;
   1e108:	4c 01       	movw	r8, r24
   1e10a:	aa 24       	eor	r10, r10
   1e10c:	bb 24       	eor	r11, r11
   1e10e:	ba 2c       	mov	r11, r10
   1e110:	a9 2c       	mov	r10, r9
   1e112:	98 2c       	mov	r9, r8
   1e114:	88 24       	eor	r8, r8
   1e116:	34 e6       	ldi	r19, 0x64	; 100
   1e118:	63 2e       	mov	r6, r19
   1e11a:	31 e0       	ldi	r19, 0x01	; 1
   1e11c:	73 2e       	mov	r7, r19



//-------------------------------------------------------------------------
//remove a breakpoint by patching the 8 bytes at the location specified at the pagenum and offset
void __attribute__ ((section(".bootloader"))) boot_removeBreakPoint(uint16_t
   1e11e:	75 01       	movw	r14, r10
   1e120:	64 01       	movw	r12, r8
    uint16_t data;
    addr = (uint32_t) pagenum *(uint32_t) SPM_PAGESIZE;

    for (i = 0; i < 128; i++)
    {
        data = pgm_read_word_far(addr + ((uint32_t) i) * 2);
   1e122:	eb be       	out	0x3b, r14	; 59
   1e124:	f6 01       	movw	r30, r12
   1e126:	07 91       	elpm	r16, Z+
   1e128:	16 91       	elpm	r17, Z+
        if (is_host_lsb())
   1e12a:	4a 83       	std	Y+2, r20	; 0x02
   1e12c:	5b 83       	std	Y+3, r21	; 0x03
   1e12e:	69 83       	std	Y+1, r22	; 0x01
   1e130:	0e 94 f7 35 	call	0x6bee	; 0x6bee <is_host_lsb>
   1e134:	4a 81       	ldd	r20, Y+2	; 0x02
   1e136:	5b 81       	ldd	r21, Y+3	; 0x03
   1e138:	69 81       	ldd	r22, Y+1	; 0x01
   1e13a:	00 97       	sbiw	r24, 0x00	; 0
   1e13c:	31 f0       	breq	.+12     	; 0x1e14a <boot_removeBreakPoint+0x66>
        {
            pagebuffer[i * 2] = data % 256;
   1e13e:	d3 01       	movw	r26, r6
   1e140:	0c 93       	st	X, r16
            pagebuffer[i * 2 + 1] = data / 256;
   1e142:	11 96       	adiw	r26, 0x01	; 1
   1e144:	1c 93       	st	X, r17
   1e146:	11 97       	sbiw	r26, 0x01	; 1
   1e148:	03 c0       	rjmp	.+6      	; 0x1e150 <boot_removeBreakPoint+0x6c>
        }
        else
        {
            pagebuffer[i * 2 + 1] = data % 256;
   1e14a:	f3 01       	movw	r30, r6
   1e14c:	01 83       	std	Z+1, r16	; 0x01
            pagebuffer[i * 2] = data / 256;
   1e14e:	10 83       	st	Z, r17
   1e150:	82 e0       	ldi	r24, 0x02	; 2
   1e152:	90 e0       	ldi	r25, 0x00	; 0
   1e154:	a0 e0       	ldi	r26, 0x00	; 0
   1e156:	b0 e0       	ldi	r27, 0x00	; 0
   1e158:	c8 0e       	add	r12, r24
   1e15a:	d9 1e       	adc	r13, r25
   1e15c:	ea 1e       	adc	r14, r26
   1e15e:	fb 1e       	adc	r15, r27
   1e160:	a2 e0       	ldi	r26, 0x02	; 2
   1e162:	b0 e0       	ldi	r27, 0x00	; 0
   1e164:	6a 0e       	add	r6, r26
   1e166:	7b 1e       	adc	r7, r27
    uint32_t addr;
    uint8_t index;
    uint16_t data;
    addr = (uint32_t) pagenum *(uint32_t) SPM_PAGESIZE;

    for (i = 0; i < 128; i++)
   1e168:	b4 e6       	ldi	r27, 0x64	; 100
   1e16a:	6b 16       	cp	r6, r27
   1e16c:	b2 e0       	ldi	r27, 0x02	; 2
   1e16e:	7b 06       	cpc	r7, r27
   1e170:	c1 f6       	brne	.-80     	; 0x1e122 <boot_removeBreakPoint+0x3e>
   1e172:	84 2f       	mov	r24, r20
   1e174:	95 2f       	mov	r25, r21
   1e176:	dc 01       	movw	r26, r24
        }
    }
    index = pageoffset;
    for (i = 0; i < 6; i++)
    {
        pagebuffer[index + i] = instructions[i];
   1e178:	70 e0       	ldi	r23, 0x00	; 0



//-------------------------------------------------------------------------
//remove a breakpoint by patching the 8 bytes at the location specified at the pagenum and offset
void __attribute__ ((section(".bootloader"))) boot_removeBreakPoint(uint16_t
   1e17a:	fb 01       	movw	r30, r22
   1e17c:	ec 59       	subi	r30, 0x9C	; 156
   1e17e:	fe 4f       	sbci	r31, 0xFE	; 254
   1e180:	66 59       	subi	r22, 0x96	; 150
   1e182:	7e 4f       	sbci	r23, 0xFE	; 254
        }
    }
    index = pageoffset;
    for (i = 0; i < 6; i++)
    {
        pagebuffer[index + i] = instructions[i];
   1e184:	8d 91       	ld	r24, X+
   1e186:	81 93       	st	Z+, r24
            pagebuffer[i * 2 + 1] = data % 256;
            pagebuffer[i * 2] = data / 256;
        }
    }
    index = pageoffset;
    for (i = 0; i < 6; i++)
   1e188:	e6 17       	cp	r30, r22
   1e18a:	f7 07       	cpc	r31, r23
   1e18c:	d9 f7       	brne	.-10     	; 0x1e184 <boot_removeBreakPoint+0xa0>

//-------------------------------------------------------------------------
int __attribute__ ((section(".bootloader"))) reprogram(unsigned char *buffer,
                                                       uint16_t codepage)
{
    boot_program_page((uint32_t) SPM_PAGESIZE * ((uint32_t) codepage), buffer);
   1e18e:	c5 01       	movw	r24, r10
   1e190:	b4 01       	movw	r22, r8
   1e192:	44 e6       	ldi	r20, 0x64	; 100
   1e194:	51 e0       	ldi	r21, 0x01	; 1
   1e196:	0e 94 10 f0 	call	0x1e020	; 0x1e020 <boot_program_page>
    for (i = 0; i < 6; i++)
    {
        pagebuffer[index + i] = instructions[i];
    }
    reprogram(pagebuffer, pagenum);
}
   1e19a:	0f 90       	pop	r0
   1e19c:	0f 90       	pop	r0
   1e19e:	0f 90       	pop	r0
   1e1a0:	cf 91       	pop	r28
   1e1a2:	df 91       	pop	r29
   1e1a4:	1f 91       	pop	r17
   1e1a6:	0f 91       	pop	r16
   1e1a8:	ff 90       	pop	r15
   1e1aa:	ef 90       	pop	r14
   1e1ac:	df 90       	pop	r13
   1e1ae:	cf 90       	pop	r12
   1e1b0:	bf 90       	pop	r11
   1e1b2:	af 90       	pop	r10
   1e1b4:	9f 90       	pop	r9
   1e1b6:	8f 90       	pop	r8
   1e1b8:	7f 90       	pop	r7
   1e1ba:	6f 90       	pop	r6
   1e1bc:	08 95       	ret

0001e1be <boot_insertTracePointLong>:


//insert a breakpoint by removing 8 bytes at the location specified by the pagenum and offset 
void __attribute__ ((section(".bootloader")))
boot_insertTracePointLong(uint16_t pagenum, uint8_t pageoffset)
{
   1e1be:	2f 92       	push	r2
   1e1c0:	3f 92       	push	r3
   1e1c2:	4f 92       	push	r4
   1e1c4:	5f 92       	push	r5
   1e1c6:	6f 92       	push	r6
   1e1c8:	7f 92       	push	r7
   1e1ca:	8f 92       	push	r8
   1e1cc:	9f 92       	push	r9
   1e1ce:	af 92       	push	r10
   1e1d0:	bf 92       	push	r11
   1e1d2:	cf 92       	push	r12
   1e1d4:	df 92       	push	r13
   1e1d6:	ef 92       	push	r14
   1e1d8:	ff 92       	push	r15
   1e1da:	0f 93       	push	r16
   1e1dc:	1f 93       	push	r17
   1e1de:	df 93       	push	r29
   1e1e0:	cf 93       	push	r28
   1e1e2:	00 d0       	rcall	.+0      	; 0x1e1e4 <boot_insertTracePointLong+0x26>
   1e1e4:	0f 92       	push	r0
   1e1e6:	cd b7       	in	r28, 0x3d	; 61
   1e1e8:	de b7       	in	r29, 0x3e	; 62
   1e1ea:	1c 01       	movw	r2, r24
    uint16_t data;
    uint8_t programmore = 0;
    uint8_t endindex, endindex2;

    //Read the page content
    addr = (uint32_t) pagenum *(uint32_t) SPM_PAGESIZE;
   1e1ec:	4c 01       	movw	r8, r24
   1e1ee:	aa 24       	eor	r10, r10
   1e1f0:	bb 24       	eor	r11, r11
   1e1f2:	ba 2c       	mov	r11, r10
   1e1f4:	a9 2c       	mov	r10, r9
   1e1f6:	98 2c       	mov	r9, r8
   1e1f8:	88 24       	eor	r8, r8
   1e1fa:	b4 e6       	ldi	r27, 0x64	; 100
   1e1fc:	6b 2e       	mov	r6, r27
   1e1fe:	b1 e0       	ldi	r27, 0x01	; 1
   1e200:	7b 2e       	mov	r7, r27



//insert a breakpoint by removing 8 bytes at the location specified by the pagenum and offset 
void __attribute__ ((section(".bootloader")))
boot_insertTracePointLong(uint16_t pagenum, uint8_t pageoffset)
   1e202:	23 01       	movw	r4, r6
   1e204:	75 01       	movw	r14, r10
   1e206:	64 01       	movw	r12, r8
    addr = (uint32_t) pagenum *(uint32_t) SPM_PAGESIZE;

    //read the page content 
    for (i = 0; i < 128; i++)
    {
        data = pgm_read_word_far(addr + ((uint32_t) i) * 2);
   1e208:	eb be       	out	0x3b, r14	; 59
   1e20a:	f6 01       	movw	r30, r12
   1e20c:	07 91       	elpm	r16, Z+
   1e20e:	16 91       	elpm	r17, Z+
        if (is_host_lsb())
   1e210:	6b 83       	std	Y+3, r22	; 0x03
   1e212:	0e 94 f7 35 	call	0x6bee	; 0x6bee <is_host_lsb>
   1e216:	6b 81       	ldd	r22, Y+3	; 0x03
   1e218:	00 97       	sbiw	r24, 0x00	; 0
   1e21a:	31 f0       	breq	.+12     	; 0x1e228 <boot_insertTracePointLong+0x6a>
        {
            pagebuffer[i * 2] = data % 256;
   1e21c:	d2 01       	movw	r26, r4
   1e21e:	0c 93       	st	X, r16
            pagebuffer[i * 2 + 1] = data / 256;
   1e220:	11 96       	adiw	r26, 0x01	; 1
   1e222:	1c 93       	st	X, r17
   1e224:	11 97       	sbiw	r26, 0x01	; 1
   1e226:	03 c0       	rjmp	.+6      	; 0x1e22e <boot_insertTracePointLong+0x70>
        }
        else
        {
            pagebuffer[i * 2 + 1] = data % 256;
   1e228:	f2 01       	movw	r30, r4
   1e22a:	01 83       	std	Z+1, r16	; 0x01
            pagebuffer[i * 2] = data / 256;
   1e22c:	10 83       	st	Z, r17
   1e22e:	82 e0       	ldi	r24, 0x02	; 2
   1e230:	90 e0       	ldi	r25, 0x00	; 0
   1e232:	a0 e0       	ldi	r26, 0x00	; 0
   1e234:	b0 e0       	ldi	r27, 0x00	; 0
   1e236:	c8 0e       	add	r12, r24
   1e238:	d9 1e       	adc	r13, r25
   1e23a:	ea 1e       	adc	r14, r26
   1e23c:	fb 1e       	adc	r15, r27
   1e23e:	a2 e0       	ldi	r26, 0x02	; 2
   1e240:	b0 e0       	ldi	r27, 0x00	; 0
   1e242:	4a 0e       	add	r4, r26
   1e244:	5b 1e       	adc	r5, r27

    //Read the page content
    addr = (uint32_t) pagenum *(uint32_t) SPM_PAGESIZE;

    //read the page content 
    for (i = 0; i < 128; i++)
   1e246:	b4 e6       	ldi	r27, 0x64	; 100
   1e248:	4b 16       	cp	r4, r27
   1e24a:	b2 e0       	ldi	r27, 0x02	; 2
   1e24c:	5b 06       	cpc	r5, r27
   1e24e:	e1 f6       	brne	.-72     	; 0x1e208 <boot_insertTracePointLong+0x4a>
    }
    //assuming that the index as 228 or smaller, then enough for the 28 bytes othersise not 
    //say 234, then it is 22 bytes 
    index = pageoffset;
    programmore = 0;
    if (pageoffset > 240)
   1e250:	61 3f       	cpi	r22, 0xF1	; 241
   1e252:	20 f0       	brcs	.+8      	; 0x1e25c <boot_insertTracePointLong+0x9e>
    {
        programmore = 1;
        endindex = (uint8_t) ((uint16_t) 256 - (uint16_t) pageoffset);
   1e254:	56 2e       	mov	r5, r22
   1e256:	51 94       	neg	r5
    //say 234, then it is 22 bytes 
    index = pageoffset;
    programmore = 0;
    if (pageoffset > 240)
    {
        programmore = 1;
   1e258:	01 e0       	ldi	r16, 0x01	; 1
   1e25a:	03 c0       	rjmp	.+6      	; 0x1e262 <boot_insertTracePointLong+0xa4>
        endindex = (uint8_t) ((uint16_t) 256 - (uint16_t) pageoffset);
    }
    else
    {
        programmore = 0;
        endindex = 16;
   1e25c:	a0 e1       	ldi	r26, 0x10	; 16
   1e25e:	5a 2e       	mov	r5, r26
        programmore = 1;
        endindex = (uint8_t) ((uint16_t) 256 - (uint16_t) pageoffset);
    }
    else
    {
        programmore = 0;
   1e260:	00 e0       	ldi	r16, 0x00	; 0
    index = pageoffset;
    programmore = 0;
    if (pageoffset > 240)
    {
        programmore = 1;
        endindex = (uint8_t) ((uint16_t) 256 - (uint16_t) pageoffset);
   1e262:	4e e2       	ldi	r20, 0x2E	; 46
   1e264:	51 e0       	ldi	r21, 0x01	; 1
    }
    //for the 234 example, 22 here, then 0, 21 are copied 
    for (i = 0; i < endindex; i++)
    {
        //   instructions[ i ] = pagebuffer[ index + i ];
        pagebuffer[index + i] = tracepointstring[i];
   1e266:	e6 2f       	mov	r30, r22
   1e268:	f0 e0       	ldi	r31, 0x00	; 0



//insert a breakpoint by removing 8 bytes at the location specified by the pagenum and offset 
void __attribute__ ((section(".bootloader")))
boot_insertTracePointLong(uint16_t pagenum, uint8_t pageoffset)
   1e26a:	ec 59       	subi	r30, 0x9C	; 156
   1e26c:	fe 4f       	sbci	r31, 0xFE	; 254
   1e26e:	85 2d       	mov	r24, r5
   1e270:	90 e0       	ldi	r25, 0x00	; 0
   1e272:	9c 01       	movw	r18, r24
   1e274:	24 0f       	add	r18, r20
   1e276:	35 1f       	adc	r19, r21
    {
        programmore = 0;
        endindex = 16;
    }
    //for the 234 example, 22 here, then 0, 21 are copied 
    for (i = 0; i < endindex; i++)
   1e278:	9a 83       	std	Y+2, r25	; 0x02
   1e27a:	89 83       	std	Y+1, r24	; 0x01
   1e27c:	04 c0       	rjmp	.+8      	; 0x1e286 <boot_insertTracePointLong+0xc8>
    {
        //   instructions[ i ] = pagebuffer[ index + i ];
        pagebuffer[index + i] = tracepointstring[i];
   1e27e:	da 01       	movw	r26, r20
   1e280:	8d 91       	ld	r24, X+
   1e282:	ad 01       	movw	r20, r26
   1e284:	81 93       	st	Z+, r24
    {
        programmore = 0;
        endindex = 16;
    }
    //for the 234 example, 22 here, then 0, 21 are copied 
    for (i = 0; i < endindex; i++)
   1e286:	42 17       	cp	r20, r18
   1e288:	53 07       	cpc	r21, r19
   1e28a:	c9 f7       	brne	.-14     	; 0x1e27e <boot_insertTracePointLong+0xc0>

//-------------------------------------------------------------------------
int __attribute__ ((section(".bootloader"))) reprogram(unsigned char *buffer,
                                                       uint16_t codepage)
{
    boot_program_page((uint32_t) SPM_PAGESIZE * ((uint32_t) codepage), buffer);
   1e28c:	c5 01       	movw	r24, r10
   1e28e:	b4 01       	movw	r22, r8
   1e290:	44 e6       	ldi	r20, 0x64	; 100
   1e292:	51 e0       	ldi	r21, 0x01	; 1
   1e294:	0e 94 10 f0 	call	0x1e020	; 0x1e020 <boot_program_page>
    {
        //   instructions[ i ] = pagebuffer[ index + i ];
        pagebuffer[index + i] = tracepointstring[i];
    }
    reprogram(pagebuffer, pagenum);
    if (programmore == 0)
   1e298:	00 23       	and	r16, r16
   1e29a:	09 f4       	brne	.+2      	; 0x1e29e <boot_insertTracePointLong+0xe0>
   1e29c:	49 c0       	rjmp	.+146    	; 0x1e330 <boot_insertTracePointLong+0x172>
    {
        return;
    }
    //next page
    addr = (uint32_t) (pagenum + 1) * (uint32_t) SPM_PAGESIZE;
   1e29e:	08 94       	sec
   1e2a0:	21 1c       	adc	r2, r1
   1e2a2:	31 1c       	adc	r3, r1
   1e2a4:	41 01       	movw	r8, r2
   1e2a6:	aa 24       	eor	r10, r10
   1e2a8:	bb 24       	eor	r11, r11
   1e2aa:	ba 2c       	mov	r11, r10
   1e2ac:	a9 2c       	mov	r10, r9
   1e2ae:	98 2c       	mov	r9, r8
   1e2b0:	88 24       	eor	r8, r8
   1e2b2:	e4 e6       	ldi	r30, 0x64	; 100
   1e2b4:	2e 2e       	mov	r2, r30
   1e2b6:	e1 e0       	ldi	r30, 0x01	; 1
   1e2b8:	3e 2e       	mov	r3, r30
   1e2ba:	75 01       	movw	r14, r10
   1e2bc:	64 01       	movw	r12, r8
    for (i = 0; i < 128; i++)
    {
        data = pgm_read_word_far(addr + ((uint32_t) i) * 2);
   1e2be:	eb be       	out	0x3b, r14	; 59
   1e2c0:	f6 01       	movw	r30, r12
   1e2c2:	07 91       	elpm	r16, Z+
   1e2c4:	16 91       	elpm	r17, Z+
        if (is_host_lsb())
   1e2c6:	0e 94 f7 35 	call	0x6bee	; 0x6bee <is_host_lsb>
   1e2ca:	00 97       	sbiw	r24, 0x00	; 0
   1e2cc:	21 f0       	breq	.+8      	; 0x1e2d6 <boot_insertTracePointLong+0x118>
        {
            pagebuffer[i * 2] = data % 256;
   1e2ce:	f1 01       	movw	r30, r2
   1e2d0:	00 83       	st	Z, r16
            pagebuffer[i * 2 + 1] = data / 256;
   1e2d2:	11 83       	std	Z+1, r17	; 0x01
   1e2d4:	05 c0       	rjmp	.+10     	; 0x1e2e0 <boot_insertTracePointLong+0x122>
        }
        else
        {
            pagebuffer[i * 2 + 1] = data % 256;
   1e2d6:	d1 01       	movw	r26, r2
   1e2d8:	11 96       	adiw	r26, 0x01	; 1
   1e2da:	0c 93       	st	X, r16
   1e2dc:	11 97       	sbiw	r26, 0x01	; 1
            pagebuffer[i * 2] = data / 256;
   1e2de:	1c 93       	st	X, r17
   1e2e0:	82 e0       	ldi	r24, 0x02	; 2
   1e2e2:	90 e0       	ldi	r25, 0x00	; 0
   1e2e4:	a0 e0       	ldi	r26, 0x00	; 0
   1e2e6:	b0 e0       	ldi	r27, 0x00	; 0
   1e2e8:	c8 0e       	add	r12, r24
   1e2ea:	d9 1e       	adc	r13, r25
   1e2ec:	ea 1e       	adc	r14, r26
   1e2ee:	fb 1e       	adc	r15, r27
   1e2f0:	a2 e0       	ldi	r26, 0x02	; 2
   1e2f2:	b0 e0       	ldi	r27, 0x00	; 0
   1e2f4:	2a 0e       	add	r2, r26
   1e2f6:	3b 1e       	adc	r3, r27
    {
        return;
    }
    //next page
    addr = (uint32_t) (pagenum + 1) * (uint32_t) SPM_PAGESIZE;
    for (i = 0; i < 128; i++)
   1e2f8:	b4 e6       	ldi	r27, 0x64	; 100
   1e2fa:	2b 16       	cp	r2, r27
   1e2fc:	b2 e0       	ldi	r27, 0x02	; 2
   1e2fe:	3b 06       	cpc	r3, r27
   1e300:	f1 f6       	brne	.-68     	; 0x1e2be <boot_insertTracePointLong+0x100>



//insert a breakpoint by removing 8 bytes at the location specified by the pagenum and offset 
void __attribute__ ((section(".bootloader")))
boot_insertTracePointLong(uint16_t pagenum, uint8_t pageoffset)
   1e302:	e9 81       	ldd	r30, Y+1	; 0x01
   1e304:	fa 81       	ldd	r31, Y+2	; 0x02
   1e306:	e2 5d       	subi	r30, 0xD2	; 210
   1e308:	fe 4f       	sbci	r31, 0xFE	; 254
            pagebuffer[i * 2 + 1] = data % 256;
            pagebuffer[i * 2] = data / 256;
        }
    }
    //PREVIOUSLY like 22 then the value is 6
    endindex2 = 16 - endindex;
   1e30a:	20 e1       	ldi	r18, 0x10	; 16
   1e30c:	25 19       	sub	r18, r5



//insert a breakpoint by removing 8 bytes at the location specified by the pagenum and offset 
void __attribute__ ((section(".bootloader")))
boot_insertTracePointLong(uint16_t pagenum, uint8_t pageoffset)
   1e30e:	30 e0       	ldi	r19, 0x00	; 0
   1e310:	2c 59       	subi	r18, 0x9C	; 156
   1e312:	3e 4f       	sbci	r19, 0xFE	; 254
        }
    }
    //PREVIOUSLY like 22 then the value is 6
    endindex2 = 16 - endindex;
    programmore = 0;
    for (i = 0; i < endindex2; i++)
   1e314:	04 c0       	rjmp	.+8      	; 0x1e31e <boot_insertTracePointLong+0x160>
    {
        //   instructions[ i ] = pagebuffer[ index + i ];
        pagebuffer[i] = tracepointstring[endindex + i];
   1e316:	81 91       	ld	r24, Z+
   1e318:	d3 01       	movw	r26, r6
   1e31a:	8d 93       	st	X+, r24
   1e31c:	3d 01       	movw	r6, r26
        }
    }
    //PREVIOUSLY like 22 then the value is 6
    endindex2 = 16 - endindex;
    programmore = 0;
    for (i = 0; i < endindex2; i++)
   1e31e:	62 16       	cp	r6, r18
   1e320:	73 06       	cpc	r7, r19
   1e322:	c9 f7       	brne	.-14     	; 0x1e316 <boot_insertTracePointLong+0x158>

//-------------------------------------------------------------------------
int __attribute__ ((section(".bootloader"))) reprogram(unsigned char *buffer,
                                                       uint16_t codepage)
{
    boot_program_page((uint32_t) SPM_PAGESIZE * ((uint32_t) codepage), buffer);
   1e324:	c5 01       	movw	r24, r10
   1e326:	b4 01       	movw	r22, r8
   1e328:	44 e6       	ldi	r20, 0x64	; 100
   1e32a:	51 e0       	ldi	r21, 0x01	; 1
   1e32c:	0e 94 10 f0 	call	0x1e020	; 0x1e020 <boot_program_page>
    {
        //   instructions[ i ] = pagebuffer[ index + i ];
        pagebuffer[i] = tracepointstring[endindex + i];
    }
    reprogram(pagebuffer, pagenum + 1);
}
   1e330:	0f 90       	pop	r0
   1e332:	0f 90       	pop	r0
   1e334:	0f 90       	pop	r0
   1e336:	cf 91       	pop	r28
   1e338:	df 91       	pop	r29
   1e33a:	1f 91       	pop	r17
   1e33c:	0f 91       	pop	r16
   1e33e:	ff 90       	pop	r15
   1e340:	ef 90       	pop	r14
   1e342:	df 90       	pop	r13
   1e344:	cf 90       	pop	r12
   1e346:	bf 90       	pop	r11
   1e348:	af 90       	pop	r10
   1e34a:	9f 90       	pop	r9
   1e34c:	8f 90       	pop	r8
   1e34e:	7f 90       	pop	r7
   1e350:	6f 90       	pop	r6
   1e352:	5f 90       	pop	r5
   1e354:	4f 90       	pop	r4
   1e356:	3f 90       	pop	r3
   1e358:	2f 90       	pop	r2
   1e35a:	08 95       	ret

0001e35c <boot_insertTracePoint>:
//insert a breakpoint by removing 8 bytes at the location specified by the pagenum and offset 
void __attribute__ ((section(".bootloader"))) boot_insertTracePoint(uint16_t
                                                                    pagenum,
                                                                    uint8_t
                                                                    pageoffset)
{
   1e35c:	2f 92       	push	r2
   1e35e:	3f 92       	push	r3
   1e360:	4f 92       	push	r4
   1e362:	5f 92       	push	r5
   1e364:	6f 92       	push	r6
   1e366:	7f 92       	push	r7
   1e368:	8f 92       	push	r8
   1e36a:	9f 92       	push	r9
   1e36c:	af 92       	push	r10
   1e36e:	bf 92       	push	r11
   1e370:	cf 92       	push	r12
   1e372:	df 92       	push	r13
   1e374:	ef 92       	push	r14
   1e376:	ff 92       	push	r15
   1e378:	0f 93       	push	r16
   1e37a:	1f 93       	push	r17
   1e37c:	df 93       	push	r29
   1e37e:	cf 93       	push	r28
   1e380:	00 d0       	rcall	.+0      	; 0x1e382 <boot_insertTracePoint+0x26>
   1e382:	0f 92       	push	r0
   1e384:	cd b7       	in	r28, 0x3d	; 61
   1e386:	de b7       	in	r29, 0x3e	; 62
   1e388:	1c 01       	movw	r2, r24
    uint16_t data;
    uint8_t programmore = 0;
    uint8_t endindex, endindex2;

    //Read the page content
    addr = (uint32_t) pagenum *(uint32_t) SPM_PAGESIZE;
   1e38a:	4c 01       	movw	r8, r24
   1e38c:	aa 24       	eor	r10, r10
   1e38e:	bb 24       	eor	r11, r11
   1e390:	ba 2c       	mov	r11, r10
   1e392:	a9 2c       	mov	r10, r9
   1e394:	98 2c       	mov	r9, r8
   1e396:	88 24       	eor	r8, r8
   1e398:	24 e6       	ldi	r18, 0x64	; 100
   1e39a:	62 2e       	mov	r6, r18
   1e39c:	21 e0       	ldi	r18, 0x01	; 1
   1e39e:	72 2e       	mov	r7, r18
}


//insert a breakpoint by removing 8 bytes at the location specified by the pagenum and offset 
//insert a breakpoint by removing 8 bytes at the location specified by the pagenum and offset 
void __attribute__ ((section(".bootloader"))) boot_insertTracePoint(uint16_t
   1e3a0:	23 01       	movw	r4, r6
   1e3a2:	75 01       	movw	r14, r10
   1e3a4:	64 01       	movw	r12, r8
    addr = (uint32_t) pagenum *(uint32_t) SPM_PAGESIZE;

    //read the page content 
    for (i = 0; i < 128; i++)
    {
        data = pgm_read_word_far(addr + ((uint32_t) i) * 2);
   1e3a6:	eb be       	out	0x3b, r14	; 59
   1e3a8:	f6 01       	movw	r30, r12
   1e3aa:	07 91       	elpm	r16, Z+
   1e3ac:	16 91       	elpm	r17, Z+
        if (is_host_lsb())
   1e3ae:	6b 83       	std	Y+3, r22	; 0x03
   1e3b0:	0e 94 f7 35 	call	0x6bee	; 0x6bee <is_host_lsb>
   1e3b4:	6b 81       	ldd	r22, Y+3	; 0x03
   1e3b6:	00 97       	sbiw	r24, 0x00	; 0
   1e3b8:	31 f0       	breq	.+12     	; 0x1e3c6 <boot_insertTracePoint+0x6a>
        {
            pagebuffer[i * 2] = data % 256;
   1e3ba:	d2 01       	movw	r26, r4
   1e3bc:	0c 93       	st	X, r16
            pagebuffer[i * 2 + 1] = data / 256;
   1e3be:	11 96       	adiw	r26, 0x01	; 1
   1e3c0:	1c 93       	st	X, r17
   1e3c2:	11 97       	sbiw	r26, 0x01	; 1
   1e3c4:	03 c0       	rjmp	.+6      	; 0x1e3cc <boot_insertTracePoint+0x70>
        }
        else
        {
            pagebuffer[i * 2 + 1] = data % 256;
   1e3c6:	f2 01       	movw	r30, r4
   1e3c8:	01 83       	std	Z+1, r16	; 0x01
            pagebuffer[i * 2] = data / 256;
   1e3ca:	10 83       	st	Z, r17
   1e3cc:	82 e0       	ldi	r24, 0x02	; 2
   1e3ce:	90 e0       	ldi	r25, 0x00	; 0
   1e3d0:	a0 e0       	ldi	r26, 0x00	; 0
   1e3d2:	b0 e0       	ldi	r27, 0x00	; 0
   1e3d4:	c8 0e       	add	r12, r24
   1e3d6:	d9 1e       	adc	r13, r25
   1e3d8:	ea 1e       	adc	r14, r26
   1e3da:	fb 1e       	adc	r15, r27
   1e3dc:	a2 e0       	ldi	r26, 0x02	; 2
   1e3de:	b0 e0       	ldi	r27, 0x00	; 0
   1e3e0:	4a 0e       	add	r4, r26
   1e3e2:	5b 1e       	adc	r5, r27

    //Read the page content
    addr = (uint32_t) pagenum *(uint32_t) SPM_PAGESIZE;

    //read the page content 
    for (i = 0; i < 128; i++)
   1e3e4:	b4 e6       	ldi	r27, 0x64	; 100
   1e3e6:	4b 16       	cp	r4, r27
   1e3e8:	b2 e0       	ldi	r27, 0x02	; 2
   1e3ea:	5b 06       	cpc	r5, r27
   1e3ec:	e1 f6       	brne	.-72     	; 0x1e3a6 <boot_insertTracePoint+0x4a>
    //say 234, then it is 22 bytes 
    //Now this part needs to be changed to 16 bytes
    //index is 242, then 14 bytes. 
    index = pageoffset;
    programmore = 0;
    if (pageoffset > 242)
   1e3ee:	63 3f       	cpi	r22, 0xF3	; 243
   1e3f0:	20 f0       	brcs	.+8      	; 0x1e3fa <boot_insertTracePoint+0x9e>
    {
        programmore = 1;
        endindex = (uint8_t) ((uint16_t) 256 - (uint16_t) pageoffset);
   1e3f2:	56 2e       	mov	r5, r22
   1e3f4:	51 94       	neg	r5
    //index is 242, then 14 bytes. 
    index = pageoffset;
    programmore = 0;
    if (pageoffset > 242)
    {
        programmore = 1;
   1e3f6:	01 e0       	ldi	r16, 0x01	; 1
   1e3f8:	03 c0       	rjmp	.+6      	; 0x1e400 <boot_insertTracePoint+0xa4>
        endindex = (uint8_t) ((uint16_t) 256 - (uint16_t) pageoffset);
    }
    else
    {
        programmore = 0;
        endindex = 14;
   1e3fa:	9e e0       	ldi	r25, 0x0E	; 14
   1e3fc:	59 2e       	mov	r5, r25
        programmore = 1;
        endindex = (uint8_t) ((uint16_t) 256 - (uint16_t) pageoffset);
    }
    else
    {
        programmore = 0;
   1e3fe:	00 e0       	ldi	r16, 0x00	; 0
    index = pageoffset;
    programmore = 0;
    if (pageoffset > 242)
    {
        programmore = 1;
        endindex = (uint8_t) ((uint16_t) 256 - (uint16_t) pageoffset);
   1e400:	4e e2       	ldi	r20, 0x2E	; 46
   1e402:	51 e0       	ldi	r21, 0x01	; 1
    }
    //for the 234 example, 22 here, then 0, 21 are copied 
    for (i = 0; i < endindex; i++)
    {
        //   instructions[ i ] = pagebuffer[ index + i ];
        pagebuffer[index + i] = tracepointstring[i];
   1e404:	e6 2f       	mov	r30, r22
   1e406:	f0 e0       	ldi	r31, 0x00	; 0
}


//insert a breakpoint by removing 8 bytes at the location specified by the pagenum and offset 
//insert a breakpoint by removing 8 bytes at the location specified by the pagenum and offset 
void __attribute__ ((section(".bootloader"))) boot_insertTracePoint(uint16_t
   1e408:	ec 59       	subi	r30, 0x9C	; 156
   1e40a:	fe 4f       	sbci	r31, 0xFE	; 254
   1e40c:	85 2d       	mov	r24, r5
   1e40e:	90 e0       	ldi	r25, 0x00	; 0
   1e410:	9c 01       	movw	r18, r24
   1e412:	24 0f       	add	r18, r20
   1e414:	35 1f       	adc	r19, r21
    {
        programmore = 0;
        endindex = 14;
    }
    //for the 234 example, 22 here, then 0, 21 are copied 
    for (i = 0; i < endindex; i++)
   1e416:	9a 83       	std	Y+2, r25	; 0x02
   1e418:	89 83       	std	Y+1, r24	; 0x01
   1e41a:	04 c0       	rjmp	.+8      	; 0x1e424 <boot_insertTracePoint+0xc8>
    {
        //   instructions[ i ] = pagebuffer[ index + i ];
        pagebuffer[index + i] = tracepointstring[i];
   1e41c:	da 01       	movw	r26, r20
   1e41e:	8d 91       	ld	r24, X+
   1e420:	ad 01       	movw	r20, r26
   1e422:	81 93       	st	Z+, r24
    {
        programmore = 0;
        endindex = 14;
    }
    //for the 234 example, 22 here, then 0, 21 are copied 
    for (i = 0; i < endindex; i++)
   1e424:	42 17       	cp	r20, r18
   1e426:	53 07       	cpc	r21, r19
   1e428:	c9 f7       	brne	.-14     	; 0x1e41c <boot_insertTracePoint+0xc0>

//-------------------------------------------------------------------------
int __attribute__ ((section(".bootloader"))) reprogram(unsigned char *buffer,
                                                       uint16_t codepage)
{
    boot_program_page((uint32_t) SPM_PAGESIZE * ((uint32_t) codepage), buffer);
   1e42a:	c5 01       	movw	r24, r10
   1e42c:	b4 01       	movw	r22, r8
   1e42e:	44 e6       	ldi	r20, 0x64	; 100
   1e430:	51 e0       	ldi	r21, 0x01	; 1
   1e432:	0e 94 10 f0 	call	0x1e020	; 0x1e020 <boot_program_page>
    {
        //   instructions[ i ] = pagebuffer[ index + i ];
        pagebuffer[index + i] = tracepointstring[i];
    }
    reprogram(pagebuffer, pagenum);
    if (programmore == 0)
   1e436:	00 23       	and	r16, r16
   1e438:	09 f4       	brne	.+2      	; 0x1e43c <boot_insertTracePoint+0xe0>
   1e43a:	49 c0       	rjmp	.+146    	; 0x1e4ce <boot_insertTracePoint+0x172>
    {
        return;
    }
    //next page
    addr = (uint32_t) (pagenum + 1) * (uint32_t) SPM_PAGESIZE;
   1e43c:	08 94       	sec
   1e43e:	21 1c       	adc	r2, r1
   1e440:	31 1c       	adc	r3, r1
   1e442:	41 01       	movw	r8, r2
   1e444:	aa 24       	eor	r10, r10
   1e446:	bb 24       	eor	r11, r11
   1e448:	ba 2c       	mov	r11, r10
   1e44a:	a9 2c       	mov	r10, r9
   1e44c:	98 2c       	mov	r9, r8
   1e44e:	88 24       	eor	r8, r8
   1e450:	04 e6       	ldi	r16, 0x64	; 100
   1e452:	20 2e       	mov	r2, r16
   1e454:	01 e0       	ldi	r16, 0x01	; 1
   1e456:	30 2e       	mov	r3, r16
   1e458:	75 01       	movw	r14, r10
   1e45a:	64 01       	movw	r12, r8
    for (i = 0; i < 128; i++)
    {
        data = pgm_read_word_far(addr + ((uint32_t) i) * 2);
   1e45c:	eb be       	out	0x3b, r14	; 59
   1e45e:	f6 01       	movw	r30, r12
   1e460:	07 91       	elpm	r16, Z+
   1e462:	16 91       	elpm	r17, Z+
        if (is_host_lsb())
   1e464:	0e 94 f7 35 	call	0x6bee	; 0x6bee <is_host_lsb>
   1e468:	00 97       	sbiw	r24, 0x00	; 0
   1e46a:	21 f0       	breq	.+8      	; 0x1e474 <boot_insertTracePoint+0x118>
        {
            pagebuffer[i * 2] = data % 256;
   1e46c:	f1 01       	movw	r30, r2
   1e46e:	00 83       	st	Z, r16
            pagebuffer[i * 2 + 1] = data / 256;
   1e470:	11 83       	std	Z+1, r17	; 0x01
   1e472:	05 c0       	rjmp	.+10     	; 0x1e47e <boot_insertTracePoint+0x122>
        }
        else
        {
            pagebuffer[i * 2 + 1] = data % 256;
   1e474:	d1 01       	movw	r26, r2
   1e476:	11 96       	adiw	r26, 0x01	; 1
   1e478:	0c 93       	st	X, r16
   1e47a:	11 97       	sbiw	r26, 0x01	; 1
            pagebuffer[i * 2] = data / 256;
   1e47c:	1c 93       	st	X, r17
   1e47e:	82 e0       	ldi	r24, 0x02	; 2
   1e480:	90 e0       	ldi	r25, 0x00	; 0
   1e482:	a0 e0       	ldi	r26, 0x00	; 0
   1e484:	b0 e0       	ldi	r27, 0x00	; 0
   1e486:	c8 0e       	add	r12, r24
   1e488:	d9 1e       	adc	r13, r25
   1e48a:	ea 1e       	adc	r14, r26
   1e48c:	fb 1e       	adc	r15, r27
   1e48e:	a2 e0       	ldi	r26, 0x02	; 2
   1e490:	b0 e0       	ldi	r27, 0x00	; 0
   1e492:	2a 0e       	add	r2, r26
   1e494:	3b 1e       	adc	r3, r27
    {
        return;
    }
    //next page
    addr = (uint32_t) (pagenum + 1) * (uint32_t) SPM_PAGESIZE;
    for (i = 0; i < 128; i++)
   1e496:	b4 e6       	ldi	r27, 0x64	; 100
   1e498:	2b 16       	cp	r2, r27
   1e49a:	b2 e0       	ldi	r27, 0x02	; 2
   1e49c:	3b 06       	cpc	r3, r27
   1e49e:	f1 f6       	brne	.-68     	; 0x1e45c <boot_insertTracePoint+0x100>
}


//insert a breakpoint by removing 8 bytes at the location specified by the pagenum and offset 
//insert a breakpoint by removing 8 bytes at the location specified by the pagenum and offset 
void __attribute__ ((section(".bootloader"))) boot_insertTracePoint(uint16_t
   1e4a0:	e9 81       	ldd	r30, Y+1	; 0x01
   1e4a2:	fa 81       	ldd	r31, Y+2	; 0x02
   1e4a4:	e2 5d       	subi	r30, 0xD2	; 210
   1e4a6:	fe 4f       	sbci	r31, 0xFE	; 254
        {
            pagebuffer[i * 2 + 1] = data % 256;
            pagebuffer[i * 2] = data / 256;
        }
    }
    endindex2 = 14 - endindex;
   1e4a8:	2e e0       	ldi	r18, 0x0E	; 14
   1e4aa:	25 19       	sub	r18, r5
}


//insert a breakpoint by removing 8 bytes at the location specified by the pagenum and offset 
//insert a breakpoint by removing 8 bytes at the location specified by the pagenum and offset 
void __attribute__ ((section(".bootloader"))) boot_insertTracePoint(uint16_t
   1e4ac:	30 e0       	ldi	r19, 0x00	; 0
   1e4ae:	2c 59       	subi	r18, 0x9C	; 156
   1e4b0:	3e 4f       	sbci	r19, 0xFE	; 254
            pagebuffer[i * 2] = data / 256;
        }
    }
    endindex2 = 14 - endindex;
    programmore = 0;
    for (i = 0; i < endindex2; i++)
   1e4b2:	04 c0       	rjmp	.+8      	; 0x1e4bc <boot_insertTracePoint+0x160>
    {
        //   instructions[ i ] = pagebuffer[ index + i ];
        pagebuffer[i] = tracepointstring[endindex + i];
   1e4b4:	81 91       	ld	r24, Z+
   1e4b6:	d3 01       	movw	r26, r6
   1e4b8:	8d 93       	st	X+, r24
   1e4ba:	3d 01       	movw	r6, r26
            pagebuffer[i * 2] = data / 256;
        }
    }
    endindex2 = 14 - endindex;
    programmore = 0;
    for (i = 0; i < endindex2; i++)
   1e4bc:	62 16       	cp	r6, r18
   1e4be:	73 06       	cpc	r7, r19
   1e4c0:	c9 f7       	brne	.-14     	; 0x1e4b4 <boot_insertTracePoint+0x158>

//-------------------------------------------------------------------------
int __attribute__ ((section(".bootloader"))) reprogram(unsigned char *buffer,
                                                       uint16_t codepage)
{
    boot_program_page((uint32_t) SPM_PAGESIZE * ((uint32_t) codepage), buffer);
   1e4c2:	c5 01       	movw	r24, r10
   1e4c4:	b4 01       	movw	r22, r8
   1e4c6:	44 e6       	ldi	r20, 0x64	; 100
   1e4c8:	51 e0       	ldi	r21, 0x01	; 1
   1e4ca:	0e 94 10 f0 	call	0x1e020	; 0x1e020 <boot_program_page>
    {
        //   instructions[ i ] = pagebuffer[ index + i ];
        pagebuffer[i] = tracepointstring[endindex + i];
    }
    reprogram(pagebuffer, pagenum + 1);
}
   1e4ce:	0f 90       	pop	r0
   1e4d0:	0f 90       	pop	r0
   1e4d2:	0f 90       	pop	r0
   1e4d4:	cf 91       	pop	r28
   1e4d6:	df 91       	pop	r29
   1e4d8:	1f 91       	pop	r17
   1e4da:	0f 91       	pop	r16
   1e4dc:	ff 90       	pop	r15
   1e4de:	ef 90       	pop	r14
   1e4e0:	df 90       	pop	r13
   1e4e2:	cf 90       	pop	r12
   1e4e4:	bf 90       	pop	r11
   1e4e6:	af 90       	pop	r10
   1e4e8:	9f 90       	pop	r9
   1e4ea:	8f 90       	pop	r8
   1e4ec:	7f 90       	pop	r7
   1e4ee:	6f 90       	pop	r6
   1e4f0:	5f 90       	pop	r5
   1e4f2:	4f 90       	pop	r4
   1e4f4:	3f 90       	pop	r3
   1e4f6:	2f 90       	pop	r2
   1e4f8:	08 95       	ret

0001e4fa <boot_insertBreakPoint>:
                                                                    pagenum,
                                                                    uint8_t
                                                                    pageoffset,
                                                                    uint8_t *
                                                                    instructions)
{
   1e4fa:	6f 92       	push	r6
   1e4fc:	7f 92       	push	r7
   1e4fe:	8f 92       	push	r8
   1e500:	9f 92       	push	r9
   1e502:	af 92       	push	r10
   1e504:	bf 92       	push	r11
   1e506:	cf 92       	push	r12
   1e508:	df 92       	push	r13
   1e50a:	ef 92       	push	r14
   1e50c:	ff 92       	push	r15
   1e50e:	0f 93       	push	r16
   1e510:	1f 93       	push	r17
   1e512:	df 93       	push	r29
   1e514:	cf 93       	push	r28
   1e516:	00 d0       	rcall	.+0      	; 0x1e518 <boot_insertBreakPoint+0x1e>
   1e518:	0f 92       	push	r0
   1e51a:	cd b7       	in	r28, 0x3d	; 61
   1e51c:	de b7       	in	r29, 0x3e	; 62
    //first read the page, then change the string, then write back the page
    int i;
    uint32_t addr;
    uint8_t index;
    uint16_t data;
    addr = (uint32_t) pagenum *(uint32_t) SPM_PAGESIZE;
   1e51e:	4c 01       	movw	r8, r24
   1e520:	aa 24       	eor	r10, r10
   1e522:	bb 24       	eor	r11, r11
   1e524:	ba 2c       	mov	r11, r10
   1e526:	a9 2c       	mov	r10, r9
   1e528:	98 2c       	mov	r9, r8
   1e52a:	88 24       	eor	r8, r8
   1e52c:	74 e6       	ldi	r23, 0x64	; 100
   1e52e:	67 2e       	mov	r6, r23
   1e530:	71 e0       	ldi	r23, 0x01	; 1
   1e532:	77 2e       	mov	r7, r23
    boot_program_page((uint32_t) SPM_PAGESIZE * ((uint32_t) codepage), buffer);
    return 0;
}

//insert a breakpoint by removing 8 bytes at the location specified by the pagenum and offset 
void __attribute__ ((section(".bootloader"))) boot_insertBreakPoint(uint16_t
   1e534:	75 01       	movw	r14, r10
   1e536:	64 01       	movw	r12, r8
    uint16_t data;
    addr = (uint32_t) pagenum *(uint32_t) SPM_PAGESIZE;

    for (i = 0; i < 128; i++)
    {
        data = pgm_read_word_far(addr + ((uint32_t) i) * 2);
   1e538:	eb be       	out	0x3b, r14	; 59
   1e53a:	f6 01       	movw	r30, r12
   1e53c:	07 91       	elpm	r16, Z+
   1e53e:	16 91       	elpm	r17, Z+
        if (is_host_lsb())
   1e540:	4a 83       	std	Y+2, r20	; 0x02
   1e542:	5b 83       	std	Y+3, r21	; 0x03
   1e544:	69 83       	std	Y+1, r22	; 0x01
   1e546:	0e 94 f7 35 	call	0x6bee	; 0x6bee <is_host_lsb>
   1e54a:	4a 81       	ldd	r20, Y+2	; 0x02
   1e54c:	5b 81       	ldd	r21, Y+3	; 0x03
   1e54e:	69 81       	ldd	r22, Y+1	; 0x01
   1e550:	00 97       	sbiw	r24, 0x00	; 0
   1e552:	31 f0       	breq	.+12     	; 0x1e560 <boot_insertBreakPoint+0x66>
        {
            pagebuffer[i * 2] = data % 256;
   1e554:	d3 01       	movw	r26, r6
   1e556:	0c 93       	st	X, r16
            pagebuffer[i * 2 + 1] = data / 256;
   1e558:	11 96       	adiw	r26, 0x01	; 1
   1e55a:	1c 93       	st	X, r17
   1e55c:	11 97       	sbiw	r26, 0x01	; 1
   1e55e:	03 c0       	rjmp	.+6      	; 0x1e566 <boot_insertBreakPoint+0x6c>
        }
        else
        {
            pagebuffer[i * 2 + 1] = data % 256;
   1e560:	f3 01       	movw	r30, r6
   1e562:	01 83       	std	Z+1, r16	; 0x01
            pagebuffer[i * 2] = data / 256;
   1e564:	10 83       	st	Z, r17
   1e566:	82 e0       	ldi	r24, 0x02	; 2
   1e568:	90 e0       	ldi	r25, 0x00	; 0
   1e56a:	a0 e0       	ldi	r26, 0x00	; 0
   1e56c:	b0 e0       	ldi	r27, 0x00	; 0
   1e56e:	c8 0e       	add	r12, r24
   1e570:	d9 1e       	adc	r13, r25
   1e572:	ea 1e       	adc	r14, r26
   1e574:	fb 1e       	adc	r15, r27
   1e576:	a2 e0       	ldi	r26, 0x02	; 2
   1e578:	b0 e0       	ldi	r27, 0x00	; 0
   1e57a:	6a 0e       	add	r6, r26
   1e57c:	7b 1e       	adc	r7, r27
    uint32_t addr;
    uint8_t index;
    uint16_t data;
    addr = (uint32_t) pagenum *(uint32_t) SPM_PAGESIZE;

    for (i = 0; i < 128; i++)
   1e57e:	b4 e6       	ldi	r27, 0x64	; 100
   1e580:	6b 16       	cp	r6, r27
   1e582:	b2 e0       	ldi	r27, 0x02	; 2
   1e584:	7b 06       	cpc	r7, r27
   1e586:	c1 f6       	brne	.-80     	; 0x1e538 <boot_insertBreakPoint+0x3e>
   1e588:	84 2f       	mov	r24, r20
   1e58a:	95 2f       	mov	r25, r21
   1e58c:	9c 01       	movw	r18, r24
   1e58e:	4e e3       	ldi	r20, 0x3E	; 62
   1e590:	51 e0       	ldi	r21, 0x01	; 1
    }
    index = pageoffset;
    for (i = 0; i < 6; i++)
    {
        instructions[i] = pagebuffer[index + i];
        pagebuffer[index + i] = breakpointstring[i];
   1e592:	e6 2f       	mov	r30, r22
   1e594:	f0 e0       	ldi	r31, 0x00	; 0
    boot_program_page((uint32_t) SPM_PAGESIZE * ((uint32_t) codepage), buffer);
    return 0;
}

//insert a breakpoint by removing 8 bytes at the location specified by the pagenum and offset 
void __attribute__ ((section(".bootloader"))) boot_insertBreakPoint(uint16_t
   1e596:	ec 59       	subi	r30, 0x9C	; 156
   1e598:	fe 4f       	sbci	r31, 0xFE	; 254
        }
    }
    index = pageoffset;
    for (i = 0; i < 6; i++)
    {
        instructions[i] = pagebuffer[index + i];
   1e59a:	80 81       	ld	r24, Z
   1e59c:	d9 01       	movw	r26, r18
   1e59e:	8d 93       	st	X+, r24
   1e5a0:	9d 01       	movw	r18, r26
        pagebuffer[index + i] = breakpointstring[i];
   1e5a2:	da 01       	movw	r26, r20
   1e5a4:	8d 91       	ld	r24, X+
   1e5a6:	ad 01       	movw	r20, r26
   1e5a8:	81 93       	st	Z+, r24
            pagebuffer[i * 2 + 1] = data % 256;
            pagebuffer[i * 2] = data / 256;
        }
    }
    index = pageoffset;
    for (i = 0; i < 6; i++)
   1e5aa:	b1 e0       	ldi	r27, 0x01	; 1
   1e5ac:	44 34       	cpi	r20, 0x44	; 68
   1e5ae:	5b 07       	cpc	r21, r27
   1e5b0:	a1 f7       	brne	.-24     	; 0x1e59a <boot_insertBreakPoint+0xa0>

//-------------------------------------------------------------------------
int __attribute__ ((section(".bootloader"))) reprogram(unsigned char *buffer,
                                                       uint16_t codepage)
{
    boot_program_page((uint32_t) SPM_PAGESIZE * ((uint32_t) codepage), buffer);
   1e5b2:	c5 01       	movw	r24, r10
   1e5b4:	b4 01       	movw	r22, r8
   1e5b6:	44 e6       	ldi	r20, 0x64	; 100
   1e5b8:	51 e0       	ldi	r21, 0x01	; 1
   1e5ba:	0e 94 10 f0 	call	0x1e020	; 0x1e020 <boot_program_page>
    {
        instructions[i] = pagebuffer[index + i];
        pagebuffer[index + i] = breakpointstring[i];
    }
    reprogram(pagebuffer, pagenum);
}
   1e5be:	0f 90       	pop	r0
   1e5c0:	0f 90       	pop	r0
   1e5c2:	0f 90       	pop	r0
   1e5c4:	cf 91       	pop	r28
   1e5c6:	df 91       	pop	r29
   1e5c8:	1f 91       	pop	r17
   1e5ca:	0f 91       	pop	r16
   1e5cc:	ff 90       	pop	r15
   1e5ce:	ef 90       	pop	r14
   1e5d0:	df 90       	pop	r13
   1e5d2:	cf 90       	pop	r12
   1e5d4:	bf 90       	pop	r11
   1e5d6:	af 90       	pop	r10
   1e5d8:	9f 90       	pop	r9
   1e5da:	8f 90       	pop	r8
   1e5dc:	7f 90       	pop	r7
   1e5de:	6f 90       	pop	r6
   1e5e0:	08 95       	ret

0001e5e2 <reprogramall>:
}

//-------------------------------------------------------------------------
int __attribute__ ((section(".bootloader"))) reprogramall(unsigned char
                                                          *program)
{
   1e5e2:	1f 93       	push	r17
   1e5e4:	ac 01       	movw	r20, r24
    //unsigned char buffer[256];
    unsigned char a, b;
    int j;
    int high, low, all;

    for (j = 0; j < 256; j++)
   1e5e6:	98 2f       	mov	r25, r24
   1e5e8:	e9 2f       	mov	r30, r25
   1e5ea:	f5 2f       	mov	r31, r21
}

//-------------------------------------------------------------------------
int __attribute__ ((section(".bootloader"))) reprogramall(unsigned char
                                                          *program)
{
   1e5ec:	df 01       	movw	r26, r30
    //unsigned char buffer[256];
    unsigned char a, b;
    int j;
    int high, low, all;

    for (j = 0; j < 256; j++)
   1e5ee:	20 e0       	ldi	r18, 0x00	; 0
   1e5f0:	30 e0       	ldi	r19, 0x00	; 0
    {
        a = program[j * 2];
   1e5f2:	60 81       	ld	r22, Z
        b = program[j * 2 + 1];
   1e5f4:	81 81       	ldd	r24, Z+1	; 0x01
        if ((a >= '0') && (a <= '9'))
   1e5f6:	96 2f       	mov	r25, r22
   1e5f8:	90 53       	subi	r25, 0x30	; 48
   1e5fa:	70 e0       	ldi	r23, 0x00	; 0
   1e5fc:	9a 30       	cpi	r25, 0x0A	; 10
   1e5fe:	18 f4       	brcc	.+6      	; 0x1e606 <reprogramall+0x24>
        {
            high = a - '0';
   1e600:	60 53       	subi	r22, 0x30	; 48
   1e602:	70 40       	sbci	r23, 0x00	; 0
   1e604:	02 c0       	rjmp	.+4      	; 0x1e60a <reprogramall+0x28>
        }
        else
        {
            high = a - 'A' + 10;
   1e606:	67 53       	subi	r22, 0x37	; 55
   1e608:	70 40       	sbci	r23, 0x00	; 0
        }
        if ((b >= '0') && (b <= '9'))
   1e60a:	18 2f       	mov	r17, r24
   1e60c:	10 53       	subi	r17, 0x30	; 48
   1e60e:	90 e0       	ldi	r25, 0x00	; 0
   1e610:	1a 30       	cpi	r17, 0x0A	; 10
   1e612:	10 f4       	brcc	.+4      	; 0x1e618 <reprogramall+0x36>
        {
            low = b - '0';
   1e614:	c0 97       	sbiw	r24, 0x30	; 48
   1e616:	01 c0       	rjmp	.+2      	; 0x1e61a <reprogramall+0x38>
        }
        else
        {
            low = b - 'A' + 10;
   1e618:	c7 97       	sbiw	r24, 0x37	; 55
        }

        all = high * 16 + low;
   1e61a:	14 e0       	ldi	r17, 0x04	; 4
   1e61c:	66 0f       	add	r22, r22
   1e61e:	77 1f       	adc	r23, r23
   1e620:	1a 95       	dec	r17
   1e622:	e1 f7       	brne	.-8      	; 0x1e61c <reprogramall+0x3a>
   1e624:	68 0f       	add	r22, r24
   1e626:	79 1f       	adc	r23, r25
        //This might introduce bugs.
        program[j] = (unsigned char)all;
   1e628:	6d 93       	st	X+, r22
    //unsigned char buffer[256];
    unsigned char a, b;
    int j;
    int high, low, all;

    for (j = 0; j < 256; j++)
   1e62a:	2f 5f       	subi	r18, 0xFF	; 255
   1e62c:	3f 4f       	sbci	r19, 0xFF	; 255
   1e62e:	32 96       	adiw	r30, 0x02	; 2
   1e630:	81 e0       	ldi	r24, 0x01	; 1
   1e632:	20 30       	cpi	r18, 0x00	; 0
   1e634:	38 07       	cpc	r19, r24
   1e636:	e9 f6       	brne	.-70     	; 0x1e5f2 <reprogramall+0x10>

//-------------------------------------------------------------------------
int __attribute__ ((section(".bootloader"))) reprogram(unsigned char *buffer,
                                                       uint16_t codepage)
{
    boot_program_page((uint32_t) SPM_PAGESIZE * ((uint32_t) codepage), buffer);
   1e638:	60 91 64 03 	lds	r22, 0x0364
   1e63c:	70 91 65 03 	lds	r23, 0x0365
   1e640:	80 e0       	ldi	r24, 0x00	; 0
   1e642:	90 e0       	ldi	r25, 0x00	; 0
   1e644:	98 2f       	mov	r25, r24
   1e646:	87 2f       	mov	r24, r23
   1e648:	76 2f       	mov	r23, r22
   1e64a:	66 27       	eor	r22, r22
   1e64c:	0e 94 10 f0 	call	0x1e020	; 0x1e020 <boot_program_page>
        all = high * 16 + low;
        //This might introduce bugs.
        program[j] = (unsigned char)all;
    }
    reprogram(program, pageindex);
    pageindex++;
   1e650:	80 91 64 03 	lds	r24, 0x0364
   1e654:	90 91 65 03 	lds	r25, 0x0365
   1e658:	01 96       	adiw	r24, 0x01	; 1
   1e65a:	90 93 65 03 	sts	0x0365, r25
   1e65e:	80 93 64 03 	sts	0x0364, r24
    return 0;
}
   1e662:	80 e0       	ldi	r24, 0x00	; 0
   1e664:	90 e0       	ldi	r25, 0x00	; 0
   1e666:	1f 91       	pop	r17
   1e668:	08 95       	ret

0001e66a <ProgramLastString>:
void __attribute__ ((section(".bootloader"))) ProgramLastString(char *buffer,
                                                                uint8_t length)
{
    int i;

    for (i = 0; i < length; i++)
   1e66a:	28 2f       	mov	r18, r24
   1e66c:	39 2f       	mov	r19, r25
   1e66e:	d9 01       	movw	r26, r18
        reprogramall(pagebuffer);
    }
}

//-------------------------------------------------------------------------
void __attribute__ ((section(".bootloader"))) ProgramLastString(char *buffer,
   1e670:	e0 91 66 03 	lds	r30, 0x0366
   1e674:	f0 91 67 03 	lds	r31, 0x0367
   1e678:	ec 59       	subi	r30, 0x9C	; 156
   1e67a:	fe 4f       	sbci	r31, 0xFE	; 254
                                                                uint8_t length)
{
    int i;

    for (i = 0; i < length; i++)
   1e67c:	80 e0       	ldi	r24, 0x00	; 0
   1e67e:	90 e0       	ldi	r25, 0x00	; 0
   1e680:	70 e0       	ldi	r23, 0x00	; 0
   1e682:	03 c0       	rjmp	.+6      	; 0x1e68a <ProgramLastString+0x20>
    {
        pagebuffer[currentpageindex + i] = buffer[i];
   1e684:	2d 91       	ld	r18, X+
   1e686:	21 93       	st	Z+, r18
void __attribute__ ((section(".bootloader"))) ProgramLastString(char *buffer,
                                                                uint8_t length)
{
    int i;

    for (i = 0; i < length; i++)
   1e688:	01 96       	adiw	r24, 0x01	; 1
   1e68a:	86 17       	cp	r24, r22
   1e68c:	97 07       	cpc	r25, r23
   1e68e:	d4 f3       	brlt	.-12     	; 0x1e684 <ProgramLastString+0x1a>
    {
        pagebuffer[currentpageindex + i] = buffer[i];
    }
    reprogramall(pagebuffer);
   1e690:	84 e6       	ldi	r24, 0x64	; 100
   1e692:	91 e0       	ldi	r25, 0x01	; 1
   1e694:	0e 94 f1 f2 	call	0x1e5e2	; 0x1e5e2 <reprogramall>
    currentpageindex = 0;
   1e698:	10 92 67 03 	sts	0x0367, r1
   1e69c:	10 92 66 03 	sts	0x0366, r1
}
   1e6a0:	08 95       	ret

0001e6a2 <ProgramRemains>:
}

//-------------------------------------------------------------------------
void __attribute__ ((section(".bootloader"))) ProgramRemains()
{
    if (currentpageindex != 0)
   1e6a2:	80 91 66 03 	lds	r24, 0x0366
   1e6a6:	90 91 67 03 	lds	r25, 0x0367
   1e6aa:	00 97       	sbiw	r24, 0x00	; 0
   1e6ac:	21 f0       	breq	.+8      	; 0x1e6b6 <ProgramRemains+0x14>
    {
        reprogramall(pagebuffer);
   1e6ae:	84 e6       	ldi	r24, 0x64	; 100
   1e6b0:	91 e0       	ldi	r25, 0x01	; 1
   1e6b2:	0e 94 f1 f2 	call	0x1e5e2	; 0x1e5e2 <reprogramall>
   1e6b6:	08 95       	ret

0001e6b8 <ProgramString>:
{
    int i;

    for (i = 0; i < 16; i++)
    {
        pagebuffer[currentpageindex + i] = buffer[i];
   1e6b8:	20 91 66 03 	lds	r18, 0x0366
   1e6bc:	30 91 67 03 	lds	r19, 0x0367
   1e6c0:	48 2f       	mov	r20, r24
   1e6c2:	59 2f       	mov	r21, r25
   1e6c4:	da 01       	movw	r26, r20
    pageindex = pageno;
    currentpageindex = 0;
}

//-------------------------------------------------------------------------
void __attribute__ ((section(".bootloader"))) ProgramString(char *buffer)
   1e6c6:	f9 01       	movw	r30, r18
   1e6c8:	ec 59       	subi	r30, 0x9C	; 156
   1e6ca:	fe 4f       	sbci	r31, 0xFE	; 254
{
    int i;

    for (i = 0; i < 16; i++)
   1e6cc:	80 e0       	ldi	r24, 0x00	; 0
   1e6ce:	90 e0       	ldi	r25, 0x00	; 0
    {
        pagebuffer[currentpageindex + i] = buffer[i];
   1e6d0:	4d 91       	ld	r20, X+
   1e6d2:	41 93       	st	Z+, r20
//-------------------------------------------------------------------------
void __attribute__ ((section(".bootloader"))) ProgramString(char *buffer)
{
    int i;

    for (i = 0; i < 16; i++)
   1e6d4:	01 96       	adiw	r24, 0x01	; 1
   1e6d6:	80 31       	cpi	r24, 0x10	; 16
   1e6d8:	91 05       	cpc	r25, r1
   1e6da:	d1 f7       	brne	.-12     	; 0x1e6d0 <ProgramString+0x18>
    {
        pagebuffer[currentpageindex + i] = buffer[i];
    }
    currentpageindex += 16;
   1e6dc:	20 5f       	subi	r18, 0xF0	; 240
   1e6de:	3f 4f       	sbci	r19, 0xFF	; 255
   1e6e0:	30 93 67 03 	sts	0x0367, r19
   1e6e4:	20 93 66 03 	sts	0x0366, r18
    if (currentpageindex == 512)
   1e6e8:	82 e0       	ldi	r24, 0x02	; 2
   1e6ea:	20 30       	cpi	r18, 0x00	; 0
   1e6ec:	38 07       	cpc	r19, r24
   1e6ee:	41 f4       	brne	.+16     	; 0x1e700 <ProgramString+0x48>
    {
        reprogramall(pagebuffer);
   1e6f0:	84 e6       	ldi	r24, 0x64	; 100
   1e6f2:	91 e0       	ldi	r25, 0x01	; 1
   1e6f4:	0e 94 f1 f2 	call	0x1e5e2	; 0x1e5e2 <reprogramall>
        currentpageindex = 0;
   1e6f8:	10 92 67 03 	sts	0x0367, r1
   1e6fc:	10 92 66 03 	sts	0x0366, r1
   1e700:	08 95       	ret

0001e702 <boot_removeTracePoint>:
                                                                    pagenum,
                                                                    uint8_t
                                                                    pageoffset,
                                                                    uint8_t *
                                                                    buffer)
{
   1e702:	2f 92       	push	r2
   1e704:	3f 92       	push	r3
   1e706:	4f 92       	push	r4
   1e708:	5f 92       	push	r5
   1e70a:	6f 92       	push	r6
   1e70c:	7f 92       	push	r7
   1e70e:	8f 92       	push	r8
   1e710:	9f 92       	push	r9
   1e712:	bf 92       	push	r11
   1e714:	cf 92       	push	r12
   1e716:	df 92       	push	r13
   1e718:	ef 92       	push	r14
   1e71a:	ff 92       	push	r15
   1e71c:	0f 93       	push	r16
   1e71e:	1f 93       	push	r17
   1e720:	df 93       	push	r29
   1e722:	cf 93       	push	r28
   1e724:	00 d0       	rcall	.+0      	; 0x1e726 <boot_removeTracePoint+0x24>
   1e726:	00 d0       	rcall	.+0      	; 0x1e728 <boot_removeTracePoint+0x26>
   1e728:	00 d0       	rcall	.+0      	; 0x1e72a <boot_removeTracePoint+0x28>
   1e72a:	cd b7       	in	r28, 0x3d	; 61
   1e72c:	de b7       	in	r29, 0x3e	; 62
   1e72e:	9a 83       	std	Y+2, r25	; 0x02
   1e730:	89 83       	std	Y+1, r24	; 0x01
   1e732:	5c 83       	std	Y+4, r21	; 0x04
   1e734:	4b 83       	std	Y+3, r20	; 0x03
    uint16_t data;
    uint8_t programmore = 0;
    uint8_t endindex, endindex2;

    //Read the page content
    addr = (uint32_t) pagenum *(uint32_t) SPM_PAGESIZE;
   1e736:	2c 01       	movw	r4, r24
   1e738:	66 24       	eor	r6, r6
   1e73a:	77 24       	eor	r7, r7
   1e73c:	76 2c       	mov	r7, r6
   1e73e:	65 2c       	mov	r6, r5
   1e740:	54 2c       	mov	r5, r4
   1e742:	44 24       	eor	r4, r4
   1e744:	94 e6       	ldi	r25, 0x64	; 100
   1e746:	89 2e       	mov	r8, r25
   1e748:	91 e0       	ldi	r25, 0x01	; 1
   1e74a:	99 2e       	mov	r9, r25
    SREG = sreg;
}

//-------------------------------------------------------------------------------
//This function allows remove tracepoint by repatching it 
void __attribute__ ((section(".bootloader"))) boot_removeTracePoint(uint16_t
   1e74c:	14 01       	movw	r2, r8
   1e74e:	73 01       	movw	r14, r6
   1e750:	62 01       	movw	r12, r4
    addr = (uint32_t) pagenum *(uint32_t) SPM_PAGESIZE;

    //read the page content 
    for (i = 0; i < 128; i++)
    {
        data = pgm_read_word_far(addr + ((uint32_t) i) * 2);
   1e752:	eb be       	out	0x3b, r14	; 59
   1e754:	f6 01       	movw	r30, r12
   1e756:	07 91       	elpm	r16, Z+
   1e758:	16 91       	elpm	r17, Z+
        if (is_host_lsb())
   1e75a:	6d 83       	std	Y+5, r22	; 0x05
   1e75c:	0e 94 f7 35 	call	0x6bee	; 0x6bee <is_host_lsb>
   1e760:	6d 81       	ldd	r22, Y+5	; 0x05
   1e762:	00 97       	sbiw	r24, 0x00	; 0
   1e764:	31 f0       	breq	.+12     	; 0x1e772 <boot_removeTracePoint+0x70>
        {
            pagebuffer[i * 2] = data % 256;
   1e766:	d1 01       	movw	r26, r2
   1e768:	0c 93       	st	X, r16
            pagebuffer[i * 2 + 1] = data / 256;
   1e76a:	11 96       	adiw	r26, 0x01	; 1
   1e76c:	1c 93       	st	X, r17
   1e76e:	11 97       	sbiw	r26, 0x01	; 1
   1e770:	03 c0       	rjmp	.+6      	; 0x1e778 <boot_removeTracePoint+0x76>
        }
        else
        {
            pagebuffer[i * 2 + 1] = data % 256;
   1e772:	f1 01       	movw	r30, r2
   1e774:	01 83       	std	Z+1, r16	; 0x01
            pagebuffer[i * 2] = data / 256;
   1e776:	10 83       	st	Z, r17
   1e778:	82 e0       	ldi	r24, 0x02	; 2
   1e77a:	90 e0       	ldi	r25, 0x00	; 0
   1e77c:	a0 e0       	ldi	r26, 0x00	; 0
   1e77e:	b0 e0       	ldi	r27, 0x00	; 0
   1e780:	c8 0e       	add	r12, r24
   1e782:	d9 1e       	adc	r13, r25
   1e784:	ea 1e       	adc	r14, r26
   1e786:	fb 1e       	adc	r15, r27
   1e788:	a2 e0       	ldi	r26, 0x02	; 2
   1e78a:	b0 e0       	ldi	r27, 0x00	; 0
   1e78c:	2a 0e       	add	r2, r26
   1e78e:	3b 1e       	adc	r3, r27

    //Read the page content
    addr = (uint32_t) pagenum *(uint32_t) SPM_PAGESIZE;

    //read the page content 
    for (i = 0; i < 128; i++)
   1e790:	b4 e6       	ldi	r27, 0x64	; 100
   1e792:	2b 16       	cp	r2, r27
   1e794:	b2 e0       	ldi	r27, 0x02	; 2
   1e796:	3b 06       	cpc	r3, r27
   1e798:	e1 f6       	brne	.-72     	; 0x1e752 <boot_removeTracePoint+0x50>
    //say 234, then it is 22 bytes 
    //Now this part needs to be changed to 16 bytes
    //index is 242, then 14 bytes. 
    index = pageoffset;
    programmore = 0;
    if (pageoffset > 242)
   1e79a:	63 3f       	cpi	r22, 0xF3	; 243
   1e79c:	20 f0       	brcs	.+8      	; 0x1e7a6 <boot_removeTracePoint+0xa4>
    {
        programmore = 1;
        endindex = (uint8_t) ((uint16_t) 256 - (uint16_t) pageoffset);
   1e79e:	b6 2e       	mov	r11, r22
   1e7a0:	b1 94       	neg	r11
    //index is 242, then 14 bytes. 
    index = pageoffset;
    programmore = 0;
    if (pageoffset > 242)
    {
        programmore = 1;
   1e7a2:	01 e0       	ldi	r16, 0x01	; 1
   1e7a4:	03 c0       	rjmp	.+6      	; 0x1e7ac <boot_removeTracePoint+0xaa>
        endindex = (uint8_t) ((uint16_t) 256 - (uint16_t) pageoffset);
    }
    else
    {
        programmore = 0;
        endindex = 14;
   1e7a6:	8e e0       	ldi	r24, 0x0E	; 14
   1e7a8:	b8 2e       	mov	r11, r24
        programmore = 1;
        endindex = (uint8_t) ((uint16_t) 256 - (uint16_t) pageoffset);
    }
    else
    {
        programmore = 0;
   1e7aa:	00 e0       	ldi	r16, 0x00	; 0
    index = pageoffset;
    programmore = 0;
    if (pageoffset > 242)
    {
        programmore = 1;
        endindex = (uint8_t) ((uint16_t) 256 - (uint16_t) pageoffset);
   1e7ac:	ab 81       	ldd	r26, Y+3	; 0x03
   1e7ae:	bc 81       	ldd	r27, Y+4	; 0x04
    }
    //for the 234 example, 22 here, then 0, 21 are copied 
    for (i = 0; i < endindex; i++)
    {
        //   instructions[ i ] = pagebuffer[ index + i ];
        pagebuffer[index + i] = buffer[i];
   1e7b0:	e6 2f       	mov	r30, r22
   1e7b2:	f0 e0       	ldi	r31, 0x00	; 0
    SREG = sreg;
}

//-------------------------------------------------------------------------------
//This function allows remove tracepoint by repatching it 
void __attribute__ ((section(".bootloader"))) boot_removeTracePoint(uint16_t
   1e7b4:	ec 59       	subi	r30, 0x9C	; 156
   1e7b6:	fe 4f       	sbci	r31, 0xFE	; 254
   1e7b8:	2b 2c       	mov	r2, r11
   1e7ba:	33 24       	eor	r3, r3
   1e7bc:	cf 01       	movw	r24, r30
   1e7be:	82 0d       	add	r24, r2
   1e7c0:	93 1d       	adc	r25, r3
    {
        programmore = 0;
        endindex = 14;
    }
    //for the 234 example, 22 here, then 0, 21 are copied 
    for (i = 0; i < endindex; i++)
   1e7c2:	02 c0       	rjmp	.+4      	; 0x1e7c8 <boot_removeTracePoint+0xc6>
    {
        //   instructions[ i ] = pagebuffer[ index + i ];
        pagebuffer[index + i] = buffer[i];
   1e7c4:	2d 91       	ld	r18, X+
   1e7c6:	21 93       	st	Z+, r18
    {
        programmore = 0;
        endindex = 14;
    }
    //for the 234 example, 22 here, then 0, 21 are copied 
    for (i = 0; i < endindex; i++)
   1e7c8:	e8 17       	cp	r30, r24
   1e7ca:	f9 07       	cpc	r31, r25
   1e7cc:	d9 f7       	brne	.-10     	; 0x1e7c4 <boot_removeTracePoint+0xc2>

//-------------------------------------------------------------------------
int __attribute__ ((section(".bootloader"))) reprogram(unsigned char *buffer,
                                                       uint16_t codepage)
{
    boot_program_page((uint32_t) SPM_PAGESIZE * ((uint32_t) codepage), buffer);
   1e7ce:	c3 01       	movw	r24, r6
   1e7d0:	b2 01       	movw	r22, r4
   1e7d2:	44 e6       	ldi	r20, 0x64	; 100
   1e7d4:	51 e0       	ldi	r21, 0x01	; 1
   1e7d6:	0e 94 10 f0 	call	0x1e020	; 0x1e020 <boot_program_page>
    {
        //   instructions[ i ] = pagebuffer[ index + i ];
        pagebuffer[index + i] = buffer[i];
    }
    reprogram(pagebuffer, pagenum);
    if (programmore == 0)
   1e7da:	00 23       	and	r16, r16
   1e7dc:	09 f4       	brne	.+2      	; 0x1e7e0 <boot_removeTracePoint+0xde>
   1e7de:	47 c0       	rjmp	.+142    	; 0x1e86e <boot_removeTracePoint+0x16c>
    {
        return;
    }
    //next page
    addr = (uint32_t) (pagenum + 1) * (uint32_t) SPM_PAGESIZE;
   1e7e0:	c9 80       	ldd	r12, Y+1	; 0x01
   1e7e2:	da 80       	ldd	r13, Y+2	; 0x02
   1e7e4:	08 94       	sec
   1e7e6:	c1 1c       	adc	r12, r1
   1e7e8:	d1 1c       	adc	r13, r1
   1e7ea:	ee 24       	eor	r14, r14
   1e7ec:	ff 24       	eor	r15, r15
   1e7ee:	fe 2c       	mov	r15, r14
   1e7f0:	ed 2c       	mov	r14, r13
   1e7f2:	dc 2c       	mov	r13, r12
   1e7f4:	cc 24       	eor	r12, r12
   1e7f6:	24 e6       	ldi	r18, 0x64	; 100
   1e7f8:	31 e0       	ldi	r19, 0x01	; 1
    for (i = 0; i < 128; i++)
    {
        data = pgm_read_word_far(addr + ((uint32_t) i) * 2);
   1e7fa:	eb be       	out	0x3b, r14	; 59
   1e7fc:	f6 01       	movw	r30, r12
   1e7fe:	07 91       	elpm	r16, Z+
   1e800:	16 91       	elpm	r17, Z+
        if (is_host_lsb())
   1e802:	2d 83       	std	Y+5, r18	; 0x05
   1e804:	3e 83       	std	Y+6, r19	; 0x06
   1e806:	0e 94 f7 35 	call	0x6bee	; 0x6bee <is_host_lsb>
   1e80a:	2d 81       	ldd	r18, Y+5	; 0x05
   1e80c:	3e 81       	ldd	r19, Y+6	; 0x06
   1e80e:	00 97       	sbiw	r24, 0x00	; 0
   1e810:	21 f0       	breq	.+8      	; 0x1e81a <boot_removeTracePoint+0x118>
        {
            pagebuffer[i * 2] = data % 256;
   1e812:	f9 01       	movw	r30, r18
   1e814:	00 83       	st	Z, r16
            pagebuffer[i * 2 + 1] = data / 256;
   1e816:	11 83       	std	Z+1, r17	; 0x01
   1e818:	05 c0       	rjmp	.+10     	; 0x1e824 <boot_removeTracePoint+0x122>
        }
        else
        {
            pagebuffer[i * 2 + 1] = data % 256;
   1e81a:	d9 01       	movw	r26, r18
   1e81c:	11 96       	adiw	r26, 0x01	; 1
   1e81e:	0c 93       	st	X, r16
   1e820:	11 97       	sbiw	r26, 0x01	; 1
            pagebuffer[i * 2] = data / 256;
   1e822:	1c 93       	st	X, r17
   1e824:	82 e0       	ldi	r24, 0x02	; 2
   1e826:	90 e0       	ldi	r25, 0x00	; 0
   1e828:	a0 e0       	ldi	r26, 0x00	; 0
   1e82a:	b0 e0       	ldi	r27, 0x00	; 0
   1e82c:	c8 0e       	add	r12, r24
   1e82e:	d9 1e       	adc	r13, r25
   1e830:	ea 1e       	adc	r14, r26
   1e832:	fb 1e       	adc	r15, r27
   1e834:	2e 5f       	subi	r18, 0xFE	; 254
   1e836:	3f 4f       	sbci	r19, 0xFF	; 255
    {
        return;
    }
    //next page
    addr = (uint32_t) (pagenum + 1) * (uint32_t) SPM_PAGESIZE;
    for (i = 0; i < 128; i++)
   1e838:	92 e0       	ldi	r25, 0x02	; 2
   1e83a:	24 36       	cpi	r18, 0x64	; 100
   1e83c:	39 07       	cpc	r19, r25
   1e83e:	e9 f6       	brne	.-70     	; 0x1e7fa <boot_removeTracePoint+0xf8>
    SREG = sreg;
}

//-------------------------------------------------------------------------------
//This function allows remove tracepoint by repatching it 
void __attribute__ ((section(".bootloader"))) boot_removeTracePoint(uint16_t
   1e840:	eb 81       	ldd	r30, Y+3	; 0x03
   1e842:	fc 81       	ldd	r31, Y+4	; 0x04
   1e844:	e2 0d       	add	r30, r2
   1e846:	f3 1d       	adc	r31, r3
        {
            pagebuffer[i * 2 + 1] = data % 256;
            pagebuffer[i * 2] = data / 256;
        }
    }
    endindex2 = 14 - endindex;
   1e848:	8e e0       	ldi	r24, 0x0E	; 14
   1e84a:	8b 19       	sub	r24, r11
    SREG = sreg;
}

//-------------------------------------------------------------------------------
//This function allows remove tracepoint by repatching it 
void __attribute__ ((section(".bootloader"))) boot_removeTracePoint(uint16_t
   1e84c:	90 e0       	ldi	r25, 0x00	; 0
   1e84e:	8c 59       	subi	r24, 0x9C	; 156
   1e850:	9e 4f       	sbci	r25, 0xFE	; 254
            pagebuffer[i * 2] = data / 256;
        }
    }
    endindex2 = 14 - endindex;
    programmore = 0;
    for (i = 0; i < endindex2; i++)
   1e852:	04 c0       	rjmp	.+8      	; 0x1e85c <boot_removeTracePoint+0x15a>
    {
        //   instructions[ i ] = pagebuffer[ index + i ];
        pagebuffer[i] = buffer[endindex + i];
   1e854:	21 91       	ld	r18, Z+
   1e856:	d4 01       	movw	r26, r8
   1e858:	2d 93       	st	X+, r18
   1e85a:	4d 01       	movw	r8, r26
            pagebuffer[i * 2] = data / 256;
        }
    }
    endindex2 = 14 - endindex;
    programmore = 0;
    for (i = 0; i < endindex2; i++)
   1e85c:	88 16       	cp	r8, r24
   1e85e:	99 06       	cpc	r9, r25
   1e860:	c9 f7       	brne	.-14     	; 0x1e854 <boot_removeTracePoint+0x152>

//-------------------------------------------------------------------------
int __attribute__ ((section(".bootloader"))) reprogram(unsigned char *buffer,
                                                       uint16_t codepage)
{
    boot_program_page((uint32_t) SPM_PAGESIZE * ((uint32_t) codepage), buffer);
   1e862:	c3 01       	movw	r24, r6
   1e864:	b2 01       	movw	r22, r4
   1e866:	44 e6       	ldi	r20, 0x64	; 100
   1e868:	51 e0       	ldi	r21, 0x01	; 1
   1e86a:	0e 94 10 f0 	call	0x1e020	; 0x1e020 <boot_program_page>
    {
        //   instructions[ i ] = pagebuffer[ index + i ];
        pagebuffer[i] = buffer[endindex + i];
    }
    reprogram(pagebuffer, pagenum);
}
   1e86e:	26 96       	adiw	r28, 0x06	; 6
   1e870:	0f b6       	in	r0, 0x3f	; 63
   1e872:	f8 94       	cli
   1e874:	de bf       	out	0x3e, r29	; 62
   1e876:	0f be       	out	0x3f, r0	; 63
   1e878:	cd bf       	out	0x3d, r28	; 61
   1e87a:	cf 91       	pop	r28
   1e87c:	df 91       	pop	r29
   1e87e:	1f 91       	pop	r17
   1e880:	0f 91       	pop	r16
   1e882:	ff 90       	pop	r15
   1e884:	ef 90       	pop	r14
   1e886:	df 90       	pop	r13
   1e888:	cf 90       	pop	r12
   1e88a:	bf 90       	pop	r11
   1e88c:	9f 90       	pop	r9
   1e88e:	8f 90       	pop	r8
   1e890:	7f 90       	pop	r7
   1e892:	6f 90       	pop	r6
   1e894:	5f 90       	pop	r5
   1e896:	4f 90       	pop	r4
   1e898:	3f 90       	pop	r3
   1e89a:	2f 90       	pop	r2
   1e89c:	08 95       	ret

0001e89e <boot_removeTracePointLong>:

//insert a breakpoint by removing 8 bytes at the location specified by the pagenum and offset 
void __attribute__ ((section(".bootloader")))
boot_removeTracePointLong(uint16_t pagenum, uint8_t pageoffset,
                          uint8_t * buffer)
{
   1e89e:	2f 92       	push	r2
   1e8a0:	3f 92       	push	r3
   1e8a2:	4f 92       	push	r4
   1e8a4:	5f 92       	push	r5
   1e8a6:	6f 92       	push	r6
   1e8a8:	7f 92       	push	r7
   1e8aa:	8f 92       	push	r8
   1e8ac:	9f 92       	push	r9
   1e8ae:	af 92       	push	r10
   1e8b0:	bf 92       	push	r11
   1e8b2:	cf 92       	push	r12
   1e8b4:	df 92       	push	r13
   1e8b6:	ef 92       	push	r14
   1e8b8:	ff 92       	push	r15
   1e8ba:	0f 93       	push	r16
   1e8bc:	1f 93       	push	r17
   1e8be:	df 93       	push	r29
   1e8c0:	cf 93       	push	r28
   1e8c2:	00 d0       	rcall	.+0      	; 0x1e8c4 <boot_removeTracePointLong+0x26>
   1e8c4:	00 d0       	rcall	.+0      	; 0x1e8c6 <boot_removeTracePointLong+0x28>
   1e8c6:	0f 92       	push	r0
   1e8c8:	cd b7       	in	r28, 0x3d	; 61
   1e8ca:	de b7       	in	r29, 0x3e	; 62
   1e8cc:	1c 01       	movw	r2, r24
   1e8ce:	5c 83       	std	Y+4, r21	; 0x04
   1e8d0:	4b 83       	std	Y+3, r20	; 0x03
    uint16_t data;
    uint8_t programmore = 0;
    uint8_t endindex, endindex2;

    //Read the page content
    addr = (uint32_t) pagenum *(uint32_t) SPM_PAGESIZE;
   1e8d2:	4c 01       	movw	r8, r24
   1e8d4:	aa 24       	eor	r10, r10
   1e8d6:	bb 24       	eor	r11, r11
   1e8d8:	ba 2c       	mov	r11, r10
   1e8da:	a9 2c       	mov	r10, r9
   1e8dc:	98 2c       	mov	r9, r8
   1e8de:	88 24       	eor	r8, r8
   1e8e0:	74 e6       	ldi	r23, 0x64	; 100
   1e8e2:	67 2e       	mov	r6, r23
   1e8e4:	71 e0       	ldi	r23, 0x01	; 1
   1e8e6:	77 2e       	mov	r7, r23
    reprogram(pagebuffer, pagenum);
}

//insert a breakpoint by removing 8 bytes at the location specified by the pagenum and offset 
void __attribute__ ((section(".bootloader")))
boot_removeTracePointLong(uint16_t pagenum, uint8_t pageoffset,
   1e8e8:	23 01       	movw	r4, r6
   1e8ea:	75 01       	movw	r14, r10
   1e8ec:	64 01       	movw	r12, r8
    addr = (uint32_t) pagenum *(uint32_t) SPM_PAGESIZE;

    //read the page content 
    for (i = 0; i < 128; i++)
    {
        data = pgm_read_word_far(addr + ((uint32_t) i) * 2);
   1e8ee:	eb be       	out	0x3b, r14	; 59
   1e8f0:	f6 01       	movw	r30, r12
   1e8f2:	07 91       	elpm	r16, Z+
   1e8f4:	16 91       	elpm	r17, Z+
        if (is_host_lsb())
   1e8f6:	6d 83       	std	Y+5, r22	; 0x05
   1e8f8:	0e 94 f7 35 	call	0x6bee	; 0x6bee <is_host_lsb>
   1e8fc:	6d 81       	ldd	r22, Y+5	; 0x05
   1e8fe:	00 97       	sbiw	r24, 0x00	; 0
   1e900:	31 f0       	breq	.+12     	; 0x1e90e <boot_removeTracePointLong+0x70>
        {
            pagebuffer[i * 2] = data % 256;
   1e902:	d2 01       	movw	r26, r4
   1e904:	0c 93       	st	X, r16
            pagebuffer[i * 2 + 1] = data / 256;
   1e906:	11 96       	adiw	r26, 0x01	; 1
   1e908:	1c 93       	st	X, r17
   1e90a:	11 97       	sbiw	r26, 0x01	; 1
   1e90c:	03 c0       	rjmp	.+6      	; 0x1e914 <boot_removeTracePointLong+0x76>
        }
        else
        {
            pagebuffer[i * 2 + 1] = data % 256;
   1e90e:	f2 01       	movw	r30, r4
   1e910:	01 83       	std	Z+1, r16	; 0x01
            pagebuffer[i * 2] = data / 256;
   1e912:	10 83       	st	Z, r17
   1e914:	82 e0       	ldi	r24, 0x02	; 2
   1e916:	90 e0       	ldi	r25, 0x00	; 0
   1e918:	a0 e0       	ldi	r26, 0x00	; 0
   1e91a:	b0 e0       	ldi	r27, 0x00	; 0
   1e91c:	c8 0e       	add	r12, r24
   1e91e:	d9 1e       	adc	r13, r25
   1e920:	ea 1e       	adc	r14, r26
   1e922:	fb 1e       	adc	r15, r27
   1e924:	a2 e0       	ldi	r26, 0x02	; 2
   1e926:	b0 e0       	ldi	r27, 0x00	; 0
   1e928:	4a 0e       	add	r4, r26
   1e92a:	5b 1e       	adc	r5, r27

    //Read the page content
    addr = (uint32_t) pagenum *(uint32_t) SPM_PAGESIZE;

    //read the page content 
    for (i = 0; i < 128; i++)
   1e92c:	b4 e6       	ldi	r27, 0x64	; 100
   1e92e:	4b 16       	cp	r4, r27
   1e930:	b2 e0       	ldi	r27, 0x02	; 2
   1e932:	5b 06       	cpc	r5, r27
   1e934:	e1 f6       	brne	.-72     	; 0x1e8ee <boot_removeTracePointLong+0x50>
    }
    //assuming that the index as 228 or smaller, then enough for the 28 bytes othersise not 
    //say 234, then it is 22 bytes 
    index = pageoffset;
    programmore = 0;
    if (pageoffset > 240)
   1e936:	61 3f       	cpi	r22, 0xF1	; 241
   1e938:	20 f0       	brcs	.+8      	; 0x1e942 <boot_removeTracePointLong+0xa4>
    {
        programmore = 1;
        endindex = (uint8_t) ((uint16_t) 256 - (uint16_t) pageoffset);
   1e93a:	56 2e       	mov	r5, r22
   1e93c:	51 94       	neg	r5
    //say 234, then it is 22 bytes 
    index = pageoffset;
    programmore = 0;
    if (pageoffset > 240)
    {
        programmore = 1;
   1e93e:	01 e0       	ldi	r16, 0x01	; 1
   1e940:	03 c0       	rjmp	.+6      	; 0x1e948 <boot_removeTracePointLong+0xaa>
        endindex = (uint8_t) ((uint16_t) 256 - (uint16_t) pageoffset);
    }
    else
    {
        programmore = 0;
        endindex = 16;
   1e942:	50 e1       	ldi	r21, 0x10	; 16
   1e944:	55 2e       	mov	r5, r21
        programmore = 1;
        endindex = (uint8_t) ((uint16_t) 256 - (uint16_t) pageoffset);
    }
    else
    {
        programmore = 0;
   1e946:	00 e0       	ldi	r16, 0x00	; 0
    index = pageoffset;
    programmore = 0;
    if (pageoffset > 240)
    {
        programmore = 1;
        endindex = (uint8_t) ((uint16_t) 256 - (uint16_t) pageoffset);
   1e948:	4b 81       	ldd	r20, Y+3	; 0x03
   1e94a:	5c 81       	ldd	r21, Y+4	; 0x04
    }
    //for the 234 example, 22 here, then 0, 21 are copied 
    for (i = 0; i < endindex; i++)
    {
        //   instructions[ i ] = pagebuffer[ index + i ];
        pagebuffer[index + i] = buffer[i];
   1e94c:	e6 2f       	mov	r30, r22
   1e94e:	f0 e0       	ldi	r31, 0x00	; 0
    reprogram(pagebuffer, pagenum);
}

//insert a breakpoint by removing 8 bytes at the location specified by the pagenum and offset 
void __attribute__ ((section(".bootloader")))
boot_removeTracePointLong(uint16_t pagenum, uint8_t pageoffset,
   1e950:	ec 59       	subi	r30, 0x9C	; 156
   1e952:	fe 4f       	sbci	r31, 0xFE	; 254
   1e954:	85 2d       	mov	r24, r5
   1e956:	90 e0       	ldi	r25, 0x00	; 0
   1e958:	9a 83       	std	Y+2, r25	; 0x02
   1e95a:	89 83       	std	Y+1, r24	; 0x01
   1e95c:	8e 0f       	add	r24, r30
   1e95e:	9f 1f       	adc	r25, r31
    {
        programmore = 0;
        endindex = 16;
    }
    //for the 234 example, 22 here, then 0, 21 are copied 
    for (i = 0; i < endindex; i++)
   1e960:	04 c0       	rjmp	.+8      	; 0x1e96a <boot_removeTracePointLong+0xcc>
    {
        //   instructions[ i ] = pagebuffer[ index + i ];
        pagebuffer[index + i] = buffer[i];
   1e962:	da 01       	movw	r26, r20
   1e964:	2d 91       	ld	r18, X+
   1e966:	ad 01       	movw	r20, r26
   1e968:	21 93       	st	Z+, r18
    {
        programmore = 0;
        endindex = 16;
    }
    //for the 234 example, 22 here, then 0, 21 are copied 
    for (i = 0; i < endindex; i++)
   1e96a:	e8 17       	cp	r30, r24
   1e96c:	f9 07       	cpc	r31, r25
   1e96e:	c9 f7       	brne	.-14     	; 0x1e962 <boot_removeTracePointLong+0xc4>

//-------------------------------------------------------------------------
int __attribute__ ((section(".bootloader"))) reprogram(unsigned char *buffer,
                                                       uint16_t codepage)
{
    boot_program_page((uint32_t) SPM_PAGESIZE * ((uint32_t) codepage), buffer);
   1e970:	c5 01       	movw	r24, r10
   1e972:	b4 01       	movw	r22, r8
   1e974:	44 e6       	ldi	r20, 0x64	; 100
   1e976:	51 e0       	ldi	r21, 0x01	; 1
   1e978:	0e 94 10 f0 	call	0x1e020	; 0x1e020 <boot_program_page>
    {
        //   instructions[ i ] = pagebuffer[ index + i ];
        pagebuffer[index + i] = buffer[i];
    }
    reprogram(pagebuffer, pagenum);
    if (programmore == 0)
   1e97c:	00 23       	and	r16, r16
   1e97e:	09 f4       	brne	.+2      	; 0x1e982 <boot_removeTracePointLong+0xe4>
   1e980:	4b c0       	rjmp	.+150    	; 0x1ea18 <boot_removeTracePointLong+0x17a>
    {
        return;
    }
    //next page
    addr = (uint32_t) (pagenum + 1) * (uint32_t) SPM_PAGESIZE;
   1e982:	08 94       	sec
   1e984:	21 1c       	adc	r2, r1
   1e986:	31 1c       	adc	r3, r1
   1e988:	41 01       	movw	r8, r2
   1e98a:	aa 24       	eor	r10, r10
   1e98c:	bb 24       	eor	r11, r11
   1e98e:	ba 2c       	mov	r11, r10
   1e990:	a9 2c       	mov	r10, r9
   1e992:	98 2c       	mov	r9, r8
   1e994:	88 24       	eor	r8, r8
   1e996:	34 e6       	ldi	r19, 0x64	; 100
   1e998:	23 2e       	mov	r2, r19
   1e99a:	31 e0       	ldi	r19, 0x01	; 1
   1e99c:	33 2e       	mov	r3, r19
   1e99e:	75 01       	movw	r14, r10
   1e9a0:	64 01       	movw	r12, r8
    for (i = 0; i < 128; i++)
    {
        data = pgm_read_word_far(addr + ((uint32_t) i) * 2);
   1e9a2:	eb be       	out	0x3b, r14	; 59
   1e9a4:	f6 01       	movw	r30, r12
   1e9a6:	07 91       	elpm	r16, Z+
   1e9a8:	16 91       	elpm	r17, Z+
        if (is_host_lsb())
   1e9aa:	0e 94 f7 35 	call	0x6bee	; 0x6bee <is_host_lsb>
   1e9ae:	00 97       	sbiw	r24, 0x00	; 0
   1e9b0:	21 f0       	breq	.+8      	; 0x1e9ba <boot_removeTracePointLong+0x11c>
        {
            pagebuffer[i * 2] = data % 256;
   1e9b2:	f1 01       	movw	r30, r2
   1e9b4:	00 83       	st	Z, r16
            pagebuffer[i * 2 + 1] = data / 256;
   1e9b6:	11 83       	std	Z+1, r17	; 0x01
   1e9b8:	05 c0       	rjmp	.+10     	; 0x1e9c4 <boot_removeTracePointLong+0x126>
        }
        else
        {
            pagebuffer[i * 2 + 1] = data % 256;
   1e9ba:	d1 01       	movw	r26, r2
   1e9bc:	11 96       	adiw	r26, 0x01	; 1
   1e9be:	0c 93       	st	X, r16
   1e9c0:	11 97       	sbiw	r26, 0x01	; 1
            pagebuffer[i * 2] = data / 256;
   1e9c2:	1c 93       	st	X, r17
   1e9c4:	82 e0       	ldi	r24, 0x02	; 2
   1e9c6:	90 e0       	ldi	r25, 0x00	; 0
   1e9c8:	a0 e0       	ldi	r26, 0x00	; 0
   1e9ca:	b0 e0       	ldi	r27, 0x00	; 0
   1e9cc:	c8 0e       	add	r12, r24
   1e9ce:	d9 1e       	adc	r13, r25
   1e9d0:	ea 1e       	adc	r14, r26
   1e9d2:	fb 1e       	adc	r15, r27
   1e9d4:	a2 e0       	ldi	r26, 0x02	; 2
   1e9d6:	b0 e0       	ldi	r27, 0x00	; 0
   1e9d8:	2a 0e       	add	r2, r26
   1e9da:	3b 1e       	adc	r3, r27
    {
        return;
    }
    //next page
    addr = (uint32_t) (pagenum + 1) * (uint32_t) SPM_PAGESIZE;
    for (i = 0; i < 128; i++)
   1e9dc:	b4 e6       	ldi	r27, 0x64	; 100
   1e9de:	2b 16       	cp	r2, r27
   1e9e0:	b2 e0       	ldi	r27, 0x02	; 2
   1e9e2:	3b 06       	cpc	r3, r27
   1e9e4:	f1 f6       	brne	.-68     	; 0x1e9a2 <boot_removeTracePointLong+0x104>
    reprogram(pagebuffer, pagenum);
}

//insert a breakpoint by removing 8 bytes at the location specified by the pagenum and offset 
void __attribute__ ((section(".bootloader")))
boot_removeTracePointLong(uint16_t pagenum, uint8_t pageoffset,
   1e9e6:	eb 81       	ldd	r30, Y+3	; 0x03
   1e9e8:	fc 81       	ldd	r31, Y+4	; 0x04
   1e9ea:	89 81       	ldd	r24, Y+1	; 0x01
   1e9ec:	9a 81       	ldd	r25, Y+2	; 0x02
   1e9ee:	e8 0f       	add	r30, r24
   1e9f0:	f9 1f       	adc	r31, r25
            pagebuffer[i * 2 + 1] = data % 256;
            pagebuffer[i * 2] = data / 256;
        }
    }
    //PREVIOUSLY like 22 then the value is 6
    endindex2 = 16 - endindex;
   1e9f2:	80 e1       	ldi	r24, 0x10	; 16
   1e9f4:	85 19       	sub	r24, r5
    reprogram(pagebuffer, pagenum);
}

//insert a breakpoint by removing 8 bytes at the location specified by the pagenum and offset 
void __attribute__ ((section(".bootloader")))
boot_removeTracePointLong(uint16_t pagenum, uint8_t pageoffset,
   1e9f6:	90 e0       	ldi	r25, 0x00	; 0
   1e9f8:	8c 59       	subi	r24, 0x9C	; 156
   1e9fa:	9e 4f       	sbci	r25, 0xFE	; 254
        }
    }
    //PREVIOUSLY like 22 then the value is 6
    endindex2 = 16 - endindex;
    programmore = 0;
    for (i = 0; i < endindex2; i++)
   1e9fc:	04 c0       	rjmp	.+8      	; 0x1ea06 <boot_removeTracePointLong+0x168>
    {
        //   instructions[ i ] = pagebuffer[ index + i ];
        pagebuffer[i] = buffer[endindex + i];
   1e9fe:	21 91       	ld	r18, Z+
   1ea00:	d3 01       	movw	r26, r6
   1ea02:	2d 93       	st	X+, r18
   1ea04:	3d 01       	movw	r6, r26
        }
    }
    //PREVIOUSLY like 22 then the value is 6
    endindex2 = 16 - endindex;
    programmore = 0;
    for (i = 0; i < endindex2; i++)
   1ea06:	68 16       	cp	r6, r24
   1ea08:	79 06       	cpc	r7, r25
   1ea0a:	c9 f7       	brne	.-14     	; 0x1e9fe <boot_removeTracePointLong+0x160>

//-------------------------------------------------------------------------
int __attribute__ ((section(".bootloader"))) reprogram(unsigned char *buffer,
                                                       uint16_t codepage)
{
    boot_program_page((uint32_t) SPM_PAGESIZE * ((uint32_t) codepage), buffer);
   1ea0c:	c5 01       	movw	r24, r10
   1ea0e:	b4 01       	movw	r22, r8
   1ea10:	44 e6       	ldi	r20, 0x64	; 100
   1ea12:	51 e0       	ldi	r21, 0x01	; 1
   1ea14:	0e 94 10 f0 	call	0x1e020	; 0x1e020 <boot_program_page>
    {
        //   instructions[ i ] = pagebuffer[ index + i ];
        pagebuffer[i] = buffer[endindex + i];
    }
    reprogram(pagebuffer, pagenum + 1);
}
   1ea18:	0f 90       	pop	r0
   1ea1a:	0f 90       	pop	r0
   1ea1c:	0f 90       	pop	r0
   1ea1e:	0f 90       	pop	r0
   1ea20:	0f 90       	pop	r0
   1ea22:	cf 91       	pop	r28
   1ea24:	df 91       	pop	r29
   1ea26:	1f 91       	pop	r17
   1ea28:	0f 91       	pop	r16
   1ea2a:	ff 90       	pop	r15
   1ea2c:	ef 90       	pop	r14
   1ea2e:	df 90       	pop	r13
   1ea30:	cf 90       	pop	r12
   1ea32:	bf 90       	pop	r11
   1ea34:	af 90       	pop	r10
   1ea36:	9f 90       	pop	r9
   1ea38:	8f 90       	pop	r8
   1ea3a:	7f 90       	pop	r7
   1ea3c:	6f 90       	pop	r6
   1ea3e:	5f 90       	pop	r5
   1ea40:	4f 90       	pop	r4
   1ea42:	3f 90       	pop	r3
   1ea44:	2f 90       	pop	r2
   1ea46:	08 95       	ret

Disassembly of section .systemcall.1:

0001d400 <getNodeID>:
void getNodeID()
{
#ifdef TRACE_ENABLE_EVENT
    getNodeIdTask_Logger();
#else
    getNodeIdTask();
   1d400:	0e 94 db 40 	call	0x81b6	; 0x81b6 <getNodeIdTask>
#endif
    asm volatile ("nop"::);
   1d404:	00 00       	nop
    asm volatile ("ret"::);
   1d406:	08 95       	ret

0001d408 <setNodeID>:
void setNodeID()
{
#ifdef TRACE_ENABLE_EVENT
    setNodeIdTask_Logger();
#else
    setNodeIdTask();
   1d408:	0e 94 ed 40 	call	0x81da	; 0x81da <setNodeIdTask>
#endif
    asm volatile ("nop"::);
   1d40c:	00 00       	nop
    asm volatile ("ret"::);
   1d40e:	08 95       	ret

0001d410 <getRandomNumberSyscall>:
void getRandomNumberSyscall()
{
#ifdef TRACE_ENABLE_EVENT
    getRandomTask_Logger();
#else
    getRandomTask();
   1d410:	0e 94 03 41 	call	0x8206	; 0x8206 <getRandomTask>
#endif
    asm volatile ("nop"::);
   1d414:	00 00       	nop
    asm volatile ("ret"::);
   1d416:	08 95       	ret

Disassembly of section .systemcall.2:

0001d500 <getCurrentThreadAddressSyscall>:
void getCurrentThreadAddressSyscall()
{
#ifdef TRACE_ENABLE_EVENT
    getCurrentThreadAddress_Logger();
#else
    getCurrentThreadAddress_avr();
   1d500:	0e 94 15 41 	call	0x822a	; 0x822a <getCurrentThreadAddress_avr>
#endif
    asm volatile ("nop"::);
   1d504:	00 00       	nop
    asm volatile ("ret"::);
   1d506:	08 95       	ret

0001d508 <getCurrentThreadIndex>:
void getCurrentThreadIndex()
{
#ifdef TRACE_ENABLE_EVENT
    getThreadIndexAddress_Logger();
#else
    getThreadIndexAddress_avr();
   1d508:	0e 94 27 41 	call	0x824e	; 0x824e <getThreadIndexAddress_avr>
#endif
    asm volatile ("nop"::);
   1d50c:	00 00       	nop
    asm volatile ("ret"::);
   1d50e:	08 95       	ret

0001d510 <getThreadTableStartSyscall>:
void getThreadTableStartSyscall()
{
#ifdef TRACE_ENABLE_EVENT
    getThreadTableStart_Logger();
#else
    getThreadTableStart_avr();
   1d510:	0e 94 39 41 	call	0x8272	; 0x8272 <getThreadTableStart_avr>
#endif
    asm volatile ("nop"::);
   1d514:	00 00       	nop
    asm volatile ("ret"::);
   1d516:	08 95       	ret

0001d518 <yieldfunction>:
void yieldfunction()
{
#ifdef TRACE_ENABLE_EVENT
    thread_yield_logger();
#else
    thread_yield();
   1d518:	0e 94 39 17 	call	0x2e72	; 0x2e72 <thread_yield>
#endif
    asm volatile ("nop"::);
   1d51c:	00 00       	nop
    asm volatile ("ret"::);
   1d51e:	08 95       	ret

0001d520 <postThreadTask>:
void postThreadTask()
{
#ifdef TRACE_ENABLE_EVENT
    postNewThreadTask_Logger();
#else
    postNewThreadTask();
   1d520:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <postNewThreadTask>
#endif
    asm volatile ("nop"::);
   1d524:	00 00       	nop
    asm volatile ("ret"::);
   1d526:	08 95       	ret

Disassembly of section .systemcall.3:

0001d600 <postTaskSysCall>:
void postTaskSysCall()
{
#ifdef TRACE_ENABLE_EVENT
    postNewTask_Logger();
#else
    postNewTask_avr();
   1d600:	0e 94 4b 41 	call	0x8296	; 0x8296 <postNewTask_avr>
#endif
    asm volatile ("nop"::);
   1d604:	00 00       	nop
    asm volatile ("ret"::);
   1d606:	08 95       	ret

Disassembly of section .systemcall.4:

0001d700 <getStackPtr>:
void getStackPtr()
{
  #ifdef TRACE_ENABLE_EVENT
      getStackPtrTask_Logger();
  #else 
    getStackPtrTask();
   1d700:	0e 94 6a 41 	call	0x82d4	; 0x82d4 <getStackPtrTask>
  #endif
    asm volatile ("nop"::);
   1d704:	00 00       	nop
    asm volatile ("ret"::);
   1d706:	08 95       	ret

Disassembly of section .systemcall.5:

0001d800 <setRadioFrequency>:
void setRadioFrequency()
{
#ifdef TRACE_ENABLE_EVENT
    setRadioFrequencyTask_Logger();
#else
    setRadioFrequencyTask();
   1d800:	0e 94 b7 01 	call	0x36e	; 0x36e <setRadioFrequencyTask>
#endif
    asm volatile ("nop"::);
   1d804:	00 00       	nop
    asm volatile ("ret"::);
   1d806:	08 95       	ret

0001d808 <setRadioChannel>:
void setRadioChannel()
{
#ifdef TRACE_ENABLE_EVENT
    setRadioChannelTask_Logger();
#else
    setRadioChannelTask();
   1d808:	0e 94 c9 01 	call	0x392	; 0x392 <setRadioChannelTask>
#endif
    asm volatile ("nop"::);
   1d80c:	00 00       	nop
    asm volatile ("ret"::);
   1d80e:	08 95       	ret

0001d810 <setRadioPower>:
void setRadioPower()
{
#ifdef TRACE_ENABLE_EVENT
    setRadioPowerTask_Logger();
#else
    setRadioPowerTask();
   1d810:	0e 94 db 01 	call	0x3b6	; 0x3b6 <setRadioPowerTask>
#endif
    asm volatile ("nop"::);
   1d814:	00 00       	nop
    asm volatile ("ret"::);
   1d816:	08 95       	ret

0001d818 <getRadioSendingBuffer>:
{
#ifdef TRACE_ENABLE_EVENT
    getRadioSendingBuffer_Logger();
	//getRadioSendingBuffer_avr();
#else
    getRadioSendingBuffer_avr();
   1d818:	0e 94 7c 41 	call	0x82f8	; 0x82f8 <getRadioSendingBuffer_avr>
#endif
    asm volatile ("nop"::);
   1d81c:	00 00       	nop
    asm volatile ("ret"::);
   1d81e:	08 95       	ret

0001d820 <invokeSocketRadioSend>:
{
#ifdef TRACE_ENABLE_EVENT
    SocketRadioSend_Logger();
	//SocketRadioSend();
#else
    SocketRadioSend();
   1d820:	0e 94 ed 01 	call	0x3da	; 0x3da <SocketRadioSend>
#endif
    asm volatile ("nop"::);
   1d824:	00 00       	nop
    asm volatile ("ret"::);
   1d826:	08 95       	ret

0001d828 <getRadioReceivingBuffer>:

{
#ifdef TRACE_ENABLE_EVENT
    getReceiverBuffer_Logger();
#else
    getReceiverBuffer_avr();
   1d828:	0e 94 8e 41 	call	0x831c	; 0x831c <getReceiverBuffer_avr>
#endif
    asm volatile ("nop"::);
   1d82c:	00 00       	nop
    asm volatile ("ret"::);
   1d82e:	08 95       	ret

0001d830 <setCurrentRadioHandle>:
void setCurrentRadioHandle()
{
#ifdef TRACE_ENABLE_EVENT
    syscall_registerEvent_Logger();
#else 
    registerReceiverHandle_syscall();
   1d830:	0e 94 ff 01 	call	0x3fe	; 0x3fe <registerReceiverHandle_syscall>
#endif
    asm volatile ("nop"::);
   1d834:	00 00       	nop
    asm volatile ("ret"::);
   1d836:	08 95       	ret

Disassembly of section .systemcall.6:

0001d900 <redtogglefunction>:
void redtogglefunction()
{
#ifdef TRACE_ENABLE_EVENT
    Leds_redToggle_Logger();
#else
    Leds_redToggle();
   1d900:	0e 94 b8 19 	call	0x3370	; 0x3370 <Leds_redToggle>
#endif
    asm volatile ("nop"::);
   1d904:	00 00       	nop
    asm volatile ("ret"::);
   1d906:	08 95       	ret

0001d908 <yellowtogglefunction>:
void yellowtogglefunction()
{
#ifdef TRACE_ENABLE_EVENT
    Leds_yellowToggle_Logger();
#else
    Leds_yellowToggle();
   1d908:	0e 94 42 1a 	call	0x3484	; 0x3484 <Leds_yellowToggle>
#endif
    asm volatile ("nop"::);
   1d90c:	00 00       	nop
    asm volatile ("ret"::);
   1d90e:	08 95       	ret

0001d910 <greentogglefunction>:
void greentogglefunction()
{
#ifdef TRACE_ENABLE_EVENT
    Leds_greenToggle_Logger();
#else
    Leds_greenToggle();
   1d910:	0e 94 fd 19 	call	0x33fa	; 0x33fa <Leds_greenToggle>
#endif
    asm volatile ("nop"::);
   1d914:	00 00       	nop
    asm volatile ("ret"::);
   1d916:	08 95       	ret

0001d918 <redonfunction>:
void redonfunction()
{
#ifdef TRACE_ENABLE_EVENT
    Leds_redOn_Logger();
#else
    Leds_redOn();
   1d918:	0e 94 8c 19 	call	0x3318	; 0x3318 <Leds_redOn>
#endif
    asm volatile ("nop"::);
   1d91c:	00 00       	nop
    asm volatile ("ret"::);
   1d91e:	08 95       	ret

0001d920 <redofffunction>:
void redofffunction()
{
#ifdef TRACE_ENABLE_EVENT
    Leds_redOff_Logger();
#else
    Leds_redOff();
   1d920:	0e 94 a2 19 	call	0x3344	; 0x3344 <Leds_redOff>
#endif
    asm volatile ("nop"::);
   1d924:	00 00       	nop
    asm volatile ("ret"::);
   1d926:	08 95       	ret

0001d928 <yellowonfunction>:
void yellowonfunction()
{
#ifdef TRACE_ENABLE_EVENT
    Leds_yellowOn_Logger();
#else
    Leds_yellowOn();
   1d928:	0e 94 16 1a 	call	0x342c	; 0x342c <Leds_yellowOn>
#endif
    asm volatile ("nop"::);
   1d92c:	00 00       	nop
    asm volatile ("ret"::);
   1d92e:	08 95       	ret

0001d930 <yellowofffunction>:
void yellowofffunction()
{
#ifdef TRACE_ENABLE_EVENT
    Leds_yellowOff_Logger();
#else
    Leds_yellowOff();
   1d930:	0e 94 2c 1a 	call	0x3458	; 0x3458 <Leds_yellowOff>
#endif
    asm volatile ("nop"::);
   1d934:	00 00       	nop
    asm volatile ("ret"::);
   1d936:	08 95       	ret

0001d938 <greenonfunction>:
void greenonfunction()
{
#ifdef TRACE_ENABLE_EVENT
    Leds_greenOn_Logger();
#else
    Leds_greenOn();
   1d938:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <Leds_greenOn>
#endif
    asm volatile ("nop"::);
   1d93c:	00 00       	nop
    asm volatile ("ret"::);
   1d93e:	08 95       	ret

0001d940 <greenofffunction>:
void greenofffunction()
{
#ifdef TRACE_ENABLE_EVENT
    Leds_greenOff_Logger();
#else
    Leds_greenOff();
   1d940:	0e 94 e7 19 	call	0x33ce	; 0x33ce <Leds_greenOff>
#endif
    asm volatile ("nop"::);
   1d944:	00 00       	nop
    asm volatile ("ret"::);
   1d946:	08 95       	ret

Disassembly of section .systemcall.7:

0001da00 <ADCLightSysCall>:
void ADCLightSysCall()
{
#ifdef TRACE_ENABLE_EVENT
    ADCLight_Logger();
#else
    ADCLight();
   1da00:	0e 94 9e 00 	call	0x13c	; 0x13c <ADCLight>
#endif
    asm volatile ("nop"::);
   1da04:	00 00       	nop
    asm volatile ("ret"::);
   1da06:	08 95       	ret

0001da08 <ADCTempSysCall>:
void ADCTempSysCall()
{
#ifdef TRACE_ENABLE_EVENT
    ADCTemp_Logger();
#else
    ADCTemp();
   1da08:	0e 94 a7 00 	call	0x14e	; 0x14e <ADCTemp>
#endif
    asm volatile ("nop"::);
   1da0c:	00 00       	nop
    asm volatile ("ret"::);
   1da0e:	08 95       	ret

0001da10 <ADCMagXSysCall>:
void ADCMagXSysCall()
{
#ifdef TRACE_ENABLE_EVENT
    ADCMagX_Logger();
#else
    ADCMagX();
   1da10:	0e 94 b0 00 	call	0x160	; 0x160 <ADCMagX>
#endif
    asm volatile ("nop"::);
   1da14:	00 00       	nop
    asm volatile ("ret"::);
   1da16:	08 95       	ret

0001da18 <ADCMagYSysCall>:
void ADCMagYSysCall()
{
#ifdef TRACE_ENABLE_EVENT
    ADCMagY_Logger();
#else
    ADCMagY();
   1da18:	0e 94 b9 00 	call	0x172	; 0x172 <ADCMagY>
#endif
    asm volatile ("nop"::);
   1da1c:	00 00       	nop
    asm volatile ("ret"::);
   1da1e:	08 95       	ret

0001da20 <ADCAccXSysCall>:
void ADCAccXSysCall()
{
#ifdef TRACE_ENABLE_EVENT
    ADCAccX_Logger();
#else
    ADCAccX();
   1da20:	0e 94 c2 00 	call	0x184	; 0x184 <ADCAccX>
#endif
    asm volatile ("nop"::);
   1da24:	00 00       	nop
    asm volatile ("ret"::);
   1da26:	08 95       	ret

0001da28 <ADCAccYSysCall>:
void ADCAccYSysCall()
{
#ifdef TRACE_ENABLE_EVENT
    ADCAccY_Logger();
#else
    ADCAccY();
   1da28:	0e 94 cb 00 	call	0x196	; 0x196 <ADCAccY>
#endif
    asm volatile ("nop"::);
   1da2c:	00 00       	nop
    asm volatile ("ret"::);
   1da2e:	08 95       	ret

0001da30 <sounderonfunction>:
{
#ifdef TRACE_ENABLE_EVENT
    sounderOn_Logger();         //defined in avr\syscall.c
#else
    //sounder_init();
    sounderOn();          //defined in micaz\sounder.c
   1da30:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <sounderOn>
#endif
    asm volatile ("nop"::);
   1da34:	00 00       	nop
    asm volatile ("ret"::);
   1da36:	08 95       	ret

0001da38 <sounderofffunction>:
{
#ifdef TRACE_ENABLE_EVENT
    sounderOff_Logger();        //defined in avr\syscall.c
#else
    //sounder_init();
    sounderOff();         //defined in micaz\sounder.c
   1da38:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <sounderOff>
#endif
    asm volatile ("nop"::);
   1da3c:	00 00       	nop
    asm volatile ("ret"::);
   1da3e:	08 95       	ret

Disassembly of section .systemcall.8:

0001db00 <getCurrentEEPROMHandleAddress>:
void getCurrentEEPROMHandleAddress()
{
#ifdef TRACE_ENABLE_EVENT
    getEEPROMHandleInfo_Logger();
#else
    getEEPROMHandleInfo();
   1db00:	0e 94 a0 41 	call	0x8340	; 0x8340 <getEEPROMHandleInfo>
#endif
    asm volatile ("nop"::);
   1db04:	00 00       	nop
    asm volatile ("ret"::);
   1db06:	08 95       	ret

0001db08 <readFromEEPROM>:
void readFromEEPROM()
{
#ifdef TRACE_ENABLE_EVENT
    readEEPROMTask_Logger();
#else
    readEEPROMTask();
   1db08:	0e 94 b2 41 	call	0x8364	; 0x8364 <readEEPROMTask>
#endif
    asm volatile ("nop"::);
   1db0c:	00 00       	nop
    asm volatile ("ret"::);
   1db0e:	08 95       	ret

0001db10 <writeToEEPROM>:
void writeToEEPROM()
{
#ifdef TRACE_ENABLE_EVENT
    writeEEPROMTask_Logger();
#else
    writeEEPROMTask();
   1db10:	0e 94 bb 41 	call	0x8376	; 0x8376 <writeEEPROMTask>
#endif
    asm volatile ("nop"::);
   1db14:	00 00       	nop
    asm volatile ("ret"::);
   1db16:	08 95       	ret

Disassembly of section .systemcall.9:

0001dc00 <getFilePathAddr>:
void getFilePathAddr()
{
#ifdef TRACE_ENABLE_EVENT
    getFilePathAddress_Logger();
#else
    getFilePathAddress_avr();
   1dc00:	0e 94 c4 41 	call	0x8388	; 0x8388 <getFilePathAddress_avr>
#endif
    asm volatile ("nop"::);
   1dc04:	00 00       	nop
    asm volatile ("ret"::);
   1dc06:	08 95       	ret

0001dc08 <getFileModeAddr>:
void getFileModeAddr()
{
#ifdef TRACE_ENABLE_EVENT
    getFileModeAddress_Logger();
#else
    getFileModeAddress_avr();
   1dc08:	0e 94 d6 41 	call	0x83ac	; 0x83ac <getFileModeAddress_avr>
#endif
    asm volatile ("nop"::);
   1dc0c:	00 00       	nop
    asm volatile ("ret"::);
   1dc0e:	08 95       	ret

0001dc10 <openFileSysCall>:
void openFileSysCall()
{
#ifdef TRACE_ENABLE_EVENT
    openFileTask_Logger();
#else
    openFileTask();
   1dc10:	0e 94 3d 01 	call	0x27a	; 0x27a <openFileTask>
#endif
    asm volatile ("nop"::);
   1dc14:	00 00       	nop
    asm volatile ("ret"::);
   1dc16:	08 95       	ret

0001dc18 <closeFileSysCall>:
void closeFileSysCall()
{
#ifdef TRACE_ENABLE_EVENT
    closeFileTask_Logger();
#else
    closeFileTask();
   1dc18:	0e 94 4b 01 	call	0x296	; 0x296 <closeFileTask>
#endif
    asm volatile ("nop"::);
   1dc1c:	00 00       	nop
    asm volatile ("ret"::);
   1dc1e:	08 95       	ret

0001dc20 <readFileSysCall>:
void readFileSysCall()
{
#ifdef TRACE_ENABLE_EVENT
    readFileTask_Logger();
#else
    readFileTask();
   1dc20:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <readFileTask>
#endif
    asm volatile ("nop"::);
   1dc24:	00 00       	nop
    asm volatile ("ret"::);
   1dc26:	08 95       	ret

0001dc28 <writeFileSysCall>:
void writeFileSysCall()
{
#ifdef TRACE_ENABLE_EVENT
    writeFileTask_Logger();
#else
    writeFileTask();
   1dc28:	0e 94 77 01 	call	0x2ee	; 0x2ee <writeFileTask>
#endif
    asm volatile ("nop"::);
   1dc2c:	00 00       	nop
    asm volatile ("ret"::);
   1dc2e:	08 95       	ret

0001dc30 <seekFileSysCall>:
void seekFileSysCall()
{
#ifdef TRACE_ENABLE_EVENT
    seekFileTask_Logger();
#else
    seekFileTask();
   1dc30:	0e 94 93 01 	call	0x326	; 0x326 <seekFileTask>
#endif
    asm volatile ("nop"::);
   1dc34:	00 00       	nop
    asm volatile ("ret"::);
   1dc36:	08 95       	ret

Disassembly of section .systemcall.10:

0001dd00 <getCPUCounterSyscall>:
void getCPUCounterSyscall()
{
#ifdef TRACE_ENABLE_EVENT
    getCPUCounterSyscall_Logger();
#else
    getCPUCounterSyscall_avr();
   1dd00:	0e 94 e8 41 	call	0x83d0	; 0x83d0 <getCPUCounterSyscall_avr>
#endif
    asm volatile ("nop"::);
   1dd04:	00 00       	nop
    asm volatile ("ret"::);
   1dd06:	08 95       	ret
